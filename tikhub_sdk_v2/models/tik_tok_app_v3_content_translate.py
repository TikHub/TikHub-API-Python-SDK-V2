# coding: utf-8

"""
    TikHub.io - Your Ultimate Social Media Data & API Marketplace

    High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tikhub_sdk_v2.configuration import Configuration


class TikTokAppV3ContentTranslate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'trg_lang': 'str',
        'src_content': 'str'
    }

    attribute_map = {
        'trg_lang': 'trg_lang',
        'src_content': 'src_content'
    }

    def __init__(self, trg_lang='zh-Hans', src_content='Hello, welcome to TikHub!', local_vars_configuration=None):  # noqa: E501
        """TikTokAppV3ContentTranslate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._trg_lang = None
        self._src_content = None
        self.discriminator = None

        if trg_lang is not None:
            self.trg_lang = trg_lang
        if src_content is not None:
            self.src_content = src_content

    @property
    def trg_lang(self):
        """Gets the trg_lang of this TikTokAppV3ContentTranslate.  # noqa: E501

        Trg Lang，目标语言ISO639-1代码，例如：zh-Hans/ Target language ISO639-1 code, e.g. zh-Hans  # noqa: E501

        :return: The trg_lang of this TikTokAppV3ContentTranslate.  # noqa: E501
        :rtype: str
        """
        return self._trg_lang

    @trg_lang.setter
    def trg_lang(self, trg_lang):
        """Sets the trg_lang of this TikTokAppV3ContentTranslate.

        Trg Lang，目标语言ISO639-1代码，例如：zh-Hans/ Target language ISO639-1 code, e.g. zh-Hans  # noqa: E501

        :param trg_lang: The trg_lang of this TikTokAppV3ContentTranslate.  # noqa: E501
        :type: str
        """

        self._trg_lang = trg_lang

    @property
    def src_content(self):
        """Gets the src_content of this TikTokAppV3ContentTranslate.  # noqa: E501

        Src Content，源语言内容，也就是需要翻译的内容/ Source language content, i.e. the content to be translated  # noqa: E501

        :return: The src_content of this TikTokAppV3ContentTranslate.  # noqa: E501
        :rtype: str
        """
        return self._src_content

    @src_content.setter
    def src_content(self, src_content):
        """Sets the src_content of this TikTokAppV3ContentTranslate.

        Src Content，源语言内容，也就是需要翻译的内容/ Source language content, i.e. the content to be translated  # noqa: E501

        :param src_content: The src_content of this TikTokAppV3ContentTranslate.  # noqa: E501
        :type: str
        """

        self._src_content = src_content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TikTokAppV3ContentTranslate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TikTokAppV3ContentTranslate):
            return True

        return self.to_dict() != other.to_dict()
