# coding: utf-8

"""
    TikHub.io - Your Ultimate Social Media Data & API Marketplace

    High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tikhub_sdk_v2.configuration import Configuration


class TikTokAppEncryptRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'url': 'str',
        'data': 'str',
        'device_info': 'object'
    }

    attribute_map = {
        'url': 'url',
        'data': 'data',
        'device_info': 'device_info'
    }

    def __init__(self, url='https://api16-normal-useast5.tiktokv.us/tiktok/v1/upvote/item/list?user_id=6726034365602628610&offset=0&count=21&scene=0&iid=7425045478163400491&device_id=7349721034012280362&ac=WIFI&channel=googleplay&aid=1233&app_name=musical_ly&version_code=360704&version_name=36.7.4&device_platform=android&os=android&ab_version=36.7.4&ssmix=a&device_type=Pixel+6+Pro&device_brand=google&language=zh&os_api=33&os_version=13&openudid=711192517a8bbf03&manifest_version_code=2023607040&resolution=1440*2891&dpi=560&update_version_code=2023607040&_rticket=1728977220468&is_pad=0&app_type=normal&sys_region=CN&last_install_time=1728977141&timezone_name=America%2FLos_Angeles&app_language=zh-Hans&ac2=wifi5g&uoo=0&op_region=CN&timezone_offset=-28800&build_number=36.7.4&host_abi=arm64-v8a&locale=zh-Hans&region=CN&content_language=en%2C&ts=1728977220&cdid=aa21524b-8633-49ca-8e6e-3275fe1672db', data='', device_info=None, local_vars_configuration=None):  # noqa: E501
        """TikTokAppEncryptRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._url = None
        self._data = None
        self._device_info = None
        self.discriminator = None

        if url is not None:
            self.url = url
        if data is not None:
            self.data = data
        if device_info is not None:
            self.device_info = device_info

    @property
    def url(self):
        """Gets the url of this TikTokAppEncryptRequest.  # noqa: E501

        Url，需要加密的URL/URL to be encrypted  # noqa: E501

        :return: The url of this TikTokAppEncryptRequest.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TikTokAppEncryptRequest.

        Url，需要加密的URL/URL to be encrypted  # noqa: E501

        :param url: The url of this TikTokAppEncryptRequest.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def data(self):
        """Gets the data of this TikTokAppEncryptRequest.  # noqa: E501

        Data，如果有POST请求，请填写POST请求的数据参与加密计算/If there is a POST request, please fill in the data of the POST request to participate in the encryption calculation  # noqa: E501

        :return: The data of this TikTokAppEncryptRequest.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this TikTokAppEncryptRequest.

        Data，如果有POST请求，请填写POST请求的数据参与加密计算/If there is a POST request, please fill in the data of the POST request to participate in the encryption calculation  # noqa: E501

        :param data: The data of this TikTokAppEncryptRequest.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def device_info(self):
        """Gets the device_info of this TikTokAppEncryptRequest.  # noqa: E501

        Device Info，设备信息，可选参数，如果不填写则使用默认设备信息/Device information, optional parameter, if not filled in, the default device information is used  # noqa: E501

        :return: The device_info of this TikTokAppEncryptRequest.  # noqa: E501
        :rtype: object
        """
        return self._device_info

    @device_info.setter
    def device_info(self, device_info):
        """Sets the device_info of this TikTokAppEncryptRequest.

        Device Info，设备信息，可选参数，如果不填写则使用默认设备信息/Device information, optional parameter, if not filled in, the default device information is used  # noqa: E501

        :param device_info: The device_info of this TikTokAppEncryptRequest.  # noqa: E501
        :type: object
        """

        self._device_info = device_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TikTokAppEncryptRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TikTokAppEncryptRequest):
            return True

        return self.to_dict() != other.to_dict()
