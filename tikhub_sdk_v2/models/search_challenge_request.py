# coding: utf-8

"""
    TikHub.io - Your Ultimate Social Media Data & API Marketplace

    High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tikhub_sdk_v2.configuration import Configuration


class SearchChallengeRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'keyword': 'str',
        'cursor': 'int',
        'count': 'int',
        'cookie': 'str'
    }

    attribute_map = {
        'keyword': 'keyword',
        'cursor': 'cursor',
        'count': 'count',
        'cookie': 'cookie'
    }

    def __init__(self, keyword='游戏', cursor=0, count=30, cookie='', local_vars_configuration=None):  # noqa: E501
        """SearchChallengeRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._keyword = None
        self._cursor = None
        self._count = None
        self._cookie = None
        self.discriminator = None

        if keyword is not None:
            self.keyword = keyword
        if cursor is not None:
            self.cursor = cursor
        if count is not None:
            self.count = count
        if cookie is not None:
            self.cookie = cookie

    @property
    def keyword(self):
        """Gets the keyword of this SearchChallengeRequest.  # noqa: E501

        Keyword，搜索关键词/Search keyword  # noqa: E501

        :return: The keyword of this SearchChallengeRequest.  # noqa: E501
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this SearchChallengeRequest.

        Keyword，搜索关键词/Search keyword  # noqa: E501

        :param keyword: The keyword of this SearchChallengeRequest.  # noqa: E501
        :type: str
        """

        self._keyword = keyword

    @property
    def cursor(self):
        """Gets the cursor of this SearchChallengeRequest.  # noqa: E501

        Cursor，游标/Cursor  # noqa: E501

        :return: The cursor of this SearchChallengeRequest.  # noqa: E501
        :rtype: int
        """
        return self._cursor

    @cursor.setter
    def cursor(self, cursor):
        """Sets the cursor of this SearchChallengeRequest.

        Cursor，游标/Cursor  # noqa: E501

        :param cursor: The cursor of this SearchChallengeRequest.  # noqa: E501
        :type: int
        """

        self._cursor = cursor

    @property
    def count(self):
        """Gets the count of this SearchChallengeRequest.  # noqa: E501

        Count，数量/Count  # noqa: E501

        :return: The count of this SearchChallengeRequest.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this SearchChallengeRequest.

        Count，数量/Count  # noqa: E501

        :param count: The count of this SearchChallengeRequest.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def cookie(self):
        """Gets the cookie of this SearchChallengeRequest.  # noqa: E501

        Cookie，用户自行提供的Cookie/User provided Cookie  # noqa: E501

        :return: The cookie of this SearchChallengeRequest.  # noqa: E501
        :rtype: str
        """
        return self._cookie

    @cookie.setter
    def cookie(self, cookie):
        """Sets the cookie of this SearchChallengeRequest.

        Cookie，用户自行提供的Cookie/User provided Cookie  # noqa: E501

        :param cookie: The cookie of this SearchChallengeRequest.  # noqa: E501
        :type: str
        """

        self._cookie = cookie

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchChallengeRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SearchChallengeRequest):
            return True

        return self.to_dict() != other.to_dict()
