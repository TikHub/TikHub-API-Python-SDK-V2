# coding: utf-8

"""
    TikHub.io - Your Ultimate Social Media Data & API Marketplace

    High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tikhub_sdk_v2.configuration import Configuration


class UserData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'email': 'str',
        'balance': 'float',
        'free_credit': 'float',
        'email_verified': 'bool',
        'account_disabled': 'bool',
        'is_active': 'bool'
    }

    attribute_map = {
        'email': 'email',
        'balance': 'balance',
        'free_credit': 'free_credit',
        'email_verified': 'email_verified',
        'account_disabled': 'account_disabled',
        'is_active': 'is_active'
    }

    def __init__(self, email=None, balance=None, free_credit=None, email_verified=None, account_disabled=None, is_active=None, local_vars_configuration=None):  # noqa: E501
        """UserData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._email = None
        self._balance = None
        self._free_credit = None
        self._email_verified = None
        self._account_disabled = None
        self._is_active = None
        self.discriminator = None

        self.email = email
        self.balance = balance
        self.free_credit = free_credit
        self.email_verified = email_verified
        self.account_disabled = account_disabled
        self.is_active = is_active

    @property
    def email(self):
        """Gets the email of this UserData.  # noqa: E501

        Email  # noqa: E501

        :return: The email of this UserData.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserData.

        Email  # noqa: E501

        :param email: The email of this UserData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def balance(self):
        """Gets the balance of this UserData.  # noqa: E501

        Balance  # noqa: E501

        :return: The balance of this UserData.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this UserData.

        Balance  # noqa: E501

        :param balance: The balance of this UserData.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and balance is None:  # noqa: E501
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501

        self._balance = balance

    @property
    def free_credit(self):
        """Gets the free_credit of this UserData.  # noqa: E501

        Free Credit  # noqa: E501

        :return: The free_credit of this UserData.  # noqa: E501
        :rtype: float
        """
        return self._free_credit

    @free_credit.setter
    def free_credit(self, free_credit):
        """Sets the free_credit of this UserData.

        Free Credit  # noqa: E501

        :param free_credit: The free_credit of this UserData.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and free_credit is None:  # noqa: E501
            raise ValueError("Invalid value for `free_credit`, must not be `None`")  # noqa: E501

        self._free_credit = free_credit

    @property
    def email_verified(self):
        """Gets the email_verified of this UserData.  # noqa: E501

        Email Verified  # noqa: E501

        :return: The email_verified of this UserData.  # noqa: E501
        :rtype: bool
        """
        return self._email_verified

    @email_verified.setter
    def email_verified(self, email_verified):
        """Sets the email_verified of this UserData.

        Email Verified  # noqa: E501

        :param email_verified: The email_verified of this UserData.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and email_verified is None:  # noqa: E501
            raise ValueError("Invalid value for `email_verified`, must not be `None`")  # noqa: E501

        self._email_verified = email_verified

    @property
    def account_disabled(self):
        """Gets the account_disabled of this UserData.  # noqa: E501

        Account Disabled  # noqa: E501

        :return: The account_disabled of this UserData.  # noqa: E501
        :rtype: bool
        """
        return self._account_disabled

    @account_disabled.setter
    def account_disabled(self, account_disabled):
        """Sets the account_disabled of this UserData.

        Account Disabled  # noqa: E501

        :param account_disabled: The account_disabled of this UserData.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and account_disabled is None:  # noqa: E501
            raise ValueError("Invalid value for `account_disabled`, must not be `None`")  # noqa: E501

        self._account_disabled = account_disabled

    @property
    def is_active(self):
        """Gets the is_active of this UserData.  # noqa: E501

        Is Active  # noqa: E501

        :return: The is_active of this UserData.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this UserData.

        Is Active  # noqa: E501

        :param is_active: The is_active of this UserData.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_active is None:  # noqa: E501
            raise ValueError("Invalid value for `is_active`, must not be `None`")  # noqa: E501

        self._is_active = is_active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserData):
            return True

        return self.to_dict() != other.to_dict()
