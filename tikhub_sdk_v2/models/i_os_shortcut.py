# coding: utf-8

"""
    TikHub.io - Your Ultimate Social Media Data & API Marketplace

    High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tikhub_sdk_v2.configuration import Configuration


class IOsShortcut(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'version': 'str',
        'update': 'str',
        'link': 'str',
        'link_en': 'str',
        'note': 'str',
        'note_en': 'str'
    }

    attribute_map = {
        'version': 'version',
        'update': 'update',
        'link': 'link',
        'link_en': 'link_en',
        'note': 'note',
        'note_en': 'note_en'
    }

    def __init__(self, version=None, update=None, link=None, link_en=None, note=None, note_en=None, local_vars_configuration=None):  # noqa: E501
        """IOsShortcut - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._version = None
        self._update = None
        self._link = None
        self._link_en = None
        self._note = None
        self._note_en = None
        self.discriminator = None

        self.version = version
        self.update = update
        self.link = link
        self.link_en = link_en
        self.note = note
        self.note_en = note_en

    @property
    def version(self):
        """Gets the version of this IOsShortcut.  # noqa: E501

        Version  # noqa: E501

        :return: The version of this IOsShortcut.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this IOsShortcut.

        Version  # noqa: E501

        :param version: The version of this IOsShortcut.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def update(self):
        """Gets the update of this IOsShortcut.  # noqa: E501

        Update  # noqa: E501

        :return: The update of this IOsShortcut.  # noqa: E501
        :rtype: str
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this IOsShortcut.

        Update  # noqa: E501

        :param update: The update of this IOsShortcut.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and update is None:  # noqa: E501
            raise ValueError("Invalid value for `update`, must not be `None`")  # noqa: E501

        self._update = update

    @property
    def link(self):
        """Gets the link of this IOsShortcut.  # noqa: E501

        Link  # noqa: E501

        :return: The link of this IOsShortcut.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this IOsShortcut.

        Link  # noqa: E501

        :param link: The link of this IOsShortcut.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and link is None:  # noqa: E501
            raise ValueError("Invalid value for `link`, must not be `None`")  # noqa: E501

        self._link = link

    @property
    def link_en(self):
        """Gets the link_en of this IOsShortcut.  # noqa: E501

        Link En  # noqa: E501

        :return: The link_en of this IOsShortcut.  # noqa: E501
        :rtype: str
        """
        return self._link_en

    @link_en.setter
    def link_en(self, link_en):
        """Sets the link_en of this IOsShortcut.

        Link En  # noqa: E501

        :param link_en: The link_en of this IOsShortcut.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and link_en is None:  # noqa: E501
            raise ValueError("Invalid value for `link_en`, must not be `None`")  # noqa: E501

        self._link_en = link_en

    @property
    def note(self):
        """Gets the note of this IOsShortcut.  # noqa: E501

        Note  # noqa: E501

        :return: The note of this IOsShortcut.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this IOsShortcut.

        Note  # noqa: E501

        :param note: The note of this IOsShortcut.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and note is None:  # noqa: E501
            raise ValueError("Invalid value for `note`, must not be `None`")  # noqa: E501

        self._note = note

    @property
    def note_en(self):
        """Gets the note_en of this IOsShortcut.  # noqa: E501

        Note En  # noqa: E501

        :return: The note_en of this IOsShortcut.  # noqa: E501
        :rtype: str
        """
        return self._note_en

    @note_en.setter
    def note_en(self, note_en):
        """Sets the note_en of this IOsShortcut.

        Note En  # noqa: E501

        :param note_en: The note_en of this IOsShortcut.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and note_en is None:  # noqa: E501
            raise ValueError("Invalid value for `note_en`, must not be `None`")  # noqa: E501

        self._note_en = note_en

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IOsShortcut):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IOsShortcut):
            return True

        return self.to_dict() != other.to_dict()
