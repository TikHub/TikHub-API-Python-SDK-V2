# coding: utf-8

"""
    TikHub.io - Your Ultimate Social Media Data & API Marketplace

    High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tikhub_sdk_v2.configuration import Configuration


class GetHomeFeedRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'feed_type': 'str',
        'need_filter_image': 'bool',
        'cookie': 'str',
        'proxy': 'str'
    }

    attribute_map = {
        'feed_type': 'feed_type',
        'need_filter_image': 'need_filter_image',
        'cookie': 'cookie',
        'proxy': 'proxy'
    }

    def __init__(self, feed_type='0', need_filter_image=False, cookie='', proxy='', local_vars_configuration=None):  # noqa: E501
        """GetHomeFeedRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._feed_type = None
        self._need_filter_image = None
        self._cookie = None
        self._proxy = None
        self.discriminator = None

        if feed_type is not None:
            self.feed_type = feed_type
        if need_filter_image is not None:
            self.need_filter_image = need_filter_image
        if cookie is not None:
            self.cookie = cookie
        if proxy is not None:
            self.proxy = proxy

    @property
    def feed_type(self):
        """Gets the feed_type of this GetHomeFeedRequest.  # noqa: E501

        Feed Type，推荐类型/Feed type  # noqa: E501

        :return: The feed_type of this GetHomeFeedRequest.  # noqa: E501
        :rtype: str
        """
        return self._feed_type

    @feed_type.setter
    def feed_type(self, feed_type):
        """Sets the feed_type of this GetHomeFeedRequest.

        Feed Type，推荐类型/Feed type  # noqa: E501

        :param feed_type: The feed_type of this GetHomeFeedRequest.  # noqa: E501
        :type: str
        """

        self._feed_type = feed_type

    @property
    def need_filter_image(self):
        """Gets the need_filter_image of this GetHomeFeedRequest.  # noqa: E501

        Need Filter Image，是否只看图文笔记/Whether to view only image notes  # noqa: E501

        :return: The need_filter_image of this GetHomeFeedRequest.  # noqa: E501
        :rtype: bool
        """
        return self._need_filter_image

    @need_filter_image.setter
    def need_filter_image(self, need_filter_image):
        """Sets the need_filter_image of this GetHomeFeedRequest.

        Need Filter Image，是否只看图文笔记/Whether to view only image notes  # noqa: E501

        :param need_filter_image: The need_filter_image of this GetHomeFeedRequest.  # noqa: E501
        :type: bool
        """

        self._need_filter_image = need_filter_image

    @property
    def cookie(self):
        """Gets the cookie of this GetHomeFeedRequest.  # noqa: E501

        Cookie，用户自行提供的已登录的网页Cookie/User provided logged-in web Cookie  # noqa: E501

        :return: The cookie of this GetHomeFeedRequest.  # noqa: E501
        :rtype: str
        """
        return self._cookie

    @cookie.setter
    def cookie(self, cookie):
        """Sets the cookie of this GetHomeFeedRequest.

        Cookie，用户自行提供的已登录的网页Cookie/User provided logged-in web Cookie  # noqa: E501

        :param cookie: The cookie of this GetHomeFeedRequest.  # noqa: E501
        :type: str
        """

        self._cookie = cookie

    @property
    def proxy(self):
        """Gets the proxy of this GetHomeFeedRequest.  # noqa: E501

        Proxy，代理，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port  # noqa: E501

        :return: The proxy of this GetHomeFeedRequest.  # noqa: E501
        :rtype: str
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this GetHomeFeedRequest.

        Proxy，代理，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port  # noqa: E501

        :param proxy: The proxy of this GetHomeFeedRequest.  # noqa: E501
        :type: str
        """

        self._proxy = proxy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetHomeFeedRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetHomeFeedRequest):
            return True

        return self.to_dict() != other.to_dict()
