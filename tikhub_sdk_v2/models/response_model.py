# coding: utf-8

"""
    TikHub.io - Your Ultimate Social Media Data & API Marketplace

    High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tikhub_sdk_v2.configuration import Configuration


class ResponseModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'code': 'int',
        'router': 'str',
        'params': 'str',
        'data': 'AnyOfstringnull'
    }

    attribute_map = {
        'code': 'code',
        'router': 'router',
        'params': 'params',
        'data': 'data'
    }

    def __init__(self, code=200, router='', params=None, data=None, local_vars_configuration=None):  # noqa: E501
        """ResponseModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._code = None
        self._router = None
        self._params = None
        self._data = None
        self.discriminator = None

        if code is not None:
            self.code = code
        if router is not None:
            self.router = router
        if params is not None:
            self.params = params
        if data is not None:
            self.data = data

    @property
    def code(self):
        """Gets the code of this ResponseModel.  # noqa: E501

        Code，HTTP status code | HTTP状态码  # noqa: E501

        :return: The code of this ResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ResponseModel.

        Code，HTTP status code | HTTP状态码  # noqa: E501

        :param code: The code of this ResponseModel.  # noqa: E501
        :type: int
        """

        self._code = code

    @property
    def router(self):
        """Gets the router of this ResponseModel.  # noqa: E501

        Router，The endpoint that generated this response | 生成此响应的端点  # noqa: E501

        :return: The router of this ResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._router

    @router.setter
    def router(self, router):
        """Sets the router of this ResponseModel.

        Router，The endpoint that generated this response | 生成此响应的端点  # noqa: E501

        :param router: The router of this ResponseModel.  # noqa: E501
        :type: str
        """

        self._router = router

    @property
    def params(self):
        """Gets the params of this ResponseModel.  # noqa: E501


        :return: The params of this ResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this ResponseModel.


        :param params: The params of this ResponseModel.  # noqa: E501
        :type: str
        """

        self._params = params

    @property
    def data(self):
        """Gets the data of this ResponseModel.  # noqa: E501

        Data，The response data | 响应数据  # noqa: E501

        :return: The data of this ResponseModel.  # noqa: E501
        :rtype: AnyOfstringnull
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ResponseModel.

        Data，The response data | 响应数据  # noqa: E501

        :param data: The data of this ResponseModel.  # noqa: E501
        :type: AnyOfstringnull
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseModel):
            return True

        return self.to_dict() != other.to_dict()
