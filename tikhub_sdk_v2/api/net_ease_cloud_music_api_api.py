# coding: utf-8

"""
    TikHub.io - Your Ultimate Social Media Data & API Marketplace

    High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tikhub_sdk_v2.api_client import ApiClient
from tikhub_sdk_v2.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class NetEaseCloudMusicAPIApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def decrypt_post_payload_api_v1_net_ease_cloud_music_app_decrypt_post_payload_post(self, **kwargs):  # noqa: E501
        """解密POST请求中的16进制payload/Decrypt the 16-bit payload in the POST request  # noqa: E501

        # [中文] ### 用途: - 解密网易云音乐APP POST请求中的16进制payload。 ### 参数: - payload: 16进制payload。 ### 返回: - 解密后的payload  # [English] ### Purpose: - Decrypt the 16-bit payload in the POST request of NetEase Cloud Music APP. ### Parameters: - payload: 16-bit payload. ### Returns: - Decrypted payload  # [示例/Example] payload = \"4AEEAB033C3F4068DBB74379B8C889D2187585FBBBC7CA1ADA7D10714AA139AE279A615DE7B87483A83A9091ED52D70B70DA02A7FE8A20317AA40F0FF461AC33DB77371E30F9C7F57783E800559AE08DD1E10EFC9CDC69D6815ADCDBF5A7D3006AA3B102FBE7296AB0DB9EA5C46AD12B\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.decrypt_post_payload_api_v1_net_ease_cloud_music_app_decrypt_post_payload_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.decrypt_post_payload_api_v1_net_ease_cloud_music_app_decrypt_post_payload_post_with_http_info(**kwargs)  # noqa: E501

    def decrypt_post_payload_api_v1_net_ease_cloud_music_app_decrypt_post_payload_post_with_http_info(self, **kwargs):  # noqa: E501
        """解密POST请求中的16进制payload/Decrypt the 16-bit payload in the POST request  # noqa: E501

        # [中文] ### 用途: - 解密网易云音乐APP POST请求中的16进制payload。 ### 参数: - payload: 16进制payload。 ### 返回: - 解密后的payload  # [English] ### Purpose: - Decrypt the 16-bit payload in the POST request of NetEase Cloud Music APP. ### Parameters: - payload: 16-bit payload. ### Returns: - Decrypted payload  # [示例/Example] payload = \"4AEEAB033C3F4068DBB74379B8C889D2187585FBBBC7CA1ADA7D10714AA139AE279A615DE7B87483A83A9091ED52D70B70DA02A7FE8A20317AA40F0FF461AC33DB77371E30F9C7F57783E800559AE08DD1E10EFC9CDC69D6815ADCDBF5A7D3006AA3B102FBE7296AB0DB9EA5C46AD12B\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.decrypt_post_payload_api_v1_net_ease_cloud_music_app_decrypt_post_payload_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method decrypt_post_payload_api_v1_net_ease_cloud_music_app_decrypt_post_payload_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/decrypt_post_payload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def decrypt_post_payload_api_v1_net_ease_cloud_music_app_decrypt_post_payload_post_0(self, **kwargs):  # noqa: E501
        """解密POST请求中的16进制payload/Decrypt the 16-bit payload in the POST request  # noqa: E501

        # [中文] ### 用途: - 解密网易云音乐APP POST请求中的16进制payload。 ### 参数: - payload: 16进制payload。 ### 返回: - 解密后的payload  # [English] ### Purpose: - Decrypt the 16-bit payload in the POST request of NetEase Cloud Music APP. ### Parameters: - payload: 16-bit payload. ### Returns: - Decrypted payload  # [示例/Example] payload = \"4AEEAB033C3F4068DBB74379B8C889D2187585FBBBC7CA1ADA7D10714AA139AE279A615DE7B87483A83A9091ED52D70B70DA02A7FE8A20317AA40F0FF461AC33DB77371E30F9C7F57783E800559AE08DD1E10EFC9CDC69D6815ADCDBF5A7D3006AA3B102FBE7296AB0DB9EA5C46AD12B\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.decrypt_post_payload_api_v1_net_ease_cloud_music_app_decrypt_post_payload_post_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.decrypt_post_payload_api_v1_net_ease_cloud_music_app_decrypt_post_payload_post_0_with_http_info(**kwargs)  # noqa: E501

    def decrypt_post_payload_api_v1_net_ease_cloud_music_app_decrypt_post_payload_post_0_with_http_info(self, **kwargs):  # noqa: E501
        """解密POST请求中的16进制payload/Decrypt the 16-bit payload in the POST request  # noqa: E501

        # [中文] ### 用途: - 解密网易云音乐APP POST请求中的16进制payload。 ### 参数: - payload: 16进制payload。 ### 返回: - 解密后的payload  # [English] ### Purpose: - Decrypt the 16-bit payload in the POST request of NetEase Cloud Music APP. ### Parameters: - payload: 16-bit payload. ### Returns: - Decrypted payload  # [示例/Example] payload = \"4AEEAB033C3F4068DBB74379B8C889D2187585FBBBC7CA1ADA7D10714AA139AE279A615DE7B87483A83A9091ED52D70B70DA02A7FE8A20317AA40F0FF461AC33DB77371E30F9C7F57783E800559AE08DD1E10EFC9CDC69D6815ADCDBF5A7D3006AA3B102FBE7296AB0DB9EA5C46AD12B\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.decrypt_post_payload_api_v1_net_ease_cloud_music_app_decrypt_post_payload_post_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method decrypt_post_payload_api_v1_net_ease_cloud_music_app_decrypt_post_payload_post_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/decrypt_post_payload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def encrypt_post_payload_api_v1_net_ease_cloud_music_app_encrypt_post_payload_post(self, uri, **kwargs):  # noqa: E501
        """加密POST请求中的payload并且返回16进制/Encrypt the payload in the POST request and return 16 hexadecimal  # noqa: E501

        # [中文] ### 用途: - 加密POST请求中的payload并且返回16进制。 ### 参数: - payload: 需要加密的payload。 ### 返回: - 加密后的16进制payload  # [English] ### Purpose: - Encrypt the payload in the POST request and return 16 hexadecimal. ### Parameters: - payload: Payload to be encrypted. ### Returns: - Encrypted 16 hexadecimal payload  # [示例/Example] payload = {\"id\": 2135155051, \"br\": 192000}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.encrypt_post_payload_api_v1_net_ease_cloud_music_app_encrypt_post_payload_post(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uri: 请求URI/Request URI (required)
        :param bool add_variable: 是否添加变量/Whether to add variables
        :param object body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.encrypt_post_payload_api_v1_net_ease_cloud_music_app_encrypt_post_payload_post_with_http_info(uri, **kwargs)  # noqa: E501

    def encrypt_post_payload_api_v1_net_ease_cloud_music_app_encrypt_post_payload_post_with_http_info(self, uri, **kwargs):  # noqa: E501
        """加密POST请求中的payload并且返回16进制/Encrypt the payload in the POST request and return 16 hexadecimal  # noqa: E501

        # [中文] ### 用途: - 加密POST请求中的payload并且返回16进制。 ### 参数: - payload: 需要加密的payload。 ### 返回: - 加密后的16进制payload  # [English] ### Purpose: - Encrypt the payload in the POST request and return 16 hexadecimal. ### Parameters: - payload: Payload to be encrypted. ### Returns: - Encrypted 16 hexadecimal payload  # [示例/Example] payload = {\"id\": 2135155051, \"br\": 192000}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.encrypt_post_payload_api_v1_net_ease_cloud_music_app_encrypt_post_payload_post_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uri: 请求URI/Request URI (required)
        :param bool add_variable: 是否添加变量/Whether to add variables
        :param object body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uri',
            'add_variable',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method encrypt_post_payload_api_v1_net_ease_cloud_music_app_encrypt_post_payload_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uri' is set
        if self.api_client.client_side_validation and ('uri' not in local_var_params or  # noqa: E501
                                                        local_var_params['uri'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uri` when calling `encrypt_post_payload_api_v1_net_ease_cloud_music_app_encrypt_post_payload_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uri' in local_var_params and local_var_params['uri'] is not None:  # noqa: E501
            query_params.append(('uri', local_var_params['uri']))  # noqa: E501
        if 'add_variable' in local_var_params and local_var_params['add_variable'] is not None:  # noqa: E501
            query_params.append(('add_variable', local_var_params['add_variable']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/encrypt_post_payload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def encrypt_post_payload_api_v1_net_ease_cloud_music_app_encrypt_post_payload_post_0(self, uri, **kwargs):  # noqa: E501
        """加密POST请求中的payload并且返回16进制/Encrypt the payload in the POST request and return 16 hexadecimal  # noqa: E501

        # [中文] ### 用途: - 加密POST请求中的payload并且返回16进制。 ### 参数: - payload: 需要加密的payload。 ### 返回: - 加密后的16进制payload  # [English] ### Purpose: - Encrypt the payload in the POST request and return 16 hexadecimal. ### Parameters: - payload: Payload to be encrypted. ### Returns: - Encrypted 16 hexadecimal payload  # [示例/Example] payload = {\"id\": 2135155051, \"br\": 192000}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.encrypt_post_payload_api_v1_net_ease_cloud_music_app_encrypt_post_payload_post_0(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uri: 请求URI/Request URI (required)
        :param bool add_variable: 是否添加变量/Whether to add variables
        :param object body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.encrypt_post_payload_api_v1_net_ease_cloud_music_app_encrypt_post_payload_post_0_with_http_info(uri, **kwargs)  # noqa: E501

    def encrypt_post_payload_api_v1_net_ease_cloud_music_app_encrypt_post_payload_post_0_with_http_info(self, uri, **kwargs):  # noqa: E501
        """加密POST请求中的payload并且返回16进制/Encrypt the payload in the POST request and return 16 hexadecimal  # noqa: E501

        # [中文] ### 用途: - 加密POST请求中的payload并且返回16进制。 ### 参数: - payload: 需要加密的payload。 ### 返回: - 加密后的16进制payload  # [English] ### Purpose: - Encrypt the payload in the POST request and return 16 hexadecimal. ### Parameters: - payload: Payload to be encrypted. ### Returns: - Encrypted 16 hexadecimal payload  # [示例/Example] payload = {\"id\": 2135155051, \"br\": 192000}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.encrypt_post_payload_api_v1_net_ease_cloud_music_app_encrypt_post_payload_post_0_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uri: 请求URI/Request URI (required)
        :param bool add_variable: 是否添加变量/Whether to add variables
        :param object body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uri',
            'add_variable',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method encrypt_post_payload_api_v1_net_ease_cloud_music_app_encrypt_post_payload_post_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uri' is set
        if self.api_client.client_side_validation and ('uri' not in local_var_params or  # noqa: E501
                                                        local_var_params['uri'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uri` when calling `encrypt_post_payload_api_v1_net_ease_cloud_music_app_encrypt_post_payload_post_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uri' in local_var_params and local_var_params['uri'] is not None:  # noqa: E501
            query_params.append(('uri', local_var_params['uri']))  # noqa: E501
        if 'add_variable' in local_var_params and local_var_params['add_variable'] is not None:  # noqa: E501
            query_params.append(('add_variable', local_var_params['add_variable']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/encrypt_post_payload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_artist_detail_api_v1_net_ease_cloud_music_app_fetch_artist_detail_get(self, artist_id, **kwargs):  # noqa: E501
        """获取歌手信息/Fetch artist detail  # noqa: E501

        # [中文] ### 用途: - 获取歌手信息。 ### 参数: - artist_id: 歌手ID。 ### 返回: - 歌手信息  # [English] ### Purpose: - Fetch artist detail. ### Parameters: - artist_id: Artist ID. ### Returns: - Artist detail  # [示例/Example] artist_id = \"12213291\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_artist_detail_api_v1_net_ease_cloud_music_app_fetch_artist_detail_get(artist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str artist_id: 歌手ID/Artist ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_artist_detail_api_v1_net_ease_cloud_music_app_fetch_artist_detail_get_with_http_info(artist_id, **kwargs)  # noqa: E501

    def fetch_artist_detail_api_v1_net_ease_cloud_music_app_fetch_artist_detail_get_with_http_info(self, artist_id, **kwargs):  # noqa: E501
        """获取歌手信息/Fetch artist detail  # noqa: E501

        # [中文] ### 用途: - 获取歌手信息。 ### 参数: - artist_id: 歌手ID。 ### 返回: - 歌手信息  # [English] ### Purpose: - Fetch artist detail. ### Parameters: - artist_id: Artist ID. ### Returns: - Artist detail  # [示例/Example] artist_id = \"12213291\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_artist_detail_api_v1_net_ease_cloud_music_app_fetch_artist_detail_get_with_http_info(artist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str artist_id: 歌手ID/Artist ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'artist_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_artist_detail_api_v1_net_ease_cloud_music_app_fetch_artist_detail_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'artist_id' is set
        if self.api_client.client_side_validation and ('artist_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['artist_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `artist_id` when calling `fetch_artist_detail_api_v1_net_ease_cloud_music_app_fetch_artist_detail_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'artist_id' in local_var_params and local_var_params['artist_id'] is not None:  # noqa: E501
            query_params.append(('artist_id', local_var_params['artist_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/fetch_artist_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_artist_detail_api_v1_net_ease_cloud_music_app_fetch_artist_detail_get_0(self, artist_id, **kwargs):  # noqa: E501
        """获取歌手信息/Fetch artist detail  # noqa: E501

        # [中文] ### 用途: - 获取歌手信息。 ### 参数: - artist_id: 歌手ID。 ### 返回: - 歌手信息  # [English] ### Purpose: - Fetch artist detail. ### Parameters: - artist_id: Artist ID. ### Returns: - Artist detail  # [示例/Example] artist_id = \"12213291\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_artist_detail_api_v1_net_ease_cloud_music_app_fetch_artist_detail_get_0(artist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str artist_id: 歌手ID/Artist ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_artist_detail_api_v1_net_ease_cloud_music_app_fetch_artist_detail_get_0_with_http_info(artist_id, **kwargs)  # noqa: E501

    def fetch_artist_detail_api_v1_net_ease_cloud_music_app_fetch_artist_detail_get_0_with_http_info(self, artist_id, **kwargs):  # noqa: E501
        """获取歌手信息/Fetch artist detail  # noqa: E501

        # [中文] ### 用途: - 获取歌手信息。 ### 参数: - artist_id: 歌手ID。 ### 返回: - 歌手信息  # [English] ### Purpose: - Fetch artist detail. ### Parameters: - artist_id: Artist ID. ### Returns: - Artist detail  # [示例/Example] artist_id = \"12213291\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_artist_detail_api_v1_net_ease_cloud_music_app_fetch_artist_detail_get_0_with_http_info(artist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str artist_id: 歌手ID/Artist ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'artist_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_artist_detail_api_v1_net_ease_cloud_music_app_fetch_artist_detail_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'artist_id' is set
        if self.api_client.client_side_validation and ('artist_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['artist_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `artist_id` when calling `fetch_artist_detail_api_v1_net_ease_cloud_music_app_fetch_artist_detail_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'artist_id' in local_var_params and local_var_params['artist_id'] is not None:  # noqa: E501
            query_params.append(('artist_id', local_var_params['artist_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/fetch_artist_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_music_comment_api_v1_net_ease_cloud_music_app_fetch_music_comment_get(self, resource_id, **kwargs):  # noqa: E501
        """获取歌曲评论/Fetch music comment  # noqa: E501

        # [中文] ### 用途: - 获取歌曲评论。 ### 参数: - resource_id: 资源ID，可以是歌曲ID，专辑ID等。 - beforeTime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条评论的时间戳，或者查看返回的Next_Page_beforeTime字段。 - limit: 每页数量，默认为30。 ### 返回: - 歌曲评论  # [English] ### Purpose: - Fetch music comment. ### Parameters: - resource_id: Resource ID, can be song ID, album ID, etc. - beforeTime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last comment returned on the first page on the second page, or check the Next_Page_beforeTime field returned. - limit: Number per page, default is 30. ### Returns: - Music comment  # [示例/Example] resource_id = \"2135155051\" beforeTime = \"0\" limit = \"30\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_music_comment_api_v1_net_ease_cloud_music_app_fetch_music_comment_get(resource_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str resource_id: 资源ID/Resource ID (required)
        :param str before_time: 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
        :param str limit: 每页数量，保持默认即可/Number per page, keep the default
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_music_comment_api_v1_net_ease_cloud_music_app_fetch_music_comment_get_with_http_info(resource_id, **kwargs)  # noqa: E501

    def fetch_music_comment_api_v1_net_ease_cloud_music_app_fetch_music_comment_get_with_http_info(self, resource_id, **kwargs):  # noqa: E501
        """获取歌曲评论/Fetch music comment  # noqa: E501

        # [中文] ### 用途: - 获取歌曲评论。 ### 参数: - resource_id: 资源ID，可以是歌曲ID，专辑ID等。 - beforeTime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条评论的时间戳，或者查看返回的Next_Page_beforeTime字段。 - limit: 每页数量，默认为30。 ### 返回: - 歌曲评论  # [English] ### Purpose: - Fetch music comment. ### Parameters: - resource_id: Resource ID, can be song ID, album ID, etc. - beforeTime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last comment returned on the first page on the second page, or check the Next_Page_beforeTime field returned. - limit: Number per page, default is 30. ### Returns: - Music comment  # [示例/Example] resource_id = \"2135155051\" beforeTime = \"0\" limit = \"30\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_music_comment_api_v1_net_ease_cloud_music_app_fetch_music_comment_get_with_http_info(resource_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str resource_id: 资源ID/Resource ID (required)
        :param str before_time: 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
        :param str limit: 每页数量，保持默认即可/Number per page, keep the default
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'resource_id',
            'before_time',
            'limit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_music_comment_api_v1_net_ease_cloud_music_app_fetch_music_comment_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'resource_id' is set
        if self.api_client.client_side_validation and ('resource_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['resource_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `resource_id` when calling `fetch_music_comment_api_v1_net_ease_cloud_music_app_fetch_music_comment_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'resource_id' in local_var_params and local_var_params['resource_id'] is not None:  # noqa: E501
            query_params.append(('resource_id', local_var_params['resource_id']))  # noqa: E501
        if 'before_time' in local_var_params and local_var_params['before_time'] is not None:  # noqa: E501
            query_params.append(('beforeTime', local_var_params['before_time']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/fetch_music_comment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_music_comment_api_v1_net_ease_cloud_music_app_fetch_music_comment_get_0(self, resource_id, **kwargs):  # noqa: E501
        """获取歌曲评论/Fetch music comment  # noqa: E501

        # [中文] ### 用途: - 获取歌曲评论。 ### 参数: - resource_id: 资源ID，可以是歌曲ID，专辑ID等。 - beforeTime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条评论的时间戳，或者查看返回的Next_Page_beforeTime字段。 - limit: 每页数量，默认为30。 ### 返回: - 歌曲评论  # [English] ### Purpose: - Fetch music comment. ### Parameters: - resource_id: Resource ID, can be song ID, album ID, etc. - beforeTime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last comment returned on the first page on the second page, or check the Next_Page_beforeTime field returned. - limit: Number per page, default is 30. ### Returns: - Music comment  # [示例/Example] resource_id = \"2135155051\" beforeTime = \"0\" limit = \"30\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_music_comment_api_v1_net_ease_cloud_music_app_fetch_music_comment_get_0(resource_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str resource_id: 资源ID/Resource ID (required)
        :param str before_time: 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
        :param str limit: 每页数量，保持默认即可/Number per page, keep the default
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_music_comment_api_v1_net_ease_cloud_music_app_fetch_music_comment_get_0_with_http_info(resource_id, **kwargs)  # noqa: E501

    def fetch_music_comment_api_v1_net_ease_cloud_music_app_fetch_music_comment_get_0_with_http_info(self, resource_id, **kwargs):  # noqa: E501
        """获取歌曲评论/Fetch music comment  # noqa: E501

        # [中文] ### 用途: - 获取歌曲评论。 ### 参数: - resource_id: 资源ID，可以是歌曲ID，专辑ID等。 - beforeTime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条评论的时间戳，或者查看返回的Next_Page_beforeTime字段。 - limit: 每页数量，默认为30。 ### 返回: - 歌曲评论  # [English] ### Purpose: - Fetch music comment. ### Parameters: - resource_id: Resource ID, can be song ID, album ID, etc. - beforeTime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last comment returned on the first page on the second page, or check the Next_Page_beforeTime field returned. - limit: Number per page, default is 30. ### Returns: - Music comment  # [示例/Example] resource_id = \"2135155051\" beforeTime = \"0\" limit = \"30\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_music_comment_api_v1_net_ease_cloud_music_app_fetch_music_comment_get_0_with_http_info(resource_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str resource_id: 资源ID/Resource ID (required)
        :param str before_time: 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
        :param str limit: 每页数量，保持默认即可/Number per page, keep the default
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'resource_id',
            'before_time',
            'limit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_music_comment_api_v1_net_ease_cloud_music_app_fetch_music_comment_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'resource_id' is set
        if self.api_client.client_side_validation and ('resource_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['resource_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `resource_id` when calling `fetch_music_comment_api_v1_net_ease_cloud_music_app_fetch_music_comment_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'resource_id' in local_var_params and local_var_params['resource_id'] is not None:  # noqa: E501
            query_params.append(('resource_id', local_var_params['resource_id']))  # noqa: E501
        if 'before_time' in local_var_params and local_var_params['before_time'] is not None:  # noqa: E501
            query_params.append(('beforeTime', local_var_params['before_time']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/fetch_music_comment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_music_log_video_url_api_v1_net_ease_cloud_music_app_fetch_music_log_video_url_get(self, mlog_id, **kwargs):  # noqa: E501
        """Mlog（音乐视频）播放地址/Mlog (music video) playback address  # noqa: E501

        # [中文] ### 用途: - 获取Mlog（音乐视频）播放地址。 ### 参数: - mlogId: Mlog ID，可以在APP中点击分享按钮获取链接，链接中包含mlogId。 - resolution: 分辨率，默认为1080，保持默认即可。 ### 返回: - Mlog播放地址（有时候会有水印，根据视频源而定。）  # [English] ### Purpose: - Fetch Mlog (music video) playback address. ### Parameters: - mlogId: Mlog ID, you can get the link by clicking the share button in the APP, the link contains mlogId. - resolution: Resolution, default is 1080, keep the default. ### Returns: - Mlog playback address (sometimes there will be a watermark, depending on the video source.)  # [示例/Example] > 分享链接/Share link: https://fn.music.163.com/g/mlog/mlog-mobile/landing/mlog?id=a1qQQOQNVueO2g7&type=2 mlogId = \"a1qQQOQNVueO2g7\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_music_log_video_url_api_v1_net_ease_cloud_music_app_fetch_music_log_video_url_get(mlog_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str mlog_id: Mlog ID/Mlog ID (required)
        :param str resolution: 分辨率/Resolution
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_music_log_video_url_api_v1_net_ease_cloud_music_app_fetch_music_log_video_url_get_with_http_info(mlog_id, **kwargs)  # noqa: E501

    def fetch_music_log_video_url_api_v1_net_ease_cloud_music_app_fetch_music_log_video_url_get_with_http_info(self, mlog_id, **kwargs):  # noqa: E501
        """Mlog（音乐视频）播放地址/Mlog (music video) playback address  # noqa: E501

        # [中文] ### 用途: - 获取Mlog（音乐视频）播放地址。 ### 参数: - mlogId: Mlog ID，可以在APP中点击分享按钮获取链接，链接中包含mlogId。 - resolution: 分辨率，默认为1080，保持默认即可。 ### 返回: - Mlog播放地址（有时候会有水印，根据视频源而定。）  # [English] ### Purpose: - Fetch Mlog (music video) playback address. ### Parameters: - mlogId: Mlog ID, you can get the link by clicking the share button in the APP, the link contains mlogId. - resolution: Resolution, default is 1080, keep the default. ### Returns: - Mlog playback address (sometimes there will be a watermark, depending on the video source.)  # [示例/Example] > 分享链接/Share link: https://fn.music.163.com/g/mlog/mlog-mobile/landing/mlog?id=a1qQQOQNVueO2g7&type=2 mlogId = \"a1qQQOQNVueO2g7\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_music_log_video_url_api_v1_net_ease_cloud_music_app_fetch_music_log_video_url_get_with_http_info(mlog_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str mlog_id: Mlog ID/Mlog ID (required)
        :param str resolution: 分辨率/Resolution
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'mlog_id',
            'resolution'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_music_log_video_url_api_v1_net_ease_cloud_music_app_fetch_music_log_video_url_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mlog_id' is set
        if self.api_client.client_side_validation and ('mlog_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['mlog_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `mlog_id` when calling `fetch_music_log_video_url_api_v1_net_ease_cloud_music_app_fetch_music_log_video_url_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'mlog_id' in local_var_params and local_var_params['mlog_id'] is not None:  # noqa: E501
            query_params.append(('mlogId', local_var_params['mlog_id']))  # noqa: E501
        if 'resolution' in local_var_params and local_var_params['resolution'] is not None:  # noqa: E501
            query_params.append(('resolution', local_var_params['resolution']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/fetch_music_log_video_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_music_log_video_url_api_v1_net_ease_cloud_music_app_fetch_music_log_video_url_get_0(self, mlog_id, **kwargs):  # noqa: E501
        """Mlog（音乐视频）播放地址/Mlog (music video) playback address  # noqa: E501

        # [中文] ### 用途: - 获取Mlog（音乐视频）播放地址。 ### 参数: - mlogId: Mlog ID，可以在APP中点击分享按钮获取链接，链接中包含mlogId。 - resolution: 分辨率，默认为1080，保持默认即可。 ### 返回: - Mlog播放地址（有时候会有水印，根据视频源而定。）  # [English] ### Purpose: - Fetch Mlog (music video) playback address. ### Parameters: - mlogId: Mlog ID, you can get the link by clicking the share button in the APP, the link contains mlogId. - resolution: Resolution, default is 1080, keep the default. ### Returns: - Mlog playback address (sometimes there will be a watermark, depending on the video source.)  # [示例/Example] > 分享链接/Share link: https://fn.music.163.com/g/mlog/mlog-mobile/landing/mlog?id=a1qQQOQNVueO2g7&type=2 mlogId = \"a1qQQOQNVueO2g7\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_music_log_video_url_api_v1_net_ease_cloud_music_app_fetch_music_log_video_url_get_0(mlog_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str mlog_id: Mlog ID/Mlog ID (required)
        :param str resolution: 分辨率/Resolution
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_music_log_video_url_api_v1_net_ease_cloud_music_app_fetch_music_log_video_url_get_0_with_http_info(mlog_id, **kwargs)  # noqa: E501

    def fetch_music_log_video_url_api_v1_net_ease_cloud_music_app_fetch_music_log_video_url_get_0_with_http_info(self, mlog_id, **kwargs):  # noqa: E501
        """Mlog（音乐视频）播放地址/Mlog (music video) playback address  # noqa: E501

        # [中文] ### 用途: - 获取Mlog（音乐视频）播放地址。 ### 参数: - mlogId: Mlog ID，可以在APP中点击分享按钮获取链接，链接中包含mlogId。 - resolution: 分辨率，默认为1080，保持默认即可。 ### 返回: - Mlog播放地址（有时候会有水印，根据视频源而定。）  # [English] ### Purpose: - Fetch Mlog (music video) playback address. ### Parameters: - mlogId: Mlog ID, you can get the link by clicking the share button in the APP, the link contains mlogId. - resolution: Resolution, default is 1080, keep the default. ### Returns: - Mlog playback address (sometimes there will be a watermark, depending on the video source.)  # [示例/Example] > 分享链接/Share link: https://fn.music.163.com/g/mlog/mlog-mobile/landing/mlog?id=a1qQQOQNVueO2g7&type=2 mlogId = \"a1qQQOQNVueO2g7\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_music_log_video_url_api_v1_net_ease_cloud_music_app_fetch_music_log_video_url_get_0_with_http_info(mlog_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str mlog_id: Mlog ID/Mlog ID (required)
        :param str resolution: 分辨率/Resolution
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'mlog_id',
            'resolution'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_music_log_video_url_api_v1_net_ease_cloud_music_app_fetch_music_log_video_url_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mlog_id' is set
        if self.api_client.client_side_validation and ('mlog_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['mlog_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `mlog_id` when calling `fetch_music_log_video_url_api_v1_net_ease_cloud_music_app_fetch_music_log_video_url_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'mlog_id' in local_var_params and local_var_params['mlog_id'] is not None:  # noqa: E501
            query_params.append(('mlogId', local_var_params['mlog_id']))  # noqa: E501
        if 'resolution' in local_var_params and local_var_params['resolution'] is not None:  # noqa: E501
            query_params.append(('resolution', local_var_params['resolution']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/fetch_music_log_video_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_music_lyric_api_v1_net_ease_cloud_music_app_fetch_one_music_lyric_get(self, music_id, **kwargs):  # noqa: E501
        """获取单一歌曲歌词/Fetch one music lyric  # noqa: E501

        # [中文] ### 用途: - 获取单个音乐歌词。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐歌词  # [English] ### Purpose: - Fetch single music lyric. ### Parameters: - music_id: Music ID ### Returns: - Music lyric  # [示例/Example] music_id = \"2135155051\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_music_lyric_api_v1_net_ease_cloud_music_app_fetch_one_music_lyric_get(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 歌曲ID/Music ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_music_lyric_api_v1_net_ease_cloud_music_app_fetch_one_music_lyric_get_with_http_info(music_id, **kwargs)  # noqa: E501

    def fetch_one_music_lyric_api_v1_net_ease_cloud_music_app_fetch_one_music_lyric_get_with_http_info(self, music_id, **kwargs):  # noqa: E501
        """获取单一歌曲歌词/Fetch one music lyric  # noqa: E501

        # [中文] ### 用途: - 获取单个音乐歌词。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐歌词  # [English] ### Purpose: - Fetch single music lyric. ### Parameters: - music_id: Music ID ### Returns: - Music lyric  # [示例/Example] music_id = \"2135155051\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_music_lyric_api_v1_net_ease_cloud_music_app_fetch_one_music_lyric_get_with_http_info(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 歌曲ID/Music ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'music_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_music_lyric_api_v1_net_ease_cloud_music_app_fetch_one_music_lyric_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'music_id' is set
        if self.api_client.client_side_validation and ('music_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['music_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `music_id` when calling `fetch_one_music_lyric_api_v1_net_ease_cloud_music_app_fetch_one_music_lyric_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'music_id' in local_var_params and local_var_params['music_id'] is not None:  # noqa: E501
            query_params.append(('music_id', local_var_params['music_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/fetch_one_music_lyric', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_music_lyric_api_v1_net_ease_cloud_music_app_fetch_one_music_lyric_get_0(self, music_id, **kwargs):  # noqa: E501
        """获取单一歌曲歌词/Fetch one music lyric  # noqa: E501

        # [中文] ### 用途: - 获取单个音乐歌词。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐歌词  # [English] ### Purpose: - Fetch single music lyric. ### Parameters: - music_id: Music ID ### Returns: - Music lyric  # [示例/Example] music_id = \"2135155051\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_music_lyric_api_v1_net_ease_cloud_music_app_fetch_one_music_lyric_get_0(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 歌曲ID/Music ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_music_lyric_api_v1_net_ease_cloud_music_app_fetch_one_music_lyric_get_0_with_http_info(music_id, **kwargs)  # noqa: E501

    def fetch_one_music_lyric_api_v1_net_ease_cloud_music_app_fetch_one_music_lyric_get_0_with_http_info(self, music_id, **kwargs):  # noqa: E501
        """获取单一歌曲歌词/Fetch one music lyric  # noqa: E501

        # [中文] ### 用途: - 获取单个音乐歌词。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐歌词  # [English] ### Purpose: - Fetch single music lyric. ### Parameters: - music_id: Music ID ### Returns: - Music lyric  # [示例/Example] music_id = \"2135155051\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_music_lyric_api_v1_net_ease_cloud_music_app_fetch_one_music_lyric_get_0_with_http_info(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 歌曲ID/Music ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'music_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_music_lyric_api_v1_net_ease_cloud_music_app_fetch_one_music_lyric_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'music_id' is set
        if self.api_client.client_side_validation and ('music_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['music_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `music_id` when calling `fetch_one_music_lyric_api_v1_net_ease_cloud_music_app_fetch_one_music_lyric_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'music_id' in local_var_params and local_var_params['music_id'] is not None:  # noqa: E501
            query_params.append(('music_id', local_var_params['music_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/fetch_one_music_lyric', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_music_url_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v1_get(self, music_id, **kwargs):  # noqa: E501
        """获取单一歌曲播放地址V1（只能返回MP3格式，支持参数较少）/Fetch one music URL V1 (only MP3 format is supported, with fewer parameters)  # noqa: E501

        # [中文] ### 用途: - 获取单个音乐播放地址，此接口只能返回MP3格式的音频文件链接。 ### 参数: - music_id: 音乐ID - br: 音质码率，分四个等级，128000,192000,320000,999000 ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface can only return MP3 format audio file link. ### Parameters: - music_id: Music ID - br: Bitrate, divided into four levels, 128000,192000,320000,999000 ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" br = \"192000\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_music_url_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v1_get(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 歌曲ID/Music ID (required)
        :param str br: 音质码率/Bitrate
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_music_url_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v1_get_with_http_info(music_id, **kwargs)  # noqa: E501

    def fetch_one_music_url_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v1_get_with_http_info(self, music_id, **kwargs):  # noqa: E501
        """获取单一歌曲播放地址V1（只能返回MP3格式，支持参数较少）/Fetch one music URL V1 (only MP3 format is supported, with fewer parameters)  # noqa: E501

        # [中文] ### 用途: - 获取单个音乐播放地址，此接口只能返回MP3格式的音频文件链接。 ### 参数: - music_id: 音乐ID - br: 音质码率，分四个等级，128000,192000,320000,999000 ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface can only return MP3 format audio file link. ### Parameters: - music_id: Music ID - br: Bitrate, divided into four levels, 128000,192000,320000,999000 ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" br = \"192000\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_music_url_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v1_get_with_http_info(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 歌曲ID/Music ID (required)
        :param str br: 音质码率/Bitrate
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'music_id',
            'br'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_music_url_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v1_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'music_id' is set
        if self.api_client.client_side_validation and ('music_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['music_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `music_id` when calling `fetch_one_music_url_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v1_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'music_id' in local_var_params and local_var_params['music_id'] is not None:  # noqa: E501
            query_params.append(('music_id', local_var_params['music_id']))  # noqa: E501
        if 'br' in local_var_params and local_var_params['br'] is not None:  # noqa: E501
            query_params.append(('br', local_var_params['br']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/fetch_one_music_url_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_music_url_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v1_get_0(self, music_id, **kwargs):  # noqa: E501
        """获取单一歌曲播放地址V1（只能返回MP3格式，支持参数较少）/Fetch one music URL V1 (only MP3 format is supported, with fewer parameters)  # noqa: E501

        # [中文] ### 用途: - 获取单个音乐播放地址，此接口只能返回MP3格式的音频文件链接。 ### 参数: - music_id: 音乐ID - br: 音质码率，分四个等级，128000,192000,320000,999000 ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface can only return MP3 format audio file link. ### Parameters: - music_id: Music ID - br: Bitrate, divided into four levels, 128000,192000,320000,999000 ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" br = \"192000\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_music_url_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v1_get_0(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 歌曲ID/Music ID (required)
        :param str br: 音质码率/Bitrate
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_music_url_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v1_get_0_with_http_info(music_id, **kwargs)  # noqa: E501

    def fetch_one_music_url_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v1_get_0_with_http_info(self, music_id, **kwargs):  # noqa: E501
        """获取单一歌曲播放地址V1（只能返回MP3格式，支持参数较少）/Fetch one music URL V1 (only MP3 format is supported, with fewer parameters)  # noqa: E501

        # [中文] ### 用途: - 获取单个音乐播放地址，此接口只能返回MP3格式的音频文件链接。 ### 参数: - music_id: 音乐ID - br: 音质码率，分四个等级，128000,192000,320000,999000 ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface can only return MP3 format audio file link. ### Parameters: - music_id: Music ID - br: Bitrate, divided into four levels, 128000,192000,320000,999000 ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" br = \"192000\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_music_url_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v1_get_0_with_http_info(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 歌曲ID/Music ID (required)
        :param str br: 音质码率/Bitrate
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'music_id',
            'br'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_music_url_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v1_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'music_id' is set
        if self.api_client.client_side_validation and ('music_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['music_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `music_id` when calling `fetch_one_music_url_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v1_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'music_id' in local_var_params and local_var_params['music_id'] is not None:  # noqa: E501
            query_params.append(('music_id', local_var_params['music_id']))  # noqa: E501
        if 'br' in local_var_params and local_var_params['br'] is not None:  # noqa: E501
            query_params.append(('br', local_var_params['br']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/fetch_one_music_url_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_music_url_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v2_get(self, music_id, **kwargs):  # noqa: E501
        """获取单一歌曲播放地址V2（支持更多参数）/Fetch one music URL V2 (support more parameters)  # noqa: E501

        # [中文] ### 用途: - 获取单个音乐播放地址，此接口支持更多参数。 ### 参数: - music_id: 音乐ID - level: 音质等级，分五个等级，标准，较高，极高，无损，hires，后两个等级不一定有支持的音源。     - 标准：standard     - 较高：higher     - 极高：exhigh     - 无损：lossLess     - hires：hires - encodeType: 编码类型，分六种类型。     - aac：aac     - mp3：mp3（默认）     - flac：flac     - alac：alac     - ape：ape     - wav：wav ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface supports more parameters. ### Parameters: - music_id: Music ID - level: Quality level, divided into five levels, standard, higher, exhigh, lossLess, hires, the last two levels may not have supported audio sources.     - standard     - higher     - exhigh     - lossLess     - hires - encodeType: Encoding type, divided into six types.     - aac     - mp3 (default)     - flac     - alac     - ape     - wav ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" level = \"exhigh\" encodeType = \"mp3\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_music_url_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v2_get(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 歌曲ID/Music ID (required)
        :param str level: 音质等级/Quality level
        :param str encode_type: 编码类型/Encoding type
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_music_url_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v2_get_with_http_info(music_id, **kwargs)  # noqa: E501

    def fetch_one_music_url_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v2_get_with_http_info(self, music_id, **kwargs):  # noqa: E501
        """获取单一歌曲播放地址V2（支持更多参数）/Fetch one music URL V2 (support more parameters)  # noqa: E501

        # [中文] ### 用途: - 获取单个音乐播放地址，此接口支持更多参数。 ### 参数: - music_id: 音乐ID - level: 音质等级，分五个等级，标准，较高，极高，无损，hires，后两个等级不一定有支持的音源。     - 标准：standard     - 较高：higher     - 极高：exhigh     - 无损：lossLess     - hires：hires - encodeType: 编码类型，分六种类型。     - aac：aac     - mp3：mp3（默认）     - flac：flac     - alac：alac     - ape：ape     - wav：wav ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface supports more parameters. ### Parameters: - music_id: Music ID - level: Quality level, divided into five levels, standard, higher, exhigh, lossLess, hires, the last two levels may not have supported audio sources.     - standard     - higher     - exhigh     - lossLess     - hires - encodeType: Encoding type, divided into six types.     - aac     - mp3 (default)     - flac     - alac     - ape     - wav ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" level = \"exhigh\" encodeType = \"mp3\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_music_url_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v2_get_with_http_info(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 歌曲ID/Music ID (required)
        :param str level: 音质等级/Quality level
        :param str encode_type: 编码类型/Encoding type
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'music_id',
            'level',
            'encode_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_music_url_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v2_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'music_id' is set
        if self.api_client.client_side_validation and ('music_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['music_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `music_id` when calling `fetch_one_music_url_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v2_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'music_id' in local_var_params and local_var_params['music_id'] is not None:  # noqa: E501
            query_params.append(('music_id', local_var_params['music_id']))  # noqa: E501
        if 'level' in local_var_params and local_var_params['level'] is not None:  # noqa: E501
            query_params.append(('level', local_var_params['level']))  # noqa: E501
        if 'encode_type' in local_var_params and local_var_params['encode_type'] is not None:  # noqa: E501
            query_params.append(('encodeType', local_var_params['encode_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/fetch_one_music_url_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_music_url_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v2_get_0(self, music_id, **kwargs):  # noqa: E501
        """获取单一歌曲播放地址V2（支持更多参数）/Fetch one music URL V2 (support more parameters)  # noqa: E501

        # [中文] ### 用途: - 获取单个音乐播放地址，此接口支持更多参数。 ### 参数: - music_id: 音乐ID - level: 音质等级，分五个等级，标准，较高，极高，无损，hires，后两个等级不一定有支持的音源。     - 标准：standard     - 较高：higher     - 极高：exhigh     - 无损：lossLess     - hires：hires - encodeType: 编码类型，分六种类型。     - aac：aac     - mp3：mp3（默认）     - flac：flac     - alac：alac     - ape：ape     - wav：wav ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface supports more parameters. ### Parameters: - music_id: Music ID - level: Quality level, divided into five levels, standard, higher, exhigh, lossLess, hires, the last two levels may not have supported audio sources.     - standard     - higher     - exhigh     - lossLess     - hires - encodeType: Encoding type, divided into six types.     - aac     - mp3 (default)     - flac     - alac     - ape     - wav ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" level = \"exhigh\" encodeType = \"mp3\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_music_url_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v2_get_0(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 歌曲ID/Music ID (required)
        :param str level: 音质等级/Quality level
        :param str encode_type: 编码类型/Encoding type
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_music_url_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v2_get_0_with_http_info(music_id, **kwargs)  # noqa: E501

    def fetch_one_music_url_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v2_get_0_with_http_info(self, music_id, **kwargs):  # noqa: E501
        """获取单一歌曲播放地址V2（支持更多参数）/Fetch one music URL V2 (support more parameters)  # noqa: E501

        # [中文] ### 用途: - 获取单个音乐播放地址，此接口支持更多参数。 ### 参数: - music_id: 音乐ID - level: 音质等级，分五个等级，标准，较高，极高，无损，hires，后两个等级不一定有支持的音源。     - 标准：standard     - 较高：higher     - 极高：exhigh     - 无损：lossLess     - hires：hires - encodeType: 编码类型，分六种类型。     - aac：aac     - mp3：mp3（默认）     - flac：flac     - alac：alac     - ape：ape     - wav：wav ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface supports more parameters. ### Parameters: - music_id: Music ID - level: Quality level, divided into five levels, standard, higher, exhigh, lossLess, hires, the last two levels may not have supported audio sources.     - standard     - higher     - exhigh     - lossLess     - hires - encodeType: Encoding type, divided into six types.     - aac     - mp3 (default)     - flac     - alac     - ape     - wav ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" level = \"exhigh\" encodeType = \"mp3\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_music_url_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v2_get_0_with_http_info(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 歌曲ID/Music ID (required)
        :param str level: 音质等级/Quality level
        :param str encode_type: 编码类型/Encoding type
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'music_id',
            'level',
            'encode_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_music_url_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v2_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'music_id' is set
        if self.api_client.client_side_validation and ('music_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['music_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `music_id` when calling `fetch_one_music_url_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_url_v2_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'music_id' in local_var_params and local_var_params['music_id'] is not None:  # noqa: E501
            query_params.append(('music_id', local_var_params['music_id']))  # noqa: E501
        if 'level' in local_var_params and local_var_params['level'] is not None:  # noqa: E501
            query_params.append(('level', local_var_params['level']))  # noqa: E501
        if 'encode_type' in local_var_params and local_var_params['encode_type'] is not None:  # noqa: E501
            query_params.append(('encodeType', local_var_params['encode_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/fetch_one_music_url_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_music_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_v1_get(self, music_id, **kwargs):  # noqa: E501
        """获取单一歌曲信息V1（信息更全）| Fetch one music information V1 (more information)  # noqa: E501

        # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_music_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_v1_get(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 歌曲ID/Music ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_music_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_v1_get_with_http_info(music_id, **kwargs)  # noqa: E501

    def fetch_one_music_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_v1_get_with_http_info(self, music_id, **kwargs):  # noqa: E501
        """获取单一歌曲信息V1（信息更全）| Fetch one music information V1 (more information)  # noqa: E501

        # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_music_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_v1_get_with_http_info(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 歌曲ID/Music ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'music_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_music_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_v1_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'music_id' is set
        if self.api_client.client_side_validation and ('music_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['music_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `music_id` when calling `fetch_one_music_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_v1_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'music_id' in local_var_params and local_var_params['music_id'] is not None:  # noqa: E501
            query_params.append(('music_id', local_var_params['music_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/fetch_one_music_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_music_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_v1_get_0(self, music_id, **kwargs):  # noqa: E501
        """获取单一歌曲信息V1（信息更全）| Fetch one music information V1 (more information)  # noqa: E501

        # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_music_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_v1_get_0(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 歌曲ID/Music ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_music_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_v1_get_0_with_http_info(music_id, **kwargs)  # noqa: E501

    def fetch_one_music_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_v1_get_0_with_http_info(self, music_id, **kwargs):  # noqa: E501
        """获取单一歌曲信息V1（信息更全）| Fetch one music information V1 (more information)  # noqa: E501

        # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_music_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_v1_get_0_with_http_info(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 歌曲ID/Music ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'music_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_music_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_v1_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'music_id' is set
        if self.api_client.client_side_validation and ('music_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['music_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `music_id` when calling `fetch_one_music_v1_api_v1_net_ease_cloud_music_app_fetch_one_music_v1_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'music_id' in local_var_params and local_var_params['music_id'] is not None:  # noqa: E501
            query_params.append(('music_id', local_var_params['music_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/fetch_one_music_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_music_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_v2_get(self, music_id, **kwargs):  # noqa: E501
        """获取单一歌曲信息V2（信息更少）| Fetch one music information V2 (less information)  # noqa: E501

        # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_music_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_v2_get(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 歌曲ID/Music ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_music_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_v2_get_with_http_info(music_id, **kwargs)  # noqa: E501

    def fetch_one_music_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_v2_get_with_http_info(self, music_id, **kwargs):  # noqa: E501
        """获取单一歌曲信息V2（信息更少）| Fetch one music information V2 (less information)  # noqa: E501

        # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_music_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_v2_get_with_http_info(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 歌曲ID/Music ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'music_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_music_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_v2_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'music_id' is set
        if self.api_client.client_side_validation and ('music_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['music_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `music_id` when calling `fetch_one_music_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_v2_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'music_id' in local_var_params and local_var_params['music_id'] is not None:  # noqa: E501
            query_params.append(('music_id', local_var_params['music_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/fetch_one_music_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_music_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_v2_get_0(self, music_id, **kwargs):  # noqa: E501
        """获取单一歌曲信息V2（信息更少）| Fetch one music information V2 (less information)  # noqa: E501

        # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_music_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_v2_get_0(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 歌曲ID/Music ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_music_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_v2_get_0_with_http_info(music_id, **kwargs)  # noqa: E501

    def fetch_one_music_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_v2_get_0_with_http_info(self, music_id, **kwargs):  # noqa: E501
        """获取单一歌曲信息V2（信息更少）| Fetch one music information V2 (less information)  # noqa: E501

        # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_music_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_v2_get_0_with_http_info(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 歌曲ID/Music ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'music_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_music_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_v2_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'music_id' is set
        if self.api_client.client_side_validation and ('music_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['music_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `music_id` when calling `fetch_one_music_v2_api_v1_net_ease_cloud_music_app_fetch_one_music_v2_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'music_id' in local_var_params and local_var_params['music_id'] is not None:  # noqa: E501
            query_params.append(('music_id', local_var_params['music_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/fetch_one_music_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_event_api_v1_net_ease_cloud_music_app_fetch_user_event_get(self, uid, **kwargs):  # noqa: E501
        """获取用户动态/Fetch user event  # noqa: E501

        # [中文] ### 用途: - 获取用户动态。 ### 参数: - uid: 用户ID。 - _time: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_time字段。 - limit: 每页数量，默认为10。 ### 返回: - 用户动态  # [English] ### Purpose: - Fetch user event. ### Parameters: - uid: User ID. - _time: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_time field returned. - limit: Number per page, default is 10. ### Returns: - User event  # [示例/Example] uid = \"254132915\" _time = \"-1\" limit = \"10\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_event_api_v1_net_ease_cloud_music_app_fetch_user_event_get(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户ID/User ID (required)
        :param str time: 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
        :param str limit: 每页数量，保持默认即可/Number per page, keep the default
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_event_api_v1_net_ease_cloud_music_app_fetch_user_event_get_with_http_info(uid, **kwargs)  # noqa: E501

    def fetch_user_event_api_v1_net_ease_cloud_music_app_fetch_user_event_get_with_http_info(self, uid, **kwargs):  # noqa: E501
        """获取用户动态/Fetch user event  # noqa: E501

        # [中文] ### 用途: - 获取用户动态。 ### 参数: - uid: 用户ID。 - _time: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_time字段。 - limit: 每页数量，默认为10。 ### 返回: - 用户动态  # [English] ### Purpose: - Fetch user event. ### Parameters: - uid: User ID. - _time: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_time field returned. - limit: Number per page, default is 10. ### Returns: - User event  # [示例/Example] uid = \"254132915\" _time = \"-1\" limit = \"10\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_event_api_v1_net_ease_cloud_music_app_fetch_user_event_get_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户ID/User ID (required)
        :param str time: 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
        :param str limit: 每页数量，保持默认即可/Number per page, keep the default
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uid',
            'time',
            'limit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_event_api_v1_net_ease_cloud_music_app_fetch_user_event_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uid` when calling `fetch_user_event_api_v1_net_ease_cloud_music_app_fetch_user_event_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in local_var_params and local_var_params['uid'] is not None:  # noqa: E501
            query_params.append(('uid', local_var_params['uid']))  # noqa: E501
        if 'time' in local_var_params and local_var_params['time'] is not None:  # noqa: E501
            query_params.append(('_time', local_var_params['time']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/fetch_user_event', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_event_api_v1_net_ease_cloud_music_app_fetch_user_event_get_0(self, uid, **kwargs):  # noqa: E501
        """获取用户动态/Fetch user event  # noqa: E501

        # [中文] ### 用途: - 获取用户动态。 ### 参数: - uid: 用户ID。 - _time: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_time字段。 - limit: 每页数量，默认为10。 ### 返回: - 用户动态  # [English] ### Purpose: - Fetch user event. ### Parameters: - uid: User ID. - _time: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_time field returned. - limit: Number per page, default is 10. ### Returns: - User event  # [示例/Example] uid = \"254132915\" _time = \"-1\" limit = \"10\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_event_api_v1_net_ease_cloud_music_app_fetch_user_event_get_0(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户ID/User ID (required)
        :param str time: 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
        :param str limit: 每页数量，保持默认即可/Number per page, keep the default
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_event_api_v1_net_ease_cloud_music_app_fetch_user_event_get_0_with_http_info(uid, **kwargs)  # noqa: E501

    def fetch_user_event_api_v1_net_ease_cloud_music_app_fetch_user_event_get_0_with_http_info(self, uid, **kwargs):  # noqa: E501
        """获取用户动态/Fetch user event  # noqa: E501

        # [中文] ### 用途: - 获取用户动态。 ### 参数: - uid: 用户ID。 - _time: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_time字段。 - limit: 每页数量，默认为10。 ### 返回: - 用户动态  # [English] ### Purpose: - Fetch user event. ### Parameters: - uid: User ID. - _time: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_time field returned. - limit: Number per page, default is 10. ### Returns: - User event  # [示例/Example] uid = \"254132915\" _time = \"-1\" limit = \"10\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_event_api_v1_net_ease_cloud_music_app_fetch_user_event_get_0_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户ID/User ID (required)
        :param str time: 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
        :param str limit: 每页数量，保持默认即可/Number per page, keep the default
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uid',
            'time',
            'limit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_event_api_v1_net_ease_cloud_music_app_fetch_user_event_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uid` when calling `fetch_user_event_api_v1_net_ease_cloud_music_app_fetch_user_event_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in local_var_params and local_var_params['uid'] is not None:  # noqa: E501
            query_params.append(('uid', local_var_params['uid']))  # noqa: E501
        if 'time' in local_var_params and local_var_params['time'] is not None:  # noqa: E501
            query_params.append(('_time', local_var_params['time']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/fetch_user_event', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_followers_api_v1_net_ease_cloud_music_app_fetch_user_followers_get(self, uid, **kwargs):  # noqa: E501
        """获取用户粉丝列表/Fetch user followers  # noqa: E501

        # [中文] ### 用途: - 获取用户粉丝列表。 ### 参数: - uid: 用户ID。 - lasttime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_lasttime字段。 - pagesize: 每页数量，保持默认即可。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Fetch user followers. ### Parameters: - uid: User ID. - lasttime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_lasttime field returned. - pagesize: Number per page, keep the default. ### Returns: - User followers list  # [示例/Example] uid = \"254132915\" lasttime = \"0\" pagesize = \"20\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_followers_api_v1_net_ease_cloud_music_app_fetch_user_followers_get(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户ID/User ID (required)
        :param str lasttime: 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
        :param str pagesize: 每页数量，保持默认即可/Number per page, keep the default
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_followers_api_v1_net_ease_cloud_music_app_fetch_user_followers_get_with_http_info(uid, **kwargs)  # noqa: E501

    def fetch_user_followers_api_v1_net_ease_cloud_music_app_fetch_user_followers_get_with_http_info(self, uid, **kwargs):  # noqa: E501
        """获取用户粉丝列表/Fetch user followers  # noqa: E501

        # [中文] ### 用途: - 获取用户粉丝列表。 ### 参数: - uid: 用户ID。 - lasttime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_lasttime字段。 - pagesize: 每页数量，保持默认即可。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Fetch user followers. ### Parameters: - uid: User ID. - lasttime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_lasttime field returned. - pagesize: Number per page, keep the default. ### Returns: - User followers list  # [示例/Example] uid = \"254132915\" lasttime = \"0\" pagesize = \"20\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_followers_api_v1_net_ease_cloud_music_app_fetch_user_followers_get_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户ID/User ID (required)
        :param str lasttime: 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
        :param str pagesize: 每页数量，保持默认即可/Number per page, keep the default
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uid',
            'lasttime',
            'pagesize'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_followers_api_v1_net_ease_cloud_music_app_fetch_user_followers_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uid` when calling `fetch_user_followers_api_v1_net_ease_cloud_music_app_fetch_user_followers_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in local_var_params and local_var_params['uid'] is not None:  # noqa: E501
            query_params.append(('uid', local_var_params['uid']))  # noqa: E501
        if 'lasttime' in local_var_params and local_var_params['lasttime'] is not None:  # noqa: E501
            query_params.append(('lasttime', local_var_params['lasttime']))  # noqa: E501
        if 'pagesize' in local_var_params and local_var_params['pagesize'] is not None:  # noqa: E501
            query_params.append(('pagesize', local_var_params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/fetch_user_followers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_followers_api_v1_net_ease_cloud_music_app_fetch_user_followers_get_0(self, uid, **kwargs):  # noqa: E501
        """获取用户粉丝列表/Fetch user followers  # noqa: E501

        # [中文] ### 用途: - 获取用户粉丝列表。 ### 参数: - uid: 用户ID。 - lasttime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_lasttime字段。 - pagesize: 每页数量，保持默认即可。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Fetch user followers. ### Parameters: - uid: User ID. - lasttime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_lasttime field returned. - pagesize: Number per page, keep the default. ### Returns: - User followers list  # [示例/Example] uid = \"254132915\" lasttime = \"0\" pagesize = \"20\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_followers_api_v1_net_ease_cloud_music_app_fetch_user_followers_get_0(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户ID/User ID (required)
        :param str lasttime: 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
        :param str pagesize: 每页数量，保持默认即可/Number per page, keep the default
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_followers_api_v1_net_ease_cloud_music_app_fetch_user_followers_get_0_with_http_info(uid, **kwargs)  # noqa: E501

    def fetch_user_followers_api_v1_net_ease_cloud_music_app_fetch_user_followers_get_0_with_http_info(self, uid, **kwargs):  # noqa: E501
        """获取用户粉丝列表/Fetch user followers  # noqa: E501

        # [中文] ### 用途: - 获取用户粉丝列表。 ### 参数: - uid: 用户ID。 - lasttime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_lasttime字段。 - pagesize: 每页数量，保持默认即可。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Fetch user followers. ### Parameters: - uid: User ID. - lasttime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_lasttime field returned. - pagesize: Number per page, keep the default. ### Returns: - User followers list  # [示例/Example] uid = \"254132915\" lasttime = \"0\" pagesize = \"20\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_followers_api_v1_net_ease_cloud_music_app_fetch_user_followers_get_0_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户ID/User ID (required)
        :param str lasttime: 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
        :param str pagesize: 每页数量，保持默认即可/Number per page, keep the default
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uid',
            'lasttime',
            'pagesize'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_followers_api_v1_net_ease_cloud_music_app_fetch_user_followers_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uid` when calling `fetch_user_followers_api_v1_net_ease_cloud_music_app_fetch_user_followers_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in local_var_params and local_var_params['uid'] is not None:  # noqa: E501
            query_params.append(('uid', local_var_params['uid']))  # noqa: E501
        if 'lasttime' in local_var_params and local_var_params['lasttime'] is not None:  # noqa: E501
            query_params.append(('lasttime', local_var_params['lasttime']))  # noqa: E501
        if 'pagesize' in local_var_params and local_var_params['pagesize'] is not None:  # noqa: E501
            query_params.append(('pagesize', local_var_params['pagesize']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/fetch_user_followers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_follows_api_v1_net_ease_cloud_music_app_fetch_user_follows_get(self, uid, **kwargs):  # noqa: E501
        """获取用户关注列表/Fetch user follows  # noqa: E501

        # [中文] ### 用途: - 获取用户关注列表。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Fetch user follows. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User follows list  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_follows_api_v1_net_ease_cloud_music_app_fetch_user_follows_get(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户ID/User ID (required)
        :param str offset: 偏移量，保持默认即可/Offset, keep the default
        :param str limit: 每页数量，保持默认即可/Number per page, keep the default
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_follows_api_v1_net_ease_cloud_music_app_fetch_user_follows_get_with_http_info(uid, **kwargs)  # noqa: E501

    def fetch_user_follows_api_v1_net_ease_cloud_music_app_fetch_user_follows_get_with_http_info(self, uid, **kwargs):  # noqa: E501
        """获取用户关注列表/Fetch user follows  # noqa: E501

        # [中文] ### 用途: - 获取用户关注列表。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Fetch user follows. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User follows list  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_follows_api_v1_net_ease_cloud_music_app_fetch_user_follows_get_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户ID/User ID (required)
        :param str offset: 偏移量，保持默认即可/Offset, keep the default
        :param str limit: 每页数量，保持默认即可/Number per page, keep the default
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uid',
            'offset',
            'limit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_follows_api_v1_net_ease_cloud_music_app_fetch_user_follows_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uid` when calling `fetch_user_follows_api_v1_net_ease_cloud_music_app_fetch_user_follows_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in local_var_params and local_var_params['uid'] is not None:  # noqa: E501
            query_params.append(('uid', local_var_params['uid']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/fetch_user_follows', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_follows_api_v1_net_ease_cloud_music_app_fetch_user_follows_get_0(self, uid, **kwargs):  # noqa: E501
        """获取用户关注列表/Fetch user follows  # noqa: E501

        # [中文] ### 用途: - 获取用户关注列表。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Fetch user follows. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User follows list  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_follows_api_v1_net_ease_cloud_music_app_fetch_user_follows_get_0(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户ID/User ID (required)
        :param str offset: 偏移量，保持默认即可/Offset, keep the default
        :param str limit: 每页数量，保持默认即可/Number per page, keep the default
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_follows_api_v1_net_ease_cloud_music_app_fetch_user_follows_get_0_with_http_info(uid, **kwargs)  # noqa: E501

    def fetch_user_follows_api_v1_net_ease_cloud_music_app_fetch_user_follows_get_0_with_http_info(self, uid, **kwargs):  # noqa: E501
        """获取用户关注列表/Fetch user follows  # noqa: E501

        # [中文] ### 用途: - 获取用户关注列表。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Fetch user follows. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User follows list  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_follows_api_v1_net_ease_cloud_music_app_fetch_user_follows_get_0_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户ID/User ID (required)
        :param str offset: 偏移量，保持默认即可/Offset, keep the default
        :param str limit: 每页数量，保持默认即可/Number per page, keep the default
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uid',
            'offset',
            'limit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_follows_api_v1_net_ease_cloud_music_app_fetch_user_follows_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uid` when calling `fetch_user_follows_api_v1_net_ease_cloud_music_app_fetch_user_follows_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in local_var_params and local_var_params['uid'] is not None:  # noqa: E501
            query_params.append(('uid', local_var_params['uid']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/fetch_user_follows', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_info_api_v1_net_ease_cloud_music_app_fetch_user_info_get(self, uid, **kwargs):  # noqa: E501
        """获取用户信息/Get user information  # noqa: E501

        # [中文] ### 用途: - 获取用户信息。 ### 参数: - uid: 用户ID。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information. ### Parameters: - uid: User ID. ### Returns: - User information  # [示例/Example] uid = \"254132915\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_api_v1_net_ease_cloud_music_app_fetch_user_info_get(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户ID/User ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_info_api_v1_net_ease_cloud_music_app_fetch_user_info_get_with_http_info(uid, **kwargs)  # noqa: E501

    def fetch_user_info_api_v1_net_ease_cloud_music_app_fetch_user_info_get_with_http_info(self, uid, **kwargs):  # noqa: E501
        """获取用户信息/Get user information  # noqa: E501

        # [中文] ### 用途: - 获取用户信息。 ### 参数: - uid: 用户ID。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information. ### Parameters: - uid: User ID. ### Returns: - User information  # [示例/Example] uid = \"254132915\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_api_v1_net_ease_cloud_music_app_fetch_user_info_get_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户ID/User ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_info_api_v1_net_ease_cloud_music_app_fetch_user_info_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uid` when calling `fetch_user_info_api_v1_net_ease_cloud_music_app_fetch_user_info_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in local_var_params and local_var_params['uid'] is not None:  # noqa: E501
            query_params.append(('uid', local_var_params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/fetch_user_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_info_api_v1_net_ease_cloud_music_app_fetch_user_info_get_0(self, uid, **kwargs):  # noqa: E501
        """获取用户信息/Get user information  # noqa: E501

        # [中文] ### 用途: - 获取用户信息。 ### 参数: - uid: 用户ID。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information. ### Parameters: - uid: User ID. ### Returns: - User information  # [示例/Example] uid = \"254132915\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_api_v1_net_ease_cloud_music_app_fetch_user_info_get_0(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户ID/User ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_info_api_v1_net_ease_cloud_music_app_fetch_user_info_get_0_with_http_info(uid, **kwargs)  # noqa: E501

    def fetch_user_info_api_v1_net_ease_cloud_music_app_fetch_user_info_get_0_with_http_info(self, uid, **kwargs):  # noqa: E501
        """获取用户信息/Get user information  # noqa: E501

        # [中文] ### 用途: - 获取用户信息。 ### 参数: - uid: 用户ID。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information. ### Parameters: - uid: User ID. ### Returns: - User information  # [示例/Example] uid = \"254132915\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_api_v1_net_ease_cloud_music_app_fetch_user_info_get_0_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户ID/User ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_info_api_v1_net_ease_cloud_music_app_fetch_user_info_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uid` when calling `fetch_user_info_api_v1_net_ease_cloud_music_app_fetch_user_info_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in local_var_params and local_var_params['uid'] is not None:  # noqa: E501
            query_params.append(('uid', local_var_params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/fetch_user_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_playlist_api_v1_net_ease_cloud_music_app_fetch_user_playlist_get(self, uid, **kwargs):  # noqa: E501
        """获取用户歌单/Get user playlist  # noqa: E501

        # [中文] ### 用途: - 获取用户歌单。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户歌单  # [English] ### Purpose: - Get user playlist. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User playlist  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_playlist_api_v1_net_ease_cloud_music_app_fetch_user_playlist_get(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户ID/User ID (required)
        :param str offset: 偏移量，保持默认即可/Offset, keep the default
        :param str limit: 每页数量，保持默认即可/Number per page, keep the default
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_playlist_api_v1_net_ease_cloud_music_app_fetch_user_playlist_get_with_http_info(uid, **kwargs)  # noqa: E501

    def fetch_user_playlist_api_v1_net_ease_cloud_music_app_fetch_user_playlist_get_with_http_info(self, uid, **kwargs):  # noqa: E501
        """获取用户歌单/Get user playlist  # noqa: E501

        # [中文] ### 用途: - 获取用户歌单。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户歌单  # [English] ### Purpose: - Get user playlist. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User playlist  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_playlist_api_v1_net_ease_cloud_music_app_fetch_user_playlist_get_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户ID/User ID (required)
        :param str offset: 偏移量，保持默认即可/Offset, keep the default
        :param str limit: 每页数量，保持默认即可/Number per page, keep the default
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uid',
            'offset',
            'limit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_playlist_api_v1_net_ease_cloud_music_app_fetch_user_playlist_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uid` when calling `fetch_user_playlist_api_v1_net_ease_cloud_music_app_fetch_user_playlist_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in local_var_params and local_var_params['uid'] is not None:  # noqa: E501
            query_params.append(('uid', local_var_params['uid']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/fetch_user_playlist', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_playlist_api_v1_net_ease_cloud_music_app_fetch_user_playlist_get_0(self, uid, **kwargs):  # noqa: E501
        """获取用户歌单/Get user playlist  # noqa: E501

        # [中文] ### 用途: - 获取用户歌单。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户歌单  # [English] ### Purpose: - Get user playlist. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User playlist  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_playlist_api_v1_net_ease_cloud_music_app_fetch_user_playlist_get_0(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户ID/User ID (required)
        :param str offset: 偏移量，保持默认即可/Offset, keep the default
        :param str limit: 每页数量，保持默认即可/Number per page, keep the default
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_playlist_api_v1_net_ease_cloud_music_app_fetch_user_playlist_get_0_with_http_info(uid, **kwargs)  # noqa: E501

    def fetch_user_playlist_api_v1_net_ease_cloud_music_app_fetch_user_playlist_get_0_with_http_info(self, uid, **kwargs):  # noqa: E501
        """获取用户歌单/Get user playlist  # noqa: E501

        # [中文] ### 用途: - 获取用户歌单。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户歌单  # [English] ### Purpose: - Get user playlist. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User playlist  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_playlist_api_v1_net_ease_cloud_music_app_fetch_user_playlist_get_0_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户ID/User ID (required)
        :param str offset: 偏移量，保持默认即可/Offset, keep the default
        :param str limit: 每页数量，保持默认即可/Number per page, keep the default
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uid',
            'offset',
            'limit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_playlist_api_v1_net_ease_cloud_music_app_fetch_user_playlist_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uid` when calling `fetch_user_playlist_api_v1_net_ease_cloud_music_app_fetch_user_playlist_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in local_var_params and local_var_params['uid'] is not None:  # noqa: E501
            query_params.append(('uid', local_var_params['uid']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/fetch_user_playlist', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_v1_api_v1_net_ease_cloud_music_app_search_v1_get(self, keywords, **kwargs):  # noqa: E501
        """搜索接口V1/Search interface V1  # noqa: E501

        # [中文] ### 用途: - 搜索接口V1。 ### 参数: - keywords: 关键词。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 - _type: 搜索类型     **搜索类型 (`type`)**：     * 单曲搜索：`\"type\":\"1\"`     * 歌手搜索：`\"type\":\"100\"`     * 专辑搜索：`\"type\":\"10\"`     * 歌单搜索：`\"type\":\"1000\"`     * MV搜索：`\"type\":\"1004\"`     * 主播电台搜索：`\"type\":\"1009\"`     * 用户搜索：`\"type\":\"1002\"` ### 返回: - 搜索结果  # [English] ### Purpose: - Search interface V1. ### Parameters: - keywords: Keywords. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. - _type: Search type     **Search type (`type`)**:     * Single search: `\"type\":\"1\"`     * Singer search: `\"type\":\"100\"`     * Album search: `\"type\":\"10\"`     * Playlist search: `\"type\":\"1000\"`     * MV search: `\"type\":\"1004\"`     * Anchor radio search: `\"type\":\"1009\"`     * User search: `\"type\":\"1002\"` ### Returns: - Search results  # [示例/Example] keywords = \"周杰伦\" offset = \"0\" limit = \"20\" _type = \"1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_v1_api_v1_net_ease_cloud_music_app_search_v1_get(keywords, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keywords: 关键词/Keywords (required)
        :param str offset: 偏移量，保持默认即可/Offset, keep the default
        :param str limit: 每页数量，保持默认即可/Number per page, keep the default
        :param str type: 搜索类型/Search type
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.search_v1_api_v1_net_ease_cloud_music_app_search_v1_get_with_http_info(keywords, **kwargs)  # noqa: E501

    def search_v1_api_v1_net_ease_cloud_music_app_search_v1_get_with_http_info(self, keywords, **kwargs):  # noqa: E501
        """搜索接口V1/Search interface V1  # noqa: E501

        # [中文] ### 用途: - 搜索接口V1。 ### 参数: - keywords: 关键词。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 - _type: 搜索类型     **搜索类型 (`type`)**：     * 单曲搜索：`\"type\":\"1\"`     * 歌手搜索：`\"type\":\"100\"`     * 专辑搜索：`\"type\":\"10\"`     * 歌单搜索：`\"type\":\"1000\"`     * MV搜索：`\"type\":\"1004\"`     * 主播电台搜索：`\"type\":\"1009\"`     * 用户搜索：`\"type\":\"1002\"` ### 返回: - 搜索结果  # [English] ### Purpose: - Search interface V1. ### Parameters: - keywords: Keywords. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. - _type: Search type     **Search type (`type`)**:     * Single search: `\"type\":\"1\"`     * Singer search: `\"type\":\"100\"`     * Album search: `\"type\":\"10\"`     * Playlist search: `\"type\":\"1000\"`     * MV search: `\"type\":\"1004\"`     * Anchor radio search: `\"type\":\"1009\"`     * User search: `\"type\":\"1002\"` ### Returns: - Search results  # [示例/Example] keywords = \"周杰伦\" offset = \"0\" limit = \"20\" _type = \"1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_v1_api_v1_net_ease_cloud_music_app_search_v1_get_with_http_info(keywords, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keywords: 关键词/Keywords (required)
        :param str offset: 偏移量，保持默认即可/Offset, keep the default
        :param str limit: 每页数量，保持默认即可/Number per page, keep the default
        :param str type: 搜索类型/Search type
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keywords',
            'offset',
            'limit',
            'type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_v1_api_v1_net_ease_cloud_music_app_search_v1_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keywords' is set
        if self.api_client.client_side_validation and ('keywords' not in local_var_params or  # noqa: E501
                                                        local_var_params['keywords'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keywords` when calling `search_v1_api_v1_net_ease_cloud_music_app_search_v1_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keywords' in local_var_params and local_var_params['keywords'] is not None:  # noqa: E501
            query_params.append(('keywords', local_var_params['keywords']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('_type', local_var_params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/search_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_v1_api_v1_net_ease_cloud_music_app_search_v1_get_0(self, keywords, **kwargs):  # noqa: E501
        """搜索接口V1/Search interface V1  # noqa: E501

        # [中文] ### 用途: - 搜索接口V1。 ### 参数: - keywords: 关键词。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 - _type: 搜索类型     **搜索类型 (`type`)**：     * 单曲搜索：`\"type\":\"1\"`     * 歌手搜索：`\"type\":\"100\"`     * 专辑搜索：`\"type\":\"10\"`     * 歌单搜索：`\"type\":\"1000\"`     * MV搜索：`\"type\":\"1004\"`     * 主播电台搜索：`\"type\":\"1009\"`     * 用户搜索：`\"type\":\"1002\"` ### 返回: - 搜索结果  # [English] ### Purpose: - Search interface V1. ### Parameters: - keywords: Keywords. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. - _type: Search type     **Search type (`type`)**:     * Single search: `\"type\":\"1\"`     * Singer search: `\"type\":\"100\"`     * Album search: `\"type\":\"10\"`     * Playlist search: `\"type\":\"1000\"`     * MV search: `\"type\":\"1004\"`     * Anchor radio search: `\"type\":\"1009\"`     * User search: `\"type\":\"1002\"` ### Returns: - Search results  # [示例/Example] keywords = \"周杰伦\" offset = \"0\" limit = \"20\" _type = \"1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_v1_api_v1_net_ease_cloud_music_app_search_v1_get_0(keywords, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keywords: 关键词/Keywords (required)
        :param str offset: 偏移量，保持默认即可/Offset, keep the default
        :param str limit: 每页数量，保持默认即可/Number per page, keep the default
        :param str type: 搜索类型/Search type
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.search_v1_api_v1_net_ease_cloud_music_app_search_v1_get_0_with_http_info(keywords, **kwargs)  # noqa: E501

    def search_v1_api_v1_net_ease_cloud_music_app_search_v1_get_0_with_http_info(self, keywords, **kwargs):  # noqa: E501
        """搜索接口V1/Search interface V1  # noqa: E501

        # [中文] ### 用途: - 搜索接口V1。 ### 参数: - keywords: 关键词。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 - _type: 搜索类型     **搜索类型 (`type`)**：     * 单曲搜索：`\"type\":\"1\"`     * 歌手搜索：`\"type\":\"100\"`     * 专辑搜索：`\"type\":\"10\"`     * 歌单搜索：`\"type\":\"1000\"`     * MV搜索：`\"type\":\"1004\"`     * 主播电台搜索：`\"type\":\"1009\"`     * 用户搜索：`\"type\":\"1002\"` ### 返回: - 搜索结果  # [English] ### Purpose: - Search interface V1. ### Parameters: - keywords: Keywords. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. - _type: Search type     **Search type (`type`)**:     * Single search: `\"type\":\"1\"`     * Singer search: `\"type\":\"100\"`     * Album search: `\"type\":\"10\"`     * Playlist search: `\"type\":\"1000\"`     * MV search: `\"type\":\"1004\"`     * Anchor radio search: `\"type\":\"1009\"`     * User search: `\"type\":\"1002\"` ### Returns: - Search results  # [示例/Example] keywords = \"周杰伦\" offset = \"0\" limit = \"20\" _type = \"1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_v1_api_v1_net_ease_cloud_music_app_search_v1_get_0_with_http_info(keywords, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keywords: 关键词/Keywords (required)
        :param str offset: 偏移量，保持默认即可/Offset, keep the default
        :param str limit: 每页数量，保持默认即可/Number per page, keep the default
        :param str type: 搜索类型/Search type
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keywords',
            'offset',
            'limit',
            'type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_v1_api_v1_net_ease_cloud_music_app_search_v1_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keywords' is set
        if self.api_client.client_side_validation and ('keywords' not in local_var_params or  # noqa: E501
                                                        local_var_params['keywords'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keywords` when calling `search_v1_api_v1_net_ease_cloud_music_app_search_v1_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keywords' in local_var_params and local_var_params['keywords'] is not None:  # noqa: E501
            query_params.append(('keywords', local_var_params['keywords']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('_type', local_var_params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/net_ease_cloud_music/app/search_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
