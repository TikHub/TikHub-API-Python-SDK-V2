# coding: utf-8

"""
    TikHub.io - Your Ultimate Social Media Data & API Marketplace

    High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tikhub_sdk_v2.api_client import ApiClient
from tikhub_sdk_v2.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class XiaohongshuWebAPIApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_home_recommend_api_v1_xiaohongshu_web_get_home_recommend_post(self, **kwargs):  # noqa: E501
        """获取首页推荐/Get home recommend  # noqa: E501

        # [中文] ### 用途: - 获取首页推荐 ### 参数: - feed_type: 推荐类型     - 全部: 0     - 穿搭: 1     - 美食: 2     - 彩妆: 3     - 影视: 4     - 职场: 5     - 情感: 6     - 家居: 7     - 游戏: 8     - 旅行: 9     - 健身: 10 - need_filter_image: 是否只看图文笔记，默认为 False - cookie: 可选参数，用户自行提供的已登录的网页Cookie获取个性化推荐，如果不提供，则使用游客模式 - proxy: 可选参数，网络代理，可降低封号概率，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port ### 返回: - 推荐列表  # [English] ### Purpose: - Get home recommend ### Parameters: - feed_type: Feed type     - Dress: 1     - Food: 2     - Makeup: 3     - Film: 4     - Workplace: 5     - Emotion: 6     - Home: 7     - Game: 8     - Travel: 9     - Fitness: 10 - need_filter_image: Whether to view only image notes, default is False - cookie: Optional parameter, user-provided logged-in web Cookie to get personalized recommendations, if not provided, use visitor mode - proxy: Optional parameter, network proxy, can reduce the probability of account ban, format: http://username:password@IP:port ### Return: - Recommend list  # [示例/Example] feed_type=\"0\" need_filter_image=False  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_home_recommend_api_v1_xiaohongshu_web_get_home_recommend_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param GetHomeFeedRequest get_home_feed_request:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_home_recommend_api_v1_xiaohongshu_web_get_home_recommend_post_with_http_info(**kwargs)  # noqa: E501

    def get_home_recommend_api_v1_xiaohongshu_web_get_home_recommend_post_with_http_info(self, **kwargs):  # noqa: E501
        """获取首页推荐/Get home recommend  # noqa: E501

        # [中文] ### 用途: - 获取首页推荐 ### 参数: - feed_type: 推荐类型     - 全部: 0     - 穿搭: 1     - 美食: 2     - 彩妆: 3     - 影视: 4     - 职场: 5     - 情感: 6     - 家居: 7     - 游戏: 8     - 旅行: 9     - 健身: 10 - need_filter_image: 是否只看图文笔记，默认为 False - cookie: 可选参数，用户自行提供的已登录的网页Cookie获取个性化推荐，如果不提供，则使用游客模式 - proxy: 可选参数，网络代理，可降低封号概率，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port ### 返回: - 推荐列表  # [English] ### Purpose: - Get home recommend ### Parameters: - feed_type: Feed type     - Dress: 1     - Food: 2     - Makeup: 3     - Film: 4     - Workplace: 5     - Emotion: 6     - Home: 7     - Game: 8     - Travel: 9     - Fitness: 10 - need_filter_image: Whether to view only image notes, default is False - cookie: Optional parameter, user-provided logged-in web Cookie to get personalized recommendations, if not provided, use visitor mode - proxy: Optional parameter, network proxy, can reduce the probability of account ban, format: http://username:password@IP:port ### Return: - Recommend list  # [示例/Example] feed_type=\"0\" need_filter_image=False  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_home_recommend_api_v1_xiaohongshu_web_get_home_recommend_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param GetHomeFeedRequest get_home_feed_request:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'get_home_feed_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_home_recommend_api_v1_xiaohongshu_web_get_home_recommend_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_home_feed_request' in local_var_params:
            body_params = local_var_params['get_home_feed_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_home_recommend', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_home_recommend_api_v1_xiaohongshu_web_get_home_recommend_post_0(self, **kwargs):  # noqa: E501
        """获取首页推荐/Get home recommend  # noqa: E501

        # [中文] ### 用途: - 获取首页推荐 ### 参数: - feed_type: 推荐类型     - 全部: 0     - 穿搭: 1     - 美食: 2     - 彩妆: 3     - 影视: 4     - 职场: 5     - 情感: 6     - 家居: 7     - 游戏: 8     - 旅行: 9     - 健身: 10 - need_filter_image: 是否只看图文笔记，默认为 False - cookie: 可选参数，用户自行提供的已登录的网页Cookie获取个性化推荐，如果不提供，则使用游客模式 - proxy: 可选参数，网络代理，可降低封号概率，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port ### 返回: - 推荐列表  # [English] ### Purpose: - Get home recommend ### Parameters: - feed_type: Feed type     - Dress: 1     - Food: 2     - Makeup: 3     - Film: 4     - Workplace: 5     - Emotion: 6     - Home: 7     - Game: 8     - Travel: 9     - Fitness: 10 - need_filter_image: Whether to view only image notes, default is False - cookie: Optional parameter, user-provided logged-in web Cookie to get personalized recommendations, if not provided, use visitor mode - proxy: Optional parameter, network proxy, can reduce the probability of account ban, format: http://username:password@IP:port ### Return: - Recommend list  # [示例/Example] feed_type=\"0\" need_filter_image=False  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_home_recommend_api_v1_xiaohongshu_web_get_home_recommend_post_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param GetHomeFeedRequest get_home_feed_request:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_home_recommend_api_v1_xiaohongshu_web_get_home_recommend_post_0_with_http_info(**kwargs)  # noqa: E501

    def get_home_recommend_api_v1_xiaohongshu_web_get_home_recommend_post_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取首页推荐/Get home recommend  # noqa: E501

        # [中文] ### 用途: - 获取首页推荐 ### 参数: - feed_type: 推荐类型     - 全部: 0     - 穿搭: 1     - 美食: 2     - 彩妆: 3     - 影视: 4     - 职场: 5     - 情感: 6     - 家居: 7     - 游戏: 8     - 旅行: 9     - 健身: 10 - need_filter_image: 是否只看图文笔记，默认为 False - cookie: 可选参数，用户自行提供的已登录的网页Cookie获取个性化推荐，如果不提供，则使用游客模式 - proxy: 可选参数，网络代理，可降低封号概率，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port ### 返回: - 推荐列表  # [English] ### Purpose: - Get home recommend ### Parameters: - feed_type: Feed type     - Dress: 1     - Food: 2     - Makeup: 3     - Film: 4     - Workplace: 5     - Emotion: 6     - Home: 7     - Game: 8     - Travel: 9     - Fitness: 10 - need_filter_image: Whether to view only image notes, default is False - cookie: Optional parameter, user-provided logged-in web Cookie to get personalized recommendations, if not provided, use visitor mode - proxy: Optional parameter, network proxy, can reduce the probability of account ban, format: http://username:password@IP:port ### Return: - Recommend list  # [示例/Example] feed_type=\"0\" need_filter_image=False  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_home_recommend_api_v1_xiaohongshu_web_get_home_recommend_post_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param GetHomeFeedRequest get_home_feed_request:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'get_home_feed_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_home_recommend_api_v1_xiaohongshu_web_get_home_recommend_post_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_home_feed_request' in local_var_params:
            body_params = local_var_params['get_home_feed_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_home_recommend', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_get(self, note_id, comment_id, **kwargs):  # noqa: E501
        """获取笔记评论回复 V1/Get note comment replies V1  # noqa: E501

        # [中文] ### 用途: - 获取笔记评论回复 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_get(note_id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID (required)
        :param str comment_id: 评论ID/Comment ID (required)
        :param str last_cursor: 上一页的游标/Last cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_get_with_http_info(note_id, comment_id, **kwargs)  # noqa: E501

    def get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_get_with_http_info(self, note_id, comment_id, **kwargs):  # noqa: E501
        """获取笔记评论回复 V1/Get note comment replies V1  # noqa: E501

        # [中文] ### 用途: - 获取笔记评论回复 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_get_with_http_info(note_id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID (required)
        :param str comment_id: 评论ID/Comment ID (required)
        :param str last_cursor: 上一页的游标/Last cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'note_id',
            'comment_id',
            'last_cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'note_id' is set
        if self.api_client.client_side_validation and ('note_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['note_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `note_id` when calling `get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_get`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if self.api_client.client_side_validation and ('comment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['comment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `comment_id` when calling `get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'note_id' in local_var_params and local_var_params['note_id'] is not None:  # noqa: E501
            query_params.append(('note_id', local_var_params['note_id']))  # noqa: E501
        if 'comment_id' in local_var_params and local_var_params['comment_id'] is not None:  # noqa: E501
            query_params.append(('comment_id', local_var_params['comment_id']))  # noqa: E501
        if 'last_cursor' in local_var_params and local_var_params['last_cursor'] is not None:  # noqa: E501
            query_params.append(('lastCursor', local_var_params['last_cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_note_comment_replies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_get_0(self, note_id, comment_id, **kwargs):  # noqa: E501
        """获取笔记评论回复 V1/Get note comment replies V1  # noqa: E501

        # [中文] ### 用途: - 获取笔记评论回复 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_get_0(note_id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID (required)
        :param str comment_id: 评论ID/Comment ID (required)
        :param str last_cursor: 上一页的游标/Last cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_get_0_with_http_info(note_id, comment_id, **kwargs)  # noqa: E501

    def get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_get_0_with_http_info(self, note_id, comment_id, **kwargs):  # noqa: E501
        """获取笔记评论回复 V1/Get note comment replies V1  # noqa: E501

        # [中文] ### 用途: - 获取笔记评论回复 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_get_0_with_http_info(note_id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID (required)
        :param str comment_id: 评论ID/Comment ID (required)
        :param str last_cursor: 上一页的游标/Last cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'note_id',
            'comment_id',
            'last_cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'note_id' is set
        if self.api_client.client_side_validation and ('note_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['note_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `note_id` when calling `get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_get_0`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if self.api_client.client_side_validation and ('comment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['comment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `comment_id` when calling `get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'note_id' in local_var_params and local_var_params['note_id'] is not None:  # noqa: E501
            query_params.append(('note_id', local_var_params['note_id']))  # noqa: E501
        if 'comment_id' in local_var_params and local_var_params['comment_id'] is not None:  # noqa: E501
            query_params.append(('comment_id', local_var_params['comment_id']))  # noqa: E501
        if 'last_cursor' in local_var_params and local_var_params['last_cursor'] is not None:  # noqa: E501
            query_params.append(('lastCursor', local_var_params['last_cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_note_comment_replies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_v2_get(self, note_id, comment_id, **kwargs):  # noqa: E501
        """获取笔记评论回复 V2/Get note comment replies V2  # noqa: E501

        # [中文] ### 用途: - 获取笔记评论回复 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_v2_get(note_id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID (required)
        :param str comment_id: 评论ID/Comment ID (required)
        :param str last_cursor: 上一页的游标/Last cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_v2_get_with_http_info(note_id, comment_id, **kwargs)  # noqa: E501

    def get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_v2_get_with_http_info(self, note_id, comment_id, **kwargs):  # noqa: E501
        """获取笔记评论回复 V2/Get note comment replies V2  # noqa: E501

        # [中文] ### 用途: - 获取笔记评论回复 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_v2_get_with_http_info(note_id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID (required)
        :param str comment_id: 评论ID/Comment ID (required)
        :param str last_cursor: 上一页的游标/Last cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'note_id',
            'comment_id',
            'last_cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_v2_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'note_id' is set
        if self.api_client.client_side_validation and ('note_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['note_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `note_id` when calling `get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_v2_get`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if self.api_client.client_side_validation and ('comment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['comment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `comment_id` when calling `get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_v2_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'note_id' in local_var_params and local_var_params['note_id'] is not None:  # noqa: E501
            query_params.append(('note_id', local_var_params['note_id']))  # noqa: E501
        if 'comment_id' in local_var_params and local_var_params['comment_id'] is not None:  # noqa: E501
            query_params.append(('comment_id', local_var_params['comment_id']))  # noqa: E501
        if 'last_cursor' in local_var_params and local_var_params['last_cursor'] is not None:  # noqa: E501
            query_params.append(('lastCursor', local_var_params['last_cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_note_comment_replies_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_v2_get_0(self, note_id, comment_id, **kwargs):  # noqa: E501
        """获取笔记评论回复 V2/Get note comment replies V2  # noqa: E501

        # [中文] ### 用途: - 获取笔记评论回复 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_v2_get_0(note_id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID (required)
        :param str comment_id: 评论ID/Comment ID (required)
        :param str last_cursor: 上一页的游标/Last cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_v2_get_0_with_http_info(note_id, comment_id, **kwargs)  # noqa: E501

    def get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_v2_get_0_with_http_info(self, note_id, comment_id, **kwargs):  # noqa: E501
        """获取笔记评论回复 V2/Get note comment replies V2  # noqa: E501

        # [中文] ### 用途: - 获取笔记评论回复 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_v2_get_0_with_http_info(note_id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID (required)
        :param str comment_id: 评论ID/Comment ID (required)
        :param str last_cursor: 上一页的游标/Last cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'note_id',
            'comment_id',
            'last_cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_v2_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'note_id' is set
        if self.api_client.client_side_validation and ('note_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['note_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `note_id` when calling `get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_v2_get_0`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if self.api_client.client_side_validation and ('comment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['comment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `comment_id` when calling `get_note_comment_replies_api_v1_xiaohongshu_web_get_note_comment_replies_v2_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'note_id' in local_var_params and local_var_params['note_id'] is not None:  # noqa: E501
            query_params.append(('note_id', local_var_params['note_id']))  # noqa: E501
        if 'comment_id' in local_var_params and local_var_params['comment_id'] is not None:  # noqa: E501
            query_params.append(('comment_id', local_var_params['comment_id']))  # noqa: E501
        if 'last_cursor' in local_var_params and local_var_params['last_cursor'] is not None:  # noqa: E501
            query_params.append(('lastCursor', local_var_params['last_cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_note_comment_replies_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_note_comments_api_v1_xiaohongshu_web_get_note_comments_get(self, note_id, **kwargs):  # noqa: E501
        """获取笔记评论 V1/Get note comments V1  # noqa: E501

        # [中文] ### 用途: - 获取笔记评论 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_comments_api_v1_xiaohongshu_web_get_note_comments_get(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID (required)
        :param str last_cursor: 上一页的游标/Last cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_note_comments_api_v1_xiaohongshu_web_get_note_comments_get_with_http_info(note_id, **kwargs)  # noqa: E501

    def get_note_comments_api_v1_xiaohongshu_web_get_note_comments_get_with_http_info(self, note_id, **kwargs):  # noqa: E501
        """获取笔记评论 V1/Get note comments V1  # noqa: E501

        # [中文] ### 用途: - 获取笔记评论 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_comments_api_v1_xiaohongshu_web_get_note_comments_get_with_http_info(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID (required)
        :param str last_cursor: 上一页的游标/Last cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'note_id',
            'last_cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_note_comments_api_v1_xiaohongshu_web_get_note_comments_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'note_id' is set
        if self.api_client.client_side_validation and ('note_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['note_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `note_id` when calling `get_note_comments_api_v1_xiaohongshu_web_get_note_comments_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'note_id' in local_var_params and local_var_params['note_id'] is not None:  # noqa: E501
            query_params.append(('note_id', local_var_params['note_id']))  # noqa: E501
        if 'last_cursor' in local_var_params and local_var_params['last_cursor'] is not None:  # noqa: E501
            query_params.append(('lastCursor', local_var_params['last_cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_note_comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_note_comments_api_v1_xiaohongshu_web_get_note_comments_get_0(self, note_id, **kwargs):  # noqa: E501
        """获取笔记评论 V1/Get note comments V1  # noqa: E501

        # [中文] ### 用途: - 获取笔记评论 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_comments_api_v1_xiaohongshu_web_get_note_comments_get_0(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID (required)
        :param str last_cursor: 上一页的游标/Last cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_note_comments_api_v1_xiaohongshu_web_get_note_comments_get_0_with_http_info(note_id, **kwargs)  # noqa: E501

    def get_note_comments_api_v1_xiaohongshu_web_get_note_comments_get_0_with_http_info(self, note_id, **kwargs):  # noqa: E501
        """获取笔记评论 V1/Get note comments V1  # noqa: E501

        # [中文] ### 用途: - 获取笔记评论 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_comments_api_v1_xiaohongshu_web_get_note_comments_get_0_with_http_info(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID (required)
        :param str last_cursor: 上一页的游标/Last cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'note_id',
            'last_cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_note_comments_api_v1_xiaohongshu_web_get_note_comments_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'note_id' is set
        if self.api_client.client_side_validation and ('note_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['note_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `note_id` when calling `get_note_comments_api_v1_xiaohongshu_web_get_note_comments_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'note_id' in local_var_params and local_var_params['note_id'] is not None:  # noqa: E501
            query_params.append(('note_id', local_var_params['note_id']))  # noqa: E501
        if 'last_cursor' in local_var_params and local_var_params['last_cursor'] is not None:  # noqa: E501
            query_params.append(('lastCursor', local_var_params['last_cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_note_comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_note_comments_api_v1_xiaohongshu_web_get_note_comments_v2_get(self, note_id, **kwargs):  # noqa: E501
        """获取笔记评论 V2/Get note comments V2  # noqa: E501

        # [中文] ### 用途: - 获取笔记评论 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_comments_api_v1_xiaohongshu_web_get_note_comments_v2_get(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID (required)
        :param str last_cursor: 上一页的游标/Last cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_note_comments_api_v1_xiaohongshu_web_get_note_comments_v2_get_with_http_info(note_id, **kwargs)  # noqa: E501

    def get_note_comments_api_v1_xiaohongshu_web_get_note_comments_v2_get_with_http_info(self, note_id, **kwargs):  # noqa: E501
        """获取笔记评论 V2/Get note comments V2  # noqa: E501

        # [中文] ### 用途: - 获取笔记评论 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_comments_api_v1_xiaohongshu_web_get_note_comments_v2_get_with_http_info(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID (required)
        :param str last_cursor: 上一页的游标/Last cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'note_id',
            'last_cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_note_comments_api_v1_xiaohongshu_web_get_note_comments_v2_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'note_id' is set
        if self.api_client.client_side_validation and ('note_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['note_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `note_id` when calling `get_note_comments_api_v1_xiaohongshu_web_get_note_comments_v2_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'note_id' in local_var_params and local_var_params['note_id'] is not None:  # noqa: E501
            query_params.append(('note_id', local_var_params['note_id']))  # noqa: E501
        if 'last_cursor' in local_var_params and local_var_params['last_cursor'] is not None:  # noqa: E501
            query_params.append(('lastCursor', local_var_params['last_cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_note_comments_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_note_comments_api_v1_xiaohongshu_web_get_note_comments_v2_get_0(self, note_id, **kwargs):  # noqa: E501
        """获取笔记评论 V2/Get note comments V2  # noqa: E501

        # [中文] ### 用途: - 获取笔记评论 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_comments_api_v1_xiaohongshu_web_get_note_comments_v2_get_0(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID (required)
        :param str last_cursor: 上一页的游标/Last cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_note_comments_api_v1_xiaohongshu_web_get_note_comments_v2_get_0_with_http_info(note_id, **kwargs)  # noqa: E501

    def get_note_comments_api_v1_xiaohongshu_web_get_note_comments_v2_get_0_with_http_info(self, note_id, **kwargs):  # noqa: E501
        """获取笔记评论 V2/Get note comments V2  # noqa: E501

        # [中文] ### 用途: - 获取笔记评论 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_comments_api_v1_xiaohongshu_web_get_note_comments_v2_get_0_with_http_info(note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID (required)
        :param str last_cursor: 上一页的游标/Last cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'note_id',
            'last_cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_note_comments_api_v1_xiaohongshu_web_get_note_comments_v2_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'note_id' is set
        if self.api_client.client_side_validation and ('note_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['note_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `note_id` when calling `get_note_comments_api_v1_xiaohongshu_web_get_note_comments_v2_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'note_id' in local_var_params and local_var_params['note_id'] is not None:  # noqa: E501
            query_params.append(('note_id', local_var_params['note_id']))  # noqa: E501
        if 'last_cursor' in local_var_params and local_var_params['last_cursor'] is not None:  # noqa: E501
            query_params.append(('lastCursor', local_var_params['last_cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_note_comments_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_note_id_and_xsec_token_api_v1_xiaohongshu_web_get_note_id_and_xsec_token_get(self, share_text, **kwargs):  # noqa: E501
        """通过分享链接获取小红书的Note ID 和 xsec_token/Get Xiaohongshu Note ID and xsec_token by share link  # noqa: E501

        # [中文] ### 用途: - 通过分享链接获取小红书的Note ID 和 xsec_token ### 参数: - share_text: 小红书分享链接（支持APP和Web端分享链接） ### 返回: - Note ID 和 xsec_token  # [English] ### Purpose: - Get Xiaohongshu Note ID and xsec_token by share link ### Parameters: - share_text: Xiaohongshu sharing link (support APP and Web sharing link) ### Return: - Note ID and xsec_token  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_id_and_xsec_token_api_v1_xiaohongshu_web_get_note_id_and_xsec_token_get(share_text, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_text: 分享链接/Share link (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_note_id_and_xsec_token_api_v1_xiaohongshu_web_get_note_id_and_xsec_token_get_with_http_info(share_text, **kwargs)  # noqa: E501

    def get_note_id_and_xsec_token_api_v1_xiaohongshu_web_get_note_id_and_xsec_token_get_with_http_info(self, share_text, **kwargs):  # noqa: E501
        """通过分享链接获取小红书的Note ID 和 xsec_token/Get Xiaohongshu Note ID and xsec_token by share link  # noqa: E501

        # [中文] ### 用途: - 通过分享链接获取小红书的Note ID 和 xsec_token ### 参数: - share_text: 小红书分享链接（支持APP和Web端分享链接） ### 返回: - Note ID 和 xsec_token  # [English] ### Purpose: - Get Xiaohongshu Note ID and xsec_token by share link ### Parameters: - share_text: Xiaohongshu sharing link (support APP and Web sharing link) ### Return: - Note ID and xsec_token  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_id_and_xsec_token_api_v1_xiaohongshu_web_get_note_id_and_xsec_token_get_with_http_info(share_text, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_text: 分享链接/Share link (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'share_text'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_note_id_and_xsec_token_api_v1_xiaohongshu_web_get_note_id_and_xsec_token_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'share_text' is set
        if self.api_client.client_side_validation and ('share_text' not in local_var_params or  # noqa: E501
                                                        local_var_params['share_text'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `share_text` when calling `get_note_id_and_xsec_token_api_v1_xiaohongshu_web_get_note_id_and_xsec_token_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'share_text' in local_var_params and local_var_params['share_text'] is not None:  # noqa: E501
            query_params.append(('share_text', local_var_params['share_text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_note_id_and_xsec_token', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_note_id_and_xsec_token_api_v1_xiaohongshu_web_get_note_id_and_xsec_token_get_0(self, share_text, **kwargs):  # noqa: E501
        """通过分享链接获取小红书的Note ID 和 xsec_token/Get Xiaohongshu Note ID and xsec_token by share link  # noqa: E501

        # [中文] ### 用途: - 通过分享链接获取小红书的Note ID 和 xsec_token ### 参数: - share_text: 小红书分享链接（支持APP和Web端分享链接） ### 返回: - Note ID 和 xsec_token  # [English] ### Purpose: - Get Xiaohongshu Note ID and xsec_token by share link ### Parameters: - share_text: Xiaohongshu sharing link (support APP and Web sharing link) ### Return: - Note ID and xsec_token  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_id_and_xsec_token_api_v1_xiaohongshu_web_get_note_id_and_xsec_token_get_0(share_text, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_text: 分享链接/Share link (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_note_id_and_xsec_token_api_v1_xiaohongshu_web_get_note_id_and_xsec_token_get_0_with_http_info(share_text, **kwargs)  # noqa: E501

    def get_note_id_and_xsec_token_api_v1_xiaohongshu_web_get_note_id_and_xsec_token_get_0_with_http_info(self, share_text, **kwargs):  # noqa: E501
        """通过分享链接获取小红书的Note ID 和 xsec_token/Get Xiaohongshu Note ID and xsec_token by share link  # noqa: E501

        # [中文] ### 用途: - 通过分享链接获取小红书的Note ID 和 xsec_token ### 参数: - share_text: 小红书分享链接（支持APP和Web端分享链接） ### 返回: - Note ID 和 xsec_token  # [English] ### Purpose: - Get Xiaohongshu Note ID and xsec_token by share link ### Parameters: - share_text: Xiaohongshu sharing link (support APP and Web sharing link) ### Return: - Note ID and xsec_token  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_id_and_xsec_token_api_v1_xiaohongshu_web_get_note_id_and_xsec_token_get_0_with_http_info(share_text, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_text: 分享链接/Share link (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'share_text'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_note_id_and_xsec_token_api_v1_xiaohongshu_web_get_note_id_and_xsec_token_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'share_text' is set
        if self.api_client.client_side_validation and ('share_text' not in local_var_params or  # noqa: E501
                                                        local_var_params['share_text'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `share_text` when calling `get_note_id_and_xsec_token_api_v1_xiaohongshu_web_get_note_id_and_xsec_token_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'share_text' in local_var_params and local_var_params['share_text'] is not None:  # noqa: E501
            query_params.append(('share_text', local_var_params['share_text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_note_id_and_xsec_token', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_note_info_v1_api_v1_xiaohongshu_web_get_note_info_get(self, **kwargs):  # noqa: E501
        """获取笔记信息 V1/Get note info V1  # noqa: E501

        # [中文] ### 用途: - 获取笔记信息 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_info_v1_api_v1_xiaohongshu_web_get_note_info_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID
        :param str share_text: 分享链接/Share link
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_note_info_v1_api_v1_xiaohongshu_web_get_note_info_get_with_http_info(**kwargs)  # noqa: E501

    def get_note_info_v1_api_v1_xiaohongshu_web_get_note_info_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取笔记信息 V1/Get note info V1  # noqa: E501

        # [中文] ### 用途: - 获取笔记信息 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_info_v1_api_v1_xiaohongshu_web_get_note_info_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID
        :param str share_text: 分享链接/Share link
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'note_id',
            'share_text'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_note_info_v1_api_v1_xiaohongshu_web_get_note_info_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'note_id' in local_var_params and local_var_params['note_id'] is not None:  # noqa: E501
            query_params.append(('note_id', local_var_params['note_id']))  # noqa: E501
        if 'share_text' in local_var_params and local_var_params['share_text'] is not None:  # noqa: E501
            query_params.append(('share_text', local_var_params['share_text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_note_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_note_info_v1_api_v1_xiaohongshu_web_get_note_info_get_0(self, **kwargs):  # noqa: E501
        """获取笔记信息 V1/Get note info V1  # noqa: E501

        # [中文] ### 用途: - 获取笔记信息 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_info_v1_api_v1_xiaohongshu_web_get_note_info_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID
        :param str share_text: 分享链接/Share link
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_note_info_v1_api_v1_xiaohongshu_web_get_note_info_get_0_with_http_info(**kwargs)  # noqa: E501

    def get_note_info_v1_api_v1_xiaohongshu_web_get_note_info_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取笔记信息 V1/Get note info V1  # noqa: E501

        # [中文] ### 用途: - 获取笔记信息 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_info_v1_api_v1_xiaohongshu_web_get_note_info_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID
        :param str share_text: 分享链接/Share link
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'note_id',
            'share_text'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_note_info_v1_api_v1_xiaohongshu_web_get_note_info_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'note_id' in local_var_params and local_var_params['note_id'] is not None:  # noqa: E501
            query_params.append(('note_id', local_var_params['note_id']))  # noqa: E501
        if 'share_text' in local_var_params and local_var_params['share_text'] is not None:  # noqa: E501
            query_params.append(('share_text', local_var_params['share_text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_note_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_note_info_v2_api_v1_xiaohongshu_web_get_note_info_v2_get(self, **kwargs):  # noqa: E501
        """获取笔记信息 V2/Get note info V2  # noqa: E501

        # [中文] ### 用途: - 获取笔记信息 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_info_v2_api_v1_xiaohongshu_web_get_note_info_v2_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID
        :param str share_text: 分享链接/Share link
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_note_info_v2_api_v1_xiaohongshu_web_get_note_info_v2_get_with_http_info(**kwargs)  # noqa: E501

    def get_note_info_v2_api_v1_xiaohongshu_web_get_note_info_v2_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取笔记信息 V2/Get note info V2  # noqa: E501

        # [中文] ### 用途: - 获取笔记信息 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_info_v2_api_v1_xiaohongshu_web_get_note_info_v2_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID
        :param str share_text: 分享链接/Share link
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'note_id',
            'share_text'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_note_info_v2_api_v1_xiaohongshu_web_get_note_info_v2_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'note_id' in local_var_params and local_var_params['note_id'] is not None:  # noqa: E501
            query_params.append(('note_id', local_var_params['note_id']))  # noqa: E501
        if 'share_text' in local_var_params and local_var_params['share_text'] is not None:  # noqa: E501
            query_params.append(('share_text', local_var_params['share_text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_note_info_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_note_info_v2_api_v1_xiaohongshu_web_get_note_info_v2_get_0(self, **kwargs):  # noqa: E501
        """获取笔记信息 V2/Get note info V2  # noqa: E501

        # [中文] ### 用途: - 获取笔记信息 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_info_v2_api_v1_xiaohongshu_web_get_note_info_v2_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID
        :param str share_text: 分享链接/Share link
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_note_info_v2_api_v1_xiaohongshu_web_get_note_info_v2_get_0_with_http_info(**kwargs)  # noqa: E501

    def get_note_info_v2_api_v1_xiaohongshu_web_get_note_info_v2_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取笔记信息 V2/Get note info V2  # noqa: E501

        # [中文] ### 用途: - 获取笔记信息 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_info_v2_api_v1_xiaohongshu_web_get_note_info_v2_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID
        :param str share_text: 分享链接/Share link
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'note_id',
            'share_text'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_note_info_v2_api_v1_xiaohongshu_web_get_note_info_v2_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'note_id' in local_var_params and local_var_params['note_id'] is not None:  # noqa: E501
            query_params.append(('note_id', local_var_params['note_id']))  # noqa: E501
        if 'share_text' in local_var_params and local_var_params['share_text'] is not None:  # noqa: E501
            query_params.append(('share_text', local_var_params['share_text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_note_info_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_note_info_v3_api_v1_xiaohongshu_web_get_note_info_v3_get(self, share_text, **kwargs):  # noqa: E501
        """获取笔记信息 V3 (游客)/Get note info V3 (Visitor)  # noqa: E501

        # [中文] ### 用途: - 获取笔记信息V3，仅支持完整的小红书分享链接 ### 参数: - share_text: 完整的小红书分享链接（支持APP和Web端分享链接） ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V3, only support complete Xiaohongshu sharing link ### Parameters: - share_text: Complete Xiaohongshu sharing link(support APP and Web sharing link) ### Return: - Note info  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_info_v3_api_v1_xiaohongshu_web_get_note_info_v3_get(share_text, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_text: 分享链接/Share link (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_note_info_v3_api_v1_xiaohongshu_web_get_note_info_v3_get_with_http_info(share_text, **kwargs)  # noqa: E501

    def get_note_info_v3_api_v1_xiaohongshu_web_get_note_info_v3_get_with_http_info(self, share_text, **kwargs):  # noqa: E501
        """获取笔记信息 V3 (游客)/Get note info V3 (Visitor)  # noqa: E501

        # [中文] ### 用途: - 获取笔记信息V3，仅支持完整的小红书分享链接 ### 参数: - share_text: 完整的小红书分享链接（支持APP和Web端分享链接） ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V3, only support complete Xiaohongshu sharing link ### Parameters: - share_text: Complete Xiaohongshu sharing link(support APP and Web sharing link) ### Return: - Note info  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_info_v3_api_v1_xiaohongshu_web_get_note_info_v3_get_with_http_info(share_text, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_text: 分享链接/Share link (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'share_text'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_note_info_v3_api_v1_xiaohongshu_web_get_note_info_v3_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'share_text' is set
        if self.api_client.client_side_validation and ('share_text' not in local_var_params or  # noqa: E501
                                                        local_var_params['share_text'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `share_text` when calling `get_note_info_v3_api_v1_xiaohongshu_web_get_note_info_v3_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'share_text' in local_var_params and local_var_params['share_text'] is not None:  # noqa: E501
            query_params.append(('share_text', local_var_params['share_text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_note_info_v3', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_note_info_v3_api_v1_xiaohongshu_web_get_note_info_v3_get_0(self, share_text, **kwargs):  # noqa: E501
        """获取笔记信息 V3 (游客)/Get note info V3 (Visitor)  # noqa: E501

        # [中文] ### 用途: - 获取笔记信息V3，仅支持完整的小红书分享链接 ### 参数: - share_text: 完整的小红书分享链接（支持APP和Web端分享链接） ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V3, only support complete Xiaohongshu sharing link ### Parameters: - share_text: Complete Xiaohongshu sharing link(support APP and Web sharing link) ### Return: - Note info  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_info_v3_api_v1_xiaohongshu_web_get_note_info_v3_get_0(share_text, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_text: 分享链接/Share link (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_note_info_v3_api_v1_xiaohongshu_web_get_note_info_v3_get_0_with_http_info(share_text, **kwargs)  # noqa: E501

    def get_note_info_v3_api_v1_xiaohongshu_web_get_note_info_v3_get_0_with_http_info(self, share_text, **kwargs):  # noqa: E501
        """获取笔记信息 V3 (游客)/Get note info V3 (Visitor)  # noqa: E501

        # [中文] ### 用途: - 获取笔记信息V3，仅支持完整的小红书分享链接 ### 参数: - share_text: 完整的小红书分享链接（支持APP和Web端分享链接） ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V3, only support complete Xiaohongshu sharing link ### Parameters: - share_text: Complete Xiaohongshu sharing link(support APP and Web sharing link) ### Return: - Note info  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_info_v3_api_v1_xiaohongshu_web_get_note_info_v3_get_0_with_http_info(share_text, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_text: 分享链接/Share link (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'share_text'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_note_info_v3_api_v1_xiaohongshu_web_get_note_info_v3_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'share_text' is set
        if self.api_client.client_side_validation and ('share_text' not in local_var_params or  # noqa: E501
                                                        local_var_params['share_text'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `share_text` when calling `get_note_info_v3_api_v1_xiaohongshu_web_get_note_info_v3_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'share_text' in local_var_params and local_var_params['share_text'] is not None:  # noqa: E501
            query_params.append(('share_text', local_var_params['share_text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_note_info_v3', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_note_info_v4_api_v1_xiaohongshu_web_get_note_info_v4_get(self, **kwargs):  # noqa: E501
        """获取笔记信息 V4/Get note info V4  # noqa: E501

        # [中文] ### 用途: - 获取笔记信息V4 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V4 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_info_v4_api_v1_xiaohongshu_web_get_note_info_v4_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID
        :param str share_text: 分享链接/Share link
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_note_info_v4_api_v1_xiaohongshu_web_get_note_info_v4_get_with_http_info(**kwargs)  # noqa: E501

    def get_note_info_v4_api_v1_xiaohongshu_web_get_note_info_v4_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取笔记信息 V4/Get note info V4  # noqa: E501

        # [中文] ### 用途: - 获取笔记信息V4 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V4 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_info_v4_api_v1_xiaohongshu_web_get_note_info_v4_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID
        :param str share_text: 分享链接/Share link
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'note_id',
            'share_text'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_note_info_v4_api_v1_xiaohongshu_web_get_note_info_v4_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'note_id' in local_var_params and local_var_params['note_id'] is not None:  # noqa: E501
            query_params.append(('note_id', local_var_params['note_id']))  # noqa: E501
        if 'share_text' in local_var_params and local_var_params['share_text'] is not None:  # noqa: E501
            query_params.append(('share_text', local_var_params['share_text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_note_info_v4', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_note_info_v4_api_v1_xiaohongshu_web_get_note_info_v4_get_0(self, **kwargs):  # noqa: E501
        """获取笔记信息 V4/Get note info V4  # noqa: E501

        # [中文] ### 用途: - 获取笔记信息V4 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V4 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_info_v4_api_v1_xiaohongshu_web_get_note_info_v4_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID
        :param str share_text: 分享链接/Share link
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_note_info_v4_api_v1_xiaohongshu_web_get_note_info_v4_get_0_with_http_info(**kwargs)  # noqa: E501

    def get_note_info_v4_api_v1_xiaohongshu_web_get_note_info_v4_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取笔记信息 V4/Get note info V4  # noqa: E501

        # [中文] ### 用途: - 获取笔记信息V4 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V4 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_info_v4_api_v1_xiaohongshu_web_get_note_info_v4_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str note_id: 笔记ID/Note ID
        :param str share_text: 分享链接/Share link
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'note_id',
            'share_text'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_note_info_v4_api_v1_xiaohongshu_web_get_note_info_v4_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'note_id' in local_var_params and local_var_params['note_id'] is not None:  # noqa: E501
            query_params.append(('note_id', local_var_params['note_id']))  # noqa: E501
        if 'share_text' in local_var_params and local_var_params['share_text'] is not None:  # noqa: E501
            query_params.append(('share_text', local_var_params['share_text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_note_info_v4', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_note_info_v5_api_v1_xiaohongshu_web_get_note_info_v5_post(self, **kwargs):  # noqa: E501
        """获取笔记信息 V5 (自带Cookie)/Get note info V5 (Self-provided Cookie)  # noqa: E501

        # [中文] ### 用途: - 获取笔记信息V5，用户自行提供Cookie来获取笔记信息 - 此接口收费0.001$ ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - xsec_token: X-Sec-Token，可以从搜索接口中获取，分享链接中也有/X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: 用户自行提供的已登录的网页Cookie - proxy: 代理，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port - 最好使用代理，避免被封号或其他未知问题。  ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V5, user provides Cookie to get note info - This interface charges 0.001$ ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - xsec_token: X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: User provided logged-in web Cookie - proxy: Proxy, format: http://username:password@IP:port - It is recommended to use a proxy to avoid being banned or other unknown issues. ### Return: - Note info  # [示例/Example] note_id = \"67855d09000000001703d449\" xsec_token = \"ABfpRSESmZDRbX-EX7lzEztktMngxPVC9kU-dgQmuQoNo=\" cookie = \"Your Cookie\" proxy = \"http://username:password@IP:port\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_info_v5_api_v1_xiaohongshu_web_get_note_info_v5_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param GetNoteInfoV5Request get_note_info_v5_request:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_note_info_v5_api_v1_xiaohongshu_web_get_note_info_v5_post_with_http_info(**kwargs)  # noqa: E501

    def get_note_info_v5_api_v1_xiaohongshu_web_get_note_info_v5_post_with_http_info(self, **kwargs):  # noqa: E501
        """获取笔记信息 V5 (自带Cookie)/Get note info V5 (Self-provided Cookie)  # noqa: E501

        # [中文] ### 用途: - 获取笔记信息V5，用户自行提供Cookie来获取笔记信息 - 此接口收费0.001$ ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - xsec_token: X-Sec-Token，可以从搜索接口中获取，分享链接中也有/X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: 用户自行提供的已登录的网页Cookie - proxy: 代理，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port - 最好使用代理，避免被封号或其他未知问题。  ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V5, user provides Cookie to get note info - This interface charges 0.001$ ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - xsec_token: X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: User provided logged-in web Cookie - proxy: Proxy, format: http://username:password@IP:port - It is recommended to use a proxy to avoid being banned or other unknown issues. ### Return: - Note info  # [示例/Example] note_id = \"67855d09000000001703d449\" xsec_token = \"ABfpRSESmZDRbX-EX7lzEztktMngxPVC9kU-dgQmuQoNo=\" cookie = \"Your Cookie\" proxy = \"http://username:password@IP:port\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_info_v5_api_v1_xiaohongshu_web_get_note_info_v5_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param GetNoteInfoV5Request get_note_info_v5_request:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'get_note_info_v5_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_note_info_v5_api_v1_xiaohongshu_web_get_note_info_v5_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_note_info_v5_request' in local_var_params:
            body_params = local_var_params['get_note_info_v5_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_note_info_v5', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_note_info_v5_api_v1_xiaohongshu_web_get_note_info_v5_post_0(self, **kwargs):  # noqa: E501
        """获取笔记信息 V5 (自带Cookie)/Get note info V5 (Self-provided Cookie)  # noqa: E501

        # [中文] ### 用途: - 获取笔记信息V5，用户自行提供Cookie来获取笔记信息 - 此接口收费0.001$ ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - xsec_token: X-Sec-Token，可以从搜索接口中获取，分享链接中也有/X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: 用户自行提供的已登录的网页Cookie - proxy: 代理，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port - 最好使用代理，避免被封号或其他未知问题。  ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V5, user provides Cookie to get note info - This interface charges 0.001$ ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - xsec_token: X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: User provided logged-in web Cookie - proxy: Proxy, format: http://username:password@IP:port - It is recommended to use a proxy to avoid being banned or other unknown issues. ### Return: - Note info  # [示例/Example] note_id = \"67855d09000000001703d449\" xsec_token = \"ABfpRSESmZDRbX-EX7lzEztktMngxPVC9kU-dgQmuQoNo=\" cookie = \"Your Cookie\" proxy = \"http://username:password@IP:port\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_info_v5_api_v1_xiaohongshu_web_get_note_info_v5_post_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param GetNoteInfoV5Request get_note_info_v5_request:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_note_info_v5_api_v1_xiaohongshu_web_get_note_info_v5_post_0_with_http_info(**kwargs)  # noqa: E501

    def get_note_info_v5_api_v1_xiaohongshu_web_get_note_info_v5_post_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取笔记信息 V5 (自带Cookie)/Get note info V5 (Self-provided Cookie)  # noqa: E501

        # [中文] ### 用途: - 获取笔记信息V5，用户自行提供Cookie来获取笔记信息 - 此接口收费0.001$ ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - xsec_token: X-Sec-Token，可以从搜索接口中获取，分享链接中也有/X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: 用户自行提供的已登录的网页Cookie - proxy: 代理，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port - 最好使用代理，避免被封号或其他未知问题。  ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V5, user provides Cookie to get note info - This interface charges 0.001$ ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - xsec_token: X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: User provided logged-in web Cookie - proxy: Proxy, format: http://username:password@IP:port - It is recommended to use a proxy to avoid being banned or other unknown issues. ### Return: - Note info  # [示例/Example] note_id = \"67855d09000000001703d449\" xsec_token = \"ABfpRSESmZDRbX-EX7lzEztktMngxPVC9kU-dgQmuQoNo=\" cookie = \"Your Cookie\" proxy = \"http://username:password@IP:port\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_note_info_v5_api_v1_xiaohongshu_web_get_note_info_v5_post_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param GetNoteInfoV5Request get_note_info_v5_request:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'get_note_info_v5_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_note_info_v5_api_v1_xiaohongshu_web_get_note_info_v5_post_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_note_info_v5_request' in local_var_params:
            body_params = local_var_params['get_note_info_v5_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_note_info_v5', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_info_api_v1_xiaohongshu_web_get_user_info_get(self, user_id, **kwargs):  # noqa: E501
        """获取用户信息 V1/Get user info V1  # noqa: E501

        # [中文] ### 用途: - 获取用户信息 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_info_api_v1_xiaohongshu_web_get_user_info_get(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户ID/User ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_user_info_api_v1_xiaohongshu_web_get_user_info_get_with_http_info(user_id, **kwargs)  # noqa: E501

    def get_user_info_api_v1_xiaohongshu_web_get_user_info_get_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """获取用户信息 V1/Get user info V1  # noqa: E501

        # [中文] ### 用途: - 获取用户信息 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_info_api_v1_xiaohongshu_web_get_user_info_get_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户ID/User ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_info_api_v1_xiaohongshu_web_get_user_info_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `get_user_info_api_v1_xiaohongshu_web_get_user_info_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_user_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_info_api_v1_xiaohongshu_web_get_user_info_get_0(self, user_id, **kwargs):  # noqa: E501
        """获取用户信息 V1/Get user info V1  # noqa: E501

        # [中文] ### 用途: - 获取用户信息 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_info_api_v1_xiaohongshu_web_get_user_info_get_0(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户ID/User ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_user_info_api_v1_xiaohongshu_web_get_user_info_get_0_with_http_info(user_id, **kwargs)  # noqa: E501

    def get_user_info_api_v1_xiaohongshu_web_get_user_info_get_0_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """获取用户信息 V1/Get user info V1  # noqa: E501

        # [中文] ### 用途: - 获取用户信息 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_info_api_v1_xiaohongshu_web_get_user_info_get_0_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户ID/User ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_info_api_v1_xiaohongshu_web_get_user_info_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `get_user_info_api_v1_xiaohongshu_web_get_user_info_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_user_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_info_v2_api_v1_xiaohongshu_web_get_user_info_v2_get(self, **kwargs):  # noqa: E501
        """获取用户信息 V2/Get user info V2  # noqa: E501

        # [中文] ### 用途: - 获取用户信息 V2 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V2 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_info_v2_api_v1_xiaohongshu_web_get_user_info_v2_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户ID/User ID
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_user_info_v2_api_v1_xiaohongshu_web_get_user_info_v2_get_with_http_info(**kwargs)  # noqa: E501

    def get_user_info_v2_api_v1_xiaohongshu_web_get_user_info_v2_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取用户信息 V2/Get user info V2  # noqa: E501

        # [中文] ### 用途: - 获取用户信息 V2 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V2 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_info_v2_api_v1_xiaohongshu_web_get_user_info_v2_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户ID/User ID
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_info_v2_api_v1_xiaohongshu_web_get_user_info_v2_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_user_info_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_info_v2_api_v1_xiaohongshu_web_get_user_info_v2_get_0(self, **kwargs):  # noqa: E501
        """获取用户信息 V2/Get user info V2  # noqa: E501

        # [中文] ### 用途: - 获取用户信息 V2 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V2 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_info_v2_api_v1_xiaohongshu_web_get_user_info_v2_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户ID/User ID
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_user_info_v2_api_v1_xiaohongshu_web_get_user_info_v2_get_0_with_http_info(**kwargs)  # noqa: E501

    def get_user_info_v2_api_v1_xiaohongshu_web_get_user_info_v2_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取用户信息 V2/Get user info V2  # noqa: E501

        # [中文] ### 用途: - 获取用户信息 V2 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V2 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_info_v2_api_v1_xiaohongshu_web_get_user_info_v2_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户ID/User ID
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_info_v2_api_v1_xiaohongshu_web_get_user_info_v2_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_user_info_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_info_v3_api_v1_xiaohongshu_web_get_user_info_v3_get(self, user_id, **kwargs):  # noqa: E501
        """获取用户信息 V3/Get user info V3  # noqa: E501

        # [中文] ### 用途: - 获取用户信息 V3 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V3 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_info_v3_api_v1_xiaohongshu_web_get_user_info_v3_get(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户ID/User ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_user_info_v3_api_v1_xiaohongshu_web_get_user_info_v3_get_with_http_info(user_id, **kwargs)  # noqa: E501

    def get_user_info_v3_api_v1_xiaohongshu_web_get_user_info_v3_get_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """获取用户信息 V3/Get user info V3  # noqa: E501

        # [中文] ### 用途: - 获取用户信息 V3 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V3 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_info_v3_api_v1_xiaohongshu_web_get_user_info_v3_get_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户ID/User ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_info_v3_api_v1_xiaohongshu_web_get_user_info_v3_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `get_user_info_v3_api_v1_xiaohongshu_web_get_user_info_v3_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_user_info_v3', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_info_v3_api_v1_xiaohongshu_web_get_user_info_v3_get_0(self, user_id, **kwargs):  # noqa: E501
        """获取用户信息 V3/Get user info V3  # noqa: E501

        # [中文] ### 用途: - 获取用户信息 V3 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V3 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_info_v3_api_v1_xiaohongshu_web_get_user_info_v3_get_0(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户ID/User ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_user_info_v3_api_v1_xiaohongshu_web_get_user_info_v3_get_0_with_http_info(user_id, **kwargs)  # noqa: E501

    def get_user_info_v3_api_v1_xiaohongshu_web_get_user_info_v3_get_0_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """获取用户信息 V3/Get user info V3  # noqa: E501

        # [中文] ### 用途: - 获取用户信息 V3 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V3 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_info_v3_api_v1_xiaohongshu_web_get_user_info_v3_get_0_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户ID/User ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_info_v3_api_v1_xiaohongshu_web_get_user_info_v3_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `get_user_info_v3_api_v1_xiaohongshu_web_get_user_info_v3_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_user_info_v3', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_notes_api_v1_xiaohongshu_web_get_user_notes_get(self, user_id, **kwargs):  # noqa: E501
        """获取用户的笔记 V1/Get user notes V1  # noqa: E501

        # [中文] ### 用途: - 获取用户的笔记 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_notes_api_v1_xiaohongshu_web_get_user_notes_get(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户ID/User ID (required)
        :param str last_cursor: 上一页的游标/Last cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_user_notes_api_v1_xiaohongshu_web_get_user_notes_get_with_http_info(user_id, **kwargs)  # noqa: E501

    def get_user_notes_api_v1_xiaohongshu_web_get_user_notes_get_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """获取用户的笔记 V1/Get user notes V1  # noqa: E501

        # [中文] ### 用途: - 获取用户的笔记 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_notes_api_v1_xiaohongshu_web_get_user_notes_get_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户ID/User ID (required)
        :param str last_cursor: 上一页的游标/Last cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id',
            'last_cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_notes_api_v1_xiaohongshu_web_get_user_notes_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `get_user_notes_api_v1_xiaohongshu_web_get_user_notes_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501
        if 'last_cursor' in local_var_params and local_var_params['last_cursor'] is not None:  # noqa: E501
            query_params.append(('lastCursor', local_var_params['last_cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_user_notes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_notes_api_v1_xiaohongshu_web_get_user_notes_get_0(self, user_id, **kwargs):  # noqa: E501
        """获取用户的笔记 V1/Get user notes V1  # noqa: E501

        # [中文] ### 用途: - 获取用户的笔记 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_notes_api_v1_xiaohongshu_web_get_user_notes_get_0(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户ID/User ID (required)
        :param str last_cursor: 上一页的游标/Last cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_user_notes_api_v1_xiaohongshu_web_get_user_notes_get_0_with_http_info(user_id, **kwargs)  # noqa: E501

    def get_user_notes_api_v1_xiaohongshu_web_get_user_notes_get_0_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """获取用户的笔记 V1/Get user notes V1  # noqa: E501

        # [中文] ### 用途: - 获取用户的笔记 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_notes_api_v1_xiaohongshu_web_get_user_notes_get_0_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户ID/User ID (required)
        :param str last_cursor: 上一页的游标/Last cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id',
            'last_cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_notes_api_v1_xiaohongshu_web_get_user_notes_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `get_user_notes_api_v1_xiaohongshu_web_get_user_notes_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501
        if 'last_cursor' in local_var_params and local_var_params['last_cursor'] is not None:  # noqa: E501
            query_params.append(('lastCursor', local_var_params['last_cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_user_notes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_notes_api_v1_xiaohongshu_web_get_user_notes_v2_get(self, user_id, **kwargs):  # noqa: E501
        """获取用户的笔记 V2/Get user notes V2  # noqa: E501

        # [中文] ### 用途: - 获取用户的笔记 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_notes_api_v1_xiaohongshu_web_get_user_notes_v2_get(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户ID/User ID (required)
        :param str last_cursor: 上一页的游标/Last cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_user_notes_api_v1_xiaohongshu_web_get_user_notes_v2_get_with_http_info(user_id, **kwargs)  # noqa: E501

    def get_user_notes_api_v1_xiaohongshu_web_get_user_notes_v2_get_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """获取用户的笔记 V2/Get user notes V2  # noqa: E501

        # [中文] ### 用途: - 获取用户的笔记 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_notes_api_v1_xiaohongshu_web_get_user_notes_v2_get_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户ID/User ID (required)
        :param str last_cursor: 上一页的游标/Last cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id',
            'last_cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_notes_api_v1_xiaohongshu_web_get_user_notes_v2_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `get_user_notes_api_v1_xiaohongshu_web_get_user_notes_v2_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501
        if 'last_cursor' in local_var_params and local_var_params['last_cursor'] is not None:  # noqa: E501
            query_params.append(('lastCursor', local_var_params['last_cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_user_notes_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_notes_api_v1_xiaohongshu_web_get_user_notes_v2_get_0(self, user_id, **kwargs):  # noqa: E501
        """获取用户的笔记 V2/Get user notes V2  # noqa: E501

        # [中文] ### 用途: - 获取用户的笔记 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_notes_api_v1_xiaohongshu_web_get_user_notes_v2_get_0(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户ID/User ID (required)
        :param str last_cursor: 上一页的游标/Last cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_user_notes_api_v1_xiaohongshu_web_get_user_notes_v2_get_0_with_http_info(user_id, **kwargs)  # noqa: E501

    def get_user_notes_api_v1_xiaohongshu_web_get_user_notes_v2_get_0_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """获取用户的笔记 V2/Get user notes V2  # noqa: E501

        # [中文] ### 用途: - 获取用户的笔记 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_notes_api_v1_xiaohongshu_web_get_user_notes_v2_get_0_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户ID/User ID (required)
        :param str last_cursor: 上一页的游标/Last cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id',
            'last_cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_notes_api_v1_xiaohongshu_web_get_user_notes_v2_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `get_user_notes_api_v1_xiaohongshu_web_get_user_notes_v2_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501
        if 'last_cursor' in local_var_params and local_var_params['last_cursor'] is not None:  # noqa: E501
            query_params.append(('lastCursor', local_var_params['last_cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_user_notes_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_visitor_cookie_api_v1_xiaohongshu_web_get_visitor_cookie_get(self, **kwargs):  # noqa: E501
        """获取游客Cookie/Get visitor cookie  # noqa: E501

        # [中文] ### 用途: - 获取小红书网页版的游客Cookie，可以用于爬取小红书的一些数据。 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get Xiaohongshu web visitor cookie, which can be used to crawl some data of Xiaohongshu. ### Return: - Visitor cookie  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_visitor_cookie_api_v1_xiaohongshu_web_get_visitor_cookie_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_visitor_cookie_api_v1_xiaohongshu_web_get_visitor_cookie_get_with_http_info(**kwargs)  # noqa: E501

    def get_visitor_cookie_api_v1_xiaohongshu_web_get_visitor_cookie_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取游客Cookie/Get visitor cookie  # noqa: E501

        # [中文] ### 用途: - 获取小红书网页版的游客Cookie，可以用于爬取小红书的一些数据。 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get Xiaohongshu web visitor cookie, which can be used to crawl some data of Xiaohongshu. ### Return: - Visitor cookie  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_visitor_cookie_api_v1_xiaohongshu_web_get_visitor_cookie_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_visitor_cookie_api_v1_xiaohongshu_web_get_visitor_cookie_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_visitor_cookie', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_visitor_cookie_api_v1_xiaohongshu_web_get_visitor_cookie_get_0(self, **kwargs):  # noqa: E501
        """获取游客Cookie/Get visitor cookie  # noqa: E501

        # [中文] ### 用途: - 获取小红书网页版的游客Cookie，可以用于爬取小红书的一些数据。 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get Xiaohongshu web visitor cookie, which can be used to crawl some data of Xiaohongshu. ### Return: - Visitor cookie  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_visitor_cookie_api_v1_xiaohongshu_web_get_visitor_cookie_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_visitor_cookie_api_v1_xiaohongshu_web_get_visitor_cookie_get_0_with_http_info(**kwargs)  # noqa: E501

    def get_visitor_cookie_api_v1_xiaohongshu_web_get_visitor_cookie_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取游客Cookie/Get visitor cookie  # noqa: E501

        # [中文] ### 用途: - 获取小红书网页版的游客Cookie，可以用于爬取小红书的一些数据。 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get Xiaohongshu web visitor cookie, which can be used to crawl some data of Xiaohongshu. ### Return: - Visitor cookie  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_visitor_cookie_api_v1_xiaohongshu_web_get_visitor_cookie_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_visitor_cookie_api_v1_xiaohongshu_web_get_visitor_cookie_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/get_visitor_cookie', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_notes_api_v1_xiaohongshu_web_search_notes_get(self, keyword, **kwargs):  # noqa: E501
        """搜索笔记/Search notes  # noqa: E501

        # [中文] ### 用途: - 搜索笔记 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 - sort: 排序方式     - 综合排序（默认参数）: general     - 最热排序: popularity_descending     - 最新排序: time_descending - noteType: 笔记类型     - 综合笔记（默认参数）: _0     - 视频笔记: _1     - 图文笔记: _2 ### 返回: - 笔记列表  # [English] ### Purpose: - Search notes ### Parameters: - keyword: Keyword - page: Page, default is 1 - sort: Sort     - General sort (default): general     - Popularity sort: popularity_descending     - Latest sort: time_descending - noteType: Note type     - General note (default): _0     - Video note: _1     - Image note: _2 ### Return: - Note list  # [示例/Example] keyword=\"美食\" page=1 sort=\"general\" noteType=\"_0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_notes_api_v1_xiaohongshu_web_search_notes_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Keyword (required)
        :param int page: 页码/Page
        :param str sort: 排序方式/Sort
        :param str note_type: 笔记类型/Note type
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.search_notes_api_v1_xiaohongshu_web_search_notes_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def search_notes_api_v1_xiaohongshu_web_search_notes_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """搜索笔记/Search notes  # noqa: E501

        # [中文] ### 用途: - 搜索笔记 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 - sort: 排序方式     - 综合排序（默认参数）: general     - 最热排序: popularity_descending     - 最新排序: time_descending - noteType: 笔记类型     - 综合笔记（默认参数）: _0     - 视频笔记: _1     - 图文笔记: _2 ### 返回: - 笔记列表  # [English] ### Purpose: - Search notes ### Parameters: - keyword: Keyword - page: Page, default is 1 - sort: Sort     - General sort (default): general     - Popularity sort: popularity_descending     - Latest sort: time_descending - noteType: Note type     - General note (default): _0     - Video note: _1     - Image note: _2 ### Return: - Note list  # [示例/Example] keyword=\"美食\" page=1 sort=\"general\" noteType=\"_0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_notes_api_v1_xiaohongshu_web_search_notes_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Keyword (required)
        :param int page: 页码/Page
        :param str sort: 排序方式/Sort
        :param str note_type: 笔记类型/Note type
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'page',
            'sort',
            'note_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_notes_api_v1_xiaohongshu_web_search_notes_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `search_notes_api_v1_xiaohongshu_web_search_notes_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'note_type' in local_var_params and local_var_params['note_type'] is not None:  # noqa: E501
            query_params.append(('noteType', local_var_params['note_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/search_notes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_notes_api_v1_xiaohongshu_web_search_notes_get_0(self, keyword, **kwargs):  # noqa: E501
        """搜索笔记/Search notes  # noqa: E501

        # [中文] ### 用途: - 搜索笔记 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 - sort: 排序方式     - 综合排序（默认参数）: general     - 最热排序: popularity_descending     - 最新排序: time_descending - noteType: 笔记类型     - 综合笔记（默认参数）: _0     - 视频笔记: _1     - 图文笔记: _2 ### 返回: - 笔记列表  # [English] ### Purpose: - Search notes ### Parameters: - keyword: Keyword - page: Page, default is 1 - sort: Sort     - General sort (default): general     - Popularity sort: popularity_descending     - Latest sort: time_descending - noteType: Note type     - General note (default): _0     - Video note: _1     - Image note: _2 ### Return: - Note list  # [示例/Example] keyword=\"美食\" page=1 sort=\"general\" noteType=\"_0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_notes_api_v1_xiaohongshu_web_search_notes_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Keyword (required)
        :param int page: 页码/Page
        :param str sort: 排序方式/Sort
        :param str note_type: 笔记类型/Note type
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.search_notes_api_v1_xiaohongshu_web_search_notes_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def search_notes_api_v1_xiaohongshu_web_search_notes_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """搜索笔记/Search notes  # noqa: E501

        # [中文] ### 用途: - 搜索笔记 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 - sort: 排序方式     - 综合排序（默认参数）: general     - 最热排序: popularity_descending     - 最新排序: time_descending - noteType: 笔记类型     - 综合笔记（默认参数）: _0     - 视频笔记: _1     - 图文笔记: _2 ### 返回: - 笔记列表  # [English] ### Purpose: - Search notes ### Parameters: - keyword: Keyword - page: Page, default is 1 - sort: Sort     - General sort (default): general     - Popularity sort: popularity_descending     - Latest sort: time_descending - noteType: Note type     - General note (default): _0     - Video note: _1     - Image note: _2 ### Return: - Note list  # [示例/Example] keyword=\"美食\" page=1 sort=\"general\" noteType=\"_0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_notes_api_v1_xiaohongshu_web_search_notes_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Keyword (required)
        :param int page: 页码/Page
        :param str sort: 排序方式/Sort
        :param str note_type: 笔记类型/Note type
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'page',
            'sort',
            'note_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_notes_api_v1_xiaohongshu_web_search_notes_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `search_notes_api_v1_xiaohongshu_web_search_notes_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'note_type' in local_var_params and local_var_params['note_type'] is not None:  # noqa: E501
            query_params.append(('noteType', local_var_params['note_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/search_notes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_users_api_v1_xiaohongshu_web_search_users_get(self, keyword, **kwargs):  # noqa: E501
        """搜索用户/Search users  # noqa: E501

        # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 ### 返回: - 用户列表  # [English] ### Purpose: - Search users ### Parameters: - keyword: Keyword - page: Page, default is 1 ### Return: - User list  # [示例/Example] keyword=\"美食\" page=1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_users_api_v1_xiaohongshu_web_search_users_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Keyword (required)
        :param int page: 页码/Page
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.search_users_api_v1_xiaohongshu_web_search_users_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def search_users_api_v1_xiaohongshu_web_search_users_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """搜索用户/Search users  # noqa: E501

        # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 ### 返回: - 用户列表  # [English] ### Purpose: - Search users ### Parameters: - keyword: Keyword - page: Page, default is 1 ### Return: - User list  # [示例/Example] keyword=\"美食\" page=1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_users_api_v1_xiaohongshu_web_search_users_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Keyword (required)
        :param int page: 页码/Page
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'page'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_users_api_v1_xiaohongshu_web_search_users_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `search_users_api_v1_xiaohongshu_web_search_users_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/search_users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_users_api_v1_xiaohongshu_web_search_users_get_0(self, keyword, **kwargs):  # noqa: E501
        """搜索用户/Search users  # noqa: E501

        # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 ### 返回: - 用户列表  # [English] ### Purpose: - Search users ### Parameters: - keyword: Keyword - page: Page, default is 1 ### Return: - User list  # [示例/Example] keyword=\"美食\" page=1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_users_api_v1_xiaohongshu_web_search_users_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Keyword (required)
        :param int page: 页码/Page
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.search_users_api_v1_xiaohongshu_web_search_users_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def search_users_api_v1_xiaohongshu_web_search_users_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """搜索用户/Search users  # noqa: E501

        # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 ### 返回: - 用户列表  # [English] ### Purpose: - Search users ### Parameters: - keyword: Keyword - page: Page, default is 1 ### Return: - User list  # [示例/Example] keyword=\"美食\" page=1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_users_api_v1_xiaohongshu_web_search_users_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Keyword (required)
        :param int page: 页码/Page
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'page'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_users_api_v1_xiaohongshu_web_search_users_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `search_users_api_v1_xiaohongshu_web_search_users_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/search_users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sign_api_v1_xiaohongshu_web_sign_post(self, **kwargs):  # noqa: E501
        """小红书Web签名/Xiaohongshu Web sign  # noqa: E501

        # [中文] ### 用途: - 小红书Web签名，用于获取小红书的一些数据。 - 生成 `X-s`, `X-t`, `X-s-common` 等签名参数。 - 价格：0.001$/次 ### 参数: - sign_request: 签名请求模型     - path: 请求接口的路径，例如: `/api/sns/web/v1/homefeed`     - data: 请求API的荷载数据     - cookie: 请求接口的Cookie ### 返回: - 签名参数(X-s, X-t, X-s-common等)  # [English] ### Purpose: - Xiaohongshu Web sign, used to get some data of Xiaohongshu. - Generate `X-s`, `X-t`, `X-s-common` and other signature parameters. - Price: 0.001$/time ### Parameters: - sign_request: Sign request model     - path: Request API path, e.g. `/api/sns/web/v1/homefeed`     - data: Payload data of request API     - cookie: Request API cookie ### Return: - Signature parameters(X-s, X-t, X-s-common, etc.)  # [示例/Example] {     \"path\": \"/api/sns/web/v1/homefeed\",     \"data\": {         \"cursor_score\": \"\",         \"num\": 35,         \"refresh_type\": 1,         \"note_index\": 35,         \"unread_begin_note_id\": \"\",         \"unread_end_note_id\": \"\",         \"unread_note_count\": 0,         \"category\": \"homefeed_recommend\",         \"search_key\": \"\",         \"need_num\": 10,         \"image_formats\": [             \"jpg\",             \"webp\",             \"avif\"         ],         \"need_filter_image\": False     },     \"cookie\": \"web_session=030037a04eafd37791e6e4bd05204a8cf2af05;acw_tc=0a00d79f17363096679345838efb77751cc087fb039dd1691dc954824410f6;abRequestId=384480ae-5196-5818-a835-42e6278de9f0;webBuild=4.47.1;xsecappid=xhs-pc-web;a1=194441ef694PayUbdUvgp0dSHfIcACsNsLud0Lgru50000354513;webId=6cf10a564b9b07d129729b65e0d1785a;sec_poison_id=32964532-d414-4beb-914f-98811853b75f\" }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sign_api_v1_xiaohongshu_web_sign_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param XhsWebSignRequestModel xhs_web_sign_request_model:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.sign_api_v1_xiaohongshu_web_sign_post_with_http_info(**kwargs)  # noqa: E501

    def sign_api_v1_xiaohongshu_web_sign_post_with_http_info(self, **kwargs):  # noqa: E501
        """小红书Web签名/Xiaohongshu Web sign  # noqa: E501

        # [中文] ### 用途: - 小红书Web签名，用于获取小红书的一些数据。 - 生成 `X-s`, `X-t`, `X-s-common` 等签名参数。 - 价格：0.001$/次 ### 参数: - sign_request: 签名请求模型     - path: 请求接口的路径，例如: `/api/sns/web/v1/homefeed`     - data: 请求API的荷载数据     - cookie: 请求接口的Cookie ### 返回: - 签名参数(X-s, X-t, X-s-common等)  # [English] ### Purpose: - Xiaohongshu Web sign, used to get some data of Xiaohongshu. - Generate `X-s`, `X-t`, `X-s-common` and other signature parameters. - Price: 0.001$/time ### Parameters: - sign_request: Sign request model     - path: Request API path, e.g. `/api/sns/web/v1/homefeed`     - data: Payload data of request API     - cookie: Request API cookie ### Return: - Signature parameters(X-s, X-t, X-s-common, etc.)  # [示例/Example] {     \"path\": \"/api/sns/web/v1/homefeed\",     \"data\": {         \"cursor_score\": \"\",         \"num\": 35,         \"refresh_type\": 1,         \"note_index\": 35,         \"unread_begin_note_id\": \"\",         \"unread_end_note_id\": \"\",         \"unread_note_count\": 0,         \"category\": \"homefeed_recommend\",         \"search_key\": \"\",         \"need_num\": 10,         \"image_formats\": [             \"jpg\",             \"webp\",             \"avif\"         ],         \"need_filter_image\": False     },     \"cookie\": \"web_session=030037a04eafd37791e6e4bd05204a8cf2af05;acw_tc=0a00d79f17363096679345838efb77751cc087fb039dd1691dc954824410f6;abRequestId=384480ae-5196-5818-a835-42e6278de9f0;webBuild=4.47.1;xsecappid=xhs-pc-web;a1=194441ef694PayUbdUvgp0dSHfIcACsNsLud0Lgru50000354513;webId=6cf10a564b9b07d129729b65e0d1785a;sec_poison_id=32964532-d414-4beb-914f-98811853b75f\" }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sign_api_v1_xiaohongshu_web_sign_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param XhsWebSignRequestModel xhs_web_sign_request_model:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'xhs_web_sign_request_model'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sign_api_v1_xiaohongshu_web_sign_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'xhs_web_sign_request_model' in local_var_params:
            body_params = local_var_params['xhs_web_sign_request_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/sign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sign_api_v1_xiaohongshu_web_sign_post_0(self, **kwargs):  # noqa: E501
        """小红书Web签名/Xiaohongshu Web sign  # noqa: E501

        # [中文] ### 用途: - 小红书Web签名，用于获取小红书的一些数据。 - 生成 `X-s`, `X-t`, `X-s-common` 等签名参数。 - 价格：0.001$/次 ### 参数: - sign_request: 签名请求模型     - path: 请求接口的路径，例如: `/api/sns/web/v1/homefeed`     - data: 请求API的荷载数据     - cookie: 请求接口的Cookie ### 返回: - 签名参数(X-s, X-t, X-s-common等)  # [English] ### Purpose: - Xiaohongshu Web sign, used to get some data of Xiaohongshu. - Generate `X-s`, `X-t`, `X-s-common` and other signature parameters. - Price: 0.001$/time ### Parameters: - sign_request: Sign request model     - path: Request API path, e.g. `/api/sns/web/v1/homefeed`     - data: Payload data of request API     - cookie: Request API cookie ### Return: - Signature parameters(X-s, X-t, X-s-common, etc.)  # [示例/Example] {     \"path\": \"/api/sns/web/v1/homefeed\",     \"data\": {         \"cursor_score\": \"\",         \"num\": 35,         \"refresh_type\": 1,         \"note_index\": 35,         \"unread_begin_note_id\": \"\",         \"unread_end_note_id\": \"\",         \"unread_note_count\": 0,         \"category\": \"homefeed_recommend\",         \"search_key\": \"\",         \"need_num\": 10,         \"image_formats\": [             \"jpg\",             \"webp\",             \"avif\"         ],         \"need_filter_image\": False     },     \"cookie\": \"web_session=030037a04eafd37791e6e4bd05204a8cf2af05;acw_tc=0a00d79f17363096679345838efb77751cc087fb039dd1691dc954824410f6;abRequestId=384480ae-5196-5818-a835-42e6278de9f0;webBuild=4.47.1;xsecappid=xhs-pc-web;a1=194441ef694PayUbdUvgp0dSHfIcACsNsLud0Lgru50000354513;webId=6cf10a564b9b07d129729b65e0d1785a;sec_poison_id=32964532-d414-4beb-914f-98811853b75f\" }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sign_api_v1_xiaohongshu_web_sign_post_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param XhsWebSignRequestModel xhs_web_sign_request_model:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.sign_api_v1_xiaohongshu_web_sign_post_0_with_http_info(**kwargs)  # noqa: E501

    def sign_api_v1_xiaohongshu_web_sign_post_0_with_http_info(self, **kwargs):  # noqa: E501
        """小红书Web签名/Xiaohongshu Web sign  # noqa: E501

        # [中文] ### 用途: - 小红书Web签名，用于获取小红书的一些数据。 - 生成 `X-s`, `X-t`, `X-s-common` 等签名参数。 - 价格：0.001$/次 ### 参数: - sign_request: 签名请求模型     - path: 请求接口的路径，例如: `/api/sns/web/v1/homefeed`     - data: 请求API的荷载数据     - cookie: 请求接口的Cookie ### 返回: - 签名参数(X-s, X-t, X-s-common等)  # [English] ### Purpose: - Xiaohongshu Web sign, used to get some data of Xiaohongshu. - Generate `X-s`, `X-t`, `X-s-common` and other signature parameters. - Price: 0.001$/time ### Parameters: - sign_request: Sign request model     - path: Request API path, e.g. `/api/sns/web/v1/homefeed`     - data: Payload data of request API     - cookie: Request API cookie ### Return: - Signature parameters(X-s, X-t, X-s-common, etc.)  # [示例/Example] {     \"path\": \"/api/sns/web/v1/homefeed\",     \"data\": {         \"cursor_score\": \"\",         \"num\": 35,         \"refresh_type\": 1,         \"note_index\": 35,         \"unread_begin_note_id\": \"\",         \"unread_end_note_id\": \"\",         \"unread_note_count\": 0,         \"category\": \"homefeed_recommend\",         \"search_key\": \"\",         \"need_num\": 10,         \"image_formats\": [             \"jpg\",             \"webp\",             \"avif\"         ],         \"need_filter_image\": False     },     \"cookie\": \"web_session=030037a04eafd37791e6e4bd05204a8cf2af05;acw_tc=0a00d79f17363096679345838efb77751cc087fb039dd1691dc954824410f6;abRequestId=384480ae-5196-5818-a835-42e6278de9f0;webBuild=4.47.1;xsecappid=xhs-pc-web;a1=194441ef694PayUbdUvgp0dSHfIcACsNsLud0Lgru50000354513;webId=6cf10a564b9b07d129729b65e0d1785a;sec_poison_id=32964532-d414-4beb-914f-98811853b75f\" }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sign_api_v1_xiaohongshu_web_sign_post_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param XhsWebSignRequestModel xhs_web_sign_request_model:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'xhs_web_sign_request_model'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sign_api_v1_xiaohongshu_web_sign_post_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'xhs_web_sign_request_model' in local_var_params:
            body_params = local_var_params['xhs_web_sign_request_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/xiaohongshu/web/sign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
