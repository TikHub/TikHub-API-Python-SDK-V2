# coding: utf-8

"""
    TikHub.io - Your Ultimate Social Media Data & API Marketplace

    High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tikhub_sdk_v2.api_client import ApiClient
from tikhub_sdk_v2.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class TikTokAppV2APIApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def check_live_room_online_api_v1_tiktok_app_v2_check_live_room_online_get(self, room_id, **kwargs):  # noqa: E501
        """检测直播间是否在线/Check if live room is online  # noqa: E501

        # [中文] ### 用途: - 检测直播间是否在线 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id = \"7358603858249009962\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_live_room_online_api_v1_tiktok_app_v2_check_live_room_online_get(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间id/Live room id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.check_live_room_online_api_v1_tiktok_app_v2_check_live_room_online_get_with_http_info(room_id, **kwargs)  # noqa: E501

    def check_live_room_online_api_v1_tiktok_app_v2_check_live_room_online_get_with_http_info(self, room_id, **kwargs):  # noqa: E501
        """检测直播间是否在线/Check if live room is online  # noqa: E501

        # [中文] ### 用途: - 检测直播间是否在线 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id = \"7358603858249009962\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_live_room_online_api_v1_tiktok_app_v2_check_live_room_online_get_with_http_info(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间id/Live room id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'room_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_live_room_online_api_v1_tiktok_app_v2_check_live_room_online_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'room_id' is set
        if self.api_client.client_side_validation and ('room_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['room_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `room_id` when calling `check_live_room_online_api_v1_tiktok_app_v2_check_live_room_online_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'room_id' in local_var_params and local_var_params['room_id'] is not None:  # noqa: E501
            query_params.append(('room_id', local_var_params['room_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/check_live_room_online', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def check_live_room_online_api_v1_tiktok_app_v2_check_live_room_online_get_0(self, room_id, **kwargs):  # noqa: E501
        """检测直播间是否在线/Check if live room is online  # noqa: E501

        # [中文] ### 用途: - 检测直播间是否在线 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id = \"7358603858249009962\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_live_room_online_api_v1_tiktok_app_v2_check_live_room_online_get_0(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间id/Live room id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.check_live_room_online_api_v1_tiktok_app_v2_check_live_room_online_get_0_with_http_info(room_id, **kwargs)  # noqa: E501

    def check_live_room_online_api_v1_tiktok_app_v2_check_live_room_online_get_0_with_http_info(self, room_id, **kwargs):  # noqa: E501
        """检测直播间是否在线/Check if live room is online  # noqa: E501

        # [中文] ### 用途: - 检测直播间是否在线 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id = \"7358603858249009962\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_live_room_online_api_v1_tiktok_app_v2_check_live_room_online_get_0_with_http_info(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间id/Live room id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'room_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_live_room_online_api_v1_tiktok_app_v2_check_live_room_online_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'room_id' is set
        if self.api_client.client_side_validation and ('room_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['room_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `room_id` when calling `check_live_room_online_api_v1_tiktok_app_v2_check_live_room_online_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'room_id' in local_var_params and local_var_params['room_id'] is not None:  # noqa: E501
            query_params.append(('room_id', local_var_params['room_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/check_live_room_online', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_general_search_result_api_v1_tiktok_app_v2_fetch_general_search_result_get(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_general_search_result） | Get comprehensive search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_general_search_result)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_general_search_result_api_v1_tiktok_app_v2_fetch_general_search_result_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param int sort_type: 排序类型/Sort type
        :param int publish_time: 发布时间/Publish time
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_general_search_result_api_v1_tiktok_app_v2_fetch_general_search_result_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_general_search_result_api_v1_tiktok_app_v2_fetch_general_search_result_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_general_search_result） | Get comprehensive search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_general_search_result)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_general_search_result_api_v1_tiktok_app_v2_fetch_general_search_result_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param int sort_type: 排序类型/Sort type
        :param int publish_time: 发布时间/Publish time
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'offset',
            'count',
            'sort_type',
            'publish_time'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_general_search_result_api_v1_tiktok_app_v2_fetch_general_search_result_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_general_search_result_api_v1_tiktok_app_v2_fetch_general_search_result_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'sort_type' in local_var_params and local_var_params['sort_type'] is not None:  # noqa: E501
            query_params.append(('sort_type', local_var_params['sort_type']))  # noqa: E501
        if 'publish_time' in local_var_params and local_var_params['publish_time'] is not None:  # noqa: E501
            query_params.append(('publish_time', local_var_params['publish_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_general_search_result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_general_search_result_api_v1_tiktok_app_v2_fetch_general_search_result_get_0(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_general_search_result） | Get comprehensive search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_general_search_result)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_general_search_result_api_v1_tiktok_app_v2_fetch_general_search_result_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param int sort_type: 排序类型/Sort type
        :param int publish_time: 发布时间/Publish time
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_general_search_result_api_v1_tiktok_app_v2_fetch_general_search_result_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_general_search_result_api_v1_tiktok_app_v2_fetch_general_search_result_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_general_search_result） | Get comprehensive search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_general_search_result)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_general_search_result_api_v1_tiktok_app_v2_fetch_general_search_result_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param int sort_type: 排序类型/Sort type
        :param int publish_time: 发布时间/Publish time
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'offset',
            'count',
            'sort_type',
            'publish_time'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_general_search_result_api_v1_tiktok_app_v2_fetch_general_search_result_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_general_search_result_api_v1_tiktok_app_v2_fetch_general_search_result_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'sort_type' in local_var_params and local_var_params['sort_type'] is not None:  # noqa: E501
            query_params.append(('sort_type', local_var_params['sort_type']))  # noqa: E501
        if 'publish_time' in local_var_params and local_var_params['publish_time'] is not None:  # noqa: E501
            query_params.append(('publish_time', local_var_params['publish_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_general_search_result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hashtag_detail_api_v1_tiktok_app_v2_fetch_hashtag_detail_get(self, ch_id, **kwargs):  # noqa: E501
        """获取指定话题的详情数据/Get details of specified hashtag  # noqa: E501

        # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = \"7551\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hashtag_detail_api_v1_tiktok_app_v2_fetch_hashtag_detail_get(ch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str ch_id: 话题id/Hashtag id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hashtag_detail_api_v1_tiktok_app_v2_fetch_hashtag_detail_get_with_http_info(ch_id, **kwargs)  # noqa: E501

    def fetch_hashtag_detail_api_v1_tiktok_app_v2_fetch_hashtag_detail_get_with_http_info(self, ch_id, **kwargs):  # noqa: E501
        """获取指定话题的详情数据/Get details of specified hashtag  # noqa: E501

        # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = \"7551\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hashtag_detail_api_v1_tiktok_app_v2_fetch_hashtag_detail_get_with_http_info(ch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str ch_id: 话题id/Hashtag id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'ch_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hashtag_detail_api_v1_tiktok_app_v2_fetch_hashtag_detail_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ch_id' is set
        if self.api_client.client_side_validation and ('ch_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['ch_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ch_id` when calling `fetch_hashtag_detail_api_v1_tiktok_app_v2_fetch_hashtag_detail_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ch_id' in local_var_params and local_var_params['ch_id'] is not None:  # noqa: E501
            query_params.append(('ch_id', local_var_params['ch_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_hashtag_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hashtag_detail_api_v1_tiktok_app_v2_fetch_hashtag_detail_get_0(self, ch_id, **kwargs):  # noqa: E501
        """获取指定话题的详情数据/Get details of specified hashtag  # noqa: E501

        # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = \"7551\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hashtag_detail_api_v1_tiktok_app_v2_fetch_hashtag_detail_get_0(ch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str ch_id: 话题id/Hashtag id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hashtag_detail_api_v1_tiktok_app_v2_fetch_hashtag_detail_get_0_with_http_info(ch_id, **kwargs)  # noqa: E501

    def fetch_hashtag_detail_api_v1_tiktok_app_v2_fetch_hashtag_detail_get_0_with_http_info(self, ch_id, **kwargs):  # noqa: E501
        """获取指定话题的详情数据/Get details of specified hashtag  # noqa: E501

        # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = \"7551\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hashtag_detail_api_v1_tiktok_app_v2_fetch_hashtag_detail_get_0_with_http_info(ch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str ch_id: 话题id/Hashtag id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'ch_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hashtag_detail_api_v1_tiktok_app_v2_fetch_hashtag_detail_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ch_id' is set
        if self.api_client.client_side_validation and ('ch_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['ch_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ch_id` when calling `fetch_hashtag_detail_api_v1_tiktok_app_v2_fetch_hashtag_detail_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ch_id' in local_var_params and local_var_params['ch_id'] is not None:  # noqa: E501
            query_params.append(('ch_id', local_var_params['ch_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_hashtag_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hashtag_search_result_api_v1_tiktok_app_v2_fetch_hashtag_search_result_get(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的话题搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_hashtag_search_result） | Get hashtag search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_hashtag_search_result)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hashtag_search_result_api_v1_tiktok_app_v2_fetch_hashtag_search_result_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hashtag_search_result_api_v1_tiktok_app_v2_fetch_hashtag_search_result_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_hashtag_search_result_api_v1_tiktok_app_v2_fetch_hashtag_search_result_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的话题搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_hashtag_search_result） | Get hashtag search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_hashtag_search_result)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hashtag_search_result_api_v1_tiktok_app_v2_fetch_hashtag_search_result_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'offset',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hashtag_search_result_api_v1_tiktok_app_v2_fetch_hashtag_search_result_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_hashtag_search_result_api_v1_tiktok_app_v2_fetch_hashtag_search_result_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_hashtag_search_result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hashtag_search_result_api_v1_tiktok_app_v2_fetch_hashtag_search_result_get_0(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的话题搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_hashtag_search_result） | Get hashtag search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_hashtag_search_result)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hashtag_search_result_api_v1_tiktok_app_v2_fetch_hashtag_search_result_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hashtag_search_result_api_v1_tiktok_app_v2_fetch_hashtag_search_result_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_hashtag_search_result_api_v1_tiktok_app_v2_fetch_hashtag_search_result_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的话题搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_hashtag_search_result） | Get hashtag search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_hashtag_search_result)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hashtag_search_result_api_v1_tiktok_app_v2_fetch_hashtag_search_result_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'offset',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hashtag_search_result_api_v1_tiktok_app_v2_fetch_hashtag_search_result_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_hashtag_search_result_api_v1_tiktok_app_v2_fetch_hashtag_search_result_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_hashtag_search_result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hashtag_video_list_api_v1_tiktok_app_v2_fetch_hashtag_video_list_get(self, ch_id, **kwargs):  # noqa: E501
        """获取指定话题的作品数据/Get video list of specified hashtag  # noqa: E501

        # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id = \"7551\" cursor = 0 sort_type = 0 count = 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hashtag_video_list_api_v1_tiktok_app_v2_fetch_hashtag_video_list_get(ch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str ch_id: 话题id/Hashtag id (required)
        :param int cursor: 游标/Cursor
        :param int count: 数量/Number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hashtag_video_list_api_v1_tiktok_app_v2_fetch_hashtag_video_list_get_with_http_info(ch_id, **kwargs)  # noqa: E501

    def fetch_hashtag_video_list_api_v1_tiktok_app_v2_fetch_hashtag_video_list_get_with_http_info(self, ch_id, **kwargs):  # noqa: E501
        """获取指定话题的作品数据/Get video list of specified hashtag  # noqa: E501

        # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id = \"7551\" cursor = 0 sort_type = 0 count = 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hashtag_video_list_api_v1_tiktok_app_v2_fetch_hashtag_video_list_get_with_http_info(ch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str ch_id: 话题id/Hashtag id (required)
        :param int cursor: 游标/Cursor
        :param int count: 数量/Number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'ch_id',
            'cursor',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hashtag_video_list_api_v1_tiktok_app_v2_fetch_hashtag_video_list_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ch_id' is set
        if self.api_client.client_side_validation and ('ch_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['ch_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ch_id` when calling `fetch_hashtag_video_list_api_v1_tiktok_app_v2_fetch_hashtag_video_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ch_id' in local_var_params and local_var_params['ch_id'] is not None:  # noqa: E501
            query_params.append(('ch_id', local_var_params['ch_id']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_hashtag_video_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hashtag_video_list_api_v1_tiktok_app_v2_fetch_hashtag_video_list_get_0(self, ch_id, **kwargs):  # noqa: E501
        """获取指定话题的作品数据/Get video list of specified hashtag  # noqa: E501

        # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id = \"7551\" cursor = 0 sort_type = 0 count = 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hashtag_video_list_api_v1_tiktok_app_v2_fetch_hashtag_video_list_get_0(ch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str ch_id: 话题id/Hashtag id (required)
        :param int cursor: 游标/Cursor
        :param int count: 数量/Number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hashtag_video_list_api_v1_tiktok_app_v2_fetch_hashtag_video_list_get_0_with_http_info(ch_id, **kwargs)  # noqa: E501

    def fetch_hashtag_video_list_api_v1_tiktok_app_v2_fetch_hashtag_video_list_get_0_with_http_info(self, ch_id, **kwargs):  # noqa: E501
        """获取指定话题的作品数据/Get video list of specified hashtag  # noqa: E501

        # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id = \"7551\" cursor = 0 sort_type = 0 count = 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hashtag_video_list_api_v1_tiktok_app_v2_fetch_hashtag_video_list_get_0_with_http_info(ch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str ch_id: 话题id/Hashtag id (required)
        :param int cursor: 游标/Cursor
        :param int count: 数量/Number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'ch_id',
            'cursor',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hashtag_video_list_api_v1_tiktok_app_v2_fetch_hashtag_video_list_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ch_id' is set
        if self.api_client.client_side_validation and ('ch_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['ch_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ch_id` when calling `fetch_hashtag_video_list_api_v1_tiktok_app_v2_fetch_hashtag_video_list_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ch_id' in local_var_params and local_var_params['ch_id'] is not None:  # noqa: E501
            query_params.append(('ch_id', local_var_params['ch_id']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_hashtag_video_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_home_feed_api_v1_tiktok_app_v2_fetch_home_feed_get(self, **kwargs):  # noqa: E501
        """获取主页视频推荐数据/Get home feed(recommend) video data  # noqa: E501

        # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - 无 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - None ### Return: - Video recommend data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_feed_api_v1_tiktok_app_v2_fetch_home_feed_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_home_feed_api_v1_tiktok_app_v2_fetch_home_feed_get_with_http_info(**kwargs)  # noqa: E501

    def fetch_home_feed_api_v1_tiktok_app_v2_fetch_home_feed_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取主页视频推荐数据/Get home feed(recommend) video data  # noqa: E501

        # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - 无 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - None ### Return: - Video recommend data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_feed_api_v1_tiktok_app_v2_fetch_home_feed_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_home_feed_api_v1_tiktok_app_v2_fetch_home_feed_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_home_feed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_home_feed_api_v1_tiktok_app_v2_fetch_home_feed_get_0(self, **kwargs):  # noqa: E501
        """获取主页视频推荐数据/Get home feed(recommend) video data  # noqa: E501

        # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - 无 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - None ### Return: - Video recommend data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_feed_api_v1_tiktok_app_v2_fetch_home_feed_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_home_feed_api_v1_tiktok_app_v2_fetch_home_feed_get_0_with_http_info(**kwargs)  # noqa: E501

    def fetch_home_feed_api_v1_tiktok_app_v2_fetch_home_feed_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取主页视频推荐数据/Get home feed(recommend) video data  # noqa: E501

        # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - 无 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - None ### Return: - Video recommend data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_feed_api_v1_tiktok_app_v2_fetch_home_feed_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_home_feed_api_v1_tiktok_app_v2_fetch_home_feed_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_home_feed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_live_ranking_list_api_v1_tiktok_app_v2_fetch_live_ranking_list_get(self, room_id, **kwargs):  # noqa: E501
        """获取直播间排行榜数据/Get live room ranking list  # noqa: E501

        # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id = \"7358603858249009962\" anchor_id = \"7222941468722758702\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_ranking_list_api_v1_tiktok_app_v2_fetch_live_ranking_list_get(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间id/Live room id (required)
        :param str anchor_id: 主播id/Anchor id
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_live_ranking_list_api_v1_tiktok_app_v2_fetch_live_ranking_list_get_with_http_info(room_id, **kwargs)  # noqa: E501

    def fetch_live_ranking_list_api_v1_tiktok_app_v2_fetch_live_ranking_list_get_with_http_info(self, room_id, **kwargs):  # noqa: E501
        """获取直播间排行榜数据/Get live room ranking list  # noqa: E501

        # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id = \"7358603858249009962\" anchor_id = \"7222941468722758702\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_ranking_list_api_v1_tiktok_app_v2_fetch_live_ranking_list_get_with_http_info(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间id/Live room id (required)
        :param str anchor_id: 主播id/Anchor id
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'room_id',
            'anchor_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_live_ranking_list_api_v1_tiktok_app_v2_fetch_live_ranking_list_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'room_id' is set
        if self.api_client.client_side_validation and ('room_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['room_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `room_id` when calling `fetch_live_ranking_list_api_v1_tiktok_app_v2_fetch_live_ranking_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'room_id' in local_var_params and local_var_params['room_id'] is not None:  # noqa: E501
            query_params.append(('room_id', local_var_params['room_id']))  # noqa: E501
        if 'anchor_id' in local_var_params and local_var_params['anchor_id'] is not None:  # noqa: E501
            query_params.append(('anchor_id', local_var_params['anchor_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_live_ranking_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_live_ranking_list_api_v1_tiktok_app_v2_fetch_live_ranking_list_get_0(self, room_id, **kwargs):  # noqa: E501
        """获取直播间排行榜数据/Get live room ranking list  # noqa: E501

        # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id = \"7358603858249009962\" anchor_id = \"7222941468722758702\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_ranking_list_api_v1_tiktok_app_v2_fetch_live_ranking_list_get_0(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间id/Live room id (required)
        :param str anchor_id: 主播id/Anchor id
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_live_ranking_list_api_v1_tiktok_app_v2_fetch_live_ranking_list_get_0_with_http_info(room_id, **kwargs)  # noqa: E501

    def fetch_live_ranking_list_api_v1_tiktok_app_v2_fetch_live_ranking_list_get_0_with_http_info(self, room_id, **kwargs):  # noqa: E501
        """获取直播间排行榜数据/Get live room ranking list  # noqa: E501

        # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id = \"7358603858249009962\" anchor_id = \"7222941468722758702\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_ranking_list_api_v1_tiktok_app_v2_fetch_live_ranking_list_get_0_with_http_info(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间id/Live room id (required)
        :param str anchor_id: 主播id/Anchor id
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'room_id',
            'anchor_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_live_ranking_list_api_v1_tiktok_app_v2_fetch_live_ranking_list_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'room_id' is set
        if self.api_client.client_side_validation and ('room_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['room_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `room_id` when calling `fetch_live_ranking_list_api_v1_tiktok_app_v2_fetch_live_ranking_list_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'room_id' in local_var_params and local_var_params['room_id'] is not None:  # noqa: E501
            query_params.append(('room_id', local_var_params['room_id']))  # noqa: E501
        if 'anchor_id' in local_var_params and local_var_params['anchor_id'] is not None:  # noqa: E501
            query_params.append(('anchor_id', local_var_params['anchor_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_live_ranking_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_live_search_result_api_v1_tiktok_app_v2_fetch_live_search_result_get(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的直播搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_live_search_result） | Get live search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_live_search_result)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_search_result_api_v1_tiktok_app_v2_fetch_live_search_result_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_live_search_result_api_v1_tiktok_app_v2_fetch_live_search_result_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_live_search_result_api_v1_tiktok_app_v2_fetch_live_search_result_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的直播搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_live_search_result） | Get live search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_live_search_result)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_search_result_api_v1_tiktok_app_v2_fetch_live_search_result_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'offset',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_live_search_result_api_v1_tiktok_app_v2_fetch_live_search_result_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_live_search_result_api_v1_tiktok_app_v2_fetch_live_search_result_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_live_search_result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_live_search_result_api_v1_tiktok_app_v2_fetch_live_search_result_get_0(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的直播搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_live_search_result） | Get live search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_live_search_result)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_search_result_api_v1_tiktok_app_v2_fetch_live_search_result_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_live_search_result_api_v1_tiktok_app_v2_fetch_live_search_result_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_live_search_result_api_v1_tiktok_app_v2_fetch_live_search_result_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的直播搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_live_search_result） | Get live search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_live_search_result)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_search_result_api_v1_tiktok_app_v2_fetch_live_search_result_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'offset',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_live_search_result_api_v1_tiktok_app_v2_fetch_live_search_result_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_live_search_result_api_v1_tiktok_app_v2_fetch_live_search_result_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_live_search_result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_music_detail_api_v1_tiktok_app_v2_fetch_music_detail_get(self, music_id, **kwargs):  # noqa: E501
        """获取指定音乐的详情数据/Get details of specified music  # noqa: E501

        # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"6943027371519772674\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_music_detail_api_v1_tiktok_app_v2_fetch_music_detail_get(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 音乐id/Music id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_music_detail_api_v1_tiktok_app_v2_fetch_music_detail_get_with_http_info(music_id, **kwargs)  # noqa: E501

    def fetch_music_detail_api_v1_tiktok_app_v2_fetch_music_detail_get_with_http_info(self, music_id, **kwargs):  # noqa: E501
        """获取指定音乐的详情数据/Get details of specified music  # noqa: E501

        # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"6943027371519772674\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_music_detail_api_v1_tiktok_app_v2_fetch_music_detail_get_with_http_info(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 音乐id/Music id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'music_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_music_detail_api_v1_tiktok_app_v2_fetch_music_detail_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'music_id' is set
        if self.api_client.client_side_validation and ('music_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['music_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `music_id` when calling `fetch_music_detail_api_v1_tiktok_app_v2_fetch_music_detail_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'music_id' in local_var_params and local_var_params['music_id'] is not None:  # noqa: E501
            query_params.append(('music_id', local_var_params['music_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_music_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_music_detail_api_v1_tiktok_app_v2_fetch_music_detail_get_0(self, music_id, **kwargs):  # noqa: E501
        """获取指定音乐的详情数据/Get details of specified music  # noqa: E501

        # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"6943027371519772674\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_music_detail_api_v1_tiktok_app_v2_fetch_music_detail_get_0(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 音乐id/Music id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_music_detail_api_v1_tiktok_app_v2_fetch_music_detail_get_0_with_http_info(music_id, **kwargs)  # noqa: E501

    def fetch_music_detail_api_v1_tiktok_app_v2_fetch_music_detail_get_0_with_http_info(self, music_id, **kwargs):  # noqa: E501
        """获取指定音乐的详情数据/Get details of specified music  # noqa: E501

        # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"6943027371519772674\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_music_detail_api_v1_tiktok_app_v2_fetch_music_detail_get_0_with_http_info(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 音乐id/Music id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'music_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_music_detail_api_v1_tiktok_app_v2_fetch_music_detail_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'music_id' is set
        if self.api_client.client_side_validation and ('music_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['music_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `music_id` when calling `fetch_music_detail_api_v1_tiktok_app_v2_fetch_music_detail_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'music_id' in local_var_params and local_var_params['music_id'] is not None:  # noqa: E501
            query_params.append(('music_id', local_var_params['music_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_music_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_music_search_result_api_v1_tiktok_app_v2_fetch_music_search_result_get(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的音乐搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_music_search_result） | Get music search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_music_search_result)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_music_search_result_api_v1_tiktok_app_v2_fetch_music_search_result_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_music_search_result_api_v1_tiktok_app_v2_fetch_music_search_result_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_music_search_result_api_v1_tiktok_app_v2_fetch_music_search_result_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的音乐搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_music_search_result） | Get music search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_music_search_result)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_music_search_result_api_v1_tiktok_app_v2_fetch_music_search_result_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'offset',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_music_search_result_api_v1_tiktok_app_v2_fetch_music_search_result_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_music_search_result_api_v1_tiktok_app_v2_fetch_music_search_result_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_music_search_result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_music_search_result_api_v1_tiktok_app_v2_fetch_music_search_result_get_0(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的音乐搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_music_search_result） | Get music search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_music_search_result)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_music_search_result_api_v1_tiktok_app_v2_fetch_music_search_result_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_music_search_result_api_v1_tiktok_app_v2_fetch_music_search_result_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_music_search_result_api_v1_tiktok_app_v2_fetch_music_search_result_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的音乐搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_music_search_result） | Get music search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_music_search_result)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_music_search_result_api_v1_tiktok_app_v2_fetch_music_search_result_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'offset',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_music_search_result_api_v1_tiktok_app_v2_fetch_music_search_result_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_music_search_result_api_v1_tiktok_app_v2_fetch_music_search_result_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_music_search_result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_music_video_list_api_v1_tiktok_app_v2_fetch_music_video_list_get(self, music_id, **kwargs):  # noqa: E501
        """获取指定音乐的视频列表数据/Get video list of specified music  # noqa: E501

        # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id = \"6943027371519772674\" cursor = 0 count = 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_music_video_list_api_v1_tiktok_app_v2_fetch_music_video_list_get(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 音乐id/Music id (required)
        :param int cursor: 游标/Cursor
        :param int count: 数量/Number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_music_video_list_api_v1_tiktok_app_v2_fetch_music_video_list_get_with_http_info(music_id, **kwargs)  # noqa: E501

    def fetch_music_video_list_api_v1_tiktok_app_v2_fetch_music_video_list_get_with_http_info(self, music_id, **kwargs):  # noqa: E501
        """获取指定音乐的视频列表数据/Get video list of specified music  # noqa: E501

        # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id = \"6943027371519772674\" cursor = 0 count = 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_music_video_list_api_v1_tiktok_app_v2_fetch_music_video_list_get_with_http_info(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 音乐id/Music id (required)
        :param int cursor: 游标/Cursor
        :param int count: 数量/Number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'music_id',
            'cursor',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_music_video_list_api_v1_tiktok_app_v2_fetch_music_video_list_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'music_id' is set
        if self.api_client.client_side_validation and ('music_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['music_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `music_id` when calling `fetch_music_video_list_api_v1_tiktok_app_v2_fetch_music_video_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'music_id' in local_var_params and local_var_params['music_id'] is not None:  # noqa: E501
            query_params.append(('music_id', local_var_params['music_id']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_music_video_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_music_video_list_api_v1_tiktok_app_v2_fetch_music_video_list_get_0(self, music_id, **kwargs):  # noqa: E501
        """获取指定音乐的视频列表数据/Get video list of specified music  # noqa: E501

        # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id = \"6943027371519772674\" cursor = 0 count = 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_music_video_list_api_v1_tiktok_app_v2_fetch_music_video_list_get_0(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 音乐id/Music id (required)
        :param int cursor: 游标/Cursor
        :param int count: 数量/Number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_music_video_list_api_v1_tiktok_app_v2_fetch_music_video_list_get_0_with_http_info(music_id, **kwargs)  # noqa: E501

    def fetch_music_video_list_api_v1_tiktok_app_v2_fetch_music_video_list_get_0_with_http_info(self, music_id, **kwargs):  # noqa: E501
        """获取指定音乐的视频列表数据/Get video list of specified music  # noqa: E501

        # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id = \"6943027371519772674\" cursor = 0 count = 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_music_video_list_api_v1_tiktok_app_v2_fetch_music_video_list_get_0_with_http_info(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: 音乐id/Music id (required)
        :param int cursor: 游标/Cursor
        :param int count: 数量/Number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'music_id',
            'cursor',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_music_video_list_api_v1_tiktok_app_v2_fetch_music_video_list_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'music_id' is set
        if self.api_client.client_side_validation and ('music_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['music_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `music_id` when calling `fetch_music_video_list_api_v1_tiktok_app_v2_fetch_music_video_list_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'music_id' in local_var_params and local_var_params['music_id'] is not None:  # noqa: E501
            query_params.append(('music_id', local_var_params['music_id']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_music_video_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_api_v1_tiktok_app_v2_fetch_one_video_get(self, aweme_id, **kwargs):  # noqa: E501
        """获取单个作品数据/Get single video data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7350810998023949599\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_tiktok_app_v2_fetch_one_video_get(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_api_v1_tiktok_app_v2_fetch_one_video_get_with_http_info(aweme_id, **kwargs)  # noqa: E501

    def fetch_one_video_api_v1_tiktok_app_v2_fetch_one_video_get_with_http_info(self, aweme_id, **kwargs):  # noqa: E501
        """获取单个作品数据/Get single video data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7350810998023949599\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_tiktok_app_v2_fetch_one_video_get_with_http_info(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'aweme_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_api_v1_tiktok_app_v2_fetch_one_video_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'aweme_id' is set
        if self.api_client.client_side_validation and ('aweme_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['aweme_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `aweme_id` when calling `fetch_one_video_api_v1_tiktok_app_v2_fetch_one_video_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'aweme_id' in local_var_params and local_var_params['aweme_id'] is not None:  # noqa: E501
            query_params.append(('aweme_id', local_var_params['aweme_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_one_video', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_api_v1_tiktok_app_v2_fetch_one_video_get_0(self, aweme_id, **kwargs):  # noqa: E501
        """获取单个作品数据/Get single video data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7350810998023949599\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_tiktok_app_v2_fetch_one_video_get_0(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_api_v1_tiktok_app_v2_fetch_one_video_get_0_with_http_info(aweme_id, **kwargs)  # noqa: E501

    def fetch_one_video_api_v1_tiktok_app_v2_fetch_one_video_get_0_with_http_info(self, aweme_id, **kwargs):  # noqa: E501
        """获取单个作品数据/Get single video data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7350810998023949599\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_tiktok_app_v2_fetch_one_video_get_0_with_http_info(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'aweme_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_api_v1_tiktok_app_v2_fetch_one_video_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'aweme_id' is set
        if self.api_client.client_side_validation and ('aweme_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['aweme_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `aweme_id` when calling `fetch_one_video_api_v1_tiktok_app_v2_fetch_one_video_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'aweme_id' in local_var_params and local_var_params['aweme_id'] is not None:  # noqa: E501
            query_params.append(('aweme_id', local_var_params['aweme_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_one_video', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_by_share_url_api_v1_tiktok_app_v2_fetch_one_video_by_share_url_get(self, share_url, **kwargs):  # noqa: E501
        """根据分享链接获取单个作品数据/Get single video data by sharing link  # noqa: E501

        # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://www.tiktok.com/t/ZTFNEj8Hk/\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_by_share_url_api_v1_tiktok_app_v2_fetch_one_video_by_share_url_get(share_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_url: 分享链接/Share link (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_by_share_url_api_v1_tiktok_app_v2_fetch_one_video_by_share_url_get_with_http_info(share_url, **kwargs)  # noqa: E501

    def fetch_one_video_by_share_url_api_v1_tiktok_app_v2_fetch_one_video_by_share_url_get_with_http_info(self, share_url, **kwargs):  # noqa: E501
        """根据分享链接获取单个作品数据/Get single video data by sharing link  # noqa: E501

        # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://www.tiktok.com/t/ZTFNEj8Hk/\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_by_share_url_api_v1_tiktok_app_v2_fetch_one_video_by_share_url_get_with_http_info(share_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_url: 分享链接/Share link (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'share_url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_by_share_url_api_v1_tiktok_app_v2_fetch_one_video_by_share_url_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'share_url' is set
        if self.api_client.client_side_validation and ('share_url' not in local_var_params or  # noqa: E501
                                                        local_var_params['share_url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `share_url` when calling `fetch_one_video_by_share_url_api_v1_tiktok_app_v2_fetch_one_video_by_share_url_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'share_url' in local_var_params and local_var_params['share_url'] is not None:  # noqa: E501
            query_params.append(('share_url', local_var_params['share_url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_one_video_by_share_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_by_share_url_api_v1_tiktok_app_v2_fetch_one_video_by_share_url_get_0(self, share_url, **kwargs):  # noqa: E501
        """根据分享链接获取单个作品数据/Get single video data by sharing link  # noqa: E501

        # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://www.tiktok.com/t/ZTFNEj8Hk/\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_by_share_url_api_v1_tiktok_app_v2_fetch_one_video_by_share_url_get_0(share_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_url: 分享链接/Share link (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_by_share_url_api_v1_tiktok_app_v2_fetch_one_video_by_share_url_get_0_with_http_info(share_url, **kwargs)  # noqa: E501

    def fetch_one_video_by_share_url_api_v1_tiktok_app_v2_fetch_one_video_by_share_url_get_0_with_http_info(self, share_url, **kwargs):  # noqa: E501
        """根据分享链接获取单个作品数据/Get single video data by sharing link  # noqa: E501

        # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://www.tiktok.com/t/ZTFNEj8Hk/\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_by_share_url_api_v1_tiktok_app_v2_fetch_one_video_by_share_url_get_0_with_http_info(share_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_url: 分享链接/Share link (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'share_url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_by_share_url_api_v1_tiktok_app_v2_fetch_one_video_by_share_url_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'share_url' is set
        if self.api_client.client_side_validation and ('share_url' not in local_var_params or  # noqa: E501
                                                        local_var_params['share_url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `share_url` when calling `fetch_one_video_by_share_url_api_v1_tiktok_app_v2_fetch_one_video_by_share_url_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'share_url' in local_var_params and local_var_params['share_url'] is not None:  # noqa: E501
            query_params.append(('share_url', local_var_params['share_url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_one_video_by_share_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_follower_list_api_v1_tiktok_app_v2_fetch_user_follower_list_get(self, sec_user_id, **kwargs):  # noqa: E501
        """获取指定用户的粉丝列表数据/Get follower list of specified user  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 40 min_time = 1719570100 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_follower_list_api_v1_tiktok_app_v2_fetch_user_follower_list_get(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param int count: 数量/Number
        :param int min_time: 最小时间，用于翻页/Minimum time for paging
        :param str page_token: 翻页token/Page token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_follower_list_api_v1_tiktok_app_v2_fetch_user_follower_list_get_with_http_info(sec_user_id, **kwargs)  # noqa: E501

    def fetch_user_follower_list_api_v1_tiktok_app_v2_fetch_user_follower_list_get_with_http_info(self, sec_user_id, **kwargs):  # noqa: E501
        """获取指定用户的粉丝列表数据/Get follower list of specified user  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 40 min_time = 1719570100 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_follower_list_api_v1_tiktok_app_v2_fetch_user_follower_list_get_with_http_info(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param int count: 数量/Number
        :param int min_time: 最小时间，用于翻页/Minimum time for paging
        :param str page_token: 翻页token/Page token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_user_id',
            'count',
            'min_time',
            'page_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_follower_list_api_v1_tiktok_app_v2_fetch_user_follower_list_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_user_id' is set
        if self.api_client.client_side_validation and ('sec_user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_user_id` when calling `fetch_user_follower_list_api_v1_tiktok_app_v2_fetch_user_follower_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_user_id' in local_var_params and local_var_params['sec_user_id'] is not None:  # noqa: E501
            query_params.append(('sec_user_id', local_var_params['sec_user_id']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'min_time' in local_var_params and local_var_params['min_time'] is not None:  # noqa: E501
            query_params.append(('min_time', local_var_params['min_time']))  # noqa: E501
        if 'page_token' in local_var_params and local_var_params['page_token'] is not None:  # noqa: E501
            query_params.append(('page_token', local_var_params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_user_follower_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_follower_list_api_v1_tiktok_app_v2_fetch_user_follower_list_get_0(self, sec_user_id, **kwargs):  # noqa: E501
        """获取指定用户的粉丝列表数据/Get follower list of specified user  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 40 min_time = 1719570100 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_follower_list_api_v1_tiktok_app_v2_fetch_user_follower_list_get_0(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param int count: 数量/Number
        :param int min_time: 最小时间，用于翻页/Minimum time for paging
        :param str page_token: 翻页token/Page token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_follower_list_api_v1_tiktok_app_v2_fetch_user_follower_list_get_0_with_http_info(sec_user_id, **kwargs)  # noqa: E501

    def fetch_user_follower_list_api_v1_tiktok_app_v2_fetch_user_follower_list_get_0_with_http_info(self, sec_user_id, **kwargs):  # noqa: E501
        """获取指定用户的粉丝列表数据/Get follower list of specified user  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 40 min_time = 1719570100 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_follower_list_api_v1_tiktok_app_v2_fetch_user_follower_list_get_0_with_http_info(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param int count: 数量/Number
        :param int min_time: 最小时间，用于翻页/Minimum time for paging
        :param str page_token: 翻页token/Page token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_user_id',
            'count',
            'min_time',
            'page_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_follower_list_api_v1_tiktok_app_v2_fetch_user_follower_list_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_user_id' is set
        if self.api_client.client_side_validation and ('sec_user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_user_id` when calling `fetch_user_follower_list_api_v1_tiktok_app_v2_fetch_user_follower_list_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_user_id' in local_var_params and local_var_params['sec_user_id'] is not None:  # noqa: E501
            query_params.append(('sec_user_id', local_var_params['sec_user_id']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'min_time' in local_var_params and local_var_params['min_time'] is not None:  # noqa: E501
            query_params.append(('min_time', local_var_params['min_time']))  # noqa: E501
        if 'page_token' in local_var_params and local_var_params['page_token'] is not None:  # noqa: E501
            query_params.append(('page_token', local_var_params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_user_follower_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_following_list_api_v1_tiktok_app_v2_fetch_user_following_list_get(self, sec_user_id, **kwargs):  # noqa: E501
        """获取指定用户的关注列表数据/Get following list of specified user  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 20 min_time = 1639642146 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_following_list_api_v1_tiktok_app_v2_fetch_user_following_list_get(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param int count: 数量/Number
        :param int min_time: 最小时间，用于翻页/Minimum time for paging
        :param str page_token: 翻页token/Page token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_following_list_api_v1_tiktok_app_v2_fetch_user_following_list_get_with_http_info(sec_user_id, **kwargs)  # noqa: E501

    def fetch_user_following_list_api_v1_tiktok_app_v2_fetch_user_following_list_get_with_http_info(self, sec_user_id, **kwargs):  # noqa: E501
        """获取指定用户的关注列表数据/Get following list of specified user  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 20 min_time = 1639642146 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_following_list_api_v1_tiktok_app_v2_fetch_user_following_list_get_with_http_info(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param int count: 数量/Number
        :param int min_time: 最小时间，用于翻页/Minimum time for paging
        :param str page_token: 翻页token/Page token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_user_id',
            'count',
            'min_time',
            'page_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_following_list_api_v1_tiktok_app_v2_fetch_user_following_list_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_user_id' is set
        if self.api_client.client_side_validation and ('sec_user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_user_id` when calling `fetch_user_following_list_api_v1_tiktok_app_v2_fetch_user_following_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_user_id' in local_var_params and local_var_params['sec_user_id'] is not None:  # noqa: E501
            query_params.append(('sec_user_id', local_var_params['sec_user_id']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'min_time' in local_var_params and local_var_params['min_time'] is not None:  # noqa: E501
            query_params.append(('min_time', local_var_params['min_time']))  # noqa: E501
        if 'page_token' in local_var_params and local_var_params['page_token'] is not None:  # noqa: E501
            query_params.append(('page_token', local_var_params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_user_following_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_following_list_api_v1_tiktok_app_v2_fetch_user_following_list_get_0(self, sec_user_id, **kwargs):  # noqa: E501
        """获取指定用户的关注列表数据/Get following list of specified user  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 20 min_time = 1639642146 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_following_list_api_v1_tiktok_app_v2_fetch_user_following_list_get_0(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param int count: 数量/Number
        :param int min_time: 最小时间，用于翻页/Minimum time for paging
        :param str page_token: 翻页token/Page token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_following_list_api_v1_tiktok_app_v2_fetch_user_following_list_get_0_with_http_info(sec_user_id, **kwargs)  # noqa: E501

    def fetch_user_following_list_api_v1_tiktok_app_v2_fetch_user_following_list_get_0_with_http_info(self, sec_user_id, **kwargs):  # noqa: E501
        """获取指定用户的关注列表数据/Get following list of specified user  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 20 min_time = 1639642146 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_following_list_api_v1_tiktok_app_v2_fetch_user_following_list_get_0_with_http_info(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param int count: 数量/Number
        :param int min_time: 最小时间，用于翻页/Minimum time for paging
        :param str page_token: 翻页token/Page token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_user_id',
            'count',
            'min_time',
            'page_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_following_list_api_v1_tiktok_app_v2_fetch_user_following_list_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_user_id' is set
        if self.api_client.client_side_validation and ('sec_user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_user_id` when calling `fetch_user_following_list_api_v1_tiktok_app_v2_fetch_user_following_list_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_user_id' in local_var_params and local_var_params['sec_user_id'] is not None:  # noqa: E501
            query_params.append(('sec_user_id', local_var_params['sec_user_id']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'min_time' in local_var_params and local_var_params['min_time'] is not None:  # noqa: E501
            query_params.append(('min_time', local_var_params['min_time']))  # noqa: E501
        if 'page_token' in local_var_params and local_var_params['page_token'] is not None:  # noqa: E501
            query_params.append(('page_token', local_var_params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_user_following_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_like_videos_api_v1_tiktok_app_v2_fetch_user_like_videos_get(self, sec_user_id, **kwargs):  # noqa: E501
        """获取用户喜欢作品数据/Get user like video data  # noqa: E501

        # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_like_videos_api_v1_tiktok_app_v2_fetch_user_like_videos_get(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param int max_cursor: 最大游标/Maximum cursor
        :param int counts: 每页数量/Number per page
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_like_videos_api_v1_tiktok_app_v2_fetch_user_like_videos_get_with_http_info(sec_user_id, **kwargs)  # noqa: E501

    def fetch_user_like_videos_api_v1_tiktok_app_v2_fetch_user_like_videos_get_with_http_info(self, sec_user_id, **kwargs):  # noqa: E501
        """获取用户喜欢作品数据/Get user like video data  # noqa: E501

        # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_like_videos_api_v1_tiktok_app_v2_fetch_user_like_videos_get_with_http_info(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param int max_cursor: 最大游标/Maximum cursor
        :param int counts: 每页数量/Number per page
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_user_id',
            'max_cursor',
            'counts'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_like_videos_api_v1_tiktok_app_v2_fetch_user_like_videos_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_user_id' is set
        if self.api_client.client_side_validation and ('sec_user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_user_id` when calling `fetch_user_like_videos_api_v1_tiktok_app_v2_fetch_user_like_videos_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_user_id' in local_var_params and local_var_params['sec_user_id'] is not None:  # noqa: E501
            query_params.append(('sec_user_id', local_var_params['sec_user_id']))  # noqa: E501
        if 'max_cursor' in local_var_params and local_var_params['max_cursor'] is not None:  # noqa: E501
            query_params.append(('max_cursor', local_var_params['max_cursor']))  # noqa: E501
        if 'counts' in local_var_params and local_var_params['counts'] is not None:  # noqa: E501
            query_params.append(('counts', local_var_params['counts']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_user_like_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_like_videos_api_v1_tiktok_app_v2_fetch_user_like_videos_get_0(self, sec_user_id, **kwargs):  # noqa: E501
        """获取用户喜欢作品数据/Get user like video data  # noqa: E501

        # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_like_videos_api_v1_tiktok_app_v2_fetch_user_like_videos_get_0(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param int max_cursor: 最大游标/Maximum cursor
        :param int counts: 每页数量/Number per page
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_like_videos_api_v1_tiktok_app_v2_fetch_user_like_videos_get_0_with_http_info(sec_user_id, **kwargs)  # noqa: E501

    def fetch_user_like_videos_api_v1_tiktok_app_v2_fetch_user_like_videos_get_0_with_http_info(self, sec_user_id, **kwargs):  # noqa: E501
        """获取用户喜欢作品数据/Get user like video data  # noqa: E501

        # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_like_videos_api_v1_tiktok_app_v2_fetch_user_like_videos_get_0_with_http_info(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param int max_cursor: 最大游标/Maximum cursor
        :param int counts: 每页数量/Number per page
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_user_id',
            'max_cursor',
            'counts'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_like_videos_api_v1_tiktok_app_v2_fetch_user_like_videos_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_user_id' is set
        if self.api_client.client_side_validation and ('sec_user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_user_id` when calling `fetch_user_like_videos_api_v1_tiktok_app_v2_fetch_user_like_videos_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_user_id' in local_var_params and local_var_params['sec_user_id'] is not None:  # noqa: E501
            query_params.append(('sec_user_id', local_var_params['sec_user_id']))  # noqa: E501
        if 'max_cursor' in local_var_params and local_var_params['max_cursor'] is not None:  # noqa: E501
            query_params.append(('max_cursor', local_var_params['max_cursor']))  # noqa: E501
        if 'counts' in local_var_params and local_var_params['counts'] is not None:  # noqa: E501
            query_params.append(('counts', local_var_params['counts']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_user_like_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_post_videos_api_v1_tiktok_app_v2_fetch_user_post_videos_get(self, sec_user_id, **kwargs):  # noqa: E501
        """获取用户主页作品数据/Get user homepage video data  # noqa: E501

        # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_post_videos_api_v1_tiktok_app_v2_fetch_user_post_videos_get(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param int max_cursor: 最大游标/Maximum cursor
        :param int count: 每页数量/Number per page
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_post_videos_api_v1_tiktok_app_v2_fetch_user_post_videos_get_with_http_info(sec_user_id, **kwargs)  # noqa: E501

    def fetch_user_post_videos_api_v1_tiktok_app_v2_fetch_user_post_videos_get_with_http_info(self, sec_user_id, **kwargs):  # noqa: E501
        """获取用户主页作品数据/Get user homepage video data  # noqa: E501

        # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_post_videos_api_v1_tiktok_app_v2_fetch_user_post_videos_get_with_http_info(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param int max_cursor: 最大游标/Maximum cursor
        :param int count: 每页数量/Number per page
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_user_id',
            'max_cursor',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_post_videos_api_v1_tiktok_app_v2_fetch_user_post_videos_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_user_id' is set
        if self.api_client.client_side_validation and ('sec_user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_user_id` when calling `fetch_user_post_videos_api_v1_tiktok_app_v2_fetch_user_post_videos_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_user_id' in local_var_params and local_var_params['sec_user_id'] is not None:  # noqa: E501
            query_params.append(('sec_user_id', local_var_params['sec_user_id']))  # noqa: E501
        if 'max_cursor' in local_var_params and local_var_params['max_cursor'] is not None:  # noqa: E501
            query_params.append(('max_cursor', local_var_params['max_cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_user_post_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_post_videos_api_v1_tiktok_app_v2_fetch_user_post_videos_get_0(self, sec_user_id, **kwargs):  # noqa: E501
        """获取用户主页作品数据/Get user homepage video data  # noqa: E501

        # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_post_videos_api_v1_tiktok_app_v2_fetch_user_post_videos_get_0(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param int max_cursor: 最大游标/Maximum cursor
        :param int count: 每页数量/Number per page
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_post_videos_api_v1_tiktok_app_v2_fetch_user_post_videos_get_0_with_http_info(sec_user_id, **kwargs)  # noqa: E501

    def fetch_user_post_videos_api_v1_tiktok_app_v2_fetch_user_post_videos_get_0_with_http_info(self, sec_user_id, **kwargs):  # noqa: E501
        """获取用户主页作品数据/Get user homepage video data  # noqa: E501

        # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_post_videos_api_v1_tiktok_app_v2_fetch_user_post_videos_get_0_with_http_info(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param int max_cursor: 最大游标/Maximum cursor
        :param int count: 每页数量/Number per page
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_user_id',
            'max_cursor',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_post_videos_api_v1_tiktok_app_v2_fetch_user_post_videos_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_user_id' is set
        if self.api_client.client_side_validation and ('sec_user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_user_id` when calling `fetch_user_post_videos_api_v1_tiktok_app_v2_fetch_user_post_videos_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_user_id' in local_var_params and local_var_params['sec_user_id'] is not None:  # noqa: E501
            query_params.append(('sec_user_id', local_var_params['sec_user_id']))  # noqa: E501
        if 'max_cursor' in local_var_params and local_var_params['max_cursor'] is not None:  # noqa: E501
            query_params.append(('max_cursor', local_var_params['max_cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_user_post_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_search_result_api_v1_tiktok_app_v2_fetch_user_search_result_get(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_user_search_result） | Get user search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_user_search_result)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K = 0-1K，     - ONE_K_TO_TEN_K-1K = 1K-10K，     - TEN_K_TO_ONE_H_K = 10K-100K，     - ONE_H_K_PLUS = 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED = 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME = 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K = 0-1K,     - ONE_K_TO_TEN_K-1K = 1K-10K,     - TEN_K_TO_ONE_H_K = 10K-100K,     - ONE_H_K_PLUS = 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED = Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME = Sort by username relevance ### Return: - User search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20 user_search_follower_count = \"\" user_search_profile_type = \"\" user_search_other_pref = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_search_result_api_v1_tiktok_app_v2_fetch_user_search_result_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param str user_search_follower_count: 根据粉丝数排序/Sort by number of followers
        :param str user_search_profile_type: 根据账号类型排序/Sort by account type
        :param str user_search_other_pref: 根据其他偏好排序/Sort by other preferences
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_search_result_api_v1_tiktok_app_v2_fetch_user_search_result_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_user_search_result_api_v1_tiktok_app_v2_fetch_user_search_result_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_user_search_result） | Get user search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_user_search_result)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K = 0-1K，     - ONE_K_TO_TEN_K-1K = 1K-10K，     - TEN_K_TO_ONE_H_K = 10K-100K，     - ONE_H_K_PLUS = 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED = 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME = 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K = 0-1K,     - ONE_K_TO_TEN_K-1K = 1K-10K,     - TEN_K_TO_ONE_H_K = 10K-100K,     - ONE_H_K_PLUS = 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED = Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME = Sort by username relevance ### Return: - User search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20 user_search_follower_count = \"\" user_search_profile_type = \"\" user_search_other_pref = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_search_result_api_v1_tiktok_app_v2_fetch_user_search_result_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param str user_search_follower_count: 根据粉丝数排序/Sort by number of followers
        :param str user_search_profile_type: 根据账号类型排序/Sort by account type
        :param str user_search_other_pref: 根据其他偏好排序/Sort by other preferences
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'offset',
            'count',
            'user_search_follower_count',
            'user_search_profile_type',
            'user_search_other_pref'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_search_result_api_v1_tiktok_app_v2_fetch_user_search_result_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_user_search_result_api_v1_tiktok_app_v2_fetch_user_search_result_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'user_search_follower_count' in local_var_params and local_var_params['user_search_follower_count'] is not None:  # noqa: E501
            query_params.append(('user_search_follower_count', local_var_params['user_search_follower_count']))  # noqa: E501
        if 'user_search_profile_type' in local_var_params and local_var_params['user_search_profile_type'] is not None:  # noqa: E501
            query_params.append(('user_search_profile_type', local_var_params['user_search_profile_type']))  # noqa: E501
        if 'user_search_other_pref' in local_var_params and local_var_params['user_search_other_pref'] is not None:  # noqa: E501
            query_params.append(('user_search_other_pref', local_var_params['user_search_other_pref']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_user_search_result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_search_result_api_v1_tiktok_app_v2_fetch_user_search_result_get_0(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_user_search_result） | Get user search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_user_search_result)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K = 0-1K，     - ONE_K_TO_TEN_K-1K = 1K-10K，     - TEN_K_TO_ONE_H_K = 10K-100K，     - ONE_H_K_PLUS = 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED = 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME = 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K = 0-1K,     - ONE_K_TO_TEN_K-1K = 1K-10K,     - TEN_K_TO_ONE_H_K = 10K-100K,     - ONE_H_K_PLUS = 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED = Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME = Sort by username relevance ### Return: - User search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20 user_search_follower_count = \"\" user_search_profile_type = \"\" user_search_other_pref = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_search_result_api_v1_tiktok_app_v2_fetch_user_search_result_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param str user_search_follower_count: 根据粉丝数排序/Sort by number of followers
        :param str user_search_profile_type: 根据账号类型排序/Sort by account type
        :param str user_search_other_pref: 根据其他偏好排序/Sort by other preferences
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_search_result_api_v1_tiktok_app_v2_fetch_user_search_result_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_user_search_result_api_v1_tiktok_app_v2_fetch_user_search_result_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_user_search_result） | Get user search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_user_search_result)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K = 0-1K，     - ONE_K_TO_TEN_K-1K = 1K-10K，     - TEN_K_TO_ONE_H_K = 10K-100K，     - ONE_H_K_PLUS = 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED = 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME = 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K = 0-1K,     - ONE_K_TO_TEN_K-1K = 1K-10K,     - TEN_K_TO_ONE_H_K = 10K-100K,     - ONE_H_K_PLUS = 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED = Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME = Sort by username relevance ### Return: - User search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20 user_search_follower_count = \"\" user_search_profile_type = \"\" user_search_other_pref = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_search_result_api_v1_tiktok_app_v2_fetch_user_search_result_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param str user_search_follower_count: 根据粉丝数排序/Sort by number of followers
        :param str user_search_profile_type: 根据账号类型排序/Sort by account type
        :param str user_search_other_pref: 根据其他偏好排序/Sort by other preferences
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'offset',
            'count',
            'user_search_follower_count',
            'user_search_profile_type',
            'user_search_other_pref'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_search_result_api_v1_tiktok_app_v2_fetch_user_search_result_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_user_search_result_api_v1_tiktok_app_v2_fetch_user_search_result_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'user_search_follower_count' in local_var_params and local_var_params['user_search_follower_count'] is not None:  # noqa: E501
            query_params.append(('user_search_follower_count', local_var_params['user_search_follower_count']))  # noqa: E501
        if 'user_search_profile_type' in local_var_params and local_var_params['user_search_profile_type'] is not None:  # noqa: E501
            query_params.append(('user_search_profile_type', local_var_params['user_search_profile_type']))  # noqa: E501
        if 'user_search_other_pref' in local_var_params and local_var_params['user_search_other_pref'] is not None:  # noqa: E501
            query_params.append(('user_search_other_pref', local_var_params['user_search_other_pref']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_user_search_result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_video_comments_api_v1_tiktok_app_v2_fetch_video_comments_get(self, aweme_id, **kwargs):  # noqa: E501
        """获取单个视频评论数据/Get single video comments data  # noqa: E501

        # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7326156045968067873\" cursor = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_comments_api_v1_tiktok_app_v2_fetch_video_comments_get(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param int cursor: 游标/Cursor
        :param int count: 数量/Number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_video_comments_api_v1_tiktok_app_v2_fetch_video_comments_get_with_http_info(aweme_id, **kwargs)  # noqa: E501

    def fetch_video_comments_api_v1_tiktok_app_v2_fetch_video_comments_get_with_http_info(self, aweme_id, **kwargs):  # noqa: E501
        """获取单个视频评论数据/Get single video comments data  # noqa: E501

        # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7326156045968067873\" cursor = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_comments_api_v1_tiktok_app_v2_fetch_video_comments_get_with_http_info(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param int cursor: 游标/Cursor
        :param int count: 数量/Number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'aweme_id',
            'cursor',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_video_comments_api_v1_tiktok_app_v2_fetch_video_comments_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'aweme_id' is set
        if self.api_client.client_side_validation and ('aweme_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['aweme_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `aweme_id` when calling `fetch_video_comments_api_v1_tiktok_app_v2_fetch_video_comments_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'aweme_id' in local_var_params and local_var_params['aweme_id'] is not None:  # noqa: E501
            query_params.append(('aweme_id', local_var_params['aweme_id']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_video_comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_video_comments_api_v1_tiktok_app_v2_fetch_video_comments_get_0(self, aweme_id, **kwargs):  # noqa: E501
        """获取单个视频评论数据/Get single video comments data  # noqa: E501

        # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7326156045968067873\" cursor = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_comments_api_v1_tiktok_app_v2_fetch_video_comments_get_0(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param int cursor: 游标/Cursor
        :param int count: 数量/Number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_video_comments_api_v1_tiktok_app_v2_fetch_video_comments_get_0_with_http_info(aweme_id, **kwargs)  # noqa: E501

    def fetch_video_comments_api_v1_tiktok_app_v2_fetch_video_comments_get_0_with_http_info(self, aweme_id, **kwargs):  # noqa: E501
        """获取单个视频评论数据/Get single video comments data  # noqa: E501

        # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7326156045968067873\" cursor = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_comments_api_v1_tiktok_app_v2_fetch_video_comments_get_0_with_http_info(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param int cursor: 游标/Cursor
        :param int count: 数量/Number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'aweme_id',
            'cursor',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_video_comments_api_v1_tiktok_app_v2_fetch_video_comments_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'aweme_id' is set
        if self.api_client.client_side_validation and ('aweme_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['aweme_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `aweme_id` when calling `fetch_video_comments_api_v1_tiktok_app_v2_fetch_video_comments_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'aweme_id' in local_var_params and local_var_params['aweme_id'] is not None:  # noqa: E501
            query_params.append(('aweme_id', local_var_params['aweme_id']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_video_comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_video_comments_reply_api_v1_tiktok_app_v2_fetch_video_comment_replies_get(self, item_id, comment_id, **kwargs):  # noqa: E501
        """获取指定视频的评论回复数据/Get comment replies data of specified video  # noqa: E501

        # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7326156045968067873\" comment_id = \"7327061675382260482\" cursor = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_comments_reply_api_v1_tiktok_app_v2_fetch_video_comment_replies_get(item_id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str item_id: 作品id/Video id (required)
        :param str comment_id: 评论id/Comment id (required)
        :param int cursor: 游标/Cursor
        :param int count: 数量/Number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_video_comments_reply_api_v1_tiktok_app_v2_fetch_video_comment_replies_get_with_http_info(item_id, comment_id, **kwargs)  # noqa: E501

    def fetch_video_comments_reply_api_v1_tiktok_app_v2_fetch_video_comment_replies_get_with_http_info(self, item_id, comment_id, **kwargs):  # noqa: E501
        """获取指定视频的评论回复数据/Get comment replies data of specified video  # noqa: E501

        # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7326156045968067873\" comment_id = \"7327061675382260482\" cursor = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_comments_reply_api_v1_tiktok_app_v2_fetch_video_comment_replies_get_with_http_info(item_id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str item_id: 作品id/Video id (required)
        :param str comment_id: 评论id/Comment id (required)
        :param int cursor: 游标/Cursor
        :param int count: 数量/Number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'item_id',
            'comment_id',
            'cursor',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_video_comments_reply_api_v1_tiktok_app_v2_fetch_video_comment_replies_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'item_id' is set
        if self.api_client.client_side_validation and ('item_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['item_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `item_id` when calling `fetch_video_comments_reply_api_v1_tiktok_app_v2_fetch_video_comment_replies_get`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if self.api_client.client_side_validation and ('comment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['comment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `comment_id` when calling `fetch_video_comments_reply_api_v1_tiktok_app_v2_fetch_video_comment_replies_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'item_id' in local_var_params and local_var_params['item_id'] is not None:  # noqa: E501
            query_params.append(('item_id', local_var_params['item_id']))  # noqa: E501
        if 'comment_id' in local_var_params and local_var_params['comment_id'] is not None:  # noqa: E501
            query_params.append(('comment_id', local_var_params['comment_id']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_video_comment_replies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_video_comments_reply_api_v1_tiktok_app_v2_fetch_video_comment_replies_get_0(self, item_id, comment_id, **kwargs):  # noqa: E501
        """获取指定视频的评论回复数据/Get comment replies data of specified video  # noqa: E501

        # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7326156045968067873\" comment_id = \"7327061675382260482\" cursor = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_comments_reply_api_v1_tiktok_app_v2_fetch_video_comment_replies_get_0(item_id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str item_id: 作品id/Video id (required)
        :param str comment_id: 评论id/Comment id (required)
        :param int cursor: 游标/Cursor
        :param int count: 数量/Number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_video_comments_reply_api_v1_tiktok_app_v2_fetch_video_comment_replies_get_0_with_http_info(item_id, comment_id, **kwargs)  # noqa: E501

    def fetch_video_comments_reply_api_v1_tiktok_app_v2_fetch_video_comment_replies_get_0_with_http_info(self, item_id, comment_id, **kwargs):  # noqa: E501
        """获取指定视频的评论回复数据/Get comment replies data of specified video  # noqa: E501

        # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7326156045968067873\" comment_id = \"7327061675382260482\" cursor = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_comments_reply_api_v1_tiktok_app_v2_fetch_video_comment_replies_get_0_with_http_info(item_id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str item_id: 作品id/Video id (required)
        :param str comment_id: 评论id/Comment id (required)
        :param int cursor: 游标/Cursor
        :param int count: 数量/Number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'item_id',
            'comment_id',
            'cursor',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_video_comments_reply_api_v1_tiktok_app_v2_fetch_video_comment_replies_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'item_id' is set
        if self.api_client.client_side_validation and ('item_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['item_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `item_id` when calling `fetch_video_comments_reply_api_v1_tiktok_app_v2_fetch_video_comment_replies_get_0`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if self.api_client.client_side_validation and ('comment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['comment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `comment_id` when calling `fetch_video_comments_reply_api_v1_tiktok_app_v2_fetch_video_comment_replies_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'item_id' in local_var_params and local_var_params['item_id'] is not None:  # noqa: E501
            query_params.append(('item_id', local_var_params['item_id']))  # noqa: E501
        if 'comment_id' in local_var_params and local_var_params['comment_id'] is not None:  # noqa: E501
            query_params.append(('comment_id', local_var_params['comment_id']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_video_comment_replies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_video_search_result_api_v1_tiktok_app_v2_fetch_video_search_result_get(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_video_search_result） | Get video search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_video_search_result)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_search_result_api_v1_tiktok_app_v2_fetch_video_search_result_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param int sort_type: 排序类型/Sort type
        :param int publish_time: 发布时间/Publish time
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_video_search_result_api_v1_tiktok_app_v2_fetch_video_search_result_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_video_search_result_api_v1_tiktok_app_v2_fetch_video_search_result_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_video_search_result） | Get video search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_video_search_result)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_search_result_api_v1_tiktok_app_v2_fetch_video_search_result_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param int sort_type: 排序类型/Sort type
        :param int publish_time: 发布时间/Publish time
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'offset',
            'count',
            'sort_type',
            'publish_time'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_video_search_result_api_v1_tiktok_app_v2_fetch_video_search_result_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_video_search_result_api_v1_tiktok_app_v2_fetch_video_search_result_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'sort_type' in local_var_params and local_var_params['sort_type'] is not None:  # noqa: E501
            query_params.append(('sort_type', local_var_params['sort_type']))  # noqa: E501
        if 'publish_time' in local_var_params and local_var_params['publish_time'] is not None:  # noqa: E501
            query_params.append(('publish_time', local_var_params['publish_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_video_search_result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_video_search_result_api_v1_tiktok_app_v2_fetch_video_search_result_get_0(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_video_search_result） | Get video search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_video_search_result)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_search_result_api_v1_tiktok_app_v2_fetch_video_search_result_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param int sort_type: 排序类型/Sort type
        :param int publish_time: 发布时间/Publish time
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_video_search_result_api_v1_tiktok_app_v2_fetch_video_search_result_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_video_search_result_api_v1_tiktok_app_v2_fetch_video_search_result_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_video_search_result） | Get video search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_video_search_result)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_search_result_api_v1_tiktok_app_v2_fetch_video_search_result_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param int sort_type: 排序类型/Sort type
        :param int publish_time: 发布时间/Publish time
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'offset',
            'count',
            'sort_type',
            'publish_time'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_video_search_result_api_v1_tiktok_app_v2_fetch_video_search_result_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_video_search_result_api_v1_tiktok_app_v2_fetch_video_search_result_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'sort_type' in local_var_params and local_var_params['sort_type'] is not None:  # noqa: E501
            query_params.append(('sort_type', local_var_params['sort_type']))  # noqa: E501
        if 'publish_time' in local_var_params and local_var_params['publish_time'] is not None:  # noqa: E501
            query_params.append(('publish_time', local_var_params['publish_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/fetch_video_search_result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def handler_user_profile_api_v1_tiktok_app_v2_handler_user_profile_get(self, sec_user_id, **kwargs):  # noqa: E501
        """获取指定用户的信息/Get information of specified user  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.handler_user_profile_api_v1_tiktok_app_v2_handler_user_profile_get(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.handler_user_profile_api_v1_tiktok_app_v2_handler_user_profile_get_with_http_info(sec_user_id, **kwargs)  # noqa: E501

    def handler_user_profile_api_v1_tiktok_app_v2_handler_user_profile_get_with_http_info(self, sec_user_id, **kwargs):  # noqa: E501
        """获取指定用户的信息/Get information of specified user  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.handler_user_profile_api_v1_tiktok_app_v2_handler_user_profile_get_with_http_info(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method handler_user_profile_api_v1_tiktok_app_v2_handler_user_profile_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_user_id' is set
        if self.api_client.client_side_validation and ('sec_user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_user_id` when calling `handler_user_profile_api_v1_tiktok_app_v2_handler_user_profile_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_user_id' in local_var_params and local_var_params['sec_user_id'] is not None:  # noqa: E501
            query_params.append(('sec_user_id', local_var_params['sec_user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/handler_user_profile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def handler_user_profile_api_v1_tiktok_app_v2_handler_user_profile_get_0(self, sec_user_id, **kwargs):  # noqa: E501
        """获取指定用户的信息/Get information of specified user  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.handler_user_profile_api_v1_tiktok_app_v2_handler_user_profile_get_0(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.handler_user_profile_api_v1_tiktok_app_v2_handler_user_profile_get_0_with_http_info(sec_user_id, **kwargs)  # noqa: E501

    def handler_user_profile_api_v1_tiktok_app_v2_handler_user_profile_get_0_with_http_info(self, sec_user_id, **kwargs):  # noqa: E501
        """获取指定用户的信息/Get information of specified user  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.handler_user_profile_api_v1_tiktok_app_v2_handler_user_profile_get_0_with_http_info(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method handler_user_profile_api_v1_tiktok_app_v2_handler_user_profile_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_user_id' is set
        if self.api_client.client_side_validation and ('sec_user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_user_id` when calling `handler_user_profile_api_v1_tiktok_app_v2_handler_user_profile_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_user_id' in local_var_params and local_var_params['sec_user_id'] is not None:  # noqa: E501
            query_params.append(('sec_user_id', local_var_params['sec_user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/app/v2/handler_user_profile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
