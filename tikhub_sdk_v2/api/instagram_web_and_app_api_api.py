# coding: utf-8

"""
    TikHub.io - Your Ultimate Social Media Data & API Marketplace

    High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tikhub_sdk_v2.api_client import ApiClient
from tikhub_sdk_v2.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class InstagramWebAndAPPAPIApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def fetch_comment_replies_by_comment_id_api_v1_instagram_web_app_fetch_comment_replies_by_comment_id_get(self, url, comment_id, **kwargs):  # noqa: E501
        """根据评论ID获取评论回复数据/Get comment replies by comment ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram评论ID获取评论回复数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - comment_id: Instagram评论ID - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies by Instagram comment ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - comment_id: Instagram comment ID - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Comment replies data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" comment_id = \"18033049183828491\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_comment_replies_by_comment_id_api_v1_instagram_web_app_fetch_comment_replies_by_comment_id_get(url, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: Instagram帖子URL/Instagram post URL (required)
        :param str comment_id: Instagram评论ID/Instagram comment ID (required)
        :param str pagination_token: 分页token/Pagination token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_comment_replies_by_comment_id_api_v1_instagram_web_app_fetch_comment_replies_by_comment_id_get_with_http_info(url, comment_id, **kwargs)  # noqa: E501

    def fetch_comment_replies_by_comment_id_api_v1_instagram_web_app_fetch_comment_replies_by_comment_id_get_with_http_info(self, url, comment_id, **kwargs):  # noqa: E501
        """根据评论ID获取评论回复数据/Get comment replies by comment ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram评论ID获取评论回复数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - comment_id: Instagram评论ID - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies by Instagram comment ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - comment_id: Instagram comment ID - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Comment replies data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" comment_id = \"18033049183828491\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_comment_replies_by_comment_id_api_v1_instagram_web_app_fetch_comment_replies_by_comment_id_get_with_http_info(url, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: Instagram帖子URL/Instagram post URL (required)
        :param str comment_id: Instagram评论ID/Instagram comment ID (required)
        :param str pagination_token: 分页token/Pagination token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url',
            'comment_id',
            'pagination_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_comment_replies_by_comment_id_api_v1_instagram_web_app_fetch_comment_replies_by_comment_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_comment_replies_by_comment_id_api_v1_instagram_web_app_fetch_comment_replies_by_comment_id_get`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if self.api_client.client_side_validation and ('comment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['comment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `comment_id` when calling `fetch_comment_replies_by_comment_id_api_v1_instagram_web_app_fetch_comment_replies_by_comment_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501
        if 'comment_id' in local_var_params and local_var_params['comment_id'] is not None:  # noqa: E501
            query_params.append(('comment_id', local_var_params['comment_id']))  # noqa: E501
        if 'pagination_token' in local_var_params and local_var_params['pagination_token'] is not None:  # noqa: E501
            query_params.append(('pagination_token', local_var_params['pagination_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_comment_replies_by_comment_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_comment_replies_by_comment_id_api_v1_instagram_web_app_fetch_comment_replies_by_comment_id_get_0(self, url, comment_id, **kwargs):  # noqa: E501
        """根据评论ID获取评论回复数据/Get comment replies by comment ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram评论ID获取评论回复数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - comment_id: Instagram评论ID - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies by Instagram comment ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - comment_id: Instagram comment ID - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Comment replies data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" comment_id = \"18033049183828491\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_comment_replies_by_comment_id_api_v1_instagram_web_app_fetch_comment_replies_by_comment_id_get_0(url, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: Instagram帖子URL/Instagram post URL (required)
        :param str comment_id: Instagram评论ID/Instagram comment ID (required)
        :param str pagination_token: 分页token/Pagination token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_comment_replies_by_comment_id_api_v1_instagram_web_app_fetch_comment_replies_by_comment_id_get_0_with_http_info(url, comment_id, **kwargs)  # noqa: E501

    def fetch_comment_replies_by_comment_id_api_v1_instagram_web_app_fetch_comment_replies_by_comment_id_get_0_with_http_info(self, url, comment_id, **kwargs):  # noqa: E501
        """根据评论ID获取评论回复数据/Get comment replies by comment ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram评论ID获取评论回复数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - comment_id: Instagram评论ID - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies by Instagram comment ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - comment_id: Instagram comment ID - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Comment replies data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" comment_id = \"18033049183828491\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_comment_replies_by_comment_id_api_v1_instagram_web_app_fetch_comment_replies_by_comment_id_get_0_with_http_info(url, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: Instagram帖子URL/Instagram post URL (required)
        :param str comment_id: Instagram评论ID/Instagram comment ID (required)
        :param str pagination_token: 分页token/Pagination token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url',
            'comment_id',
            'pagination_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_comment_replies_by_comment_id_api_v1_instagram_web_app_fetch_comment_replies_by_comment_id_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_comment_replies_by_comment_id_api_v1_instagram_web_app_fetch_comment_replies_by_comment_id_get_0`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if self.api_client.client_side_validation and ('comment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['comment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `comment_id` when calling `fetch_comment_replies_by_comment_id_api_v1_instagram_web_app_fetch_comment_replies_by_comment_id_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501
        if 'comment_id' in local_var_params and local_var_params['comment_id'] is not None:  # noqa: E501
            query_params.append(('comment_id', local_var_params['comment_id']))  # noqa: E501
        if 'pagination_token' in local_var_params and local_var_params['pagination_token'] is not None:  # noqa: E501
            query_params.append(('pagination_token', local_var_params['pagination_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_comment_replies_by_comment_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_global_search_api_v1_instagram_web_app_fetch_global_search_get(self, keyword, **kwargs):  # noqa: E501
        """综合搜索/Search all by query  # noqa: E501

        # [中文] ### 用途: - 综合搜索 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search all by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_global_search_api_v1_instagram_web_app_fetch_global_search_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Query (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_global_search_api_v1_instagram_web_app_fetch_global_search_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_global_search_api_v1_instagram_web_app_fetch_global_search_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """综合搜索/Search all by query  # noqa: E501

        # [中文] ### 用途: - 综合搜索 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search all by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_global_search_api_v1_instagram_web_app_fetch_global_search_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Query (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_global_search_api_v1_instagram_web_app_fetch_global_search_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_global_search_api_v1_instagram_web_app_fetch_global_search_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_global_search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_global_search_api_v1_instagram_web_app_fetch_global_search_get_0(self, keyword, **kwargs):  # noqa: E501
        """综合搜索/Search all by query  # noqa: E501

        # [中文] ### 用途: - 综合搜索 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search all by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_global_search_api_v1_instagram_web_app_fetch_global_search_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Query (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_global_search_api_v1_instagram_web_app_fetch_global_search_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_global_search_api_v1_instagram_web_app_fetch_global_search_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """综合搜索/Search all by query  # noqa: E501

        # [中文] ### 用途: - 综合搜索 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search all by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_global_search_api_v1_instagram_web_app_fetch_global_search_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Query (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_global_search_api_v1_instagram_web_app_fetch_global_search_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_global_search_api_v1_instagram_web_app_fetch_global_search_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_global_search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hashtag_posts_by_keyword_api_v1_instagram_web_app_fetch_hashtag_posts_by_keyword_get(self, keyword, **kwargs):  # noqa: E501
        """根据关键词获取话题帖子/Get hashtag posts by query  # noqa: E501

        # [中文] ### 用途: - 根据关键词获取话题帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 - pagination_token: 翻页游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 - feed_type: Feed类型     - top: 热门（默认）     - recent: 最新     - clips: 快拍 ### 返回: - 话题帖子  # [English] ### Purpose: - Get hashtag posts by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query - pagination_token: Pagination token, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. - feed_type: Feed type     - top: Top (default)     - recent: Recent (sort by time)     - clips: Clips (show only Reels) ### Return: - Hashtag posts  # [示例/Example] keyword = \"GitHub\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hashtag_posts_by_keyword_api_v1_instagram_web_app_fetch_hashtag_posts_by_keyword_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Query (required)
        :param str pagination_token: 翻页令牌/Pagination token
        :param str feed_type: Feed类型/Feed type
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hashtag_posts_by_keyword_api_v1_instagram_web_app_fetch_hashtag_posts_by_keyword_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_hashtag_posts_by_keyword_api_v1_instagram_web_app_fetch_hashtag_posts_by_keyword_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """根据关键词获取话题帖子/Get hashtag posts by query  # noqa: E501

        # [中文] ### 用途: - 根据关键词获取话题帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 - pagination_token: 翻页游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 - feed_type: Feed类型     - top: 热门（默认）     - recent: 最新     - clips: 快拍 ### 返回: - 话题帖子  # [English] ### Purpose: - Get hashtag posts by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query - pagination_token: Pagination token, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. - feed_type: Feed type     - top: Top (default)     - recent: Recent (sort by time)     - clips: Clips (show only Reels) ### Return: - Hashtag posts  # [示例/Example] keyword = \"GitHub\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hashtag_posts_by_keyword_api_v1_instagram_web_app_fetch_hashtag_posts_by_keyword_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Query (required)
        :param str pagination_token: 翻页令牌/Pagination token
        :param str feed_type: Feed类型/Feed type
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'pagination_token',
            'feed_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hashtag_posts_by_keyword_api_v1_instagram_web_app_fetch_hashtag_posts_by_keyword_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_hashtag_posts_by_keyword_api_v1_instagram_web_app_fetch_hashtag_posts_by_keyword_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'pagination_token' in local_var_params and local_var_params['pagination_token'] is not None:  # noqa: E501
            query_params.append(('pagination_token', local_var_params['pagination_token']))  # noqa: E501
        if 'feed_type' in local_var_params and local_var_params['feed_type'] is not None:  # noqa: E501
            query_params.append(('feed_type', local_var_params['feed_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_hashtag_posts_by_keyword', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hashtag_posts_by_keyword_api_v1_instagram_web_app_fetch_hashtag_posts_by_keyword_get_0(self, keyword, **kwargs):  # noqa: E501
        """根据关键词获取话题帖子/Get hashtag posts by query  # noqa: E501

        # [中文] ### 用途: - 根据关键词获取话题帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 - pagination_token: 翻页游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 - feed_type: Feed类型     - top: 热门（默认）     - recent: 最新     - clips: 快拍 ### 返回: - 话题帖子  # [English] ### Purpose: - Get hashtag posts by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query - pagination_token: Pagination token, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. - feed_type: Feed type     - top: Top (default)     - recent: Recent (sort by time)     - clips: Clips (show only Reels) ### Return: - Hashtag posts  # [示例/Example] keyword = \"GitHub\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hashtag_posts_by_keyword_api_v1_instagram_web_app_fetch_hashtag_posts_by_keyword_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Query (required)
        :param str pagination_token: 翻页令牌/Pagination token
        :param str feed_type: Feed类型/Feed type
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hashtag_posts_by_keyword_api_v1_instagram_web_app_fetch_hashtag_posts_by_keyword_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_hashtag_posts_by_keyword_api_v1_instagram_web_app_fetch_hashtag_posts_by_keyword_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """根据关键词获取话题帖子/Get hashtag posts by query  # noqa: E501

        # [中文] ### 用途: - 根据关键词获取话题帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 - pagination_token: 翻页游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 - feed_type: Feed类型     - top: 热门（默认）     - recent: 最新     - clips: 快拍 ### 返回: - 话题帖子  # [English] ### Purpose: - Get hashtag posts by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query - pagination_token: Pagination token, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. - feed_type: Feed type     - top: Top (default)     - recent: Recent (sort by time)     - clips: Clips (show only Reels) ### Return: - Hashtag posts  # [示例/Example] keyword = \"GitHub\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hashtag_posts_by_keyword_api_v1_instagram_web_app_fetch_hashtag_posts_by_keyword_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Query (required)
        :param str pagination_token: 翻页令牌/Pagination token
        :param str feed_type: Feed类型/Feed type
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'pagination_token',
            'feed_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hashtag_posts_by_keyword_api_v1_instagram_web_app_fetch_hashtag_posts_by_keyword_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_hashtag_posts_by_keyword_api_v1_instagram_web_app_fetch_hashtag_posts_by_keyword_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'pagination_token' in local_var_params and local_var_params['pagination_token'] is not None:  # noqa: E501
            query_params.append(('pagination_token', local_var_params['pagination_token']))  # noqa: E501
        if 'feed_type' in local_var_params and local_var_params['feed_type'] is not None:  # noqa: E501
            query_params.append(('feed_type', local_var_params['feed_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_hashtag_posts_by_keyword', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_highlights_by_highlight_id_api_v1_instagram_web_app_fetch_highlights_by_highlight_id_get(self, highlight_id, **kwargs):  # noqa: E501
        """根据highlights ID获取highlight数据/Get highlights by highlight ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram highlight ID获取highlight数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - highlight_id: Instagram highlight ID ### 返回: - highlight数据  # [English] ### Purpose: - Get highlights by Instagram highlight ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - highlight_id: Instagram highlight ID ### Return: - Highlight data  # [示例/Example] highlight_id = \"17871373118984285\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_highlights_by_highlight_id_api_v1_instagram_web_app_fetch_highlights_by_highlight_id_get(highlight_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str highlight_id: Instagram highlight ID/Instagram highlight ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_highlights_by_highlight_id_api_v1_instagram_web_app_fetch_highlights_by_highlight_id_get_with_http_info(highlight_id, **kwargs)  # noqa: E501

    def fetch_highlights_by_highlight_id_api_v1_instagram_web_app_fetch_highlights_by_highlight_id_get_with_http_info(self, highlight_id, **kwargs):  # noqa: E501
        """根据highlights ID获取highlight数据/Get highlights by highlight ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram highlight ID获取highlight数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - highlight_id: Instagram highlight ID ### 返回: - highlight数据  # [English] ### Purpose: - Get highlights by Instagram highlight ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - highlight_id: Instagram highlight ID ### Return: - Highlight data  # [示例/Example] highlight_id = \"17871373118984285\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_highlights_by_highlight_id_api_v1_instagram_web_app_fetch_highlights_by_highlight_id_get_with_http_info(highlight_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str highlight_id: Instagram highlight ID/Instagram highlight ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'highlight_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_highlights_by_highlight_id_api_v1_instagram_web_app_fetch_highlights_by_highlight_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'highlight_id' is set
        if self.api_client.client_side_validation and ('highlight_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['highlight_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `highlight_id` when calling `fetch_highlights_by_highlight_id_api_v1_instagram_web_app_fetch_highlights_by_highlight_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'highlight_id' in local_var_params and local_var_params['highlight_id'] is not None:  # noqa: E501
            query_params.append(('highlight_id', local_var_params['highlight_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_highlights_by_highlight_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_highlights_by_highlight_id_api_v1_instagram_web_app_fetch_highlights_by_highlight_id_get_0(self, highlight_id, **kwargs):  # noqa: E501
        """根据highlights ID获取highlight数据/Get highlights by highlight ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram highlight ID获取highlight数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - highlight_id: Instagram highlight ID ### 返回: - highlight数据  # [English] ### Purpose: - Get highlights by Instagram highlight ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - highlight_id: Instagram highlight ID ### Return: - Highlight data  # [示例/Example] highlight_id = \"17871373118984285\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_highlights_by_highlight_id_api_v1_instagram_web_app_fetch_highlights_by_highlight_id_get_0(highlight_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str highlight_id: Instagram highlight ID/Instagram highlight ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_highlights_by_highlight_id_api_v1_instagram_web_app_fetch_highlights_by_highlight_id_get_0_with_http_info(highlight_id, **kwargs)  # noqa: E501

    def fetch_highlights_by_highlight_id_api_v1_instagram_web_app_fetch_highlights_by_highlight_id_get_0_with_http_info(self, highlight_id, **kwargs):  # noqa: E501
        """根据highlights ID获取highlight数据/Get highlights by highlight ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram highlight ID获取highlight数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - highlight_id: Instagram highlight ID ### 返回: - highlight数据  # [English] ### Purpose: - Get highlights by Instagram highlight ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - highlight_id: Instagram highlight ID ### Return: - Highlight data  # [示例/Example] highlight_id = \"17871373118984285\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_highlights_by_highlight_id_api_v1_instagram_web_app_fetch_highlights_by_highlight_id_get_0_with_http_info(highlight_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str highlight_id: Instagram highlight ID/Instagram highlight ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'highlight_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_highlights_by_highlight_id_api_v1_instagram_web_app_fetch_highlights_by_highlight_id_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'highlight_id' is set
        if self.api_client.client_side_validation and ('highlight_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['highlight_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `highlight_id` when calling `fetch_highlights_by_highlight_id_api_v1_instagram_web_app_fetch_highlights_by_highlight_id_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'highlight_id' in local_var_params and local_var_params['highlight_id'] is not None:  # noqa: E501
            query_params.append(('highlight_id', local_var_params['highlight_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_highlights_by_highlight_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_location_posts_by_location_id_api_v1_instagram_web_app_fetch_location_posts_by_location_id_get(self, location_id, **kwargs):  # noqa: E501
        """根据地点ID获取地点相关的帖子/Get location posts by location ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram地点ID获取地点相关的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - location_id: Instagram地点ID - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 地点相关的帖子  # [English] ### Purpose: - Get location posts by Instagram location ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - location_id: Instagram location ID - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Location posts  # [示例/Example] location_id = \"115412053922647\" max_id = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_location_posts_by_location_id_api_v1_instagram_web_app_fetch_location_posts_by_location_id_get(location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str location_id: Instagram地点ID/Instagram location ID (required)
        :param str max_id: 最大ID/Max ID
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_location_posts_by_location_id_api_v1_instagram_web_app_fetch_location_posts_by_location_id_get_with_http_info(location_id, **kwargs)  # noqa: E501

    def fetch_location_posts_by_location_id_api_v1_instagram_web_app_fetch_location_posts_by_location_id_get_with_http_info(self, location_id, **kwargs):  # noqa: E501
        """根据地点ID获取地点相关的帖子/Get location posts by location ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram地点ID获取地点相关的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - location_id: Instagram地点ID - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 地点相关的帖子  # [English] ### Purpose: - Get location posts by Instagram location ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - location_id: Instagram location ID - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Location posts  # [示例/Example] location_id = \"115412053922647\" max_id = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_location_posts_by_location_id_api_v1_instagram_web_app_fetch_location_posts_by_location_id_get_with_http_info(location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str location_id: Instagram地点ID/Instagram location ID (required)
        :param str max_id: 最大ID/Max ID
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'location_id',
            'max_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_location_posts_by_location_id_api_v1_instagram_web_app_fetch_location_posts_by_location_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and ('location_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['location_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `location_id` when calling `fetch_location_posts_by_location_id_api_v1_instagram_web_app_fetch_location_posts_by_location_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'location_id' in local_var_params and local_var_params['location_id'] is not None:  # noqa: E501
            query_params.append(('location_id', local_var_params['location_id']))  # noqa: E501
        if 'max_id' in local_var_params and local_var_params['max_id'] is not None:  # noqa: E501
            query_params.append(('max_id', local_var_params['max_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_location_posts_by_location_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_location_posts_by_location_id_api_v1_instagram_web_app_fetch_location_posts_by_location_id_get_0(self, location_id, **kwargs):  # noqa: E501
        """根据地点ID获取地点相关的帖子/Get location posts by location ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram地点ID获取地点相关的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - location_id: Instagram地点ID - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 地点相关的帖子  # [English] ### Purpose: - Get location posts by Instagram location ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - location_id: Instagram location ID - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Location posts  # [示例/Example] location_id = \"115412053922647\" max_id = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_location_posts_by_location_id_api_v1_instagram_web_app_fetch_location_posts_by_location_id_get_0(location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str location_id: Instagram地点ID/Instagram location ID (required)
        :param str max_id: 最大ID/Max ID
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_location_posts_by_location_id_api_v1_instagram_web_app_fetch_location_posts_by_location_id_get_0_with_http_info(location_id, **kwargs)  # noqa: E501

    def fetch_location_posts_by_location_id_api_v1_instagram_web_app_fetch_location_posts_by_location_id_get_0_with_http_info(self, location_id, **kwargs):  # noqa: E501
        """根据地点ID获取地点相关的帖子/Get location posts by location ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram地点ID获取地点相关的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - location_id: Instagram地点ID - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 地点相关的帖子  # [English] ### Purpose: - Get location posts by Instagram location ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - location_id: Instagram location ID - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Location posts  # [示例/Example] location_id = \"115412053922647\" max_id = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_location_posts_by_location_id_api_v1_instagram_web_app_fetch_location_posts_by_location_id_get_0_with_http_info(location_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str location_id: Instagram地点ID/Instagram location ID (required)
        :param str max_id: 最大ID/Max ID
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'location_id',
            'max_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_location_posts_by_location_id_api_v1_instagram_web_app_fetch_location_posts_by_location_id_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'location_id' is set
        if self.api_client.client_side_validation and ('location_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['location_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `location_id` when calling `fetch_location_posts_by_location_id_api_v1_instagram_web_app_fetch_location_posts_by_location_id_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'location_id' in local_var_params and local_var_params['location_id'] is not None:  # noqa: E501
            query_params.append(('location_id', local_var_params['location_id']))  # noqa: E501
        if 'max_id' in local_var_params and local_var_params['max_id'] is not None:  # noqa: E501
            query_params.append(('max_id', local_var_params['max_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_location_posts_by_location_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_music_info_by_music_id_api_v1_instagram_web_app_fetch_music_info_by_music_id_get(self, music_id, **kwargs):  # noqa: E501
        """根据音乐ID获取音乐数据/Get music data by music ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram音乐ID获取音乐数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - music_id: Instagram音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Get music data by Instagram music ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - music_id: Instagram music ID ### Return: - Music data  # [示例/Example] music_id = \"841270117005292\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_music_info_by_music_id_api_v1_instagram_web_app_fetch_music_info_by_music_id_get(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: Instagram音乐ID/Instagram music ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_music_info_by_music_id_api_v1_instagram_web_app_fetch_music_info_by_music_id_get_with_http_info(music_id, **kwargs)  # noqa: E501

    def fetch_music_info_by_music_id_api_v1_instagram_web_app_fetch_music_info_by_music_id_get_with_http_info(self, music_id, **kwargs):  # noqa: E501
        """根据音乐ID获取音乐数据/Get music data by music ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram音乐ID获取音乐数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - music_id: Instagram音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Get music data by Instagram music ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - music_id: Instagram music ID ### Return: - Music data  # [示例/Example] music_id = \"841270117005292\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_music_info_by_music_id_api_v1_instagram_web_app_fetch_music_info_by_music_id_get_with_http_info(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: Instagram音乐ID/Instagram music ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'music_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_music_info_by_music_id_api_v1_instagram_web_app_fetch_music_info_by_music_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'music_id' is set
        if self.api_client.client_side_validation and ('music_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['music_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `music_id` when calling `fetch_music_info_by_music_id_api_v1_instagram_web_app_fetch_music_info_by_music_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'music_id' in local_var_params and local_var_params['music_id'] is not None:  # noqa: E501
            query_params.append(('music_id', local_var_params['music_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_music_info_by_music_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_music_info_by_music_id_api_v1_instagram_web_app_fetch_music_info_by_music_id_get_0(self, music_id, **kwargs):  # noqa: E501
        """根据音乐ID获取音乐数据/Get music data by music ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram音乐ID获取音乐数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - music_id: Instagram音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Get music data by Instagram music ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - music_id: Instagram music ID ### Return: - Music data  # [示例/Example] music_id = \"841270117005292\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_music_info_by_music_id_api_v1_instagram_web_app_fetch_music_info_by_music_id_get_0(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: Instagram音乐ID/Instagram music ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_music_info_by_music_id_api_v1_instagram_web_app_fetch_music_info_by_music_id_get_0_with_http_info(music_id, **kwargs)  # noqa: E501

    def fetch_music_info_by_music_id_api_v1_instagram_web_app_fetch_music_info_by_music_id_get_0_with_http_info(self, music_id, **kwargs):  # noqa: E501
        """根据音乐ID获取音乐数据/Get music data by music ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram音乐ID获取音乐数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - music_id: Instagram音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Get music data by Instagram music ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - music_id: Instagram music ID ### Return: - Music data  # [示例/Example] music_id = \"841270117005292\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_music_info_by_music_id_api_v1_instagram_web_app_fetch_music_info_by_music_id_get_0_with_http_info(music_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str music_id: Instagram音乐ID/Instagram music ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'music_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_music_info_by_music_id_api_v1_instagram_web_app_fetch_music_info_by_music_id_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'music_id' is set
        if self.api_client.client_side_validation and ('music_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['music_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `music_id` when calling `fetch_music_info_by_music_id_api_v1_instagram_web_app_fetch_music_info_by_music_id_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'music_id' in local_var_params and local_var_params['music_id'] is not None:  # noqa: E501
            query_params.append(('music_id', local_var_params['music_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_music_info_by_music_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_post_comments_by_url_api_v1_instagram_web_app_fetch_post_comments_by_url_get(self, url, **kwargs):  # noqa: E501
        """根据URL获取帖子评论数据/Get post comments by URL  # noqa: E501

        # [中文] ### 用途: - 根据Instagram帖子URL获取帖子评论数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 帖子评论数据  # [English] ### Purpose: - Get post comments by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Post comments data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_comments_by_url_api_v1_instagram_web_app_fetch_post_comments_by_url_get(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: Instagram帖子URL/Instagram post URL (required)
        :param str pagination_token: 分页token/Pagination token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_post_comments_by_url_api_v1_instagram_web_app_fetch_post_comments_by_url_get_with_http_info(url, **kwargs)  # noqa: E501

    def fetch_post_comments_by_url_api_v1_instagram_web_app_fetch_post_comments_by_url_get_with_http_info(self, url, **kwargs):  # noqa: E501
        """根据URL获取帖子评论数据/Get post comments by URL  # noqa: E501

        # [中文] ### 用途: - 根据Instagram帖子URL获取帖子评论数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 帖子评论数据  # [English] ### Purpose: - Get post comments by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Post comments data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_comments_by_url_api_v1_instagram_web_app_fetch_post_comments_by_url_get_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: Instagram帖子URL/Instagram post URL (required)
        :param str pagination_token: 分页token/Pagination token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url',
            'pagination_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_post_comments_by_url_api_v1_instagram_web_app_fetch_post_comments_by_url_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_post_comments_by_url_api_v1_instagram_web_app_fetch_post_comments_by_url_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501
        if 'pagination_token' in local_var_params and local_var_params['pagination_token'] is not None:  # noqa: E501
            query_params.append(('pagination_token', local_var_params['pagination_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_post_comments_by_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_post_comments_by_url_api_v1_instagram_web_app_fetch_post_comments_by_url_get_0(self, url, **kwargs):  # noqa: E501
        """根据URL获取帖子评论数据/Get post comments by URL  # noqa: E501

        # [中文] ### 用途: - 根据Instagram帖子URL获取帖子评论数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 帖子评论数据  # [English] ### Purpose: - Get post comments by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Post comments data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_comments_by_url_api_v1_instagram_web_app_fetch_post_comments_by_url_get_0(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: Instagram帖子URL/Instagram post URL (required)
        :param str pagination_token: 分页token/Pagination token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_post_comments_by_url_api_v1_instagram_web_app_fetch_post_comments_by_url_get_0_with_http_info(url, **kwargs)  # noqa: E501

    def fetch_post_comments_by_url_api_v1_instagram_web_app_fetch_post_comments_by_url_get_0_with_http_info(self, url, **kwargs):  # noqa: E501
        """根据URL获取帖子评论数据/Get post comments by URL  # noqa: E501

        # [中文] ### 用途: - 根据Instagram帖子URL获取帖子评论数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 帖子评论数据  # [English] ### Purpose: - Get post comments by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Post comments data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_comments_by_url_api_v1_instagram_web_app_fetch_post_comments_by_url_get_0_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: Instagram帖子URL/Instagram post URL (required)
        :param str pagination_token: 分页token/Pagination token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url',
            'pagination_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_post_comments_by_url_api_v1_instagram_web_app_fetch_post_comments_by_url_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_post_comments_by_url_api_v1_instagram_web_app_fetch_post_comments_by_url_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501
        if 'pagination_token' in local_var_params and local_var_params['pagination_token'] is not None:  # noqa: E501
            query_params.append(('pagination_token', local_var_params['pagination_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_post_comments_by_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_post_info_by_post_id_api_v1_instagram_web_app_fetch_post_info_by_post_id_get(self, post_id, **kwargs):  # noqa: E501
        """根据帖子ID获取帖子数据/Get post data by post ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram帖子ID获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - post_id: Instagram帖子ID ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - post_id: Instagram post ID ### Return: - Post data  # [示例/Example] post_id = \"3369328379222099122\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_info_by_post_id_api_v1_instagram_web_app_fetch_post_info_by_post_id_get(post_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str post_id: Instagram帖子ID/Instagram post ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_post_info_by_post_id_api_v1_instagram_web_app_fetch_post_info_by_post_id_get_with_http_info(post_id, **kwargs)  # noqa: E501

    def fetch_post_info_by_post_id_api_v1_instagram_web_app_fetch_post_info_by_post_id_get_with_http_info(self, post_id, **kwargs):  # noqa: E501
        """根据帖子ID获取帖子数据/Get post data by post ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram帖子ID获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - post_id: Instagram帖子ID ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - post_id: Instagram post ID ### Return: - Post data  # [示例/Example] post_id = \"3369328379222099122\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_info_by_post_id_api_v1_instagram_web_app_fetch_post_info_by_post_id_get_with_http_info(post_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str post_id: Instagram帖子ID/Instagram post ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'post_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_post_info_by_post_id_api_v1_instagram_web_app_fetch_post_info_by_post_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'post_id' is set
        if self.api_client.client_side_validation and ('post_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['post_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `post_id` when calling `fetch_post_info_by_post_id_api_v1_instagram_web_app_fetch_post_info_by_post_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'post_id' in local_var_params and local_var_params['post_id'] is not None:  # noqa: E501
            query_params.append(('post_id', local_var_params['post_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_post_info_by_post_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_post_info_by_post_id_api_v1_instagram_web_app_fetch_post_info_by_post_id_get_0(self, post_id, **kwargs):  # noqa: E501
        """根据帖子ID获取帖子数据/Get post data by post ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram帖子ID获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - post_id: Instagram帖子ID ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - post_id: Instagram post ID ### Return: - Post data  # [示例/Example] post_id = \"3369328379222099122\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_info_by_post_id_api_v1_instagram_web_app_fetch_post_info_by_post_id_get_0(post_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str post_id: Instagram帖子ID/Instagram post ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_post_info_by_post_id_api_v1_instagram_web_app_fetch_post_info_by_post_id_get_0_with_http_info(post_id, **kwargs)  # noqa: E501

    def fetch_post_info_by_post_id_api_v1_instagram_web_app_fetch_post_info_by_post_id_get_0_with_http_info(self, post_id, **kwargs):  # noqa: E501
        """根据帖子ID获取帖子数据/Get post data by post ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram帖子ID获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - post_id: Instagram帖子ID ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - post_id: Instagram post ID ### Return: - Post data  # [示例/Example] post_id = \"3369328379222099122\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_info_by_post_id_api_v1_instagram_web_app_fetch_post_info_by_post_id_get_0_with_http_info(post_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str post_id: Instagram帖子ID/Instagram post ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'post_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_post_info_by_post_id_api_v1_instagram_web_app_fetch_post_info_by_post_id_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'post_id' is set
        if self.api_client.client_side_validation and ('post_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['post_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `post_id` when calling `fetch_post_info_by_post_id_api_v1_instagram_web_app_fetch_post_info_by_post_id_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'post_id' in local_var_params and local_var_params['post_id'] is not None:  # noqa: E501
            query_params.append(('post_id', local_var_params['post_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_post_info_by_post_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_post_info_by_url_api_v1_instagram_web_app_fetch_post_info_by_url_get(self, url, **kwargs):  # noqa: E501
        """根据URL获取帖子数据/Get post data by URL  # noqa: E501

        # [中文] ### 用途: - 根据Instagram帖子URL获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_info_by_url_api_v1_instagram_web_app_fetch_post_info_by_url_get(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: Instagram帖子URL/Instagram post URL (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_post_info_by_url_api_v1_instagram_web_app_fetch_post_info_by_url_get_with_http_info(url, **kwargs)  # noqa: E501

    def fetch_post_info_by_url_api_v1_instagram_web_app_fetch_post_info_by_url_get_with_http_info(self, url, **kwargs):  # noqa: E501
        """根据URL获取帖子数据/Get post data by URL  # noqa: E501

        # [中文] ### 用途: - 根据Instagram帖子URL获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_info_by_url_api_v1_instagram_web_app_fetch_post_info_by_url_get_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: Instagram帖子URL/Instagram post URL (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_post_info_by_url_api_v1_instagram_web_app_fetch_post_info_by_url_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_post_info_by_url_api_v1_instagram_web_app_fetch_post_info_by_url_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_post_info_by_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_post_info_by_url_api_v1_instagram_web_app_fetch_post_info_by_url_get_0(self, url, **kwargs):  # noqa: E501
        """根据URL获取帖子数据/Get post data by URL  # noqa: E501

        # [中文] ### 用途: - 根据Instagram帖子URL获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_info_by_url_api_v1_instagram_web_app_fetch_post_info_by_url_get_0(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: Instagram帖子URL/Instagram post URL (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_post_info_by_url_api_v1_instagram_web_app_fetch_post_info_by_url_get_0_with_http_info(url, **kwargs)  # noqa: E501

    def fetch_post_info_by_url_api_v1_instagram_web_app_fetch_post_info_by_url_get_0_with_http_info(self, url, **kwargs):  # noqa: E501
        """根据URL获取帖子数据/Get post data by URL  # noqa: E501

        # [中文] ### 用途: - 根据Instagram帖子URL获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_info_by_url_api_v1_instagram_web_app_fetch_post_info_by_url_get_0_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: Instagram帖子URL/Instagram post URL (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_post_info_by_url_api_v1_instagram_web_app_fetch_post_info_by_url_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_post_info_by_url_api_v1_instagram_web_app_fetch_post_info_by_url_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_post_info_by_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_post_likes_by_url_api_v1_instagram_web_app_fetch_post_likes_by_url_get(self, url, **kwargs):  # noqa: E501
        """根据URL获取帖子点赞数据/Get post likes by URL  # noqa: E501

        # [中文] ### 用途: - 根据Instagram帖子URL获取帖子点赞数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子点赞数据  # [English] ### Purpose: - Get post likes by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post likes data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_likes_by_url_api_v1_instagram_web_app_fetch_post_likes_by_url_get(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: Instagram帖子URL/Instagram post URL (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_post_likes_by_url_api_v1_instagram_web_app_fetch_post_likes_by_url_get_with_http_info(url, **kwargs)  # noqa: E501

    def fetch_post_likes_by_url_api_v1_instagram_web_app_fetch_post_likes_by_url_get_with_http_info(self, url, **kwargs):  # noqa: E501
        """根据URL获取帖子点赞数据/Get post likes by URL  # noqa: E501

        # [中文] ### 用途: - 根据Instagram帖子URL获取帖子点赞数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子点赞数据  # [English] ### Purpose: - Get post likes by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post likes data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_likes_by_url_api_v1_instagram_web_app_fetch_post_likes_by_url_get_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: Instagram帖子URL/Instagram post URL (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_post_likes_by_url_api_v1_instagram_web_app_fetch_post_likes_by_url_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_post_likes_by_url_api_v1_instagram_web_app_fetch_post_likes_by_url_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_post_likes_by_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_post_likes_by_url_api_v1_instagram_web_app_fetch_post_likes_by_url_get_0(self, url, **kwargs):  # noqa: E501
        """根据URL获取帖子点赞数据/Get post likes by URL  # noqa: E501

        # [中文] ### 用途: - 根据Instagram帖子URL获取帖子点赞数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子点赞数据  # [English] ### Purpose: - Get post likes by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post likes data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_likes_by_url_api_v1_instagram_web_app_fetch_post_likes_by_url_get_0(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: Instagram帖子URL/Instagram post URL (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_post_likes_by_url_api_v1_instagram_web_app_fetch_post_likes_by_url_get_0_with_http_info(url, **kwargs)  # noqa: E501

    def fetch_post_likes_by_url_api_v1_instagram_web_app_fetch_post_likes_by_url_get_0_with_http_info(self, url, **kwargs):  # noqa: E501
        """根据URL获取帖子点赞数据/Get post likes by URL  # noqa: E501

        # [中文] ### 用途: - 根据Instagram帖子URL获取帖子点赞数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子点赞数据  # [English] ### Purpose: - Get post likes by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post likes data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_likes_by_url_api_v1_instagram_web_app_fetch_post_likes_by_url_get_0_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: Instagram帖子URL/Instagram post URL (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_post_likes_by_url_api_v1_instagram_web_app_fetch_post_likes_by_url_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_post_likes_by_url_api_v1_instagram_web_app_fetch_post_likes_by_url_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_post_likes_by_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_post_media_by_url_api_v1_instagram_web_app_fetch_post_media_by_url_get(self, url, **kwargs):  # noqa: E501
        """根据帖子URL获取媒体数据/Get media data by URL  # noqa: E501

        # [中文] ### 用途: - 根据Instagram帖子URL获取媒体数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 媒体数据  # [English] ### Purpose: - Get media data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Media data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_media_by_url_api_v1_instagram_web_app_fetch_post_media_by_url_get(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: Instagram帖子URL/Instagram post URL (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_post_media_by_url_api_v1_instagram_web_app_fetch_post_media_by_url_get_with_http_info(url, **kwargs)  # noqa: E501

    def fetch_post_media_by_url_api_v1_instagram_web_app_fetch_post_media_by_url_get_with_http_info(self, url, **kwargs):  # noqa: E501
        """根据帖子URL获取媒体数据/Get media data by URL  # noqa: E501

        # [中文] ### 用途: - 根据Instagram帖子URL获取媒体数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 媒体数据  # [English] ### Purpose: - Get media data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Media data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_media_by_url_api_v1_instagram_web_app_fetch_post_media_by_url_get_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: Instagram帖子URL/Instagram post URL (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_post_media_by_url_api_v1_instagram_web_app_fetch_post_media_by_url_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_post_media_by_url_api_v1_instagram_web_app_fetch_post_media_by_url_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_post_media_by_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_post_media_by_url_api_v1_instagram_web_app_fetch_post_media_by_url_get_0(self, url, **kwargs):  # noqa: E501
        """根据帖子URL获取媒体数据/Get media data by URL  # noqa: E501

        # [中文] ### 用途: - 根据Instagram帖子URL获取媒体数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 媒体数据  # [English] ### Purpose: - Get media data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Media data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_media_by_url_api_v1_instagram_web_app_fetch_post_media_by_url_get_0(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: Instagram帖子URL/Instagram post URL (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_post_media_by_url_api_v1_instagram_web_app_fetch_post_media_by_url_get_0_with_http_info(url, **kwargs)  # noqa: E501

    def fetch_post_media_by_url_api_v1_instagram_web_app_fetch_post_media_by_url_get_0_with_http_info(self, url, **kwargs):  # noqa: E501
        """根据帖子URL获取媒体数据/Get media data by URL  # noqa: E501

        # [中文] ### 用途: - 根据Instagram帖子URL获取媒体数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 媒体数据  # [English] ### Purpose: - Get media data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Media data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_media_by_url_api_v1_instagram_web_app_fetch_post_media_by_url_get_0_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: Instagram帖子URL/Instagram post URL (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_post_media_by_url_api_v1_instagram_web_app_fetch_post_media_by_url_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_post_media_by_url_api_v1_instagram_web_app_fetch_post_media_by_url_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_post_media_by_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_related_users_by_user_id_api_v1_instagram_web_app_fetch_related_users_by_user_id_get(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取与用户相关的其他用户/Get user related users by user ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取与用户相关的其他用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 与用户相关的其他用户  # [English] ### Purpose: - Get user related users by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User related users  # [示例/Example] user_id = \"25025320\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_related_users_by_user_id_api_v1_instagram_web_app_fetch_related_users_by_user_id_get(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_related_users_by_user_id_api_v1_instagram_web_app_fetch_related_users_by_user_id_get_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_related_users_by_user_id_api_v1_instagram_web_app_fetch_related_users_by_user_id_get_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取与用户相关的其他用户/Get user related users by user ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取与用户相关的其他用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 与用户相关的其他用户  # [English] ### Purpose: - Get user related users by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User related users  # [示例/Example] user_id = \"25025320\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_related_users_by_user_id_api_v1_instagram_web_app_fetch_related_users_by_user_id_get_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_related_users_by_user_id_api_v1_instagram_web_app_fetch_related_users_by_user_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_related_users_by_user_id_api_v1_instagram_web_app_fetch_related_users_by_user_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_related_users_by_user_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_related_users_by_user_id_api_v1_instagram_web_app_fetch_related_users_by_user_id_get_0(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取与用户相关的其他用户/Get user related users by user ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取与用户相关的其他用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 与用户相关的其他用户  # [English] ### Purpose: - Get user related users by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User related users  # [示例/Example] user_id = \"25025320\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_related_users_by_user_id_api_v1_instagram_web_app_fetch_related_users_by_user_id_get_0(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_related_users_by_user_id_api_v1_instagram_web_app_fetch_related_users_by_user_id_get_0_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_related_users_by_user_id_api_v1_instagram_web_app_fetch_related_users_by_user_id_get_0_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取与用户相关的其他用户/Get user related users by user ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取与用户相关的其他用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 与用户相关的其他用户  # [English] ### Purpose: - Get user related users by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User related users  # [示例/Example] user_id = \"25025320\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_related_users_by_user_id_api_v1_instagram_web_app_fetch_related_users_by_user_id_get_0_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_related_users_by_user_id_api_v1_instagram_web_app_fetch_related_users_by_user_id_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_related_users_by_user_id_api_v1_instagram_web_app_fetch_related_users_by_user_id_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_related_users_by_user_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_search_hashtags_by_keyword_api_v1_instagram_web_app_fetch_search_hashtags_by_keyword_get(self, keyword, **kwargs):  # noqa: E501
        """根据关键词搜索话题数据/Search hashtags by query  # noqa: E501

        # [中文] ### 用途: - 根据关键词搜索话题数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search hashtags by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_hashtags_by_keyword_api_v1_instagram_web_app_fetch_search_hashtags_by_keyword_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Query (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_search_hashtags_by_keyword_api_v1_instagram_web_app_fetch_search_hashtags_by_keyword_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_search_hashtags_by_keyword_api_v1_instagram_web_app_fetch_search_hashtags_by_keyword_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """根据关键词搜索话题数据/Search hashtags by query  # noqa: E501

        # [中文] ### 用途: - 根据关键词搜索话题数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search hashtags by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_hashtags_by_keyword_api_v1_instagram_web_app_fetch_search_hashtags_by_keyword_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Query (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_search_hashtags_by_keyword_api_v1_instagram_web_app_fetch_search_hashtags_by_keyword_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_search_hashtags_by_keyword_api_v1_instagram_web_app_fetch_search_hashtags_by_keyword_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_search_hashtags_by_keyword', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_search_hashtags_by_keyword_api_v1_instagram_web_app_fetch_search_hashtags_by_keyword_get_0(self, keyword, **kwargs):  # noqa: E501
        """根据关键词搜索话题数据/Search hashtags by query  # noqa: E501

        # [中文] ### 用途: - 根据关键词搜索话题数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search hashtags by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_hashtags_by_keyword_api_v1_instagram_web_app_fetch_search_hashtags_by_keyword_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Query (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_search_hashtags_by_keyword_api_v1_instagram_web_app_fetch_search_hashtags_by_keyword_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_search_hashtags_by_keyword_api_v1_instagram_web_app_fetch_search_hashtags_by_keyword_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """根据关键词搜索话题数据/Search hashtags by query  # noqa: E501

        # [中文] ### 用途: - 根据关键词搜索话题数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search hashtags by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_hashtags_by_keyword_api_v1_instagram_web_app_fetch_search_hashtags_by_keyword_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Query (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_search_hashtags_by_keyword_api_v1_instagram_web_app_fetch_search_hashtags_by_keyword_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_search_hashtags_by_keyword_api_v1_instagram_web_app_fetch_search_hashtags_by_keyword_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_search_hashtags_by_keyword', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_search_locations_by_keyword_api_v1_instagram_web_app_fetch_search_locations_by_keyword_get(self, keyword, **kwargs):  # noqa: E501
        """根据关键词搜索地点数据/Search locations by query  # noqa: E501

        # [中文] ### 用途: - 根据关键词搜索地点数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search locations by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"ShangHai\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_locations_by_keyword_api_v1_instagram_web_app_fetch_search_locations_by_keyword_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Query (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_search_locations_by_keyword_api_v1_instagram_web_app_fetch_search_locations_by_keyword_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_search_locations_by_keyword_api_v1_instagram_web_app_fetch_search_locations_by_keyword_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """根据关键词搜索地点数据/Search locations by query  # noqa: E501

        # [中文] ### 用途: - 根据关键词搜索地点数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search locations by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"ShangHai\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_locations_by_keyword_api_v1_instagram_web_app_fetch_search_locations_by_keyword_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Query (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_search_locations_by_keyword_api_v1_instagram_web_app_fetch_search_locations_by_keyword_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_search_locations_by_keyword_api_v1_instagram_web_app_fetch_search_locations_by_keyword_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_search_locations_by_keyword', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_search_locations_by_keyword_api_v1_instagram_web_app_fetch_search_locations_by_keyword_get_0(self, keyword, **kwargs):  # noqa: E501
        """根据关键词搜索地点数据/Search locations by query  # noqa: E501

        # [中文] ### 用途: - 根据关键词搜索地点数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search locations by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"ShangHai\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_locations_by_keyword_api_v1_instagram_web_app_fetch_search_locations_by_keyword_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Query (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_search_locations_by_keyword_api_v1_instagram_web_app_fetch_search_locations_by_keyword_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_search_locations_by_keyword_api_v1_instagram_web_app_fetch_search_locations_by_keyword_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """根据关键词搜索地点数据/Search locations by query  # noqa: E501

        # [中文] ### 用途: - 根据关键词搜索地点数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search locations by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"ShangHai\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_locations_by_keyword_api_v1_instagram_web_app_fetch_search_locations_by_keyword_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Query (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_search_locations_by_keyword_api_v1_instagram_web_app_fetch_search_locations_by_keyword_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_search_locations_by_keyword_api_v1_instagram_web_app_fetch_search_locations_by_keyword_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_search_locations_by_keyword', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_search_users_by_keyword_api_v1_instagram_web_app_fetch_search_users_by_keyword_get(self, keyword, **kwargs):  # noqa: E501
        """根据关键词搜索用户/Search users by query  # noqa: E501

        # [中文] ### 用途: - 根据关键词搜索用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search users by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"instagram\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_users_by_keyword_api_v1_instagram_web_app_fetch_search_users_by_keyword_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Query (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_search_users_by_keyword_api_v1_instagram_web_app_fetch_search_users_by_keyword_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_search_users_by_keyword_api_v1_instagram_web_app_fetch_search_users_by_keyword_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """根据关键词搜索用户/Search users by query  # noqa: E501

        # [中文] ### 用途: - 根据关键词搜索用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search users by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"instagram\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_users_by_keyword_api_v1_instagram_web_app_fetch_search_users_by_keyword_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Query (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_search_users_by_keyword_api_v1_instagram_web_app_fetch_search_users_by_keyword_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_search_users_by_keyword_api_v1_instagram_web_app_fetch_search_users_by_keyword_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_search_users_by_keyword', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_search_users_by_keyword_api_v1_instagram_web_app_fetch_search_users_by_keyword_get_0(self, keyword, **kwargs):  # noqa: E501
        """根据关键词搜索用户/Search users by query  # noqa: E501

        # [中文] ### 用途: - 根据关键词搜索用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search users by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"instagram\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_users_by_keyword_api_v1_instagram_web_app_fetch_search_users_by_keyword_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Query (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_search_users_by_keyword_api_v1_instagram_web_app_fetch_search_users_by_keyword_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_search_users_by_keyword_api_v1_instagram_web_app_fetch_search_users_by_keyword_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """根据关键词搜索用户/Search users by query  # noqa: E501

        # [中文] ### 用途: - 根据关键词搜索用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search users by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"instagram\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_users_by_keyword_api_v1_instagram_web_app_fetch_search_users_by_keyword_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Query (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_search_users_by_keyword_api_v1_instagram_web_app_fetch_search_users_by_keyword_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_search_users_by_keyword_api_v1_instagram_web_app_fetch_search_users_by_keyword_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_search_users_by_keyword', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_similar_accounts_by_username_api_v1_instagram_web_app_fetch_similar_accounts_by_username_get(self, username, **kwargs):  # noqa: E501
        """根据用户名获取相似的账户数据/Get similar accounts by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取相似的账户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 相似的账户数据  # [English] ### Purpose: - Get similar accounts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - Similar accounts  # [示例/Example] username = \"daily_fuck_people\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_similar_accounts_by_username_api_v1_instagram_web_app_fetch_similar_accounts_by_username_get(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_similar_accounts_by_username_api_v1_instagram_web_app_fetch_similar_accounts_by_username_get_with_http_info(username, **kwargs)  # noqa: E501

    def fetch_similar_accounts_by_username_api_v1_instagram_web_app_fetch_similar_accounts_by_username_get_with_http_info(self, username, **kwargs):  # noqa: E501
        """根据用户名获取相似的账户数据/Get similar accounts by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取相似的账户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 相似的账户数据  # [English] ### Purpose: - Get similar accounts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - Similar accounts  # [示例/Example] username = \"daily_fuck_people\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_similar_accounts_by_username_api_v1_instagram_web_app_fetch_similar_accounts_by_username_get_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_similar_accounts_by_username_api_v1_instagram_web_app_fetch_similar_accounts_by_username_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `fetch_similar_accounts_by_username_api_v1_instagram_web_app_fetch_similar_accounts_by_username_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in local_var_params and local_var_params['username'] is not None:  # noqa: E501
            query_params.append(('username', local_var_params['username']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_similar_accounts_by_username', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_similar_accounts_by_username_api_v1_instagram_web_app_fetch_similar_accounts_by_username_get_0(self, username, **kwargs):  # noqa: E501
        """根据用户名获取相似的账户数据/Get similar accounts by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取相似的账户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 相似的账户数据  # [English] ### Purpose: - Get similar accounts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - Similar accounts  # [示例/Example] username = \"daily_fuck_people\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_similar_accounts_by_username_api_v1_instagram_web_app_fetch_similar_accounts_by_username_get_0(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_similar_accounts_by_username_api_v1_instagram_web_app_fetch_similar_accounts_by_username_get_0_with_http_info(username, **kwargs)  # noqa: E501

    def fetch_similar_accounts_by_username_api_v1_instagram_web_app_fetch_similar_accounts_by_username_get_0_with_http_info(self, username, **kwargs):  # noqa: E501
        """根据用户名获取相似的账户数据/Get similar accounts by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取相似的账户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 相似的账户数据  # [English] ### Purpose: - Get similar accounts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - Similar accounts  # [示例/Example] username = \"daily_fuck_people\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_similar_accounts_by_username_api_v1_instagram_web_app_fetch_similar_accounts_by_username_get_0_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_similar_accounts_by_username_api_v1_instagram_web_app_fetch_similar_accounts_by_username_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `fetch_similar_accounts_by_username_api_v1_instagram_web_app_fetch_similar_accounts_by_username_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in local_var_params and local_var_params['username'] is not None:  # noqa: E501
            query_params.append(('username', local_var_params['username']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_similar_accounts_by_username', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_about_info_by_id_api_v1_instagram_web_app_fetch_user_about_info_by_user_id_get(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取用户数据关于信息/Get user data about by user ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取用户数据关于信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据关于信息  # [English] ### Purpose: - Get user data about by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data about  # [示例/Example] user_id = \"25025320\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_about_info_by_id_api_v1_instagram_web_app_fetch_user_about_info_by_user_id_get(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_about_info_by_id_api_v1_instagram_web_app_fetch_user_about_info_by_user_id_get_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_user_about_info_by_id_api_v1_instagram_web_app_fetch_user_about_info_by_user_id_get_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取用户数据关于信息/Get user data about by user ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取用户数据关于信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据关于信息  # [English] ### Purpose: - Get user data about by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data about  # [示例/Example] user_id = \"25025320\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_about_info_by_id_api_v1_instagram_web_app_fetch_user_about_info_by_user_id_get_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_about_info_by_id_api_v1_instagram_web_app_fetch_user_about_info_by_user_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_user_about_info_by_id_api_v1_instagram_web_app_fetch_user_about_info_by_user_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_about_info_by_user_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_about_info_by_id_api_v1_instagram_web_app_fetch_user_about_info_by_user_id_get_0(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取用户数据关于信息/Get user data about by user ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取用户数据关于信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据关于信息  # [English] ### Purpose: - Get user data about by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data about  # [示例/Example] user_id = \"25025320\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_about_info_by_id_api_v1_instagram_web_app_fetch_user_about_info_by_user_id_get_0(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_about_info_by_id_api_v1_instagram_web_app_fetch_user_about_info_by_user_id_get_0_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_user_about_info_by_id_api_v1_instagram_web_app_fetch_user_about_info_by_user_id_get_0_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取用户数据关于信息/Get user data about by user ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取用户数据关于信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据关于信息  # [English] ### Purpose: - Get user data about by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data about  # [示例/Example] user_id = \"25025320\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_about_info_by_id_api_v1_instagram_web_app_fetch_user_about_info_by_user_id_get_0_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_about_info_by_id_api_v1_instagram_web_app_fetch_user_about_info_by_user_id_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_user_about_info_by_id_api_v1_instagram_web_app_fetch_user_about_info_by_user_id_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_about_info_by_user_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_followers_by_username_api_v1_instagram_web_app_fetch_user_followers_by_username_get(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户的粉丝数据/Get user followers by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户的粉丝数据，只能获取公开账号的粉丝数据，一次最多获取50个粉丝数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的粉丝数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的粉丝数据  # [English] ### Purpose: - Get user followers by Instagram username, can only get the followers data of public accounts, up to 50 followers data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followers data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followers data  # [示例/Example] username = \"instagram\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_followers_by_username_api_v1_instagram_web_app_fetch_user_followers_by_username_get(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param str pagination_token: 分页令牌/Pagination token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_followers_by_username_api_v1_instagram_web_app_fetch_user_followers_by_username_get_with_http_info(username, **kwargs)  # noqa: E501

    def fetch_user_followers_by_username_api_v1_instagram_web_app_fetch_user_followers_by_username_get_with_http_info(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户的粉丝数据/Get user followers by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户的粉丝数据，只能获取公开账号的粉丝数据，一次最多获取50个粉丝数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的粉丝数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的粉丝数据  # [English] ### Purpose: - Get user followers by Instagram username, can only get the followers data of public accounts, up to 50 followers data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followers data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followers data  # [示例/Example] username = \"instagram\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_followers_by_username_api_v1_instagram_web_app_fetch_user_followers_by_username_get_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param str pagination_token: 分页令牌/Pagination token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username',
            'pagination_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_followers_by_username_api_v1_instagram_web_app_fetch_user_followers_by_username_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `fetch_user_followers_by_username_api_v1_instagram_web_app_fetch_user_followers_by_username_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in local_var_params and local_var_params['username'] is not None:  # noqa: E501
            query_params.append(('username', local_var_params['username']))  # noqa: E501
        if 'pagination_token' in local_var_params and local_var_params['pagination_token'] is not None:  # noqa: E501
            query_params.append(('pagination_token', local_var_params['pagination_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_followers_by_username', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_followers_by_username_api_v1_instagram_web_app_fetch_user_followers_by_username_get_0(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户的粉丝数据/Get user followers by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户的粉丝数据，只能获取公开账号的粉丝数据，一次最多获取50个粉丝数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的粉丝数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的粉丝数据  # [English] ### Purpose: - Get user followers by Instagram username, can only get the followers data of public accounts, up to 50 followers data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followers data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followers data  # [示例/Example] username = \"instagram\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_followers_by_username_api_v1_instagram_web_app_fetch_user_followers_by_username_get_0(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param str pagination_token: 分页令牌/Pagination token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_followers_by_username_api_v1_instagram_web_app_fetch_user_followers_by_username_get_0_with_http_info(username, **kwargs)  # noqa: E501

    def fetch_user_followers_by_username_api_v1_instagram_web_app_fetch_user_followers_by_username_get_0_with_http_info(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户的粉丝数据/Get user followers by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户的粉丝数据，只能获取公开账号的粉丝数据，一次最多获取50个粉丝数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的粉丝数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的粉丝数据  # [English] ### Purpose: - Get user followers by Instagram username, can only get the followers data of public accounts, up to 50 followers data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followers data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followers data  # [示例/Example] username = \"instagram\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_followers_by_username_api_v1_instagram_web_app_fetch_user_followers_by_username_get_0_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param str pagination_token: 分页令牌/Pagination token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username',
            'pagination_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_followers_by_username_api_v1_instagram_web_app_fetch_user_followers_by_username_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `fetch_user_followers_by_username_api_v1_instagram_web_app_fetch_user_followers_by_username_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in local_var_params and local_var_params['username'] is not None:  # noqa: E501
            query_params.append(('username', local_var_params['username']))  # noqa: E501
        if 'pagination_token' in local_var_params and local_var_params['pagination_token'] is not None:  # noqa: E501
            query_params.append(('pagination_token', local_var_params['pagination_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_followers_by_username', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_following_by_username_api_v1_instagram_web_app_fetch_user_following_by_username_get(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户的正在关注的用户数据/Get user followings by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户的正在关注的用户数据，只能获取公开账号的正在关注的用户数据，一次最多获取50个正在关注的用户数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的正在关注的用户数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的正在关注的用户数据  # [English] ### Purpose: - Get user followings by Instagram username, can only get the followings data of public accounts, up to 50 followings data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followings data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followings data  # [示例/Example] username = \"instagram\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_following_by_username_api_v1_instagram_web_app_fetch_user_following_by_username_get(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param str pagination_token: 分页令牌/Pagination token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_following_by_username_api_v1_instagram_web_app_fetch_user_following_by_username_get_with_http_info(username, **kwargs)  # noqa: E501

    def fetch_user_following_by_username_api_v1_instagram_web_app_fetch_user_following_by_username_get_with_http_info(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户的正在关注的用户数据/Get user followings by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户的正在关注的用户数据，只能获取公开账号的正在关注的用户数据，一次最多获取50个正在关注的用户数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的正在关注的用户数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的正在关注的用户数据  # [English] ### Purpose: - Get user followings by Instagram username, can only get the followings data of public accounts, up to 50 followings data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followings data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followings data  # [示例/Example] username = \"instagram\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_following_by_username_api_v1_instagram_web_app_fetch_user_following_by_username_get_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param str pagination_token: 分页令牌/Pagination token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username',
            'pagination_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_following_by_username_api_v1_instagram_web_app_fetch_user_following_by_username_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `fetch_user_following_by_username_api_v1_instagram_web_app_fetch_user_following_by_username_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in local_var_params and local_var_params['username'] is not None:  # noqa: E501
            query_params.append(('username', local_var_params['username']))  # noqa: E501
        if 'pagination_token' in local_var_params and local_var_params['pagination_token'] is not None:  # noqa: E501
            query_params.append(('pagination_token', local_var_params['pagination_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_following_by_username', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_following_by_username_api_v1_instagram_web_app_fetch_user_following_by_username_get_0(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户的正在关注的用户数据/Get user followings by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户的正在关注的用户数据，只能获取公开账号的正在关注的用户数据，一次最多获取50个正在关注的用户数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的正在关注的用户数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的正在关注的用户数据  # [English] ### Purpose: - Get user followings by Instagram username, can only get the followings data of public accounts, up to 50 followings data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followings data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followings data  # [示例/Example] username = \"instagram\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_following_by_username_api_v1_instagram_web_app_fetch_user_following_by_username_get_0(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param str pagination_token: 分页令牌/Pagination token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_following_by_username_api_v1_instagram_web_app_fetch_user_following_by_username_get_0_with_http_info(username, **kwargs)  # noqa: E501

    def fetch_user_following_by_username_api_v1_instagram_web_app_fetch_user_following_by_username_get_0_with_http_info(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户的正在关注的用户数据/Get user followings by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户的正在关注的用户数据，只能获取公开账号的正在关注的用户数据，一次最多获取50个正在关注的用户数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的正在关注的用户数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的正在关注的用户数据  # [English] ### Purpose: - Get user followings by Instagram username, can only get the followings data of public accounts, up to 50 followings data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followings data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followings data  # [示例/Example] username = \"instagram\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_following_by_username_api_v1_instagram_web_app_fetch_user_following_by_username_get_0_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param str pagination_token: 分页令牌/Pagination token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username',
            'pagination_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_following_by_username_api_v1_instagram_web_app_fetch_user_following_by_username_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `fetch_user_following_by_username_api_v1_instagram_web_app_fetch_user_following_by_username_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in local_var_params and local_var_params['username'] is not None:  # noqa: E501
            query_params.append(('username', local_var_params['username']))  # noqa: E501
        if 'pagination_token' in local_var_params and local_var_params['pagination_token'] is not None:  # noqa: E501
            query_params.append(('pagination_token', local_var_params['pagination_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_following_by_username', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_highlights_by_username_api_v1_instagram_web_app_fetch_user_highlights_by_username_get(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户的highlights数据/Get user highlights by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户的highlights数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的highlights数据  # [English] ### Purpose: - Get user highlights by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User highlights data  # [示例/Example] username = \"instagram\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_highlights_by_username_api_v1_instagram_web_app_fetch_user_highlights_by_username_get(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_highlights_by_username_api_v1_instagram_web_app_fetch_user_highlights_by_username_get_with_http_info(username, **kwargs)  # noqa: E501

    def fetch_user_highlights_by_username_api_v1_instagram_web_app_fetch_user_highlights_by_username_get_with_http_info(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户的highlights数据/Get user highlights by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户的highlights数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的highlights数据  # [English] ### Purpose: - Get user highlights by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User highlights data  # [示例/Example] username = \"instagram\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_highlights_by_username_api_v1_instagram_web_app_fetch_user_highlights_by_username_get_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_highlights_by_username_api_v1_instagram_web_app_fetch_user_highlights_by_username_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `fetch_user_highlights_by_username_api_v1_instagram_web_app_fetch_user_highlights_by_username_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in local_var_params and local_var_params['username'] is not None:  # noqa: E501
            query_params.append(('username', local_var_params['username']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_highlights_by_username', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_highlights_by_username_api_v1_instagram_web_app_fetch_user_highlights_by_username_get_0(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户的highlights数据/Get user highlights by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户的highlights数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的highlights数据  # [English] ### Purpose: - Get user highlights by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User highlights data  # [示例/Example] username = \"instagram\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_highlights_by_username_api_v1_instagram_web_app_fetch_user_highlights_by_username_get_0(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_highlights_by_username_api_v1_instagram_web_app_fetch_user_highlights_by_username_get_0_with_http_info(username, **kwargs)  # noqa: E501

    def fetch_user_highlights_by_username_api_v1_instagram_web_app_fetch_user_highlights_by_username_get_0_with_http_info(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户的highlights数据/Get user highlights by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户的highlights数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的highlights数据  # [English] ### Purpose: - Get user highlights by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User highlights data  # [示例/Example] username = \"instagram\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_highlights_by_username_api_v1_instagram_web_app_fetch_user_highlights_by_username_get_0_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_highlights_by_username_api_v1_instagram_web_app_fetch_user_highlights_by_username_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `fetch_user_highlights_by_username_api_v1_instagram_web_app_fetch_user_highlights_by_username_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in local_var_params and local_var_params['username'] is not None:  # noqa: E501
            query_params.append(('username', local_var_params['username']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_highlights_by_username', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_info_by_id_api_v1_instagram_web_app_fetch_user_info_by_user_id_get(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取用户数据/Get user data by user ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_by_id_api_v1_instagram_web_app_fetch_user_info_by_user_id_get(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_info_by_id_api_v1_instagram_web_app_fetch_user_info_by_user_id_get_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_user_info_by_id_api_v1_instagram_web_app_fetch_user_info_by_user_id_get_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取用户数据/Get user data by user ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_by_id_api_v1_instagram_web_app_fetch_user_info_by_user_id_get_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_info_by_id_api_v1_instagram_web_app_fetch_user_info_by_user_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_user_info_by_id_api_v1_instagram_web_app_fetch_user_info_by_user_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_info_by_user_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_info_by_id_api_v1_instagram_web_app_fetch_user_info_by_user_id_get_0(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取用户数据/Get user data by user ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_by_id_api_v1_instagram_web_app_fetch_user_info_by_user_id_get_0(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_info_by_id_api_v1_instagram_web_app_fetch_user_info_by_user_id_get_0_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_user_info_by_id_api_v1_instagram_web_app_fetch_user_info_by_user_id_get_0_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取用户数据/Get user data by user ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_by_id_api_v1_instagram_web_app_fetch_user_info_by_user_id_get_0_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_info_by_id_api_v1_instagram_web_app_fetch_user_info_by_user_id_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_user_info_by_id_api_v1_instagram_web_app_fetch_user_info_by_user_id_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_info_by_user_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_info_by_id_v2_api_v1_instagram_web_app_fetch_user_info_by_user_id_v2_get(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取用户数据V2/Get user data by user ID V2  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_by_id_v2_api_v1_instagram_web_app_fetch_user_info_by_user_id_v2_get(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_info_by_id_v2_api_v1_instagram_web_app_fetch_user_info_by_user_id_v2_get_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_user_info_by_id_v2_api_v1_instagram_web_app_fetch_user_info_by_user_id_v2_get_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取用户数据V2/Get user data by user ID V2  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_by_id_v2_api_v1_instagram_web_app_fetch_user_info_by_user_id_v2_get_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_info_by_id_v2_api_v1_instagram_web_app_fetch_user_info_by_user_id_v2_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_user_info_by_id_v2_api_v1_instagram_web_app_fetch_user_info_by_user_id_v2_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_info_by_user_id_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_info_by_id_v2_api_v1_instagram_web_app_fetch_user_info_by_user_id_v2_get_0(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取用户数据V2/Get user data by user ID V2  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_by_id_v2_api_v1_instagram_web_app_fetch_user_info_by_user_id_v2_get_0(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_info_by_id_v2_api_v1_instagram_web_app_fetch_user_info_by_user_id_v2_get_0_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_user_info_by_id_v2_api_v1_instagram_web_app_fetch_user_info_by_user_id_v2_get_0_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取用户数据V2/Get user data by user ID V2  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_by_id_v2_api_v1_instagram_web_app_fetch_user_info_by_user_id_v2_get_0_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_info_by_id_v2_api_v1_instagram_web_app_fetch_user_info_by_user_id_v2_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_user_info_by_id_v2_api_v1_instagram_web_app_fetch_user_info_by_user_id_v2_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_info_by_user_id_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_info_by_username_api_v1_instagram_web_app_fetch_user_info_by_username_get(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户数据/Get user data by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_by_username_api_v1_instagram_web_app_fetch_user_info_by_username_get(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_info_by_username_api_v1_instagram_web_app_fetch_user_info_by_username_get_with_http_info(username, **kwargs)  # noqa: E501

    def fetch_user_info_by_username_api_v1_instagram_web_app_fetch_user_info_by_username_get_with_http_info(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户数据/Get user data by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_by_username_api_v1_instagram_web_app_fetch_user_info_by_username_get_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_info_by_username_api_v1_instagram_web_app_fetch_user_info_by_username_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `fetch_user_info_by_username_api_v1_instagram_web_app_fetch_user_info_by_username_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in local_var_params and local_var_params['username'] is not None:  # noqa: E501
            query_params.append(('username', local_var_params['username']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_info_by_username', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_info_by_username_api_v1_instagram_web_app_fetch_user_info_by_username_get_0(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户数据/Get user data by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_by_username_api_v1_instagram_web_app_fetch_user_info_by_username_get_0(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_info_by_username_api_v1_instagram_web_app_fetch_user_info_by_username_get_0_with_http_info(username, **kwargs)  # noqa: E501

    def fetch_user_info_by_username_api_v1_instagram_web_app_fetch_user_info_by_username_get_0_with_http_info(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户数据/Get user data by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_by_username_api_v1_instagram_web_app_fetch_user_info_by_username_get_0_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_info_by_username_api_v1_instagram_web_app_fetch_user_info_by_username_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `fetch_user_info_by_username_api_v1_instagram_web_app_fetch_user_info_by_username_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in local_var_params and local_var_params['username'] is not None:  # noqa: E501
            query_params.append(('username', local_var_params['username']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_info_by_username', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_info_by_username_v2_api_v1_instagram_web_app_fetch_user_info_by_username_v2_get(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户数据V2/Get user data by username V2  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_by_username_v2_api_v1_instagram_web_app_fetch_user_info_by_username_v2_get(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_info_by_username_v2_api_v1_instagram_web_app_fetch_user_info_by_username_v2_get_with_http_info(username, **kwargs)  # noqa: E501

    def fetch_user_info_by_username_v2_api_v1_instagram_web_app_fetch_user_info_by_username_v2_get_with_http_info(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户数据V2/Get user data by username V2  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_by_username_v2_api_v1_instagram_web_app_fetch_user_info_by_username_v2_get_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_info_by_username_v2_api_v1_instagram_web_app_fetch_user_info_by_username_v2_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `fetch_user_info_by_username_v2_api_v1_instagram_web_app_fetch_user_info_by_username_v2_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in local_var_params and local_var_params['username'] is not None:  # noqa: E501
            query_params.append(('username', local_var_params['username']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_info_by_username_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_info_by_username_v2_api_v1_instagram_web_app_fetch_user_info_by_username_v2_get_0(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户数据V2/Get user data by username V2  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_by_username_v2_api_v1_instagram_web_app_fetch_user_info_by_username_v2_get_0(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_info_by_username_v2_api_v1_instagram_web_app_fetch_user_info_by_username_v2_get_0_with_http_info(username, **kwargs)  # noqa: E501

    def fetch_user_info_by_username_v2_api_v1_instagram_web_app_fetch_user_info_by_username_v2_get_0_with_http_info(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户数据V2/Get user data by username V2  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_by_username_v2_api_v1_instagram_web_app_fetch_user_info_by_username_v2_get_0_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_info_by_username_v2_api_v1_instagram_web_app_fetch_user_info_by_username_v2_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `fetch_user_info_by_username_v2_api_v1_instagram_web_app_fetch_user_info_by_username_v2_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in local_var_params and local_var_params['username'] is not None:  # noqa: E501
            query_params.append(('username', local_var_params['username']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_info_by_username_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_info_by_username_web_api_v1_instagram_web_app_fetch_user_info_by_username_web_get(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户网页接口的个人信息/Get user info by username web API  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户网页接口的个人信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户网页接口的个人信息  # [English] ### Purpose: - Get user info by Instagram username web API - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User info by Instagram username web API  # [示例/Example] username = \"instagram\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_by_username_web_api_v1_instagram_web_app_fetch_user_info_by_username_web_get(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_info_by_username_web_api_v1_instagram_web_app_fetch_user_info_by_username_web_get_with_http_info(username, **kwargs)  # noqa: E501

    def fetch_user_info_by_username_web_api_v1_instagram_web_app_fetch_user_info_by_username_web_get_with_http_info(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户网页接口的个人信息/Get user info by username web API  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户网页接口的个人信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户网页接口的个人信息  # [English] ### Purpose: - Get user info by Instagram username web API - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User info by Instagram username web API  # [示例/Example] username = \"instagram\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_by_username_web_api_v1_instagram_web_app_fetch_user_info_by_username_web_get_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_info_by_username_web_api_v1_instagram_web_app_fetch_user_info_by_username_web_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `fetch_user_info_by_username_web_api_v1_instagram_web_app_fetch_user_info_by_username_web_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in local_var_params and local_var_params['username'] is not None:  # noqa: E501
            query_params.append(('username', local_var_params['username']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_info_by_username_web', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_info_by_username_web_api_v1_instagram_web_app_fetch_user_info_by_username_web_get_0(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户网页接口的个人信息/Get user info by username web API  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户网页接口的个人信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户网页接口的个人信息  # [English] ### Purpose: - Get user info by Instagram username web API - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User info by Instagram username web API  # [示例/Example] username = \"instagram\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_by_username_web_api_v1_instagram_web_app_fetch_user_info_by_username_web_get_0(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_info_by_username_web_api_v1_instagram_web_app_fetch_user_info_by_username_web_get_0_with_http_info(username, **kwargs)  # noqa: E501

    def fetch_user_info_by_username_web_api_v1_instagram_web_app_fetch_user_info_by_username_web_get_0_with_http_info(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户网页接口的个人信息/Get user info by username web API  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户网页接口的个人信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户网页接口的个人信息  # [English] ### Purpose: - Get user info by Instagram username web API - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User info by Instagram username web API  # [示例/Example] username = \"instagram\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_by_username_web_api_v1_instagram_web_app_fetch_user_info_by_username_web_get_0_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_info_by_username_web_api_v1_instagram_web_app_fetch_user_info_by_username_web_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `fetch_user_info_by_username_web_api_v1_instagram_web_app_fetch_user_info_by_username_web_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in local_var_params and local_var_params['username'] is not None:  # noqa: E501
            query_params.append(('username', local_var_params['username']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_info_by_username_web', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_posts_by_user_id_api_v1_instagram_web_app_fetch_user_posts_by_user_id_get(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取用户发布的帖子/Get user posts by user ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的帖子  # [English] ### Purpose: - Get user posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_posts_by_user_id_api_v1_instagram_web_app_fetch_user_posts_by_user_id_get(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param int count: 每页数量/Count per page
        :param str end_cursor: 结束游标/End cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_posts_by_user_id_api_v1_instagram_web_app_fetch_user_posts_by_user_id_get_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_user_posts_by_user_id_api_v1_instagram_web_app_fetch_user_posts_by_user_id_get_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取用户发布的帖子/Get user posts by user ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的帖子  # [English] ### Purpose: - Get user posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_posts_by_user_id_api_v1_instagram_web_app_fetch_user_posts_by_user_id_get_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param int count: 每页数量/Count per page
        :param str end_cursor: 结束游标/End cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id',
            'count',
            'end_cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_posts_by_user_id_api_v1_instagram_web_app_fetch_user_posts_by_user_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_user_posts_by_user_id_api_v1_instagram_web_app_fetch_user_posts_by_user_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'end_cursor' in local_var_params and local_var_params['end_cursor'] is not None:  # noqa: E501
            query_params.append(('end_cursor', local_var_params['end_cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_posts_by_user_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_posts_by_user_id_api_v1_instagram_web_app_fetch_user_posts_by_user_id_get_0(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取用户发布的帖子/Get user posts by user ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的帖子  # [English] ### Purpose: - Get user posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_posts_by_user_id_api_v1_instagram_web_app_fetch_user_posts_by_user_id_get_0(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param int count: 每页数量/Count per page
        :param str end_cursor: 结束游标/End cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_posts_by_user_id_api_v1_instagram_web_app_fetch_user_posts_by_user_id_get_0_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_user_posts_by_user_id_api_v1_instagram_web_app_fetch_user_posts_by_user_id_get_0_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取用户发布的帖子/Get user posts by user ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的帖子  # [English] ### Purpose: - Get user posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_posts_by_user_id_api_v1_instagram_web_app_fetch_user_posts_by_user_id_get_0_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param int count: 每页数量/Count per page
        :param str end_cursor: 结束游标/End cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id',
            'count',
            'end_cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_posts_by_user_id_api_v1_instagram_web_app_fetch_user_posts_by_user_id_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_user_posts_by_user_id_api_v1_instagram_web_app_fetch_user_posts_by_user_id_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'end_cursor' in local_var_params and local_var_params['end_cursor'] is not None:  # noqa: E501
            query_params.append(('end_cursor', local_var_params['end_cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_posts_by_user_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_reels_by_user_id_api_v1_instagram_web_app_fetch_user_reels_by_user_id_get(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取用户发布的快拍/Get user reels by user ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的快拍 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的快拍  # [English] ### Purpose: - Get user reels by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User reels  # [示例/Example] user_id = \"25025320\" count = 12 max_id = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_reels_by_user_id_api_v1_instagram_web_app_fetch_user_reels_by_user_id_get(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param int count: 每页数量/Count per page
        :param str max_id: 最大ID/Max ID
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_reels_by_user_id_api_v1_instagram_web_app_fetch_user_reels_by_user_id_get_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_user_reels_by_user_id_api_v1_instagram_web_app_fetch_user_reels_by_user_id_get_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取用户发布的快拍/Get user reels by user ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的快拍 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的快拍  # [English] ### Purpose: - Get user reels by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User reels  # [示例/Example] user_id = \"25025320\" count = 12 max_id = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_reels_by_user_id_api_v1_instagram_web_app_fetch_user_reels_by_user_id_get_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param int count: 每页数量/Count per page
        :param str max_id: 最大ID/Max ID
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id',
            'count',
            'max_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_reels_by_user_id_api_v1_instagram_web_app_fetch_user_reels_by_user_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_user_reels_by_user_id_api_v1_instagram_web_app_fetch_user_reels_by_user_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'max_id' in local_var_params and local_var_params['max_id'] is not None:  # noqa: E501
            query_params.append(('max_id', local_var_params['max_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_reels_by_user_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_reels_by_user_id_api_v1_instagram_web_app_fetch_user_reels_by_user_id_get_0(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取用户发布的快拍/Get user reels by user ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的快拍 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的快拍  # [English] ### Purpose: - Get user reels by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User reels  # [示例/Example] user_id = \"25025320\" count = 12 max_id = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_reels_by_user_id_api_v1_instagram_web_app_fetch_user_reels_by_user_id_get_0(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param int count: 每页数量/Count per page
        :param str max_id: 最大ID/Max ID
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_reels_by_user_id_api_v1_instagram_web_app_fetch_user_reels_by_user_id_get_0_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_user_reels_by_user_id_api_v1_instagram_web_app_fetch_user_reels_by_user_id_get_0_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取用户发布的快拍/Get user reels by user ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的快拍 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的快拍  # [English] ### Purpose: - Get user reels by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User reels  # [示例/Example] user_id = \"25025320\" count = 12 max_id = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_reels_by_user_id_api_v1_instagram_web_app_fetch_user_reels_by_user_id_get_0_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param int count: 每页数量/Count per page
        :param str max_id: 最大ID/Max ID
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id',
            'count',
            'max_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_reels_by_user_id_api_v1_instagram_web_app_fetch_user_reels_by_user_id_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_user_reels_by_user_id_api_v1_instagram_web_app_fetch_user_reels_by_user_id_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'max_id' in local_var_params and local_var_params['max_id'] is not None:  # noqa: E501
            query_params.append(('max_id', local_var_params['max_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_reels_by_user_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_reels_by_username_v2_api_v1_instagram_web_app_fetch_user_reels_by_username_v2_get(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户的Reels数据V2/Get user reels by username V2  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户的Reels数据V2 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的Reels数据  # [English] ### Purpose: - Get user reels by Instagram username V2 - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User reels data  # [示例/Example] username = \"instagram\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_reels_by_username_v2_api_v1_instagram_web_app_fetch_user_reels_by_username_v2_get(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param str pagination_token: 分页token/Pagination token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_reels_by_username_v2_api_v1_instagram_web_app_fetch_user_reels_by_username_v2_get_with_http_info(username, **kwargs)  # noqa: E501

    def fetch_user_reels_by_username_v2_api_v1_instagram_web_app_fetch_user_reels_by_username_v2_get_with_http_info(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户的Reels数据V2/Get user reels by username V2  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户的Reels数据V2 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的Reels数据  # [English] ### Purpose: - Get user reels by Instagram username V2 - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User reels data  # [示例/Example] username = \"instagram\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_reels_by_username_v2_api_v1_instagram_web_app_fetch_user_reels_by_username_v2_get_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param str pagination_token: 分页token/Pagination token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username',
            'pagination_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_reels_by_username_v2_api_v1_instagram_web_app_fetch_user_reels_by_username_v2_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `fetch_user_reels_by_username_v2_api_v1_instagram_web_app_fetch_user_reels_by_username_v2_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in local_var_params and local_var_params['username'] is not None:  # noqa: E501
            query_params.append(('username', local_var_params['username']))  # noqa: E501
        if 'pagination_token' in local_var_params and local_var_params['pagination_token'] is not None:  # noqa: E501
            query_params.append(('pagination_token', local_var_params['pagination_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_reels_by_username_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_reels_by_username_v2_api_v1_instagram_web_app_fetch_user_reels_by_username_v2_get_0(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户的Reels数据V2/Get user reels by username V2  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户的Reels数据V2 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的Reels数据  # [English] ### Purpose: - Get user reels by Instagram username V2 - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User reels data  # [示例/Example] username = \"instagram\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_reels_by_username_v2_api_v1_instagram_web_app_fetch_user_reels_by_username_v2_get_0(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param str pagination_token: 分页token/Pagination token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_reels_by_username_v2_api_v1_instagram_web_app_fetch_user_reels_by_username_v2_get_0_with_http_info(username, **kwargs)  # noqa: E501

    def fetch_user_reels_by_username_v2_api_v1_instagram_web_app_fetch_user_reels_by_username_v2_get_0_with_http_info(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户的Reels数据V2/Get user reels by username V2  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户的Reels数据V2 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的Reels数据  # [English] ### Purpose: - Get user reels by Instagram username V2 - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User reels data  # [示例/Example] username = \"instagram\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_reels_by_username_v2_api_v1_instagram_web_app_fetch_user_reels_by_username_v2_get_0_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param str pagination_token: 分页token/Pagination token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username',
            'pagination_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_reels_by_username_v2_api_v1_instagram_web_app_fetch_user_reels_by_username_v2_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `fetch_user_reels_by_username_v2_api_v1_instagram_web_app_fetch_user_reels_by_username_v2_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in local_var_params and local_var_params['username'] is not None:  # noqa: E501
            query_params.append(('username', local_var_params['username']))  # noqa: E501
        if 'pagination_token' in local_var_params and local_var_params['pagination_token'] is not None:  # noqa: E501
            query_params.append(('pagination_token', local_var_params['pagination_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_reels_by_username_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_stories_by_username_api_v1_instagram_web_app_fetch_user_stories_by_username_get(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户的Stories数据/Get user stories by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户的Stories数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的Stories数据  # [English] ### Purpose: - Get user stories by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User stories data  # [示例/Example] username = \"instagram\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_stories_by_username_api_v1_instagram_web_app_fetch_user_stories_by_username_get(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_stories_by_username_api_v1_instagram_web_app_fetch_user_stories_by_username_get_with_http_info(username, **kwargs)  # noqa: E501

    def fetch_user_stories_by_username_api_v1_instagram_web_app_fetch_user_stories_by_username_get_with_http_info(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户的Stories数据/Get user stories by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户的Stories数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的Stories数据  # [English] ### Purpose: - Get user stories by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User stories data  # [示例/Example] username = \"instagram\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_stories_by_username_api_v1_instagram_web_app_fetch_user_stories_by_username_get_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_stories_by_username_api_v1_instagram_web_app_fetch_user_stories_by_username_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `fetch_user_stories_by_username_api_v1_instagram_web_app_fetch_user_stories_by_username_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in local_var_params and local_var_params['username'] is not None:  # noqa: E501
            query_params.append(('username', local_var_params['username']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_stories_by_username', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_stories_by_username_api_v1_instagram_web_app_fetch_user_stories_by_username_get_0(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户的Stories数据/Get user stories by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户的Stories数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的Stories数据  # [English] ### Purpose: - Get user stories by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User stories data  # [示例/Example] username = \"instagram\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_stories_by_username_api_v1_instagram_web_app_fetch_user_stories_by_username_get_0(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_stories_by_username_api_v1_instagram_web_app_fetch_user_stories_by_username_get_0_with_http_info(username, **kwargs)  # noqa: E501

    def fetch_user_stories_by_username_api_v1_instagram_web_app_fetch_user_stories_by_username_get_0_with_http_info(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户的Stories数据/Get user stories by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户的Stories数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的Stories数据  # [English] ### Purpose: - Get user stories by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User stories data  # [示例/Example] username = \"instagram\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_stories_by_username_api_v1_instagram_web_app_fetch_user_stories_by_username_get_0_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_stories_by_username_api_v1_instagram_web_app_fetch_user_stories_by_username_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `fetch_user_stories_by_username_api_v1_instagram_web_app_fetch_user_stories_by_username_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in local_var_params and local_var_params['username'] is not None:  # noqa: E501
            query_params.append(('username', local_var_params['username']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_stories_by_username', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_tagged_posts_by_user_id_api_v1_instagram_web_app_fetch_user_tagged_posts_by_user_id_get(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取用户被标记的帖子/Get user tagged posts by user ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取用户被标记的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户被标记的帖子  # [English] ### Purpose: - Get user tagged posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User tagged posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_tagged_posts_by_user_id_api_v1_instagram_web_app_fetch_user_tagged_posts_by_user_id_get(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param int count: 每页数量/Count per page
        :param str end_cursor: 结束游标/End cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_tagged_posts_by_user_id_api_v1_instagram_web_app_fetch_user_tagged_posts_by_user_id_get_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_user_tagged_posts_by_user_id_api_v1_instagram_web_app_fetch_user_tagged_posts_by_user_id_get_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取用户被标记的帖子/Get user tagged posts by user ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取用户被标记的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户被标记的帖子  # [English] ### Purpose: - Get user tagged posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User tagged posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_tagged_posts_by_user_id_api_v1_instagram_web_app_fetch_user_tagged_posts_by_user_id_get_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param int count: 每页数量/Count per page
        :param str end_cursor: 结束游标/End cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id',
            'count',
            'end_cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_tagged_posts_by_user_id_api_v1_instagram_web_app_fetch_user_tagged_posts_by_user_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_user_tagged_posts_by_user_id_api_v1_instagram_web_app_fetch_user_tagged_posts_by_user_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'end_cursor' in local_var_params and local_var_params['end_cursor'] is not None:  # noqa: E501
            query_params.append(('end_cursor', local_var_params['end_cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_tagged_posts_by_user_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_tagged_posts_by_user_id_api_v1_instagram_web_app_fetch_user_tagged_posts_by_user_id_get_0(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取用户被标记的帖子/Get user tagged posts by user ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取用户被标记的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户被标记的帖子  # [English] ### Purpose: - Get user tagged posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User tagged posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_tagged_posts_by_user_id_api_v1_instagram_web_app_fetch_user_tagged_posts_by_user_id_get_0(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param int count: 每页数量/Count per page
        :param str end_cursor: 结束游标/End cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_tagged_posts_by_user_id_api_v1_instagram_web_app_fetch_user_tagged_posts_by_user_id_get_0_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_user_tagged_posts_by_user_id_api_v1_instagram_web_app_fetch_user_tagged_posts_by_user_id_get_0_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """根据用户ID获取用户被标记的帖子/Get user tagged posts by user ID  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户ID获取用户被标记的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户被标记的帖子  # [English] ### Purpose: - Get user tagged posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User tagged posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_tagged_posts_by_user_id_api_v1_instagram_web_app_fetch_user_tagged_posts_by_user_id_get_0_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: Instagram用户ID/Instagram user ID (required)
        :param int count: 每页数量/Count per page
        :param str end_cursor: 结束游标/End cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id',
            'count',
            'end_cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_tagged_posts_by_user_id_api_v1_instagram_web_app_fetch_user_tagged_posts_by_user_id_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_user_tagged_posts_by_user_id_api_v1_instagram_web_app_fetch_user_tagged_posts_by_user_id_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'end_cursor' in local_var_params and local_var_params['end_cursor'] is not None:  # noqa: E501
            query_params.append(('end_cursor', local_var_params['end_cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_tagged_posts_by_user_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_tv_posts_by_username_api_v1_instagram_web_app_fetch_user_tv_posts_by_username_get(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户的tv_posts数据/Get user tv_posts by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户的tv_posts数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的tv_posts数据  # [English] ### Purpose: - Get user tv_posts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User tv_posts data  # [示例/Example] username = \"instagram\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_tv_posts_by_username_api_v1_instagram_web_app_fetch_user_tv_posts_by_username_get(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param str pagination_token: 分页token/Pagination token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_tv_posts_by_username_api_v1_instagram_web_app_fetch_user_tv_posts_by_username_get_with_http_info(username, **kwargs)  # noqa: E501

    def fetch_user_tv_posts_by_username_api_v1_instagram_web_app_fetch_user_tv_posts_by_username_get_with_http_info(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户的tv_posts数据/Get user tv_posts by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户的tv_posts数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的tv_posts数据  # [English] ### Purpose: - Get user tv_posts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User tv_posts data  # [示例/Example] username = \"instagram\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_tv_posts_by_username_api_v1_instagram_web_app_fetch_user_tv_posts_by_username_get_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param str pagination_token: 分页token/Pagination token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username',
            'pagination_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_tv_posts_by_username_api_v1_instagram_web_app_fetch_user_tv_posts_by_username_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `fetch_user_tv_posts_by_username_api_v1_instagram_web_app_fetch_user_tv_posts_by_username_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in local_var_params and local_var_params['username'] is not None:  # noqa: E501
            query_params.append(('username', local_var_params['username']))  # noqa: E501
        if 'pagination_token' in local_var_params and local_var_params['pagination_token'] is not None:  # noqa: E501
            query_params.append(('pagination_token', local_var_params['pagination_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_tv_posts_by_username', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_tv_posts_by_username_api_v1_instagram_web_app_fetch_user_tv_posts_by_username_get_0(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户的tv_posts数据/Get user tv_posts by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户的tv_posts数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的tv_posts数据  # [English] ### Purpose: - Get user tv_posts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User tv_posts data  # [示例/Example] username = \"instagram\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_tv_posts_by_username_api_v1_instagram_web_app_fetch_user_tv_posts_by_username_get_0(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param str pagination_token: 分页token/Pagination token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_tv_posts_by_username_api_v1_instagram_web_app_fetch_user_tv_posts_by_username_get_0_with_http_info(username, **kwargs)  # noqa: E501

    def fetch_user_tv_posts_by_username_api_v1_instagram_web_app_fetch_user_tv_posts_by_username_get_0_with_http_info(self, username, **kwargs):  # noqa: E501
        """根据用户名获取用户的tv_posts数据/Get user tv_posts by username  # noqa: E501

        # [中文] ### 用途: - 根据Instagram用户名获取用户的tv_posts数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的tv_posts数据  # [English] ### Purpose: - Get user tv_posts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User tv_posts data  # [示例/Example] username = \"instagram\" pagination_token = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_tv_posts_by_username_api_v1_instagram_web_app_fetch_user_tv_posts_by_username_get_0_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: Instagram用户名/Instagram username (required)
        :param str pagination_token: 分页token/Pagination token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username',
            'pagination_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_tv_posts_by_username_api_v1_instagram_web_app_fetch_user_tv_posts_by_username_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `fetch_user_tv_posts_by_username_api_v1_instagram_web_app_fetch_user_tv_posts_by_username_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in local_var_params and local_var_params['username'] is not None:  # noqa: E501
            query_params.append(('username', local_var_params['username']))  # noqa: E501
        if 'pagination_token' in local_var_params and local_var_params['pagination_token'] is not None:  # noqa: E501
            query_params.append(('pagination_token', local_var_params['pagination_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/instagram/web_app/fetch_user_tv_posts_by_username', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
