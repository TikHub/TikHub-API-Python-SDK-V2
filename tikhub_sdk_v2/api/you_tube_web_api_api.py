# coding: utf-8

"""
    TikHub.io - Your Ultimate Social Media Data & API Marketplace

    High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tikhub_sdk_v2.api_client import ApiClient
from tikhub_sdk_v2.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class YouTubeWebAPIApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_channel_id_api_v1_youtube_web_get_channel_id_get(self, channel_name, **kwargs):  # noqa: E501
        """获取频道ID/Get channel ID  # noqa: E501

        # [中文] ### 用途: - 获取频道ID。 ### 参数: - channel_name: 频道名称。 ### 返回: - 频道ID。  # [English] ### Purpose: - Get channel ID. ### Parameters: - channel_name: Channel name. ### Returns: - Channel ID.  # [示例/Example] channel_name = \"LinusTechTips\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_channel_id_api_v1_youtube_web_get_channel_id_get(channel_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str channel_name: 频道名称/Channel name (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_channel_id_api_v1_youtube_web_get_channel_id_get_with_http_info(channel_name, **kwargs)  # noqa: E501

    def get_channel_id_api_v1_youtube_web_get_channel_id_get_with_http_info(self, channel_name, **kwargs):  # noqa: E501
        """获取频道ID/Get channel ID  # noqa: E501

        # [中文] ### 用途: - 获取频道ID。 ### 参数: - channel_name: 频道名称。 ### 返回: - 频道ID。  # [English] ### Purpose: - Get channel ID. ### Parameters: - channel_name: Channel name. ### Returns: - Channel ID.  # [示例/Example] channel_name = \"LinusTechTips\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_channel_id_api_v1_youtube_web_get_channel_id_get_with_http_info(channel_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str channel_name: 频道名称/Channel name (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'channel_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_channel_id_api_v1_youtube_web_get_channel_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'channel_name' is set
        if self.api_client.client_side_validation and ('channel_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['channel_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `channel_name` when calling `get_channel_id_api_v1_youtube_web_get_channel_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'channel_name' in local_var_params and local_var_params['channel_name'] is not None:  # noqa: E501
            query_params.append(('channel_name', local_var_params['channel_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/youtube/web/get_channel_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_channel_id_api_v1_youtube_web_get_channel_id_get_0(self, channel_name, **kwargs):  # noqa: E501
        """获取频道ID/Get channel ID  # noqa: E501

        # [中文] ### 用途: - 获取频道ID。 ### 参数: - channel_name: 频道名称。 ### 返回: - 频道ID。  # [English] ### Purpose: - Get channel ID. ### Parameters: - channel_name: Channel name. ### Returns: - Channel ID.  # [示例/Example] channel_name = \"LinusTechTips\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_channel_id_api_v1_youtube_web_get_channel_id_get_0(channel_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str channel_name: 频道名称/Channel name (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_channel_id_api_v1_youtube_web_get_channel_id_get_0_with_http_info(channel_name, **kwargs)  # noqa: E501

    def get_channel_id_api_v1_youtube_web_get_channel_id_get_0_with_http_info(self, channel_name, **kwargs):  # noqa: E501
        """获取频道ID/Get channel ID  # noqa: E501

        # [中文] ### 用途: - 获取频道ID。 ### 参数: - channel_name: 频道名称。 ### 返回: - 频道ID。  # [English] ### Purpose: - Get channel ID. ### Parameters: - channel_name: Channel name. ### Returns: - Channel ID.  # [示例/Example] channel_name = \"LinusTechTips\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_channel_id_api_v1_youtube_web_get_channel_id_get_0_with_http_info(channel_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str channel_name: 频道名称/Channel name (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'channel_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_channel_id_api_v1_youtube_web_get_channel_id_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'channel_name' is set
        if self.api_client.client_side_validation and ('channel_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['channel_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `channel_name` when calling `get_channel_id_api_v1_youtube_web_get_channel_id_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'channel_name' in local_var_params and local_var_params['channel_name'] is not None:  # noqa: E501
            query_params.append(('channel_name', local_var_params['channel_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/youtube/web/get_channel_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_channel_info_api_v1_youtube_web_get_channel_info_get(self, channel_id, **kwargs):  # noqa: E501
        """获取频道信息/Get channel information  # noqa: E501

        # [中文] ### 用途: - 获取频道信息。 ### 参数: - channel_id: 频道ID。 ### 返回: - 频道信息。  # [English] ### Purpose: - Get channel information. ### Parameters: - channel_id: Channel ID. ### Returns: - Channel information.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_channel_info_api_v1_youtube_web_get_channel_info_get(channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str channel_id: 频道ID/Channel ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_channel_info_api_v1_youtube_web_get_channel_info_get_with_http_info(channel_id, **kwargs)  # noqa: E501

    def get_channel_info_api_v1_youtube_web_get_channel_info_get_with_http_info(self, channel_id, **kwargs):  # noqa: E501
        """获取频道信息/Get channel information  # noqa: E501

        # [中文] ### 用途: - 获取频道信息。 ### 参数: - channel_id: 频道ID。 ### 返回: - 频道信息。  # [English] ### Purpose: - Get channel information. ### Parameters: - channel_id: Channel ID. ### Returns: - Channel information.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_channel_info_api_v1_youtube_web_get_channel_info_get_with_http_info(channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str channel_id: 频道ID/Channel ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'channel_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_channel_info_api_v1_youtube_web_get_channel_info_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['channel_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `channel_id` when calling `get_channel_info_api_v1_youtube_web_get_channel_info_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'channel_id' in local_var_params and local_var_params['channel_id'] is not None:  # noqa: E501
            query_params.append(('channel_id', local_var_params['channel_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/youtube/web/get_channel_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_channel_info_api_v1_youtube_web_get_channel_info_get_0(self, channel_id, **kwargs):  # noqa: E501
        """获取频道信息/Get channel information  # noqa: E501

        # [中文] ### 用途: - 获取频道信息。 ### 参数: - channel_id: 频道ID。 ### 返回: - 频道信息。  # [English] ### Purpose: - Get channel information. ### Parameters: - channel_id: Channel ID. ### Returns: - Channel information.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_channel_info_api_v1_youtube_web_get_channel_info_get_0(channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str channel_id: 频道ID/Channel ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_channel_info_api_v1_youtube_web_get_channel_info_get_0_with_http_info(channel_id, **kwargs)  # noqa: E501

    def get_channel_info_api_v1_youtube_web_get_channel_info_get_0_with_http_info(self, channel_id, **kwargs):  # noqa: E501
        """获取频道信息/Get channel information  # noqa: E501

        # [中文] ### 用途: - 获取频道信息。 ### 参数: - channel_id: 频道ID。 ### 返回: - 频道信息。  # [English] ### Purpose: - Get channel information. ### Parameters: - channel_id: Channel ID. ### Returns: - Channel information.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_channel_info_api_v1_youtube_web_get_channel_info_get_0_with_http_info(channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str channel_id: 频道ID/Channel ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'channel_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_channel_info_api_v1_youtube_web_get_channel_info_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['channel_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `channel_id` when calling `get_channel_info_api_v1_youtube_web_get_channel_info_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'channel_id' in local_var_params and local_var_params['channel_id'] is not None:  # noqa: E501
            query_params.append(('channel_id', local_var_params['channel_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/youtube/web/get_channel_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_channel_short_videos_api_v1_youtube_web_get_channel_short_videos_get(self, channel_id, **kwargs):  # noqa: E501
        """获取频道短视频/Get channel short videos  # noqa: E501

        # [中文] ### 用途: - 获取频道短视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道短视频的令牌。默认为None。 ### 返回: - 频道短视频。  # [English] ### Purpose: - Get channel short videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel short videos. Default is None. ### Returns: - Channel short videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_channel_short_videos_api_v1_youtube_web_get_channel_short_videos_get(channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str channel_id: 频道ID/Channel ID (required)
        :param str continuation_token: 翻页令牌/Pagination token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_channel_short_videos_api_v1_youtube_web_get_channel_short_videos_get_with_http_info(channel_id, **kwargs)  # noqa: E501

    def get_channel_short_videos_api_v1_youtube_web_get_channel_short_videos_get_with_http_info(self, channel_id, **kwargs):  # noqa: E501
        """获取频道短视频/Get channel short videos  # noqa: E501

        # [中文] ### 用途: - 获取频道短视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道短视频的令牌。默认为None。 ### 返回: - 频道短视频。  # [English] ### Purpose: - Get channel short videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel short videos. Default is None. ### Returns: - Channel short videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_channel_short_videos_api_v1_youtube_web_get_channel_short_videos_get_with_http_info(channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str channel_id: 频道ID/Channel ID (required)
        :param str continuation_token: 翻页令牌/Pagination token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'channel_id',
            'continuation_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_channel_short_videos_api_v1_youtube_web_get_channel_short_videos_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['channel_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `channel_id` when calling `get_channel_short_videos_api_v1_youtube_web_get_channel_short_videos_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'channel_id' in local_var_params and local_var_params['channel_id'] is not None:  # noqa: E501
            query_params.append(('channel_id', local_var_params['channel_id']))  # noqa: E501
        if 'continuation_token' in local_var_params and local_var_params['continuation_token'] is not None:  # noqa: E501
            query_params.append(('continuation_token', local_var_params['continuation_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/youtube/web/get_channel_short_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_channel_short_videos_api_v1_youtube_web_get_channel_short_videos_get_0(self, channel_id, **kwargs):  # noqa: E501
        """获取频道短视频/Get channel short videos  # noqa: E501

        # [中文] ### 用途: - 获取频道短视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道短视频的令牌。默认为None。 ### 返回: - 频道短视频。  # [English] ### Purpose: - Get channel short videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel short videos. Default is None. ### Returns: - Channel short videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_channel_short_videos_api_v1_youtube_web_get_channel_short_videos_get_0(channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str channel_id: 频道ID/Channel ID (required)
        :param str continuation_token: 翻页令牌/Pagination token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_channel_short_videos_api_v1_youtube_web_get_channel_short_videos_get_0_with_http_info(channel_id, **kwargs)  # noqa: E501

    def get_channel_short_videos_api_v1_youtube_web_get_channel_short_videos_get_0_with_http_info(self, channel_id, **kwargs):  # noqa: E501
        """获取频道短视频/Get channel short videos  # noqa: E501

        # [中文] ### 用途: - 获取频道短视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道短视频的令牌。默认为None。 ### 返回: - 频道短视频。  # [English] ### Purpose: - Get channel short videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel short videos. Default is None. ### Returns: - Channel short videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_channel_short_videos_api_v1_youtube_web_get_channel_short_videos_get_0_with_http_info(channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str channel_id: 频道ID/Channel ID (required)
        :param str continuation_token: 翻页令牌/Pagination token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'channel_id',
            'continuation_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_channel_short_videos_api_v1_youtube_web_get_channel_short_videos_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['channel_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `channel_id` when calling `get_channel_short_videos_api_v1_youtube_web_get_channel_short_videos_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'channel_id' in local_var_params and local_var_params['channel_id'] is not None:  # noqa: E501
            query_params.append(('channel_id', local_var_params['channel_id']))  # noqa: E501
        if 'continuation_token' in local_var_params and local_var_params['continuation_token'] is not None:  # noqa: E501
            query_params.append(('continuation_token', local_var_params['continuation_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/youtube/web/get_channel_short_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_channel_videos_api_v1_youtube_web_get_channel_videos_get(self, channel_id, **kwargs):  # noqa: E501
        """获取频道视频/Get channel videos  # noqa: E501

        # [中文] ### 用途: - 获取频道视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道视频的令牌。默认为None。 ### 返回: - 频道视频。  # [English] ### Purpose: - Get channel videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel videos. Default is None. ### Returns: - Channel videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_channel_videos_api_v1_youtube_web_get_channel_videos_get(channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str channel_id: 频道ID/Channel ID (required)
        :param str continuation_token: 翻页令牌/Pagination token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_channel_videos_api_v1_youtube_web_get_channel_videos_get_with_http_info(channel_id, **kwargs)  # noqa: E501

    def get_channel_videos_api_v1_youtube_web_get_channel_videos_get_with_http_info(self, channel_id, **kwargs):  # noqa: E501
        """获取频道视频/Get channel videos  # noqa: E501

        # [中文] ### 用途: - 获取频道视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道视频的令牌。默认为None。 ### 返回: - 频道视频。  # [English] ### Purpose: - Get channel videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel videos. Default is None. ### Returns: - Channel videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_channel_videos_api_v1_youtube_web_get_channel_videos_get_with_http_info(channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str channel_id: 频道ID/Channel ID (required)
        :param str continuation_token: 翻页令牌/Pagination token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'channel_id',
            'continuation_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_channel_videos_api_v1_youtube_web_get_channel_videos_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['channel_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `channel_id` when calling `get_channel_videos_api_v1_youtube_web_get_channel_videos_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'channel_id' in local_var_params and local_var_params['channel_id'] is not None:  # noqa: E501
            query_params.append(('channel_id', local_var_params['channel_id']))  # noqa: E501
        if 'continuation_token' in local_var_params and local_var_params['continuation_token'] is not None:  # noqa: E501
            query_params.append(('continuation_token', local_var_params['continuation_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/youtube/web/get_channel_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_channel_videos_api_v1_youtube_web_get_channel_videos_get_0(self, channel_id, **kwargs):  # noqa: E501
        """获取频道视频/Get channel videos  # noqa: E501

        # [中文] ### 用途: - 获取频道视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道视频的令牌。默认为None。 ### 返回: - 频道视频。  # [English] ### Purpose: - Get channel videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel videos. Default is None. ### Returns: - Channel videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_channel_videos_api_v1_youtube_web_get_channel_videos_get_0(channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str channel_id: 频道ID/Channel ID (required)
        :param str continuation_token: 翻页令牌/Pagination token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_channel_videos_api_v1_youtube_web_get_channel_videos_get_0_with_http_info(channel_id, **kwargs)  # noqa: E501

    def get_channel_videos_api_v1_youtube_web_get_channel_videos_get_0_with_http_info(self, channel_id, **kwargs):  # noqa: E501
        """获取频道视频/Get channel videos  # noqa: E501

        # [中文] ### 用途: - 获取频道视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道视频的令牌。默认为None。 ### 返回: - 频道视频。  # [English] ### Purpose: - Get channel videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel videos. Default is None. ### Returns: - Channel videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_channel_videos_api_v1_youtube_web_get_channel_videos_get_0_with_http_info(channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str channel_id: 频道ID/Channel ID (required)
        :param str continuation_token: 翻页令牌/Pagination token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'channel_id',
            'continuation_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_channel_videos_api_v1_youtube_web_get_channel_videos_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['channel_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `channel_id` when calling `get_channel_videos_api_v1_youtube_web_get_channel_videos_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'channel_id' in local_var_params and local_var_params['channel_id'] is not None:  # noqa: E501
            query_params.append(('channel_id', local_var_params['channel_id']))  # noqa: E501
        if 'continuation_token' in local_var_params and local_var_params['continuation_token'] is not None:  # noqa: E501
            query_params.append(('continuation_token', local_var_params['continuation_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/youtube/web/get_channel_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_relate_video_api_v1_youtube_web_get_relate_video_get(self, video_id, **kwargs):  # noqa: E501
        """获取推荐视频/Get related videos  # noqa: E501

        # [中文] ### 用途: - 根据视频ID获取推荐视频数据。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 - continuation_token: 用于继续获取推荐视频的令牌。默认为None。 ### 返回: - 推荐视频数据。  # [English] ### Purpose: - Get related videos by video ID. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching related videos. Default is None. ### Returns: - Related videos.  # [示例/Example] video_id = \"LuIL5JATZsc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_relate_video_api_v1_youtube_web_get_relate_video_get(video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str video_id: 视频ID/Video ID (required)
        :param str continuation_token: 翻页令牌/Pagination token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_relate_video_api_v1_youtube_web_get_relate_video_get_with_http_info(video_id, **kwargs)  # noqa: E501

    def get_relate_video_api_v1_youtube_web_get_relate_video_get_with_http_info(self, video_id, **kwargs):  # noqa: E501
        """获取推荐视频/Get related videos  # noqa: E501

        # [中文] ### 用途: - 根据视频ID获取推荐视频数据。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 - continuation_token: 用于继续获取推荐视频的令牌。默认为None。 ### 返回: - 推荐视频数据。  # [English] ### Purpose: - Get related videos by video ID. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching related videos. Default is None. ### Returns: - Related videos.  # [示例/Example] video_id = \"LuIL5JATZsc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_relate_video_api_v1_youtube_web_get_relate_video_get_with_http_info(video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str video_id: 视频ID/Video ID (required)
        :param str continuation_token: 翻页令牌/Pagination token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'video_id',
            'continuation_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_relate_video_api_v1_youtube_web_get_relate_video_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'video_id' is set
        if self.api_client.client_side_validation and ('video_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['video_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `video_id` when calling `get_relate_video_api_v1_youtube_web_get_relate_video_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'video_id' in local_var_params and local_var_params['video_id'] is not None:  # noqa: E501
            query_params.append(('video_id', local_var_params['video_id']))  # noqa: E501
        if 'continuation_token' in local_var_params and local_var_params['continuation_token'] is not None:  # noqa: E501
            query_params.append(('continuation_token', local_var_params['continuation_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/youtube/web/get_relate_video', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_relate_video_api_v1_youtube_web_get_relate_video_get_0(self, video_id, **kwargs):  # noqa: E501
        """获取推荐视频/Get related videos  # noqa: E501

        # [中文] ### 用途: - 根据视频ID获取推荐视频数据。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 - continuation_token: 用于继续获取推荐视频的令牌。默认为None。 ### 返回: - 推荐视频数据。  # [English] ### Purpose: - Get related videos by video ID. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching related videos. Default is None. ### Returns: - Related videos.  # [示例/Example] video_id = \"LuIL5JATZsc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_relate_video_api_v1_youtube_web_get_relate_video_get_0(video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str video_id: 视频ID/Video ID (required)
        :param str continuation_token: 翻页令牌/Pagination token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_relate_video_api_v1_youtube_web_get_relate_video_get_0_with_http_info(video_id, **kwargs)  # noqa: E501

    def get_relate_video_api_v1_youtube_web_get_relate_video_get_0_with_http_info(self, video_id, **kwargs):  # noqa: E501
        """获取推荐视频/Get related videos  # noqa: E501

        # [中文] ### 用途: - 根据视频ID获取推荐视频数据。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 - continuation_token: 用于继续获取推荐视频的令牌。默认为None。 ### 返回: - 推荐视频数据。  # [English] ### Purpose: - Get related videos by video ID. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching related videos. Default is None. ### Returns: - Related videos.  # [示例/Example] video_id = \"LuIL5JATZsc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_relate_video_api_v1_youtube_web_get_relate_video_get_0_with_http_info(video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str video_id: 视频ID/Video ID (required)
        :param str continuation_token: 翻页令牌/Pagination token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'video_id',
            'continuation_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_relate_video_api_v1_youtube_web_get_relate_video_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'video_id' is set
        if self.api_client.client_side_validation and ('video_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['video_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `video_id` when calling `get_relate_video_api_v1_youtube_web_get_relate_video_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'video_id' in local_var_params and local_var_params['video_id'] is not None:  # noqa: E501
            query_params.append(('video_id', local_var_params['video_id']))  # noqa: E501
        if 'continuation_token' in local_var_params and local_var_params['continuation_token'] is not None:  # noqa: E501
            query_params.append(('continuation_token', local_var_params['continuation_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/youtube/web/get_relate_video', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_short_video_info_api_v1_youtube_web_get_short_video_info_get(self, id, **kwargs):  # noqa: E501
        """获取短视频信息/Get short video information  # noqa: E501

        # [中文] ### 用途: - 获取单个短视频的信息。 ### 参数: - id: 视频ID，从URL中获取，例如：https://www.youtube.com/shorts/r9O6jShqvUQ，这里的id就是r9O6jShqvUQ。 ### 返回: - 短视频信息。  # [English] ### Purpose: - Get information of a single short video. ### Parameters: - id: Video ID, get it from the URL, for example: https://www.youtube.com/shorts/r9O6jShqvUQ, the id is r9O6jShqvUQ. ### Returns: - Short video information.  # [示例/Example] id = \"r9O6jShqvUQ\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_short_video_info_api_v1_youtube_web_get_short_video_info_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: 视频ID/Video ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_short_video_info_api_v1_youtube_web_get_short_video_info_get_with_http_info(id, **kwargs)  # noqa: E501

    def get_short_video_info_api_v1_youtube_web_get_short_video_info_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """获取短视频信息/Get short video information  # noqa: E501

        # [中文] ### 用途: - 获取单个短视频的信息。 ### 参数: - id: 视频ID，从URL中获取，例如：https://www.youtube.com/shorts/r9O6jShqvUQ，这里的id就是r9O6jShqvUQ。 ### 返回: - 短视频信息。  # [English] ### Purpose: - Get information of a single short video. ### Parameters: - id: Video ID, get it from the URL, for example: https://www.youtube.com/shorts/r9O6jShqvUQ, the id is r9O6jShqvUQ. ### Returns: - Short video information.  # [示例/Example] id = \"r9O6jShqvUQ\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_short_video_info_api_v1_youtube_web_get_short_video_info_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: 视频ID/Video ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_short_video_info_api_v1_youtube_web_get_short_video_info_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_short_video_info_api_v1_youtube_web_get_short_video_info_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/youtube/web/get_short_video_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_short_video_info_api_v1_youtube_web_get_short_video_info_get_0(self, id, **kwargs):  # noqa: E501
        """获取短视频信息/Get short video information  # noqa: E501

        # [中文] ### 用途: - 获取单个短视频的信息。 ### 参数: - id: 视频ID，从URL中获取，例如：https://www.youtube.com/shorts/r9O6jShqvUQ，这里的id就是r9O6jShqvUQ。 ### 返回: - 短视频信息。  # [English] ### Purpose: - Get information of a single short video. ### Parameters: - id: Video ID, get it from the URL, for example: https://www.youtube.com/shorts/r9O6jShqvUQ, the id is r9O6jShqvUQ. ### Returns: - Short video information.  # [示例/Example] id = \"r9O6jShqvUQ\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_short_video_info_api_v1_youtube_web_get_short_video_info_get_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: 视频ID/Video ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_short_video_info_api_v1_youtube_web_get_short_video_info_get_0_with_http_info(id, **kwargs)  # noqa: E501

    def get_short_video_info_api_v1_youtube_web_get_short_video_info_get_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """获取短视频信息/Get short video information  # noqa: E501

        # [中文] ### 用途: - 获取单个短视频的信息。 ### 参数: - id: 视频ID，从URL中获取，例如：https://www.youtube.com/shorts/r9O6jShqvUQ，这里的id就是r9O6jShqvUQ。 ### 返回: - 短视频信息。  # [English] ### Purpose: - Get information of a single short video. ### Parameters: - id: Video ID, get it from the URL, for example: https://www.youtube.com/shorts/r9O6jShqvUQ, the id is r9O6jShqvUQ. ### Returns: - Short video information.  # [示例/Example] id = \"r9O6jShqvUQ\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_short_video_info_api_v1_youtube_web_get_short_video_info_get_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: 视频ID/Video ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_short_video_info_api_v1_youtube_web_get_short_video_info_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_short_video_info_api_v1_youtube_web_get_short_video_info_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/youtube/web/get_short_video_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_trending_videos_api_v1_youtube_web_get_trending_videos_get(self, **kwargs):  # noqa: E501
        """获取趋势视频/Get trending videos  # noqa: E501

        # [中文] ### 用途: - 获取趋势视频。 ### 参数: - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - section: 类型，默认为Now，可选值为Music, Gaming, Movies。 ### 返回: - 趋势视频。  # [English] ### Purpose: - Get trending videos. ### Parameters: - language_code: Language code, default is en. - country_code: Country code, default is us. - section: Section, default is Now, optional values are Music, Gaming, Movies. ### Returns: - Trending videos.  # [示例/Example]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trending_videos_api_v1_youtube_web_get_trending_videos_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str language_code: 语言代码/Language code
        :param str country_code: 国家代码/Country code
        :param str section: 类型/Section
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_trending_videos_api_v1_youtube_web_get_trending_videos_get_with_http_info(**kwargs)  # noqa: E501

    def get_trending_videos_api_v1_youtube_web_get_trending_videos_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取趋势视频/Get trending videos  # noqa: E501

        # [中文] ### 用途: - 获取趋势视频。 ### 参数: - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - section: 类型，默认为Now，可选值为Music, Gaming, Movies。 ### 返回: - 趋势视频。  # [English] ### Purpose: - Get trending videos. ### Parameters: - language_code: Language code, default is en. - country_code: Country code, default is us. - section: Section, default is Now, optional values are Music, Gaming, Movies. ### Returns: - Trending videos.  # [示例/Example]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trending_videos_api_v1_youtube_web_get_trending_videos_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str language_code: 语言代码/Language code
        :param str country_code: 国家代码/Country code
        :param str section: 类型/Section
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'language_code',
            'country_code',
            'section'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trending_videos_api_v1_youtube_web_get_trending_videos_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'language_code' in local_var_params and local_var_params['language_code'] is not None:  # noqa: E501
            query_params.append(('language_code', local_var_params['language_code']))  # noqa: E501
        if 'country_code' in local_var_params and local_var_params['country_code'] is not None:  # noqa: E501
            query_params.append(('country_code', local_var_params['country_code']))  # noqa: E501
        if 'section' in local_var_params and local_var_params['section'] is not None:  # noqa: E501
            query_params.append(('section', local_var_params['section']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/youtube/web/get_trending_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_trending_videos_api_v1_youtube_web_get_trending_videos_get_0(self, **kwargs):  # noqa: E501
        """获取趋势视频/Get trending videos  # noqa: E501

        # [中文] ### 用途: - 获取趋势视频。 ### 参数: - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - section: 类型，默认为Now，可选值为Music, Gaming, Movies。 ### 返回: - 趋势视频。  # [English] ### Purpose: - Get trending videos. ### Parameters: - language_code: Language code, default is en. - country_code: Country code, default is us. - section: Section, default is Now, optional values are Music, Gaming, Movies. ### Returns: - Trending videos.  # [示例/Example]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trending_videos_api_v1_youtube_web_get_trending_videos_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str language_code: 语言代码/Language code
        :param str country_code: 国家代码/Country code
        :param str section: 类型/Section
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_trending_videos_api_v1_youtube_web_get_trending_videos_get_0_with_http_info(**kwargs)  # noqa: E501

    def get_trending_videos_api_v1_youtube_web_get_trending_videos_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取趋势视频/Get trending videos  # noqa: E501

        # [中文] ### 用途: - 获取趋势视频。 ### 参数: - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - section: 类型，默认为Now，可选值为Music, Gaming, Movies。 ### 返回: - 趋势视频。  # [English] ### Purpose: - Get trending videos. ### Parameters: - language_code: Language code, default is en. - country_code: Country code, default is us. - section: Section, default is Now, optional values are Music, Gaming, Movies. ### Returns: - Trending videos.  # [示例/Example]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trending_videos_api_v1_youtube_web_get_trending_videos_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str language_code: 语言代码/Language code
        :param str country_code: 国家代码/Country code
        :param str section: 类型/Section
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'language_code',
            'country_code',
            'section'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trending_videos_api_v1_youtube_web_get_trending_videos_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'language_code' in local_var_params and local_var_params['language_code'] is not None:  # noqa: E501
            query_params.append(('language_code', local_var_params['language_code']))  # noqa: E501
        if 'country_code' in local_var_params and local_var_params['country_code'] is not None:  # noqa: E501
            query_params.append(('country_code', local_var_params['country_code']))  # noqa: E501
        if 'section' in local_var_params and local_var_params['section'] is not None:  # noqa: E501
            query_params.append(('section', local_var_params['section']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/youtube/web/get_trending_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_video_comments_api_v1_youtube_web_get_video_comments_get(self, video_id, **kwargs):  # noqa: E501
        """获取视频评论/Get video comments  # noqa: E501

        # [中文] ### 用途: - 获取单个视频的评论。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的id就是LuIL5JATZsc。 - continuation_token: 用于继续获取评论的令牌。默认为None。 ### 返回: - 视频评论。  # [English] ### Purpose: - Get comments of a single video. ### Parameters: - id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching comments. Default is None. ### Returns: - Video comments.  # [示例/Example] id = \"LuIL5JATZsc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_comments_api_v1_youtube_web_get_video_comments_get(video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str video_id: 视频ID/Video ID (required)
        :param str continuation_token: 翻页令牌/Pagination token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_video_comments_api_v1_youtube_web_get_video_comments_get_with_http_info(video_id, **kwargs)  # noqa: E501

    def get_video_comments_api_v1_youtube_web_get_video_comments_get_with_http_info(self, video_id, **kwargs):  # noqa: E501
        """获取视频评论/Get video comments  # noqa: E501

        # [中文] ### 用途: - 获取单个视频的评论。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的id就是LuIL5JATZsc。 - continuation_token: 用于继续获取评论的令牌。默认为None。 ### 返回: - 视频评论。  # [English] ### Purpose: - Get comments of a single video. ### Parameters: - id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching comments. Default is None. ### Returns: - Video comments.  # [示例/Example] id = \"LuIL5JATZsc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_comments_api_v1_youtube_web_get_video_comments_get_with_http_info(video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str video_id: 视频ID/Video ID (required)
        :param str continuation_token: 翻页令牌/Pagination token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'video_id',
            'continuation_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_video_comments_api_v1_youtube_web_get_video_comments_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'video_id' is set
        if self.api_client.client_side_validation and ('video_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['video_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `video_id` when calling `get_video_comments_api_v1_youtube_web_get_video_comments_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'video_id' in local_var_params and local_var_params['video_id'] is not None:  # noqa: E501
            query_params.append(('video_id', local_var_params['video_id']))  # noqa: E501
        if 'continuation_token' in local_var_params and local_var_params['continuation_token'] is not None:  # noqa: E501
            query_params.append(('continuation_token', local_var_params['continuation_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/youtube/web/get_video_comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_video_comments_api_v1_youtube_web_get_video_comments_get_0(self, video_id, **kwargs):  # noqa: E501
        """获取视频评论/Get video comments  # noqa: E501

        # [中文] ### 用途: - 获取单个视频的评论。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的id就是LuIL5JATZsc。 - continuation_token: 用于继续获取评论的令牌。默认为None。 ### 返回: - 视频评论。  # [English] ### Purpose: - Get comments of a single video. ### Parameters: - id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching comments. Default is None. ### Returns: - Video comments.  # [示例/Example] id = \"LuIL5JATZsc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_comments_api_v1_youtube_web_get_video_comments_get_0(video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str video_id: 视频ID/Video ID (required)
        :param str continuation_token: 翻页令牌/Pagination token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_video_comments_api_v1_youtube_web_get_video_comments_get_0_with_http_info(video_id, **kwargs)  # noqa: E501

    def get_video_comments_api_v1_youtube_web_get_video_comments_get_0_with_http_info(self, video_id, **kwargs):  # noqa: E501
        """获取视频评论/Get video comments  # noqa: E501

        # [中文] ### 用途: - 获取单个视频的评论。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的id就是LuIL5JATZsc。 - continuation_token: 用于继续获取评论的令牌。默认为None。 ### 返回: - 视频评论。  # [English] ### Purpose: - Get comments of a single video. ### Parameters: - id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching comments. Default is None. ### Returns: - Video comments.  # [示例/Example] id = \"LuIL5JATZsc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_comments_api_v1_youtube_web_get_video_comments_get_0_with_http_info(video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str video_id: 视频ID/Video ID (required)
        :param str continuation_token: 翻页令牌/Pagination token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'video_id',
            'continuation_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_video_comments_api_v1_youtube_web_get_video_comments_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'video_id' is set
        if self.api_client.client_side_validation and ('video_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['video_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `video_id` when calling `get_video_comments_api_v1_youtube_web_get_video_comments_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'video_id' in local_var_params and local_var_params['video_id'] is not None:  # noqa: E501
            query_params.append(('video_id', local_var_params['video_id']))  # noqa: E501
        if 'continuation_token' in local_var_params and local_var_params['continuation_token'] is not None:  # noqa: E501
            query_params.append(('continuation_token', local_var_params['continuation_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/youtube/web/get_video_comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_video_info_api_v1_youtube_web_get_video_info_get(self, video_id, **kwargs):  # noqa: E501
        """获取视频信息/Get video information  # noqa: E501

        # [中文] ### 用途: - 获取单个视频的信息，包括视频下载链接、标题、作者、发布日期、观看次数、点赞次数、不喜欢次数、评论次数、时长、描述等。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频信息。  # [English] ### Purpose: - Get information of a single video, including video download link, title, author, publish date, view count, like count, dislike count, comment count, duration, description, etc. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. ### Returns: - Video information.  # [示例/Example] video_id = \"LuIL5JATZsc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_info_api_v1_youtube_web_get_video_info_get(video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str video_id: 视频ID/Video ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_video_info_api_v1_youtube_web_get_video_info_get_with_http_info(video_id, **kwargs)  # noqa: E501

    def get_video_info_api_v1_youtube_web_get_video_info_get_with_http_info(self, video_id, **kwargs):  # noqa: E501
        """获取视频信息/Get video information  # noqa: E501

        # [中文] ### 用途: - 获取单个视频的信息，包括视频下载链接、标题、作者、发布日期、观看次数、点赞次数、不喜欢次数、评论次数、时长、描述等。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频信息。  # [English] ### Purpose: - Get information of a single video, including video download link, title, author, publish date, view count, like count, dislike count, comment count, duration, description, etc. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. ### Returns: - Video information.  # [示例/Example] video_id = \"LuIL5JATZsc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_info_api_v1_youtube_web_get_video_info_get_with_http_info(video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str video_id: 视频ID/Video ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'video_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_video_info_api_v1_youtube_web_get_video_info_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'video_id' is set
        if self.api_client.client_side_validation and ('video_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['video_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `video_id` when calling `get_video_info_api_v1_youtube_web_get_video_info_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'video_id' in local_var_params and local_var_params['video_id'] is not None:  # noqa: E501
            query_params.append(('video_id', local_var_params['video_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/youtube/web/get_video_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_video_info_api_v1_youtube_web_get_video_info_get_0(self, video_id, **kwargs):  # noqa: E501
        """获取视频信息/Get video information  # noqa: E501

        # [中文] ### 用途: - 获取单个视频的信息，包括视频下载链接、标题、作者、发布日期、观看次数、点赞次数、不喜欢次数、评论次数、时长、描述等。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频信息。  # [English] ### Purpose: - Get information of a single video, including video download link, title, author, publish date, view count, like count, dislike count, comment count, duration, description, etc. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. ### Returns: - Video information.  # [示例/Example] video_id = \"LuIL5JATZsc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_info_api_v1_youtube_web_get_video_info_get_0(video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str video_id: 视频ID/Video ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_video_info_api_v1_youtube_web_get_video_info_get_0_with_http_info(video_id, **kwargs)  # noqa: E501

    def get_video_info_api_v1_youtube_web_get_video_info_get_0_with_http_info(self, video_id, **kwargs):  # noqa: E501
        """获取视频信息/Get video information  # noqa: E501

        # [中文] ### 用途: - 获取单个视频的信息，包括视频下载链接、标题、作者、发布日期、观看次数、点赞次数、不喜欢次数、评论次数、时长、描述等。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频信息。  # [English] ### Purpose: - Get information of a single video, including video download link, title, author, publish date, view count, like count, dislike count, comment count, duration, description, etc. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. ### Returns: - Video information.  # [示例/Example] video_id = \"LuIL5JATZsc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_info_api_v1_youtube_web_get_video_info_get_0_with_http_info(video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str video_id: 视频ID/Video ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'video_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_video_info_api_v1_youtube_web_get_video_info_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'video_id' is set
        if self.api_client.client_side_validation and ('video_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['video_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `video_id` when calling `get_video_info_api_v1_youtube_web_get_video_info_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'video_id' in local_var_params and local_var_params['video_id'] is not None:  # noqa: E501
            query_params.append(('video_id', local_var_params['video_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/youtube/web/get_video_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_video_stream_api_v1_youtube_web_get_video_stream_get(self, video_id, **kwargs):  # noqa: E501
        """获取视频播放链接/Get video stream  # noqa: E501

        # [中文] ### 用途: - 获取单个视频的播放链接。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频播放链接。  # [English] ### Purpose: - Get video stream of a single video. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. ### Returns: - Video stream.  # [示例/Example] video_id = \"LuIL5JATZsc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_stream_api_v1_youtube_web_get_video_stream_get(video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str video_id: 视频ID/Video ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_video_stream_api_v1_youtube_web_get_video_stream_get_with_http_info(video_id, **kwargs)  # noqa: E501

    def get_video_stream_api_v1_youtube_web_get_video_stream_get_with_http_info(self, video_id, **kwargs):  # noqa: E501
        """获取视频播放链接/Get video stream  # noqa: E501

        # [中文] ### 用途: - 获取单个视频的播放链接。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频播放链接。  # [English] ### Purpose: - Get video stream of a single video. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. ### Returns: - Video stream.  # [示例/Example] video_id = \"LuIL5JATZsc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_stream_api_v1_youtube_web_get_video_stream_get_with_http_info(video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str video_id: 视频ID/Video ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'video_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_video_stream_api_v1_youtube_web_get_video_stream_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'video_id' is set
        if self.api_client.client_side_validation and ('video_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['video_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `video_id` when calling `get_video_stream_api_v1_youtube_web_get_video_stream_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'video_id' in local_var_params and local_var_params['video_id'] is not None:  # noqa: E501
            query_params.append(('video_id', local_var_params['video_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/youtube/web/get_video_stream', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_video_stream_api_v1_youtube_web_get_video_stream_get_0(self, video_id, **kwargs):  # noqa: E501
        """获取视频播放链接/Get video stream  # noqa: E501

        # [中文] ### 用途: - 获取单个视频的播放链接。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频播放链接。  # [English] ### Purpose: - Get video stream of a single video. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. ### Returns: - Video stream.  # [示例/Example] video_id = \"LuIL5JATZsc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_stream_api_v1_youtube_web_get_video_stream_get_0(video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str video_id: 视频ID/Video ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_video_stream_api_v1_youtube_web_get_video_stream_get_0_with_http_info(video_id, **kwargs)  # noqa: E501

    def get_video_stream_api_v1_youtube_web_get_video_stream_get_0_with_http_info(self, video_id, **kwargs):  # noqa: E501
        """获取视频播放链接/Get video stream  # noqa: E501

        # [中文] ### 用途: - 获取单个视频的播放链接。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频播放链接。  # [English] ### Purpose: - Get video stream of a single video. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. ### Returns: - Video stream.  # [示例/Example] video_id = \"LuIL5JATZsc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_stream_api_v1_youtube_web_get_video_stream_get_0_with_http_info(video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str video_id: 视频ID/Video ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'video_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_video_stream_api_v1_youtube_web_get_video_stream_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'video_id' is set
        if self.api_client.client_side_validation and ('video_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['video_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `video_id` when calling `get_video_stream_api_v1_youtube_web_get_video_stream_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'video_id' in local_var_params and local_var_params['video_id'] is not None:  # noqa: E501
            query_params.append(('video_id', local_var_params['video_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/youtube/web/get_video_stream', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_video_subtitles_api_v1_youtube_web_get_video_subtitles_get(self, video_id, **kwargs):  # noqa: E501
        """获取视频字幕/Get video subtitles  # noqa: E501

        # [中文] ### 用途: - 获取单个视频的字幕。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频字幕。  # [English] ### Purpose: - Get subtitles of a single video. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc.  ### Returns: - Video subtitles.  # [示例/Example] video_id = \"LuIL5JATZsc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_subtitles_api_v1_youtube_web_get_video_subtitles_get(video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str video_id: 视频ID/Video ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_video_subtitles_api_v1_youtube_web_get_video_subtitles_get_with_http_info(video_id, **kwargs)  # noqa: E501

    def get_video_subtitles_api_v1_youtube_web_get_video_subtitles_get_with_http_info(self, video_id, **kwargs):  # noqa: E501
        """获取视频字幕/Get video subtitles  # noqa: E501

        # [中文] ### 用途: - 获取单个视频的字幕。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频字幕。  # [English] ### Purpose: - Get subtitles of a single video. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc.  ### Returns: - Video subtitles.  # [示例/Example] video_id = \"LuIL5JATZsc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_subtitles_api_v1_youtube_web_get_video_subtitles_get_with_http_info(video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str video_id: 视频ID/Video ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'video_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_video_subtitles_api_v1_youtube_web_get_video_subtitles_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'video_id' is set
        if self.api_client.client_side_validation and ('video_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['video_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `video_id` when calling `get_video_subtitles_api_v1_youtube_web_get_video_subtitles_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'video_id' in local_var_params and local_var_params['video_id'] is not None:  # noqa: E501
            query_params.append(('video_id', local_var_params['video_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/youtube/web/get_video_subtitles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_video_subtitles_api_v1_youtube_web_get_video_subtitles_get_0(self, video_id, **kwargs):  # noqa: E501
        """获取视频字幕/Get video subtitles  # noqa: E501

        # [中文] ### 用途: - 获取单个视频的字幕。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频字幕。  # [English] ### Purpose: - Get subtitles of a single video. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc.  ### Returns: - Video subtitles.  # [示例/Example] video_id = \"LuIL5JATZsc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_subtitles_api_v1_youtube_web_get_video_subtitles_get_0(video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str video_id: 视频ID/Video ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_video_subtitles_api_v1_youtube_web_get_video_subtitles_get_0_with_http_info(video_id, **kwargs)  # noqa: E501

    def get_video_subtitles_api_v1_youtube_web_get_video_subtitles_get_0_with_http_info(self, video_id, **kwargs):  # noqa: E501
        """获取视频字幕/Get video subtitles  # noqa: E501

        # [中文] ### 用途: - 获取单个视频的字幕。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频字幕。  # [English] ### Purpose: - Get subtitles of a single video. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc.  ### Returns: - Video subtitles.  # [示例/Example] video_id = \"LuIL5JATZsc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_subtitles_api_v1_youtube_web_get_video_subtitles_get_0_with_http_info(video_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str video_id: 视频ID/Video ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'video_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_video_subtitles_api_v1_youtube_web_get_video_subtitles_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'video_id' is set
        if self.api_client.client_side_validation and ('video_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['video_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `video_id` when calling `get_video_subtitles_api_v1_youtube_web_get_video_subtitles_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'video_id' in local_var_params and local_var_params['video_id'] is not None:  # noqa: E501
            query_params.append(('video_id', local_var_params['video_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/youtube/web/get_video_subtitles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_channel_api_v1_youtube_web_search_channel_get(self, channel_id, search_query, **kwargs):  # noqa: E501
        """搜索频道/Search channel  # noqa: E501

        # [中文] ### 用途: - 搜索频道。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search channel. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\" search_query = \"AMD\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_channel_api_v1_youtube_web_search_channel_get(channel_id, search_query, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str channel_id: 频道ID/Channel ID (required)
        :param str search_query: 搜索关键字/Search keyword (required)
        :param str language_code: 语言代码/Language code
        :param str country_code: 国家代码/Country code
        :param str continuation_token: 翻页令牌/Pagination token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.search_channel_api_v1_youtube_web_search_channel_get_with_http_info(channel_id, search_query, **kwargs)  # noqa: E501

    def search_channel_api_v1_youtube_web_search_channel_get_with_http_info(self, channel_id, search_query, **kwargs):  # noqa: E501
        """搜索频道/Search channel  # noqa: E501

        # [中文] ### 用途: - 搜索频道。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search channel. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\" search_query = \"AMD\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_channel_api_v1_youtube_web_search_channel_get_with_http_info(channel_id, search_query, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str channel_id: 频道ID/Channel ID (required)
        :param str search_query: 搜索关键字/Search keyword (required)
        :param str language_code: 语言代码/Language code
        :param str country_code: 国家代码/Country code
        :param str continuation_token: 翻页令牌/Pagination token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'channel_id',
            'search_query',
            'language_code',
            'country_code',
            'continuation_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_channel_api_v1_youtube_web_search_channel_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['channel_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `channel_id` when calling `search_channel_api_v1_youtube_web_search_channel_get`")  # noqa: E501
        # verify the required parameter 'search_query' is set
        if self.api_client.client_side_validation and ('search_query' not in local_var_params or  # noqa: E501
                                                        local_var_params['search_query'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `search_query` when calling `search_channel_api_v1_youtube_web_search_channel_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'channel_id' in local_var_params and local_var_params['channel_id'] is not None:  # noqa: E501
            query_params.append(('channel_id', local_var_params['channel_id']))  # noqa: E501
        if 'search_query' in local_var_params and local_var_params['search_query'] is not None:  # noqa: E501
            query_params.append(('search_query', local_var_params['search_query']))  # noqa: E501
        if 'language_code' in local_var_params and local_var_params['language_code'] is not None:  # noqa: E501
            query_params.append(('language_code', local_var_params['language_code']))  # noqa: E501
        if 'country_code' in local_var_params and local_var_params['country_code'] is not None:  # noqa: E501
            query_params.append(('country_code', local_var_params['country_code']))  # noqa: E501
        if 'continuation_token' in local_var_params and local_var_params['continuation_token'] is not None:  # noqa: E501
            query_params.append(('continuation_token', local_var_params['continuation_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/youtube/web/search_channel', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_channel_api_v1_youtube_web_search_channel_get_0(self, channel_id, search_query, **kwargs):  # noqa: E501
        """搜索频道/Search channel  # noqa: E501

        # [中文] ### 用途: - 搜索频道。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search channel. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\" search_query = \"AMD\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_channel_api_v1_youtube_web_search_channel_get_0(channel_id, search_query, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str channel_id: 频道ID/Channel ID (required)
        :param str search_query: 搜索关键字/Search keyword (required)
        :param str language_code: 语言代码/Language code
        :param str country_code: 国家代码/Country code
        :param str continuation_token: 翻页令牌/Pagination token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.search_channel_api_v1_youtube_web_search_channel_get_0_with_http_info(channel_id, search_query, **kwargs)  # noqa: E501

    def search_channel_api_v1_youtube_web_search_channel_get_0_with_http_info(self, channel_id, search_query, **kwargs):  # noqa: E501
        """搜索频道/Search channel  # noqa: E501

        # [中文] ### 用途: - 搜索频道。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search channel. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\" search_query = \"AMD\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_channel_api_v1_youtube_web_search_channel_get_0_with_http_info(channel_id, search_query, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str channel_id: 频道ID/Channel ID (required)
        :param str search_query: 搜索关键字/Search keyword (required)
        :param str language_code: 语言代码/Language code
        :param str country_code: 国家代码/Country code
        :param str continuation_token: 翻页令牌/Pagination token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'channel_id',
            'search_query',
            'language_code',
            'country_code',
            'continuation_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_channel_api_v1_youtube_web_search_channel_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['channel_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `channel_id` when calling `search_channel_api_v1_youtube_web_search_channel_get_0`")  # noqa: E501
        # verify the required parameter 'search_query' is set
        if self.api_client.client_side_validation and ('search_query' not in local_var_params or  # noqa: E501
                                                        local_var_params['search_query'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `search_query` when calling `search_channel_api_v1_youtube_web_search_channel_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'channel_id' in local_var_params and local_var_params['channel_id'] is not None:  # noqa: E501
            query_params.append(('channel_id', local_var_params['channel_id']))  # noqa: E501
        if 'search_query' in local_var_params and local_var_params['search_query'] is not None:  # noqa: E501
            query_params.append(('search_query', local_var_params['search_query']))  # noqa: E501
        if 'language_code' in local_var_params and local_var_params['language_code'] is not None:  # noqa: E501
            query_params.append(('language_code', local_var_params['language_code']))  # noqa: E501
        if 'country_code' in local_var_params and local_var_params['country_code'] is not None:  # noqa: E501
            query_params.append(('country_code', local_var_params['country_code']))  # noqa: E501
        if 'continuation_token' in local_var_params and local_var_params['continuation_token'] is not None:  # noqa: E501
            query_params.append(('continuation_token', local_var_params['continuation_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/youtube/web/search_channel', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_video_api_v1_youtube_web_search_video_get(self, search_query, **kwargs):  # noqa: E501
        """搜索视频/Search video  # noqa: E501

        # [中文] ### 用途: - 搜索视频。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - order_by: 排序方式，默��为this_month。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search video. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - order_by: Order by, default is this_month. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] search_query = \"Minecraft\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_video_api_v1_youtube_web_search_video_get(search_query, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str search_query: 搜索关键字/Search keyword (required)
        :param str language_code: 语言代码/Language code
        :param str order_by: 排序方式/Order by
        :param str country_code: 国家代码/Country code
        :param str continuation_token: 翻页令牌/Pagination token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.search_video_api_v1_youtube_web_search_video_get_with_http_info(search_query, **kwargs)  # noqa: E501

    def search_video_api_v1_youtube_web_search_video_get_with_http_info(self, search_query, **kwargs):  # noqa: E501
        """搜索视频/Search video  # noqa: E501

        # [中文] ### 用途: - 搜索视频。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - order_by: 排序方式，默��为this_month。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search video. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - order_by: Order by, default is this_month. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] search_query = \"Minecraft\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_video_api_v1_youtube_web_search_video_get_with_http_info(search_query, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str search_query: 搜索关键字/Search keyword (required)
        :param str language_code: 语言代码/Language code
        :param str order_by: 排序方式/Order by
        :param str country_code: 国家代码/Country code
        :param str continuation_token: 翻页令牌/Pagination token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'search_query',
            'language_code',
            'order_by',
            'country_code',
            'continuation_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_video_api_v1_youtube_web_search_video_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'search_query' is set
        if self.api_client.client_side_validation and ('search_query' not in local_var_params or  # noqa: E501
                                                        local_var_params['search_query'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `search_query` when calling `search_video_api_v1_youtube_web_search_video_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search_query' in local_var_params and local_var_params['search_query'] is not None:  # noqa: E501
            query_params.append(('search_query', local_var_params['search_query']))  # noqa: E501
        if 'language_code' in local_var_params and local_var_params['language_code'] is not None:  # noqa: E501
            query_params.append(('language_code', local_var_params['language_code']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501
        if 'country_code' in local_var_params and local_var_params['country_code'] is not None:  # noqa: E501
            query_params.append(('country_code', local_var_params['country_code']))  # noqa: E501
        if 'continuation_token' in local_var_params and local_var_params['continuation_token'] is not None:  # noqa: E501
            query_params.append(('continuation_token', local_var_params['continuation_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/youtube/web/search_video', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_video_api_v1_youtube_web_search_video_get_0(self, search_query, **kwargs):  # noqa: E501
        """搜索视频/Search video  # noqa: E501

        # [中文] ### 用途: - 搜索视频。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - order_by: 排序方式，默��为this_month。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search video. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - order_by: Order by, default is this_month. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] search_query = \"Minecraft\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_video_api_v1_youtube_web_search_video_get_0(search_query, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str search_query: 搜索关键字/Search keyword (required)
        :param str language_code: 语言代码/Language code
        :param str order_by: 排序方式/Order by
        :param str country_code: 国家代码/Country code
        :param str continuation_token: 翻页令牌/Pagination token
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.search_video_api_v1_youtube_web_search_video_get_0_with_http_info(search_query, **kwargs)  # noqa: E501

    def search_video_api_v1_youtube_web_search_video_get_0_with_http_info(self, search_query, **kwargs):  # noqa: E501
        """搜索视频/Search video  # noqa: E501

        # [中文] ### 用途: - 搜索视频。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - order_by: 排序方式，默��为this_month。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search video. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - order_by: Order by, default is this_month. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] search_query = \"Minecraft\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_video_api_v1_youtube_web_search_video_get_0_with_http_info(search_query, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str search_query: 搜索关键字/Search keyword (required)
        :param str language_code: 语言代码/Language code
        :param str order_by: 排序方式/Order by
        :param str country_code: 国家代码/Country code
        :param str continuation_token: 翻页令牌/Pagination token
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'search_query',
            'language_code',
            'order_by',
            'country_code',
            'continuation_token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_video_api_v1_youtube_web_search_video_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'search_query' is set
        if self.api_client.client_side_validation and ('search_query' not in local_var_params or  # noqa: E501
                                                        local_var_params['search_query'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `search_query` when calling `search_video_api_v1_youtube_web_search_video_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'search_query' in local_var_params and local_var_params['search_query'] is not None:  # noqa: E501
            query_params.append(('search_query', local_var_params['search_query']))  # noqa: E501
        if 'language_code' in local_var_params and local_var_params['language_code'] is not None:  # noqa: E501
            query_params.append(('language_code', local_var_params['language_code']))  # noqa: E501
        if 'order_by' in local_var_params and local_var_params['order_by'] is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501
        if 'country_code' in local_var_params and local_var_params['country_code'] is not None:  # noqa: E501
            query_params.append(('country_code', local_var_params['country_code']))  # noqa: E501
        if 'continuation_token' in local_var_params and local_var_params['continuation_token'] is not None:  # noqa: E501
            query_params.append(('continuation_token', local_var_params['continuation_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/youtube/web/search_video', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
