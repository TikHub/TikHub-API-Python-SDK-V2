# coding: utf-8

"""
    TikHub.io - Your Ultimate Social Media Data & API Marketplace

    High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tikhub_sdk_v2.api_client import ApiClient
from tikhub_sdk_v2.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DouyinXingtuAPIApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def author_content_hot_comment_keywords_v1_api_v1_douyin_xingtu_author_content_hot_comment_keywords_v1_get(self, kol_id, **kwargs):  # noqa: E501
        """获取kol热词分析内容V1/Get Author Content Hot Comment Keywords V1  # noqa: E501

        # [中文] ### 用途: - 获取kol热词分析内容V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol热词分析内容  # [English] ### Purpose: - Get Author Content Hot Comment Keywords V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - Author Content Hot Comment Keywords  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.author_content_hot_comment_keywords_v1_api_v1_douyin_xingtu_author_content_hot_comment_keywords_v1_get(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.author_content_hot_comment_keywords_v1_api_v1_douyin_xingtu_author_content_hot_comment_keywords_v1_get_with_http_info(kol_id, **kwargs)  # noqa: E501

    def author_content_hot_comment_keywords_v1_api_v1_douyin_xingtu_author_content_hot_comment_keywords_v1_get_with_http_info(self, kol_id, **kwargs):  # noqa: E501
        """获取kol热词分析内容V1/Get Author Content Hot Comment Keywords V1  # noqa: E501

        # [中文] ### 用途: - 获取kol热词分析内容V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol热词分析内容  # [English] ### Purpose: - Get Author Content Hot Comment Keywords V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - Author Content Hot Comment Keywords  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.author_content_hot_comment_keywords_v1_api_v1_douyin_xingtu_author_content_hot_comment_keywords_v1_get_with_http_info(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method author_content_hot_comment_keywords_v1_api_v1_douyin_xingtu_author_content_hot_comment_keywords_v1_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `author_content_hot_comment_keywords_v1_api_v1_douyin_xingtu_author_content_hot_comment_keywords_v1_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/author_content_hot_comment_keywords_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def author_content_hot_comment_keywords_v1_api_v1_douyin_xingtu_author_content_hot_comment_keywords_v1_get_0(self, kol_id, **kwargs):  # noqa: E501
        """获取kol热词分析内容V1/Get Author Content Hot Comment Keywords V1  # noqa: E501

        # [中文] ### 用途: - 获取kol热词分析内容V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol热词分析内容  # [English] ### Purpose: - Get Author Content Hot Comment Keywords V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - Author Content Hot Comment Keywords  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.author_content_hot_comment_keywords_v1_api_v1_douyin_xingtu_author_content_hot_comment_keywords_v1_get_0(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.author_content_hot_comment_keywords_v1_api_v1_douyin_xingtu_author_content_hot_comment_keywords_v1_get_0_with_http_info(kol_id, **kwargs)  # noqa: E501

    def author_content_hot_comment_keywords_v1_api_v1_douyin_xingtu_author_content_hot_comment_keywords_v1_get_0_with_http_info(self, kol_id, **kwargs):  # noqa: E501
        """获取kol热词分析内容V1/Get Author Content Hot Comment Keywords V1  # noqa: E501

        # [中文] ### 用途: - 获取kol热词分析内容V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol热词分析内容  # [English] ### Purpose: - Get Author Content Hot Comment Keywords V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - Author Content Hot Comment Keywords  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.author_content_hot_comment_keywords_v1_api_v1_douyin_xingtu_author_content_hot_comment_keywords_v1_get_0_with_http_info(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method author_content_hot_comment_keywords_v1_api_v1_douyin_xingtu_author_content_hot_comment_keywords_v1_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `author_content_hot_comment_keywords_v1_api_v1_douyin_xingtu_author_content_hot_comment_keywords_v1_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/author_content_hot_comment_keywords_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def author_hot_comment_tokens_v1_api_v1_douyin_xingtu_author_hot_comment_tokens_v1_get(self, kol_id, **kwargs):  # noqa: E501
        """获取kol热词分析评论V1/Get Author Hot Comment Tokens V1  # noqa: E501

        # [中文] ### 用途: - 获取kol热词分析评论V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol热词分析评论  # [English] ### Purpose: - Get Author Hot Comment Tokens V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - Author Hot Comment Tokens  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.author_hot_comment_tokens_v1_api_v1_douyin_xingtu_author_hot_comment_tokens_v1_get(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.author_hot_comment_tokens_v1_api_v1_douyin_xingtu_author_hot_comment_tokens_v1_get_with_http_info(kol_id, **kwargs)  # noqa: E501

    def author_hot_comment_tokens_v1_api_v1_douyin_xingtu_author_hot_comment_tokens_v1_get_with_http_info(self, kol_id, **kwargs):  # noqa: E501
        """获取kol热词分析评论V1/Get Author Hot Comment Tokens V1  # noqa: E501

        # [中文] ### 用途: - 获取kol热词分析评论V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol热词分析评论  # [English] ### Purpose: - Get Author Hot Comment Tokens V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - Author Hot Comment Tokens  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.author_hot_comment_tokens_v1_api_v1_douyin_xingtu_author_hot_comment_tokens_v1_get_with_http_info(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method author_hot_comment_tokens_v1_api_v1_douyin_xingtu_author_hot_comment_tokens_v1_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `author_hot_comment_tokens_v1_api_v1_douyin_xingtu_author_hot_comment_tokens_v1_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/author_hot_comment_tokens_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def author_hot_comment_tokens_v1_api_v1_douyin_xingtu_author_hot_comment_tokens_v1_get_0(self, kol_id, **kwargs):  # noqa: E501
        """获取kol热词分析评论V1/Get Author Hot Comment Tokens V1  # noqa: E501

        # [中文] ### 用途: - 获取kol热词分析评论V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol热词分析评论  # [English] ### Purpose: - Get Author Hot Comment Tokens V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - Author Hot Comment Tokens  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.author_hot_comment_tokens_v1_api_v1_douyin_xingtu_author_hot_comment_tokens_v1_get_0(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.author_hot_comment_tokens_v1_api_v1_douyin_xingtu_author_hot_comment_tokens_v1_get_0_with_http_info(kol_id, **kwargs)  # noqa: E501

    def author_hot_comment_tokens_v1_api_v1_douyin_xingtu_author_hot_comment_tokens_v1_get_0_with_http_info(self, kol_id, **kwargs):  # noqa: E501
        """获取kol热词分析评论V1/Get Author Hot Comment Tokens V1  # noqa: E501

        # [中文] ### 用途: - 获取kol热词分析评论V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol热词分析评论  # [English] ### Purpose: - Get Author Hot Comment Tokens V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - Author Hot Comment Tokens  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.author_hot_comment_tokens_v1_api_v1_douyin_xingtu_author_hot_comment_tokens_v1_get_0_with_http_info(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method author_hot_comment_tokens_v1_api_v1_douyin_xingtu_author_hot_comment_tokens_v1_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `author_hot_comment_tokens_v1_api_v1_douyin_xingtu_author_hot_comment_tokens_v1_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/author_hot_comment_tokens_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_xingtu_kolid_by_sec_user_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_sec_user_id_get(self, sec_user_id, **kwargs):  # noqa: E501
        """根据抖音sec_user_id获取游客星图kolid/Get XingTu kolid by Douyin sec_user_id  # noqa: E501

        # [中文] ### 用途: - 通过抖音sec_user_id获取游客星图kolid - 价格：0.001$ / 次 ### 参数: - sec_user_id: sec_user_id, 可以从接口以下接口获取：     - `/api/v1/douyin/web/handler_user_profile`     - `/api/v1/douyin/web/handler_user_profile_v2`     - `/api/v1/douyin/web/handler_user_profile_v3`     - `/api/v1/douyin/app/v3/handler_user_profile` ### 返回: - 游客星图kolid  # [English] ### Purpose: - Get XingTu kolid by Douyin sec_user_id - Price: 0.001$ / time ### Parameters: - sec_user_id: sec_user_id, can be obtained from the following interfaces:     - `/api/v1/douyin/web/handler_user_profile`     - `/api/v1/douyin/web/handler_user_profile_v2`     - `/api/v1/douyin/web/handler_user_profile_v3`     - `/api/v1/douyin/app/v3/handler_user_profile` ### Return: - XingTu kolid  # [示例/Example] sec_user_id = \"MS4wLjABAAAAoxwUZouIdKL6sZ8EB96KDjkrhfBMS1KbCgsMJR1kIUs\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_xingtu_kolid_by_sec_user_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_sec_user_id_get(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 抖音用户sec_user_id/Douyin User sec_user_id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_xingtu_kolid_by_sec_user_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_sec_user_id_get_with_http_info(sec_user_id, **kwargs)  # noqa: E501

    def get_xingtu_kolid_by_sec_user_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_sec_user_id_get_with_http_info(self, sec_user_id, **kwargs):  # noqa: E501
        """根据抖音sec_user_id获取游客星图kolid/Get XingTu kolid by Douyin sec_user_id  # noqa: E501

        # [中文] ### 用途: - 通过抖音sec_user_id获取游客星图kolid - 价格：0.001$ / 次 ### 参数: - sec_user_id: sec_user_id, 可以从接口以下接口获取：     - `/api/v1/douyin/web/handler_user_profile`     - `/api/v1/douyin/web/handler_user_profile_v2`     - `/api/v1/douyin/web/handler_user_profile_v3`     - `/api/v1/douyin/app/v3/handler_user_profile` ### 返回: - 游客星图kolid  # [English] ### Purpose: - Get XingTu kolid by Douyin sec_user_id - Price: 0.001$ / time ### Parameters: - sec_user_id: sec_user_id, can be obtained from the following interfaces:     - `/api/v1/douyin/web/handler_user_profile`     - `/api/v1/douyin/web/handler_user_profile_v2`     - `/api/v1/douyin/web/handler_user_profile_v3`     - `/api/v1/douyin/app/v3/handler_user_profile` ### Return: - XingTu kolid  # [示例/Example] sec_user_id = \"MS4wLjABAAAAoxwUZouIdKL6sZ8EB96KDjkrhfBMS1KbCgsMJR1kIUs\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_xingtu_kolid_by_sec_user_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_sec_user_id_get_with_http_info(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 抖音用户sec_user_id/Douyin User sec_user_id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_xingtu_kolid_by_sec_user_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_sec_user_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_user_id' is set
        if self.api_client.client_side_validation and ('sec_user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_user_id` when calling `get_xingtu_kolid_by_sec_user_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_sec_user_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_user_id' in local_var_params and local_var_params['sec_user_id'] is not None:  # noqa: E501
            query_params.append(('sec_user_id', local_var_params['sec_user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_xingtu_kolid_by_sec_user_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_sec_user_id_get_0(self, sec_user_id, **kwargs):  # noqa: E501
        """根据抖音sec_user_id获取游客星图kolid/Get XingTu kolid by Douyin sec_user_id  # noqa: E501

        # [中文] ### 用途: - 通过抖音sec_user_id获取游客星图kolid - 价格：0.001$ / 次 ### 参数: - sec_user_id: sec_user_id, 可以从接口以下接口获取：     - `/api/v1/douyin/web/handler_user_profile`     - `/api/v1/douyin/web/handler_user_profile_v2`     - `/api/v1/douyin/web/handler_user_profile_v3`     - `/api/v1/douyin/app/v3/handler_user_profile` ### 返回: - 游客星图kolid  # [English] ### Purpose: - Get XingTu kolid by Douyin sec_user_id - Price: 0.001$ / time ### Parameters: - sec_user_id: sec_user_id, can be obtained from the following interfaces:     - `/api/v1/douyin/web/handler_user_profile`     - `/api/v1/douyin/web/handler_user_profile_v2`     - `/api/v1/douyin/web/handler_user_profile_v3`     - `/api/v1/douyin/app/v3/handler_user_profile` ### Return: - XingTu kolid  # [示例/Example] sec_user_id = \"MS4wLjABAAAAoxwUZouIdKL6sZ8EB96KDjkrhfBMS1KbCgsMJR1kIUs\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_xingtu_kolid_by_sec_user_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_sec_user_id_get_0(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 抖音用户sec_user_id/Douyin User sec_user_id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_xingtu_kolid_by_sec_user_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_sec_user_id_get_0_with_http_info(sec_user_id, **kwargs)  # noqa: E501

    def get_xingtu_kolid_by_sec_user_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_sec_user_id_get_0_with_http_info(self, sec_user_id, **kwargs):  # noqa: E501
        """根据抖音sec_user_id获取游客星图kolid/Get XingTu kolid by Douyin sec_user_id  # noqa: E501

        # [中文] ### 用途: - 通过抖音sec_user_id获取游客星图kolid - 价格：0.001$ / 次 ### 参数: - sec_user_id: sec_user_id, 可以从接口以下接口获取：     - `/api/v1/douyin/web/handler_user_profile`     - `/api/v1/douyin/web/handler_user_profile_v2`     - `/api/v1/douyin/web/handler_user_profile_v3`     - `/api/v1/douyin/app/v3/handler_user_profile` ### 返回: - 游客星图kolid  # [English] ### Purpose: - Get XingTu kolid by Douyin sec_user_id - Price: 0.001$ / time ### Parameters: - sec_user_id: sec_user_id, can be obtained from the following interfaces:     - `/api/v1/douyin/web/handler_user_profile`     - `/api/v1/douyin/web/handler_user_profile_v2`     - `/api/v1/douyin/web/handler_user_profile_v3`     - `/api/v1/douyin/app/v3/handler_user_profile` ### Return: - XingTu kolid  # [示例/Example] sec_user_id = \"MS4wLjABAAAAoxwUZouIdKL6sZ8EB96KDjkrhfBMS1KbCgsMJR1kIUs\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_xingtu_kolid_by_sec_user_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_sec_user_id_get_0_with_http_info(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 抖音用户sec_user_id/Douyin User sec_user_id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_xingtu_kolid_by_sec_user_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_sec_user_id_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_user_id' is set
        if self.api_client.client_side_validation and ('sec_user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_user_id` when calling `get_xingtu_kolid_by_sec_user_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_sec_user_id_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_user_id' in local_var_params and local_var_params['sec_user_id'] is not None:  # noqa: E501
            query_params.append(('sec_user_id', local_var_params['sec_user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_xingtu_kolid_by_uid_api_v1_douyin_xingtu_get_xingtu_kolid_by_uid_get(self, uid, **kwargs):  # noqa: E501
        """根据抖音用户ID获取游客星图kolid/Get XingTu kolid by Douyin User ID  # noqa: E501

        # [中文] ### 用途: - 通过抖音用户ID获取游客星图kolid - 价格：0.001$ / 次 ### 参数: - uid: 用户ID, 可以从接口以下接口获取：     - `/api/v1/douyin/web/fetch_user_profile_by_uid`     - `/api/v1/douyin/web/fetch_user_profile_by_short_id`     - `/api/v1/douyin/web/handler_user_profile`     - `/api/v1/douyin/web/handler_user_profile_v2`     - `/api/v1/douyin/web/handler_user_profile_v3`     - `/api/v1/douyin/app/v3/handler_user_profile` ### 返回: - 游客星图kolid  # [English] ### Purpose: - Get XingTu kolid by Douyin User ID - Price: 0.001$ / time ### Parameters: - uid: User ID, can be obtained from the following interfaces:     - `/api/v1/douyin/web/fetch_user_profile_by_uid`     - `/api/v1/douyin/web/fetch_user_profile_by_short_id`     - `/api/v1/douyin/web/handler_user_profile`     - `/api/v1/douyin/web/handler_user_profile_v2`     - `/api/v1/douyin/web/handler_user_profile_v3`     - `/api/v1/douyin/app/v3/handler_user_profile` ### Return: - XingTu kolid  # [示例/Example] uid = \"70452002324\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_xingtu_kolid_by_uid_api_v1_douyin_xingtu_get_xingtu_kolid_by_uid_get(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 抖音用户ID/Douyin User ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_xingtu_kolid_by_uid_api_v1_douyin_xingtu_get_xingtu_kolid_by_uid_get_with_http_info(uid, **kwargs)  # noqa: E501

    def get_xingtu_kolid_by_uid_api_v1_douyin_xingtu_get_xingtu_kolid_by_uid_get_with_http_info(self, uid, **kwargs):  # noqa: E501
        """根据抖音用户ID获取游客星图kolid/Get XingTu kolid by Douyin User ID  # noqa: E501

        # [中文] ### 用途: - 通过抖音用户ID获取游客星图kolid - 价格：0.001$ / 次 ### 参数: - uid: 用户ID, 可以从接口以下接口获取：     - `/api/v1/douyin/web/fetch_user_profile_by_uid`     - `/api/v1/douyin/web/fetch_user_profile_by_short_id`     - `/api/v1/douyin/web/handler_user_profile`     - `/api/v1/douyin/web/handler_user_profile_v2`     - `/api/v1/douyin/web/handler_user_profile_v3`     - `/api/v1/douyin/app/v3/handler_user_profile` ### 返回: - 游客星图kolid  # [English] ### Purpose: - Get XingTu kolid by Douyin User ID - Price: 0.001$ / time ### Parameters: - uid: User ID, can be obtained from the following interfaces:     - `/api/v1/douyin/web/fetch_user_profile_by_uid`     - `/api/v1/douyin/web/fetch_user_profile_by_short_id`     - `/api/v1/douyin/web/handler_user_profile`     - `/api/v1/douyin/web/handler_user_profile_v2`     - `/api/v1/douyin/web/handler_user_profile_v3`     - `/api/v1/douyin/app/v3/handler_user_profile` ### Return: - XingTu kolid  # [示例/Example] uid = \"70452002324\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_xingtu_kolid_by_uid_api_v1_douyin_xingtu_get_xingtu_kolid_by_uid_get_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 抖音用户ID/Douyin User ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_xingtu_kolid_by_uid_api_v1_douyin_xingtu_get_xingtu_kolid_by_uid_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uid` when calling `get_xingtu_kolid_by_uid_api_v1_douyin_xingtu_get_xingtu_kolid_by_uid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in local_var_params and local_var_params['uid'] is not None:  # noqa: E501
            query_params.append(('uid', local_var_params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_xingtu_kolid_by_uid_api_v1_douyin_xingtu_get_xingtu_kolid_by_uid_get_0(self, uid, **kwargs):  # noqa: E501
        """根据抖音用户ID获取游客星图kolid/Get XingTu kolid by Douyin User ID  # noqa: E501

        # [中文] ### 用途: - 通过抖音用户ID获取游客星图kolid - 价格：0.001$ / 次 ### 参数: - uid: 用户ID, 可以从接口以下接口获取：     - `/api/v1/douyin/web/fetch_user_profile_by_uid`     - `/api/v1/douyin/web/fetch_user_profile_by_short_id`     - `/api/v1/douyin/web/handler_user_profile`     - `/api/v1/douyin/web/handler_user_profile_v2`     - `/api/v1/douyin/web/handler_user_profile_v3`     - `/api/v1/douyin/app/v3/handler_user_profile` ### 返回: - 游客星图kolid  # [English] ### Purpose: - Get XingTu kolid by Douyin User ID - Price: 0.001$ / time ### Parameters: - uid: User ID, can be obtained from the following interfaces:     - `/api/v1/douyin/web/fetch_user_profile_by_uid`     - `/api/v1/douyin/web/fetch_user_profile_by_short_id`     - `/api/v1/douyin/web/handler_user_profile`     - `/api/v1/douyin/web/handler_user_profile_v2`     - `/api/v1/douyin/web/handler_user_profile_v3`     - `/api/v1/douyin/app/v3/handler_user_profile` ### Return: - XingTu kolid  # [示例/Example] uid = \"70452002324\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_xingtu_kolid_by_uid_api_v1_douyin_xingtu_get_xingtu_kolid_by_uid_get_0(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 抖音用户ID/Douyin User ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_xingtu_kolid_by_uid_api_v1_douyin_xingtu_get_xingtu_kolid_by_uid_get_0_with_http_info(uid, **kwargs)  # noqa: E501

    def get_xingtu_kolid_by_uid_api_v1_douyin_xingtu_get_xingtu_kolid_by_uid_get_0_with_http_info(self, uid, **kwargs):  # noqa: E501
        """根据抖音用户ID获取游客星图kolid/Get XingTu kolid by Douyin User ID  # noqa: E501

        # [中文] ### 用途: - 通过抖音用户ID获取游客星图kolid - 价格：0.001$ / 次 ### 参数: - uid: 用户ID, 可以从接口以下接口获取：     - `/api/v1/douyin/web/fetch_user_profile_by_uid`     - `/api/v1/douyin/web/fetch_user_profile_by_short_id`     - `/api/v1/douyin/web/handler_user_profile`     - `/api/v1/douyin/web/handler_user_profile_v2`     - `/api/v1/douyin/web/handler_user_profile_v3`     - `/api/v1/douyin/app/v3/handler_user_profile` ### 返回: - 游客星图kolid  # [English] ### Purpose: - Get XingTu kolid by Douyin User ID - Price: 0.001$ / time ### Parameters: - uid: User ID, can be obtained from the following interfaces:     - `/api/v1/douyin/web/fetch_user_profile_by_uid`     - `/api/v1/douyin/web/fetch_user_profile_by_short_id`     - `/api/v1/douyin/web/handler_user_profile`     - `/api/v1/douyin/web/handler_user_profile_v2`     - `/api/v1/douyin/web/handler_user_profile_v3`     - `/api/v1/douyin/app/v3/handler_user_profile` ### Return: - XingTu kolid  # [示例/Example] uid = \"70452002324\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_xingtu_kolid_by_uid_api_v1_douyin_xingtu_get_xingtu_kolid_by_uid_get_0_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 抖音用户ID/Douyin User ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_xingtu_kolid_by_uid_api_v1_douyin_xingtu_get_xingtu_kolid_by_uid_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uid` when calling `get_xingtu_kolid_by_uid_api_v1_douyin_xingtu_get_xingtu_kolid_by_uid_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in local_var_params and local_var_params['uid'] is not None:  # noqa: E501
            query_params.append(('uid', local_var_params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_xingtu_kolid_by_unique_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_unique_id_get(self, unique_id, **kwargs):  # noqa: E501
        """根据抖音号获取游客星图kolid/Get XingTu kolid by Douyin unique_id  # noqa: E501

        # [中文] ### 用途: - 通过抖音号获取游客星图kolid - 价格：0.001$ / 次 ### 参数: - unique_id: 抖音号, 可以从接口以下接口获取：     - `/api/v1/douyin/web/handler_user_profile`     - `/api/v1/douyin/web/handler_user_profile_v2`     - `/api/v1/douyin/web/handler_user_profile_v3`     - `/api/v1/douyin/app/v3/handler_user_profile` ### 返回: - 游客星图kolid  # [English] ### Purpose: - Get XingTu kolid by Douyin unique_id - Price: 0.001$ / time ### Parameters: - unique_id: unique_id, can be obtained from the following interfaces:     - `/api/v1/douyin/web/handler_user_profile`     - `/api/v1/douyin/web/handler_user_profile_v2`     - `/api/v1/douyin/web/handler_user_profile_v3`     - `/api/v1/douyin/app/v3/handler_user_profile` ### Return: - XingTu kolid  # [示例/Example] unique_id = \"m6640150\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_xingtu_kolid_by_unique_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_unique_id_get(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str unique_id: 抖音号/Douyin User unique_id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_xingtu_kolid_by_unique_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_unique_id_get_with_http_info(unique_id, **kwargs)  # noqa: E501

    def get_xingtu_kolid_by_unique_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_unique_id_get_with_http_info(self, unique_id, **kwargs):  # noqa: E501
        """根据抖音号获取游客星图kolid/Get XingTu kolid by Douyin unique_id  # noqa: E501

        # [中文] ### 用途: - 通过抖音号获取游客星图kolid - 价格：0.001$ / 次 ### 参数: - unique_id: 抖音号, 可以从接口以下接口获取：     - `/api/v1/douyin/web/handler_user_profile`     - `/api/v1/douyin/web/handler_user_profile_v2`     - `/api/v1/douyin/web/handler_user_profile_v3`     - `/api/v1/douyin/app/v3/handler_user_profile` ### 返回: - 游客星图kolid  # [English] ### Purpose: - Get XingTu kolid by Douyin unique_id - Price: 0.001$ / time ### Parameters: - unique_id: unique_id, can be obtained from the following interfaces:     - `/api/v1/douyin/web/handler_user_profile`     - `/api/v1/douyin/web/handler_user_profile_v2`     - `/api/v1/douyin/web/handler_user_profile_v3`     - `/api/v1/douyin/app/v3/handler_user_profile` ### Return: - XingTu kolid  # [示例/Example] unique_id = \"m6640150\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_xingtu_kolid_by_unique_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_unique_id_get_with_http_info(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str unique_id: 抖音号/Douyin User unique_id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'unique_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_xingtu_kolid_by_unique_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_unique_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'unique_id' is set
        if self.api_client.client_side_validation and ('unique_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['unique_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `unique_id` when calling `get_xingtu_kolid_by_unique_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_unique_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'unique_id' in local_var_params and local_var_params['unique_id'] is not None:  # noqa: E501
            query_params.append(('unique_id', local_var_params['unique_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_xingtu_kolid_by_unique_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_unique_id_get_0(self, unique_id, **kwargs):  # noqa: E501
        """根据抖音号获取游客星图kolid/Get XingTu kolid by Douyin unique_id  # noqa: E501

        # [中文] ### 用途: - 通过抖音号获取游客星图kolid - 价格：0.001$ / 次 ### 参数: - unique_id: 抖音号, 可以从接口以下接口获取：     - `/api/v1/douyin/web/handler_user_profile`     - `/api/v1/douyin/web/handler_user_profile_v2`     - `/api/v1/douyin/web/handler_user_profile_v3`     - `/api/v1/douyin/app/v3/handler_user_profile` ### 返回: - 游客星图kolid  # [English] ### Purpose: - Get XingTu kolid by Douyin unique_id - Price: 0.001$ / time ### Parameters: - unique_id: unique_id, can be obtained from the following interfaces:     - `/api/v1/douyin/web/handler_user_profile`     - `/api/v1/douyin/web/handler_user_profile_v2`     - `/api/v1/douyin/web/handler_user_profile_v3`     - `/api/v1/douyin/app/v3/handler_user_profile` ### Return: - XingTu kolid  # [示例/Example] unique_id = \"m6640150\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_xingtu_kolid_by_unique_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_unique_id_get_0(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str unique_id: 抖音号/Douyin User unique_id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_xingtu_kolid_by_unique_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_unique_id_get_0_with_http_info(unique_id, **kwargs)  # noqa: E501

    def get_xingtu_kolid_by_unique_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_unique_id_get_0_with_http_info(self, unique_id, **kwargs):  # noqa: E501
        """根据抖音号获取游客星图kolid/Get XingTu kolid by Douyin unique_id  # noqa: E501

        # [中文] ### 用途: - 通过抖音号获取游客星图kolid - 价格：0.001$ / 次 ### 参数: - unique_id: 抖音号, 可以从接口以下接口获取：     - `/api/v1/douyin/web/handler_user_profile`     - `/api/v1/douyin/web/handler_user_profile_v2`     - `/api/v1/douyin/web/handler_user_profile_v3`     - `/api/v1/douyin/app/v3/handler_user_profile` ### 返回: - 游客星图kolid  # [English] ### Purpose: - Get XingTu kolid by Douyin unique_id - Price: 0.001$ / time ### Parameters: - unique_id: unique_id, can be obtained from the following interfaces:     - `/api/v1/douyin/web/handler_user_profile`     - `/api/v1/douyin/web/handler_user_profile_v2`     - `/api/v1/douyin/web/handler_user_profile_v3`     - `/api/v1/douyin/app/v3/handler_user_profile` ### Return: - XingTu kolid  # [示例/Example] unique_id = \"m6640150\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_xingtu_kolid_by_unique_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_unique_id_get_0_with_http_info(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str unique_id: 抖音号/Douyin User unique_id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'unique_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_xingtu_kolid_by_unique_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_unique_id_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'unique_id' is set
        if self.api_client.client_side_validation and ('unique_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['unique_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `unique_id` when calling `get_xingtu_kolid_by_unique_id_api_v1_douyin_xingtu_get_xingtu_kolid_by_unique_id_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'unique_id' in local_var_params and local_var_params['unique_id'] is not None:  # noqa: E501
            query_params.append(('unique_id', local_var_params['unique_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_audience_portrait_v1_api_v1_douyin_xingtu_kol_audience_portrait_v1_get(self, kol_id, **kwargs):  # noqa: E501
        """获取kol观众画像V1/Get kol Audience Portrait V1  # noqa: E501

        # [中文] ### 用途: - 获取kol观众画像V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol观众画像  # [English] ### Purpose: - Get kol Audience Portrait V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Audience Portrait  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_audience_portrait_v1_api_v1_douyin_xingtu_kol_audience_portrait_v1_get(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_audience_portrait_v1_api_v1_douyin_xingtu_kol_audience_portrait_v1_get_with_http_info(kol_id, **kwargs)  # noqa: E501

    def kol_audience_portrait_v1_api_v1_douyin_xingtu_kol_audience_portrait_v1_get_with_http_info(self, kol_id, **kwargs):  # noqa: E501
        """获取kol观众画像V1/Get kol Audience Portrait V1  # noqa: E501

        # [中文] ### 用途: - 获取kol观众画像V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol观众画像  # [English] ### Purpose: - Get kol Audience Portrait V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Audience Portrait  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_audience_portrait_v1_api_v1_douyin_xingtu_kol_audience_portrait_v1_get_with_http_info(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_audience_portrait_v1_api_v1_douyin_xingtu_kol_audience_portrait_v1_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_audience_portrait_v1_api_v1_douyin_xingtu_kol_audience_portrait_v1_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_audience_portrait_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_audience_portrait_v1_api_v1_douyin_xingtu_kol_audience_portrait_v1_get_0(self, kol_id, **kwargs):  # noqa: E501
        """获取kol观众画像V1/Get kol Audience Portrait V1  # noqa: E501

        # [中文] ### 用途: - 获取kol观众画像V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol观众画像  # [English] ### Purpose: - Get kol Audience Portrait V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Audience Portrait  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_audience_portrait_v1_api_v1_douyin_xingtu_kol_audience_portrait_v1_get_0(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_audience_portrait_v1_api_v1_douyin_xingtu_kol_audience_portrait_v1_get_0_with_http_info(kol_id, **kwargs)  # noqa: E501

    def kol_audience_portrait_v1_api_v1_douyin_xingtu_kol_audience_portrait_v1_get_0_with_http_info(self, kol_id, **kwargs):  # noqa: E501
        """获取kol观众画像V1/Get kol Audience Portrait V1  # noqa: E501

        # [中文] ### 用途: - 获取kol观众画像V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol观众画像  # [English] ### Purpose: - Get kol Audience Portrait V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Audience Portrait  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_audience_portrait_v1_api_v1_douyin_xingtu_kol_audience_portrait_v1_get_0_with_http_info(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_audience_portrait_v1_api_v1_douyin_xingtu_kol_audience_portrait_v1_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_audience_portrait_v1_api_v1_douyin_xingtu_kol_audience_portrait_v1_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_audience_portrait_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_base_info_v1_api_v1_douyin_xingtu_kol_base_info_v1_get(self, kol_id, platform_channel, **kwargs):  # noqa: E501
        """获取kol基本信息V1/Get kol Base Info V1  # noqa: E501

        # [中文] ### 用途: - 获取kol基本信息V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - platformChannel:     - 平台渠道，支持以下参数:     - _1 :抖音短视频(Video)     - _10 :抖音直播(Live) ### 返回: - kol基本信息  # [English] ### Purpose: - Get kol Base Info V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - platformChannel:     - Platform channel, supports the following parameters:     - _1 :Douyin Video     - _10 :Douyin Live ### Return: - kol Base Info  # [示例/Example] kolId = \"7048929565493690398\" platformChannel = \"_1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_base_info_v1_api_v1_douyin_xingtu_kol_base_info_v1_get(kol_id, platform_channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param str platform_channel: 平台渠道/Platform Channel (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_base_info_v1_api_v1_douyin_xingtu_kol_base_info_v1_get_with_http_info(kol_id, platform_channel, **kwargs)  # noqa: E501

    def kol_base_info_v1_api_v1_douyin_xingtu_kol_base_info_v1_get_with_http_info(self, kol_id, platform_channel, **kwargs):  # noqa: E501
        """获取kol基本信息V1/Get kol Base Info V1  # noqa: E501

        # [中文] ### 用途: - 获取kol基本信息V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - platformChannel:     - 平台渠道，支持以下参数:     - _1 :抖音短视频(Video)     - _10 :抖音直播(Live) ### 返回: - kol基本信息  # [English] ### Purpose: - Get kol Base Info V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - platformChannel:     - Platform channel, supports the following parameters:     - _1 :Douyin Video     - _10 :Douyin Live ### Return: - kol Base Info  # [示例/Example] kolId = \"7048929565493690398\" platformChannel = \"_1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_base_info_v1_api_v1_douyin_xingtu_kol_base_info_v1_get_with_http_info(kol_id, platform_channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param str platform_channel: 平台渠道/Platform Channel (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id',
            'platform_channel'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_base_info_v1_api_v1_douyin_xingtu_kol_base_info_v1_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_base_info_v1_api_v1_douyin_xingtu_kol_base_info_v1_get`")  # noqa: E501
        # verify the required parameter 'platform_channel' is set
        if self.api_client.client_side_validation and ('platform_channel' not in local_var_params or  # noqa: E501
                                                        local_var_params['platform_channel'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `platform_channel` when calling `kol_base_info_v1_api_v1_douyin_xingtu_kol_base_info_v1_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501
        if 'platform_channel' in local_var_params and local_var_params['platform_channel'] is not None:  # noqa: E501
            query_params.append(('platformChannel', local_var_params['platform_channel']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_base_info_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_base_info_v1_api_v1_douyin_xingtu_kol_base_info_v1_get_0(self, kol_id, platform_channel, **kwargs):  # noqa: E501
        """获取kol基本信息V1/Get kol Base Info V1  # noqa: E501

        # [中文] ### 用途: - 获取kol基本信息V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - platformChannel:     - 平台渠道，支持以下参数:     - _1 :抖音短视频(Video)     - _10 :抖音直播(Live) ### 返回: - kol基本信息  # [English] ### Purpose: - Get kol Base Info V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - platformChannel:     - Platform channel, supports the following parameters:     - _1 :Douyin Video     - _10 :Douyin Live ### Return: - kol Base Info  # [示例/Example] kolId = \"7048929565493690398\" platformChannel = \"_1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_base_info_v1_api_v1_douyin_xingtu_kol_base_info_v1_get_0(kol_id, platform_channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param str platform_channel: 平台渠道/Platform Channel (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_base_info_v1_api_v1_douyin_xingtu_kol_base_info_v1_get_0_with_http_info(kol_id, platform_channel, **kwargs)  # noqa: E501

    def kol_base_info_v1_api_v1_douyin_xingtu_kol_base_info_v1_get_0_with_http_info(self, kol_id, platform_channel, **kwargs):  # noqa: E501
        """获取kol基本信息V1/Get kol Base Info V1  # noqa: E501

        # [中文] ### 用途: - 获取kol基本信息V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - platformChannel:     - 平台渠道，支持以下参数:     - _1 :抖音短视频(Video)     - _10 :抖音直播(Live) ### 返回: - kol基本信息  # [English] ### Purpose: - Get kol Base Info V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - platformChannel:     - Platform channel, supports the following parameters:     - _1 :Douyin Video     - _10 :Douyin Live ### Return: - kol Base Info  # [示例/Example] kolId = \"7048929565493690398\" platformChannel = \"_1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_base_info_v1_api_v1_douyin_xingtu_kol_base_info_v1_get_0_with_http_info(kol_id, platform_channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param str platform_channel: 平台渠道/Platform Channel (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id',
            'platform_channel'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_base_info_v1_api_v1_douyin_xingtu_kol_base_info_v1_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_base_info_v1_api_v1_douyin_xingtu_kol_base_info_v1_get_0`")  # noqa: E501
        # verify the required parameter 'platform_channel' is set
        if self.api_client.client_side_validation and ('platform_channel' not in local_var_params or  # noqa: E501
                                                        local_var_params['platform_channel'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `platform_channel` when calling `kol_base_info_v1_api_v1_douyin_xingtu_kol_base_info_v1_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501
        if 'platform_channel' in local_var_params and local_var_params['platform_channel'] is not None:  # noqa: E501
            query_params.append(('platformChannel', local_var_params['platform_channel']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_base_info_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_conversion_ability_analysis_v1_api_v1_douyin_xingtu_kol_conversion_ability_analysis_v1_get(self, kol_id, range, **kwargs):  # noqa: E501
        """获取kol转化能力分析V1/Get kol Conversion Ability Analysis V1  # noqa: E501

        # [中文] ### 用途: - 获取kol转化能力分析V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - _range: 时间范围, 支持以下参数:     - _1 :近7天(last 7 days)     - _2 :30天(last 30 days)     - _3 :90天(last 90 days) ### 返回: - kol转化能力分析  # [English] ### Purpose: - Get kol Conversion Ability Analysis V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - _range: Time range, supports the following parameters:     - _1 :Last 7 days     - _2 :Last 30 days     - _3 :Last 90 days ### Return: - kol Conversion Ability Analysis  # [示例/Example] kolId = \"7048929565493690398\" _range = \"_1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_conversion_ability_analysis_v1_api_v1_douyin_xingtu_kol_conversion_ability_analysis_v1_get(kol_id, range, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param str range: 时间范围/Time Range (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_conversion_ability_analysis_v1_api_v1_douyin_xingtu_kol_conversion_ability_analysis_v1_get_with_http_info(kol_id, range, **kwargs)  # noqa: E501

    def kol_conversion_ability_analysis_v1_api_v1_douyin_xingtu_kol_conversion_ability_analysis_v1_get_with_http_info(self, kol_id, range, **kwargs):  # noqa: E501
        """获取kol转化能力分析V1/Get kol Conversion Ability Analysis V1  # noqa: E501

        # [中文] ### 用途: - 获取kol转化能力分析V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - _range: 时间范围, 支持以下参数:     - _1 :近7天(last 7 days)     - _2 :30天(last 30 days)     - _3 :90天(last 90 days) ### 返回: - kol转化能力分析  # [English] ### Purpose: - Get kol Conversion Ability Analysis V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - _range: Time range, supports the following parameters:     - _1 :Last 7 days     - _2 :Last 30 days     - _3 :Last 90 days ### Return: - kol Conversion Ability Analysis  # [示例/Example] kolId = \"7048929565493690398\" _range = \"_1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_conversion_ability_analysis_v1_api_v1_douyin_xingtu_kol_conversion_ability_analysis_v1_get_with_http_info(kol_id, range, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param str range: 时间范围/Time Range (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id',
            'range'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_conversion_ability_analysis_v1_api_v1_douyin_xingtu_kol_conversion_ability_analysis_v1_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_conversion_ability_analysis_v1_api_v1_douyin_xingtu_kol_conversion_ability_analysis_v1_get`")  # noqa: E501
        # verify the required parameter 'range' is set
        if self.api_client.client_side_validation and ('range' not in local_var_params or  # noqa: E501
                                                        local_var_params['range'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `range` when calling `kol_conversion_ability_analysis_v1_api_v1_douyin_xingtu_kol_conversion_ability_analysis_v1_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501
        if 'range' in local_var_params and local_var_params['range'] is not None:  # noqa: E501
            query_params.append(('_range', local_var_params['range']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_conversion_ability_analysis_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_conversion_ability_analysis_v1_api_v1_douyin_xingtu_kol_conversion_ability_analysis_v1_get_0(self, kol_id, range, **kwargs):  # noqa: E501
        """获取kol转化能力分析V1/Get kol Conversion Ability Analysis V1  # noqa: E501

        # [中文] ### 用途: - 获取kol转化能力分析V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - _range: 时间范围, 支持以下参数:     - _1 :近7天(last 7 days)     - _2 :30天(last 30 days)     - _3 :90天(last 90 days) ### 返回: - kol转化能力分析  # [English] ### Purpose: - Get kol Conversion Ability Analysis V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - _range: Time range, supports the following parameters:     - _1 :Last 7 days     - _2 :Last 30 days     - _3 :Last 90 days ### Return: - kol Conversion Ability Analysis  # [示例/Example] kolId = \"7048929565493690398\" _range = \"_1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_conversion_ability_analysis_v1_api_v1_douyin_xingtu_kol_conversion_ability_analysis_v1_get_0(kol_id, range, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param str range: 时间范围/Time Range (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_conversion_ability_analysis_v1_api_v1_douyin_xingtu_kol_conversion_ability_analysis_v1_get_0_with_http_info(kol_id, range, **kwargs)  # noqa: E501

    def kol_conversion_ability_analysis_v1_api_v1_douyin_xingtu_kol_conversion_ability_analysis_v1_get_0_with_http_info(self, kol_id, range, **kwargs):  # noqa: E501
        """获取kol转化能力分析V1/Get kol Conversion Ability Analysis V1  # noqa: E501

        # [中文] ### 用途: - 获取kol转化能力分析V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - _range: 时间范围, 支持以下参数:     - _1 :近7天(last 7 days)     - _2 :30天(last 30 days)     - _3 :90天(last 90 days) ### 返回: - kol转化能力分析  # [English] ### Purpose: - Get kol Conversion Ability Analysis V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - _range: Time range, supports the following parameters:     - _1 :Last 7 days     - _2 :Last 30 days     - _3 :Last 90 days ### Return: - kol Conversion Ability Analysis  # [示例/Example] kolId = \"7048929565493690398\" _range = \"_1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_conversion_ability_analysis_v1_api_v1_douyin_xingtu_kol_conversion_ability_analysis_v1_get_0_with_http_info(kol_id, range, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param str range: 时间范围/Time Range (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id',
            'range'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_conversion_ability_analysis_v1_api_v1_douyin_xingtu_kol_conversion_ability_analysis_v1_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_conversion_ability_analysis_v1_api_v1_douyin_xingtu_kol_conversion_ability_analysis_v1_get_0`")  # noqa: E501
        # verify the required parameter 'range' is set
        if self.api_client.client_side_validation and ('range' not in local_var_params or  # noqa: E501
                                                        local_var_params['range'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `range` when calling `kol_conversion_ability_analysis_v1_api_v1_douyin_xingtu_kol_conversion_ability_analysis_v1_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501
        if 'range' in local_var_params and local_var_params['range'] is not None:  # noqa: E501
            query_params.append(('_range', local_var_params['range']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_conversion_ability_analysis_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_convert_video_display_v1_api_v1_douyin_xingtu_kol_convert_video_display_v1_get(self, kol_id, detail_type, page, **kwargs):  # noqa: E501
        """获取kol转化视频展示V1/Get kol Convert Video Display V1  # noqa: E501

        # [中文] ### 用途: - 获取kol转化视频展示V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - detailType: 详情类型, 支持以下参数:     - _1 :相关视频数据(Video Data)     - _2 :相关商品数据(Product Data) ### 返回: - kol转化视频展示  # [English] ### Purpose: - Get kol Convert Video Display V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - detailType: Detail type, supports the following parameters:     - _1 :Video Data     - _2 :Product Data - page: Page number, starting from 1 ### Return: - kol Convert Video Display  # [示例/Example] kolId = \"7048929565493690398\" detailType = \"_1\" page = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_convert_video_display_v1_api_v1_douyin_xingtu_kol_convert_video_display_v1_get(kol_id, detail_type, page, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param str detail_type: 详情类型/Detail Type (required)
        :param int page: 页码/Page (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_convert_video_display_v1_api_v1_douyin_xingtu_kol_convert_video_display_v1_get_with_http_info(kol_id, detail_type, page, **kwargs)  # noqa: E501

    def kol_convert_video_display_v1_api_v1_douyin_xingtu_kol_convert_video_display_v1_get_with_http_info(self, kol_id, detail_type, page, **kwargs):  # noqa: E501
        """获取kol转化视频展示V1/Get kol Convert Video Display V1  # noqa: E501

        # [中文] ### 用途: - 获取kol转化视频展示V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - detailType: 详情类型, 支持以下参数:     - _1 :相关视频数据(Video Data)     - _2 :相关商品数据(Product Data) ### 返回: - kol转化视频展示  # [English] ### Purpose: - Get kol Convert Video Display V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - detailType: Detail type, supports the following parameters:     - _1 :Video Data     - _2 :Product Data - page: Page number, starting from 1 ### Return: - kol Convert Video Display  # [示例/Example] kolId = \"7048929565493690398\" detailType = \"_1\" page = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_convert_video_display_v1_api_v1_douyin_xingtu_kol_convert_video_display_v1_get_with_http_info(kol_id, detail_type, page, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param str detail_type: 详情类型/Detail Type (required)
        :param int page: 页码/Page (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id',
            'detail_type',
            'page'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_convert_video_display_v1_api_v1_douyin_xingtu_kol_convert_video_display_v1_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_convert_video_display_v1_api_v1_douyin_xingtu_kol_convert_video_display_v1_get`")  # noqa: E501
        # verify the required parameter 'detail_type' is set
        if self.api_client.client_side_validation and ('detail_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['detail_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `detail_type` when calling `kol_convert_video_display_v1_api_v1_douyin_xingtu_kol_convert_video_display_v1_get`")  # noqa: E501
        # verify the required parameter 'page' is set
        if self.api_client.client_side_validation and ('page' not in local_var_params or  # noqa: E501
                                                        local_var_params['page'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page` when calling `kol_convert_video_display_v1_api_v1_douyin_xingtu_kol_convert_video_display_v1_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501
        if 'detail_type' in local_var_params and local_var_params['detail_type'] is not None:  # noqa: E501
            query_params.append(('detailType', local_var_params['detail_type']))  # noqa: E501
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_convert_video_display_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_convert_video_display_v1_api_v1_douyin_xingtu_kol_convert_video_display_v1_get_0(self, kol_id, detail_type, page, **kwargs):  # noqa: E501
        """获取kol转化视频展示V1/Get kol Convert Video Display V1  # noqa: E501

        # [中文] ### 用途: - 获取kol转化视频展示V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - detailType: 详情类型, 支持以下参数:     - _1 :相关视频数据(Video Data)     - _2 :相关商品数据(Product Data) ### 返回: - kol转化视频展示  # [English] ### Purpose: - Get kol Convert Video Display V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - detailType: Detail type, supports the following parameters:     - _1 :Video Data     - _2 :Product Data - page: Page number, starting from 1 ### Return: - kol Convert Video Display  # [示例/Example] kolId = \"7048929565493690398\" detailType = \"_1\" page = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_convert_video_display_v1_api_v1_douyin_xingtu_kol_convert_video_display_v1_get_0(kol_id, detail_type, page, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param str detail_type: 详情类型/Detail Type (required)
        :param int page: 页码/Page (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_convert_video_display_v1_api_v1_douyin_xingtu_kol_convert_video_display_v1_get_0_with_http_info(kol_id, detail_type, page, **kwargs)  # noqa: E501

    def kol_convert_video_display_v1_api_v1_douyin_xingtu_kol_convert_video_display_v1_get_0_with_http_info(self, kol_id, detail_type, page, **kwargs):  # noqa: E501
        """获取kol转化视频展示V1/Get kol Convert Video Display V1  # noqa: E501

        # [中文] ### 用途: - 获取kol转化视频展示V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - detailType: 详情类型, 支持以下参数:     - _1 :相关视频数据(Video Data)     - _2 :相关商品数据(Product Data) ### 返回: - kol转化视频展示  # [English] ### Purpose: - Get kol Convert Video Display V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - detailType: Detail type, supports the following parameters:     - _1 :Video Data     - _2 :Product Data - page: Page number, starting from 1 ### Return: - kol Convert Video Display  # [示例/Example] kolId = \"7048929565493690398\" detailType = \"_1\" page = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_convert_video_display_v1_api_v1_douyin_xingtu_kol_convert_video_display_v1_get_0_with_http_info(kol_id, detail_type, page, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param str detail_type: 详情类型/Detail Type (required)
        :param int page: 页码/Page (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id',
            'detail_type',
            'page'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_convert_video_display_v1_api_v1_douyin_xingtu_kol_convert_video_display_v1_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_convert_video_display_v1_api_v1_douyin_xingtu_kol_convert_video_display_v1_get_0`")  # noqa: E501
        # verify the required parameter 'detail_type' is set
        if self.api_client.client_side_validation and ('detail_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['detail_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `detail_type` when calling `kol_convert_video_display_v1_api_v1_douyin_xingtu_kol_convert_video_display_v1_get_0`")  # noqa: E501
        # verify the required parameter 'page' is set
        if self.api_client.client_side_validation and ('page' not in local_var_params or  # noqa: E501
                                                        local_var_params['page'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page` when calling `kol_convert_video_display_v1_api_v1_douyin_xingtu_kol_convert_video_display_v1_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501
        if 'detail_type' in local_var_params and local_var_params['detail_type'] is not None:  # noqa: E501
            query_params.append(('detailType', local_var_params['detail_type']))  # noqa: E501
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_convert_video_display_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_cp_info_v1_api_v1_douyin_xingtu_kol_cp_info_v1_get(self, kol_id, **kwargs):  # noqa: E501
        """获取kol性价比能力分析V1/Get kol Cp Info V1  # noqa: E501

        # [中文] ### 用途: - 获取kol性价比能力分析V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol性价比能力分析  # [English] ### Purpose: - Get kol Cp Info V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Cp Info  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_cp_info_v1_api_v1_douyin_xingtu_kol_cp_info_v1_get(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_cp_info_v1_api_v1_douyin_xingtu_kol_cp_info_v1_get_with_http_info(kol_id, **kwargs)  # noqa: E501

    def kol_cp_info_v1_api_v1_douyin_xingtu_kol_cp_info_v1_get_with_http_info(self, kol_id, **kwargs):  # noqa: E501
        """获取kol性价比能力分析V1/Get kol Cp Info V1  # noqa: E501

        # [中文] ### 用途: - 获取kol性价比能力分析V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol性价比能力分析  # [English] ### Purpose: - Get kol Cp Info V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Cp Info  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_cp_info_v1_api_v1_douyin_xingtu_kol_cp_info_v1_get_with_http_info(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_cp_info_v1_api_v1_douyin_xingtu_kol_cp_info_v1_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_cp_info_v1_api_v1_douyin_xingtu_kol_cp_info_v1_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_cp_info_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_cp_info_v1_api_v1_douyin_xingtu_kol_cp_info_v1_get_0(self, kol_id, **kwargs):  # noqa: E501
        """获取kol性价比能力分析V1/Get kol Cp Info V1  # noqa: E501

        # [中文] ### 用途: - 获取kol性价比能力分析V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol性价比能力分析  # [English] ### Purpose: - Get kol Cp Info V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Cp Info  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_cp_info_v1_api_v1_douyin_xingtu_kol_cp_info_v1_get_0(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_cp_info_v1_api_v1_douyin_xingtu_kol_cp_info_v1_get_0_with_http_info(kol_id, **kwargs)  # noqa: E501

    def kol_cp_info_v1_api_v1_douyin_xingtu_kol_cp_info_v1_get_0_with_http_info(self, kol_id, **kwargs):  # noqa: E501
        """获取kol性价比能力分析V1/Get kol Cp Info V1  # noqa: E501

        # [中文] ### 用途: - 获取kol性价比能力分析V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol性价比能力分析  # [English] ### Purpose: - Get kol Cp Info V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Cp Info  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_cp_info_v1_api_v1_douyin_xingtu_kol_cp_info_v1_get_0_with_http_info(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_cp_info_v1_api_v1_douyin_xingtu_kol_cp_info_v1_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_cp_info_v1_api_v1_douyin_xingtu_kol_cp_info_v1_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_cp_info_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_daily_fans_v1_api_v1_douyin_xingtu_kol_daily_fans_v1_get(self, kol_id, start_date, end_date, **kwargs):  # noqa: E501
        """获取kol粉丝趋势V1/Get kol Daily Fnas V1  # noqa: E501

        # [中文] ### 用途: - 获取kol粉丝趋势V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - startDate: 开始日期，格式为：yyyy-MM-dd - endDate: 结束日期，格式为：yyyy-MM-dd ### 返回: - kol粉丝趋势  # [English] ### Purpose: - Get kol Daily Fans V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - startDate: Start date, format: yyyy-MM-dd - endDate: End date, format: yyyy-MM-dd ### Return: - kol Daily Fans  # [示例/Example] kolId = \"7048929565493690398\" startDate = \"2024-12-01\" endDate = \"2025-01-01\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_daily_fans_v1_api_v1_douyin_xingtu_kol_daily_fans_v1_get(kol_id, start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param str start_date: 开始日期/Start Date (required)
        :param str end_date: 结束日期/End Date (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_daily_fans_v1_api_v1_douyin_xingtu_kol_daily_fans_v1_get_with_http_info(kol_id, start_date, end_date, **kwargs)  # noqa: E501

    def kol_daily_fans_v1_api_v1_douyin_xingtu_kol_daily_fans_v1_get_with_http_info(self, kol_id, start_date, end_date, **kwargs):  # noqa: E501
        """获取kol粉丝趋势V1/Get kol Daily Fnas V1  # noqa: E501

        # [中文] ### 用途: - 获取kol粉丝趋势V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - startDate: 开始日期，格式为：yyyy-MM-dd - endDate: 结束日期，格式为：yyyy-MM-dd ### 返回: - kol粉丝趋势  # [English] ### Purpose: - Get kol Daily Fans V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - startDate: Start date, format: yyyy-MM-dd - endDate: End date, format: yyyy-MM-dd ### Return: - kol Daily Fans  # [示例/Example] kolId = \"7048929565493690398\" startDate = \"2024-12-01\" endDate = \"2025-01-01\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_daily_fans_v1_api_v1_douyin_xingtu_kol_daily_fans_v1_get_with_http_info(kol_id, start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param str start_date: 开始日期/Start Date (required)
        :param str end_date: 结束日期/End Date (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id',
            'start_date',
            'end_date'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_daily_fans_v1_api_v1_douyin_xingtu_kol_daily_fans_v1_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_daily_fans_v1_api_v1_douyin_xingtu_kol_daily_fans_v1_get`")  # noqa: E501
        # verify the required parameter 'start_date' is set
        if self.api_client.client_side_validation and ('start_date' not in local_var_params or  # noqa: E501
                                                        local_var_params['start_date'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `start_date` when calling `kol_daily_fans_v1_api_v1_douyin_xingtu_kol_daily_fans_v1_get`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if self.api_client.client_side_validation and ('end_date' not in local_var_params or  # noqa: E501
                                                        local_var_params['end_date'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `end_date` when calling `kol_daily_fans_v1_api_v1_douyin_xingtu_kol_daily_fans_v1_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501
        if 'start_date' in local_var_params and local_var_params['start_date'] is not None:  # noqa: E501
            query_params.append(('startDate', local_var_params['start_date']))  # noqa: E501
        if 'end_date' in local_var_params and local_var_params['end_date'] is not None:  # noqa: E501
            query_params.append(('endDate', local_var_params['end_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_daily_fans_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_daily_fans_v1_api_v1_douyin_xingtu_kol_daily_fans_v1_get_0(self, kol_id, start_date, end_date, **kwargs):  # noqa: E501
        """获取kol粉丝趋势V1/Get kol Daily Fnas V1  # noqa: E501

        # [中文] ### 用途: - 获取kol粉丝趋势V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - startDate: 开始日期，格式为：yyyy-MM-dd - endDate: 结束日期，格式为：yyyy-MM-dd ### 返回: - kol粉丝趋势  # [English] ### Purpose: - Get kol Daily Fans V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - startDate: Start date, format: yyyy-MM-dd - endDate: End date, format: yyyy-MM-dd ### Return: - kol Daily Fans  # [示例/Example] kolId = \"7048929565493690398\" startDate = \"2024-12-01\" endDate = \"2025-01-01\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_daily_fans_v1_api_v1_douyin_xingtu_kol_daily_fans_v1_get_0(kol_id, start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param str start_date: 开始日期/Start Date (required)
        :param str end_date: 结束日期/End Date (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_daily_fans_v1_api_v1_douyin_xingtu_kol_daily_fans_v1_get_0_with_http_info(kol_id, start_date, end_date, **kwargs)  # noqa: E501

    def kol_daily_fans_v1_api_v1_douyin_xingtu_kol_daily_fans_v1_get_0_with_http_info(self, kol_id, start_date, end_date, **kwargs):  # noqa: E501
        """获取kol粉丝趋势V1/Get kol Daily Fnas V1  # noqa: E501

        # [中文] ### 用途: - 获取kol粉丝趋势V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - startDate: 开始日期，格式为：yyyy-MM-dd - endDate: 结束日期，格式为：yyyy-MM-dd ### 返回: - kol粉丝趋势  # [English] ### Purpose: - Get kol Daily Fans V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - startDate: Start date, format: yyyy-MM-dd - endDate: End date, format: yyyy-MM-dd ### Return: - kol Daily Fans  # [示例/Example] kolId = \"7048929565493690398\" startDate = \"2024-12-01\" endDate = \"2025-01-01\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_daily_fans_v1_api_v1_douyin_xingtu_kol_daily_fans_v1_get_0_with_http_info(kol_id, start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param str start_date: 开始日期/Start Date (required)
        :param str end_date: 结束日期/End Date (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id',
            'start_date',
            'end_date'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_daily_fans_v1_api_v1_douyin_xingtu_kol_daily_fans_v1_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_daily_fans_v1_api_v1_douyin_xingtu_kol_daily_fans_v1_get_0`")  # noqa: E501
        # verify the required parameter 'start_date' is set
        if self.api_client.client_side_validation and ('start_date' not in local_var_params or  # noqa: E501
                                                        local_var_params['start_date'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `start_date` when calling `kol_daily_fans_v1_api_v1_douyin_xingtu_kol_daily_fans_v1_get_0`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if self.api_client.client_side_validation and ('end_date' not in local_var_params or  # noqa: E501
                                                        local_var_params['end_date'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `end_date` when calling `kol_daily_fans_v1_api_v1_douyin_xingtu_kol_daily_fans_v1_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501
        if 'start_date' in local_var_params and local_var_params['start_date'] is not None:  # noqa: E501
            query_params.append(('startDate', local_var_params['start_date']))  # noqa: E501
        if 'end_date' in local_var_params and local_var_params['end_date'] is not None:  # noqa: E501
            query_params.append(('endDate', local_var_params['end_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_daily_fans_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_data_overview_v1_api_v1_douyin_xingtu_kol_data_overview_v1_get(self, kol_id, type, range, flow_type, **kwargs):  # noqa: E501
        """获取kol数据概览V1/Get kol Data Overview V1  # noqa: E501

        # [中文] ### 用途: - 获取kol数据概览V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - _type: 类型, 支持以下参数:     - _1 :个人视频(personal video)     - _2 :星图视频(xingtu video) - _range: 范围, 支持以下参数:     - _2 :近30天(last 30 days)     - _3 :近90天(last 90 days) - flowType: 流量类型, 支持以下参数:     - 1 : 默认(default) ### 返回: - kol数据概览  # [English] ### Purpose: - Get kol Data Overview V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - _type: Type, supports the following parameters:     - _1 :Personal Video     - _2 :Xingtu Video - _range: Range, supports the following parameters:     - _2 :Last 30 days     - _3 :Last 90 days - flowType: Flow Type, supports the following parameters:     - 1 : Default ### Return: - kol Data Overview  # [示例/Example] kolId = \"7048929565493690398\" _type = \"_1\" _range = \"_2\" flowType = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_data_overview_v1_api_v1_douyin_xingtu_kol_data_overview_v1_get(kol_id, type, range, flow_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param str type: 类型/Type (required)
        :param str range: 范围/Range (required)
        :param int flow_type: 流量类型/Flow Type (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_data_overview_v1_api_v1_douyin_xingtu_kol_data_overview_v1_get_with_http_info(kol_id, type, range, flow_type, **kwargs)  # noqa: E501

    def kol_data_overview_v1_api_v1_douyin_xingtu_kol_data_overview_v1_get_with_http_info(self, kol_id, type, range, flow_type, **kwargs):  # noqa: E501
        """获取kol数据概览V1/Get kol Data Overview V1  # noqa: E501

        # [中文] ### 用途: - 获取kol数据概览V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - _type: 类型, 支持以下参数:     - _1 :个人视频(personal video)     - _2 :星图视频(xingtu video) - _range: 范围, 支持以下参数:     - _2 :近30天(last 30 days)     - _3 :近90天(last 90 days) - flowType: 流量类型, 支持以下参数:     - 1 : 默认(default) ### 返回: - kol数据概览  # [English] ### Purpose: - Get kol Data Overview V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - _type: Type, supports the following parameters:     - _1 :Personal Video     - _2 :Xingtu Video - _range: Range, supports the following parameters:     - _2 :Last 30 days     - _3 :Last 90 days - flowType: Flow Type, supports the following parameters:     - 1 : Default ### Return: - kol Data Overview  # [示例/Example] kolId = \"7048929565493690398\" _type = \"_1\" _range = \"_2\" flowType = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_data_overview_v1_api_v1_douyin_xingtu_kol_data_overview_v1_get_with_http_info(kol_id, type, range, flow_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param str type: 类型/Type (required)
        :param str range: 范围/Range (required)
        :param int flow_type: 流量类型/Flow Type (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id',
            'type',
            'range',
            'flow_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_data_overview_v1_api_v1_douyin_xingtu_kol_data_overview_v1_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_data_overview_v1_api_v1_douyin_xingtu_kol_data_overview_v1_get`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in local_var_params or  # noqa: E501
                                                        local_var_params['type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `type` when calling `kol_data_overview_v1_api_v1_douyin_xingtu_kol_data_overview_v1_get`")  # noqa: E501
        # verify the required parameter 'range' is set
        if self.api_client.client_side_validation and ('range' not in local_var_params or  # noqa: E501
                                                        local_var_params['range'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `range` when calling `kol_data_overview_v1_api_v1_douyin_xingtu_kol_data_overview_v1_get`")  # noqa: E501
        # verify the required parameter 'flow_type' is set
        if self.api_client.client_side_validation and ('flow_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['flow_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `flow_type` when calling `kol_data_overview_v1_api_v1_douyin_xingtu_kol_data_overview_v1_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('_type', local_var_params['type']))  # noqa: E501
        if 'range' in local_var_params and local_var_params['range'] is not None:  # noqa: E501
            query_params.append(('_range', local_var_params['range']))  # noqa: E501
        if 'flow_type' in local_var_params and local_var_params['flow_type'] is not None:  # noqa: E501
            query_params.append(('flowType', local_var_params['flow_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_data_overview_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_data_overview_v1_api_v1_douyin_xingtu_kol_data_overview_v1_get_0(self, kol_id, type, range, flow_type, **kwargs):  # noqa: E501
        """获取kol数据概览V1/Get kol Data Overview V1  # noqa: E501

        # [中文] ### 用途: - 获取kol数据概览V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - _type: 类型, 支持以下参数:     - _1 :个人视频(personal video)     - _2 :星图视频(xingtu video) - _range: 范围, 支持以下参数:     - _2 :近30天(last 30 days)     - _3 :近90天(last 90 days) - flowType: 流量类型, 支持以下参数:     - 1 : 默认(default) ### 返回: - kol数据概览  # [English] ### Purpose: - Get kol Data Overview V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - _type: Type, supports the following parameters:     - _1 :Personal Video     - _2 :Xingtu Video - _range: Range, supports the following parameters:     - _2 :Last 30 days     - _3 :Last 90 days - flowType: Flow Type, supports the following parameters:     - 1 : Default ### Return: - kol Data Overview  # [示例/Example] kolId = \"7048929565493690398\" _type = \"_1\" _range = \"_2\" flowType = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_data_overview_v1_api_v1_douyin_xingtu_kol_data_overview_v1_get_0(kol_id, type, range, flow_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param str type: 类型/Type (required)
        :param str range: 范围/Range (required)
        :param int flow_type: 流量类型/Flow Type (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_data_overview_v1_api_v1_douyin_xingtu_kol_data_overview_v1_get_0_with_http_info(kol_id, type, range, flow_type, **kwargs)  # noqa: E501

    def kol_data_overview_v1_api_v1_douyin_xingtu_kol_data_overview_v1_get_0_with_http_info(self, kol_id, type, range, flow_type, **kwargs):  # noqa: E501
        """获取kol数据概览V1/Get kol Data Overview V1  # noqa: E501

        # [中文] ### 用途: - 获取kol数据概览V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - _type: 类型, 支持以下参数:     - _1 :个人视频(personal video)     - _2 :星图视频(xingtu video) - _range: 范围, 支持以下参数:     - _2 :近30天(last 30 days)     - _3 :近90天(last 90 days) - flowType: 流量类型, 支持以下参数:     - 1 : 默认(default) ### 返回: - kol数据概览  # [English] ### Purpose: - Get kol Data Overview V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - _type: Type, supports the following parameters:     - _1 :Personal Video     - _2 :Xingtu Video - _range: Range, supports the following parameters:     - _2 :Last 30 days     - _3 :Last 90 days - flowType: Flow Type, supports the following parameters:     - 1 : Default ### Return: - kol Data Overview  # [示例/Example] kolId = \"7048929565493690398\" _type = \"_1\" _range = \"_2\" flowType = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_data_overview_v1_api_v1_douyin_xingtu_kol_data_overview_v1_get_0_with_http_info(kol_id, type, range, flow_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param str type: 类型/Type (required)
        :param str range: 范围/Range (required)
        :param int flow_type: 流量类型/Flow Type (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id',
            'type',
            'range',
            'flow_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_data_overview_v1_api_v1_douyin_xingtu_kol_data_overview_v1_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_data_overview_v1_api_v1_douyin_xingtu_kol_data_overview_v1_get_0`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in local_var_params or  # noqa: E501
                                                        local_var_params['type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `type` when calling `kol_data_overview_v1_api_v1_douyin_xingtu_kol_data_overview_v1_get_0`")  # noqa: E501
        # verify the required parameter 'range' is set
        if self.api_client.client_side_validation and ('range' not in local_var_params or  # noqa: E501
                                                        local_var_params['range'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `range` when calling `kol_data_overview_v1_api_v1_douyin_xingtu_kol_data_overview_v1_get_0`")  # noqa: E501
        # verify the required parameter 'flow_type' is set
        if self.api_client.client_side_validation and ('flow_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['flow_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `flow_type` when calling `kol_data_overview_v1_api_v1_douyin_xingtu_kol_data_overview_v1_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('_type', local_var_params['type']))  # noqa: E501
        if 'range' in local_var_params and local_var_params['range'] is not None:  # noqa: E501
            query_params.append(('_range', local_var_params['range']))  # noqa: E501
        if 'flow_type' in local_var_params and local_var_params['flow_type'] is not None:  # noqa: E501
            query_params.append(('flowType', local_var_params['flow_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_data_overview_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_fans_portrait_v1_api_v1_douyin_xingtu_kol_fans_portrait_v1_get(self, kol_id, **kwargs):  # noqa: E501
        """获取kol粉丝画像V1/Get kol Fans Portrait V1  # noqa: E501

        # [中文] ### 用途: - 获取kol粉丝画像V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol粉丝画像  # [English] ### Purpose: - Get kol Fans Portrait V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Fans Portrait  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_fans_portrait_v1_api_v1_douyin_xingtu_kol_fans_portrait_v1_get(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_fans_portrait_v1_api_v1_douyin_xingtu_kol_fans_portrait_v1_get_with_http_info(kol_id, **kwargs)  # noqa: E501

    def kol_fans_portrait_v1_api_v1_douyin_xingtu_kol_fans_portrait_v1_get_with_http_info(self, kol_id, **kwargs):  # noqa: E501
        """获取kol粉丝画像V1/Get kol Fans Portrait V1  # noqa: E501

        # [中文] ### 用途: - 获取kol粉丝画像V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol粉丝画像  # [English] ### Purpose: - Get kol Fans Portrait V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Fans Portrait  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_fans_portrait_v1_api_v1_douyin_xingtu_kol_fans_portrait_v1_get_with_http_info(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_fans_portrait_v1_api_v1_douyin_xingtu_kol_fans_portrait_v1_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_fans_portrait_v1_api_v1_douyin_xingtu_kol_fans_portrait_v1_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_fans_portrait_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_fans_portrait_v1_api_v1_douyin_xingtu_kol_fans_portrait_v1_get_0(self, kol_id, **kwargs):  # noqa: E501
        """获取kol粉丝画像V1/Get kol Fans Portrait V1  # noqa: E501

        # [中文] ### 用途: - 获取kol粉丝画像V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol粉丝画像  # [English] ### Purpose: - Get kol Fans Portrait V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Fans Portrait  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_fans_portrait_v1_api_v1_douyin_xingtu_kol_fans_portrait_v1_get_0(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_fans_portrait_v1_api_v1_douyin_xingtu_kol_fans_portrait_v1_get_0_with_http_info(kol_id, **kwargs)  # noqa: E501

    def kol_fans_portrait_v1_api_v1_douyin_xingtu_kol_fans_portrait_v1_get_0_with_http_info(self, kol_id, **kwargs):  # noqa: E501
        """获取kol粉丝画像V1/Get kol Fans Portrait V1  # noqa: E501

        # [中文] ### 用途: - 获取kol粉丝画像V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol粉丝画像  # [English] ### Purpose: - Get kol Fans Portrait V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Fans Portrait  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_fans_portrait_v1_api_v1_douyin_xingtu_kol_fans_portrait_v1_get_0_with_http_info(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_fans_portrait_v1_api_v1_douyin_xingtu_kol_fans_portrait_v1_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_fans_portrait_v1_api_v1_douyin_xingtu_kol_fans_portrait_v1_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_fans_portrait_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_link_struct_v1_api_v1_douyin_xingtu_kol_link_struct_v1_get(self, kol_id, **kwargs):  # noqa: E501
        """获取kol连接用户V1/Get kol Link Struct V1  # noqa: E501

        # [中文] ### 用途: - 获取kol连接用户V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol连接用户  # [English] ### Purpose: - Get kol Link Struct V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Link Struct  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_link_struct_v1_api_v1_douyin_xingtu_kol_link_struct_v1_get(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_link_struct_v1_api_v1_douyin_xingtu_kol_link_struct_v1_get_with_http_info(kol_id, **kwargs)  # noqa: E501

    def kol_link_struct_v1_api_v1_douyin_xingtu_kol_link_struct_v1_get_with_http_info(self, kol_id, **kwargs):  # noqa: E501
        """获取kol连接用户V1/Get kol Link Struct V1  # noqa: E501

        # [中文] ### 用途: - 获取kol连接用户V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol连接用户  # [English] ### Purpose: - Get kol Link Struct V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Link Struct  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_link_struct_v1_api_v1_douyin_xingtu_kol_link_struct_v1_get_with_http_info(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_link_struct_v1_api_v1_douyin_xingtu_kol_link_struct_v1_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_link_struct_v1_api_v1_douyin_xingtu_kol_link_struct_v1_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_link_struct_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_link_struct_v1_api_v1_douyin_xingtu_kol_link_struct_v1_get_0(self, kol_id, **kwargs):  # noqa: E501
        """获取kol连接用户V1/Get kol Link Struct V1  # noqa: E501

        # [中文] ### 用途: - 获取kol连接用户V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol连接用户  # [English] ### Purpose: - Get kol Link Struct V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Link Struct  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_link_struct_v1_api_v1_douyin_xingtu_kol_link_struct_v1_get_0(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_link_struct_v1_api_v1_douyin_xingtu_kol_link_struct_v1_get_0_with_http_info(kol_id, **kwargs)  # noqa: E501

    def kol_link_struct_v1_api_v1_douyin_xingtu_kol_link_struct_v1_get_0_with_http_info(self, kol_id, **kwargs):  # noqa: E501
        """获取kol连接用户V1/Get kol Link Struct V1  # noqa: E501

        # [中文] ### 用途: - 获取kol连接用户V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol连接用户  # [English] ### Purpose: - Get kol Link Struct V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Link Struct  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_link_struct_v1_api_v1_douyin_xingtu_kol_link_struct_v1_get_0_with_http_info(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_link_struct_v1_api_v1_douyin_xingtu_kol_link_struct_v1_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_link_struct_v1_api_v1_douyin_xingtu_kol_link_struct_v1_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_link_struct_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_rec_videos_v1_api_v1_douyin_xingtu_kol_rec_videos_v1_get(self, kol_id, **kwargs):  # noqa: E501
        """获取kol内容表现V1/Get kol Rec Videos V1  # noqa: E501

        # [中文] ### 用途: - 获取kol内容表现V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol内容表现  # [English] ### Purpose: - Get kol Rec Videos V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Rec Videos  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_rec_videos_v1_api_v1_douyin_xingtu_kol_rec_videos_v1_get(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_rec_videos_v1_api_v1_douyin_xingtu_kol_rec_videos_v1_get_with_http_info(kol_id, **kwargs)  # noqa: E501

    def kol_rec_videos_v1_api_v1_douyin_xingtu_kol_rec_videos_v1_get_with_http_info(self, kol_id, **kwargs):  # noqa: E501
        """获取kol内容表现V1/Get kol Rec Videos V1  # noqa: E501

        # [中文] ### 用途: - 获取kol内容表现V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol内容表现  # [English] ### Purpose: - Get kol Rec Videos V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Rec Videos  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_rec_videos_v1_api_v1_douyin_xingtu_kol_rec_videos_v1_get_with_http_info(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_rec_videos_v1_api_v1_douyin_xingtu_kol_rec_videos_v1_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_rec_videos_v1_api_v1_douyin_xingtu_kol_rec_videos_v1_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_rec_videos_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_rec_videos_v1_api_v1_douyin_xingtu_kol_rec_videos_v1_get_0(self, kol_id, **kwargs):  # noqa: E501
        """获取kol内容表现V1/Get kol Rec Videos V1  # noqa: E501

        # [中文] ### 用途: - 获取kol内容表现V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol内容表现  # [English] ### Purpose: - Get kol Rec Videos V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Rec Videos  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_rec_videos_v1_api_v1_douyin_xingtu_kol_rec_videos_v1_get_0(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_rec_videos_v1_api_v1_douyin_xingtu_kol_rec_videos_v1_get_0_with_http_info(kol_id, **kwargs)  # noqa: E501

    def kol_rec_videos_v1_api_v1_douyin_xingtu_kol_rec_videos_v1_get_0_with_http_info(self, kol_id, **kwargs):  # noqa: E501
        """获取kol内容表现V1/Get kol Rec Videos V1  # noqa: E501

        # [中文] ### 用途: - 获取kol内容表现V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol内容表现  # [English] ### Purpose: - Get kol Rec Videos V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Rec Videos  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_rec_videos_v1_api_v1_douyin_xingtu_kol_rec_videos_v1_get_0_with_http_info(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_rec_videos_v1_api_v1_douyin_xingtu_kol_rec_videos_v1_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_rec_videos_v1_api_v1_douyin_xingtu_kol_rec_videos_v1_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_rec_videos_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_service_price_v1_api_v1_douyin_xingtu_kol_service_price_v1_get(self, kol_id, platform_channel, **kwargs):  # noqa: E501
        """获取kol服务报价V1/Get kol Service Price V1  # noqa: E501

        # [中文] ### 用途: - 获取kol服务报价V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - platformChannel:     - 平台渠道，支持以下参数:     - _1: 抖音短视频(Video)     - _10: 抖音直播(Live) ### 返回: kol服务报价  # [English] ### Purpose: - Get kol Service Price V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - platformChannel:     - Platform channel, supports the following parameters:     - _1: Douyin Video     - _10: Douyin Live ### Return: - kol Service Price  # [示例/Example] kolId = \"7048929565493690398\" platformChannel = \"_1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_service_price_v1_api_v1_douyin_xingtu_kol_service_price_v1_get(kol_id, platform_channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param str platform_channel: 平台渠道/Platform Channel (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_service_price_v1_api_v1_douyin_xingtu_kol_service_price_v1_get_with_http_info(kol_id, platform_channel, **kwargs)  # noqa: E501

    def kol_service_price_v1_api_v1_douyin_xingtu_kol_service_price_v1_get_with_http_info(self, kol_id, platform_channel, **kwargs):  # noqa: E501
        """获取kol服务报价V1/Get kol Service Price V1  # noqa: E501

        # [中文] ### 用途: - 获取kol服务报价V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - platformChannel:     - 平台渠道，支持以下参数:     - _1: 抖音短视频(Video)     - _10: 抖音直播(Live) ### 返回: kol服务报价  # [English] ### Purpose: - Get kol Service Price V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - platformChannel:     - Platform channel, supports the following parameters:     - _1: Douyin Video     - _10: Douyin Live ### Return: - kol Service Price  # [示例/Example] kolId = \"7048929565493690398\" platformChannel = \"_1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_service_price_v1_api_v1_douyin_xingtu_kol_service_price_v1_get_with_http_info(kol_id, platform_channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param str platform_channel: 平台渠道/Platform Channel (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id',
            'platform_channel'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_service_price_v1_api_v1_douyin_xingtu_kol_service_price_v1_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_service_price_v1_api_v1_douyin_xingtu_kol_service_price_v1_get`")  # noqa: E501
        # verify the required parameter 'platform_channel' is set
        if self.api_client.client_side_validation and ('platform_channel' not in local_var_params or  # noqa: E501
                                                        local_var_params['platform_channel'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `platform_channel` when calling `kol_service_price_v1_api_v1_douyin_xingtu_kol_service_price_v1_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501
        if 'platform_channel' in local_var_params and local_var_params['platform_channel'] is not None:  # noqa: E501
            query_params.append(('platformChannel', local_var_params['platform_channel']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_service_price_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_service_price_v1_api_v1_douyin_xingtu_kol_service_price_v1_get_0(self, kol_id, platform_channel, **kwargs):  # noqa: E501
        """获取kol服务报价V1/Get kol Service Price V1  # noqa: E501

        # [中文] ### 用途: - 获取kol服务报价V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - platformChannel:     - 平台渠道，支持以下参数:     - _1: 抖音短视频(Video)     - _10: 抖音直播(Live) ### 返回: kol服务报价  # [English] ### Purpose: - Get kol Service Price V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - platformChannel:     - Platform channel, supports the following parameters:     - _1: Douyin Video     - _10: Douyin Live ### Return: - kol Service Price  # [示例/Example] kolId = \"7048929565493690398\" platformChannel = \"_1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_service_price_v1_api_v1_douyin_xingtu_kol_service_price_v1_get_0(kol_id, platform_channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param str platform_channel: 平台渠道/Platform Channel (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_service_price_v1_api_v1_douyin_xingtu_kol_service_price_v1_get_0_with_http_info(kol_id, platform_channel, **kwargs)  # noqa: E501

    def kol_service_price_v1_api_v1_douyin_xingtu_kol_service_price_v1_get_0_with_http_info(self, kol_id, platform_channel, **kwargs):  # noqa: E501
        """获取kol服务报价V1/Get kol Service Price V1  # noqa: E501

        # [中文] ### 用途: - 获取kol服务报价V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - platformChannel:     - 平台渠道，支持以下参数:     - _1: 抖音短视频(Video)     - _10: 抖音直播(Live) ### 返回: kol服务报价  # [English] ### Purpose: - Get kol Service Price V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - platformChannel:     - Platform channel, supports the following parameters:     - _1: Douyin Video     - _10: Douyin Live ### Return: - kol Service Price  # [示例/Example] kolId = \"7048929565493690398\" platformChannel = \"_1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_service_price_v1_api_v1_douyin_xingtu_kol_service_price_v1_get_0_with_http_info(kol_id, platform_channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param str platform_channel: 平台渠道/Platform Channel (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id',
            'platform_channel'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_service_price_v1_api_v1_douyin_xingtu_kol_service_price_v1_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_service_price_v1_api_v1_douyin_xingtu_kol_service_price_v1_get_0`")  # noqa: E501
        # verify the required parameter 'platform_channel' is set
        if self.api_client.client_side_validation and ('platform_channel' not in local_var_params or  # noqa: E501
                                                        local_var_params['platform_channel'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `platform_channel` when calling `kol_service_price_v1_api_v1_douyin_xingtu_kol_service_price_v1_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501
        if 'platform_channel' in local_var_params and local_var_params['platform_channel'] is not None:  # noqa: E501
            query_params.append(('platformChannel', local_var_params['platform_channel']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_service_price_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_touch_distribution_v1_api_v1_douyin_xingtu_kol_touch_distribution_v1_get(self, kol_id, **kwargs):  # noqa: E501
        """获取kol连接用户来源V1/Get kol Touch Distribution V1  # noqa: E501

        # [中文] ### 用途: - 获取kol连接用户来源V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol连接用户来源  # [English] ### Purpose: - Get kol Touch Distribution V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Touch Distribution  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_touch_distribution_v1_api_v1_douyin_xingtu_kol_touch_distribution_v1_get(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_touch_distribution_v1_api_v1_douyin_xingtu_kol_touch_distribution_v1_get_with_http_info(kol_id, **kwargs)  # noqa: E501

    def kol_touch_distribution_v1_api_v1_douyin_xingtu_kol_touch_distribution_v1_get_with_http_info(self, kol_id, **kwargs):  # noqa: E501
        """获取kol连接用户来源V1/Get kol Touch Distribution V1  # noqa: E501

        # [中文] ### 用途: - 获取kol连接用户来源V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol连接用户来源  # [English] ### Purpose: - Get kol Touch Distribution V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Touch Distribution  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_touch_distribution_v1_api_v1_douyin_xingtu_kol_touch_distribution_v1_get_with_http_info(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_touch_distribution_v1_api_v1_douyin_xingtu_kol_touch_distribution_v1_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_touch_distribution_v1_api_v1_douyin_xingtu_kol_touch_distribution_v1_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_touch_distribution_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_touch_distribution_v1_api_v1_douyin_xingtu_kol_touch_distribution_v1_get_0(self, kol_id, **kwargs):  # noqa: E501
        """获取kol连接用户来源V1/Get kol Touch Distribution V1  # noqa: E501

        # [中文] ### 用途: - 获取kol连接用户来源V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol连接用户来源  # [English] ### Purpose: - Get kol Touch Distribution V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Touch Distribution  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_touch_distribution_v1_api_v1_douyin_xingtu_kol_touch_distribution_v1_get_0(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_touch_distribution_v1_api_v1_douyin_xingtu_kol_touch_distribution_v1_get_0_with_http_info(kol_id, **kwargs)  # noqa: E501

    def kol_touch_distribution_v1_api_v1_douyin_xingtu_kol_touch_distribution_v1_get_0_with_http_info(self, kol_id, **kwargs):  # noqa: E501
        """获取kol连接用户来源V1/Get kol Touch Distribution V1  # noqa: E501

        # [中文] ### 用途: - 获取kol连接用户来源V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol连接用户来源  # [English] ### Purpose: - Get kol Touch Distribution V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Touch Distribution  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_touch_distribution_v1_api_v1_douyin_xingtu_kol_touch_distribution_v1_get_0_with_http_info(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_touch_distribution_v1_api_v1_douyin_xingtu_kol_touch_distribution_v1_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_touch_distribution_v1_api_v1_douyin_xingtu_kol_touch_distribution_v1_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_touch_distribution_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_video_performance_v1_api_v1_douyin_xingtu_kol_video_performance_v1_get(self, kol_id, only_assign, **kwargs):  # noqa: E501
        """获取kol视频表现V1/Get kol Video Performance V1  # noqa: E501

        # [中文] ### 用途: - 获取kol视频表现V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - onlyAssign: 是否只显示分配作品，具体参数如下:     - false : 显示全部，包括个人作品和分配作品，默认值。     - true : 只显示来自星图的分配作品。 ### 返回: - kol视频表现  # [English] ### Purpose: - Get kol Video Performance V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - onlyAssign: Whether to display only assigned works, the specific parameters are as follows:     - false : Show all, including personal works and assigned works, default value.     - true : Only display assigned works from XingTu. ### Return: - kol Video Performance  # [示例/Example] kolId = \"7048929565493690398\" onlyAssign = False  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_video_performance_v1_api_v1_douyin_xingtu_kol_video_performance_v1_get(kol_id, only_assign, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param bool only_assign: 是否只显示分配作品/Whether to display only assigned works (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_video_performance_v1_api_v1_douyin_xingtu_kol_video_performance_v1_get_with_http_info(kol_id, only_assign, **kwargs)  # noqa: E501

    def kol_video_performance_v1_api_v1_douyin_xingtu_kol_video_performance_v1_get_with_http_info(self, kol_id, only_assign, **kwargs):  # noqa: E501
        """获取kol视频表现V1/Get kol Video Performance V1  # noqa: E501

        # [中文] ### 用途: - 获取kol视频表现V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - onlyAssign: 是否只显示分配作品，具体参数如下:     - false : 显示全部，包括个人作品和分配作品，默认值。     - true : 只显示来自星图的分配作品。 ### 返回: - kol视频表现  # [English] ### Purpose: - Get kol Video Performance V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - onlyAssign: Whether to display only assigned works, the specific parameters are as follows:     - false : Show all, including personal works and assigned works, default value.     - true : Only display assigned works from XingTu. ### Return: - kol Video Performance  # [示例/Example] kolId = \"7048929565493690398\" onlyAssign = False  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_video_performance_v1_api_v1_douyin_xingtu_kol_video_performance_v1_get_with_http_info(kol_id, only_assign, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param bool only_assign: 是否只显示分配作品/Whether to display only assigned works (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id',
            'only_assign'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_video_performance_v1_api_v1_douyin_xingtu_kol_video_performance_v1_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_video_performance_v1_api_v1_douyin_xingtu_kol_video_performance_v1_get`")  # noqa: E501
        # verify the required parameter 'only_assign' is set
        if self.api_client.client_side_validation and ('only_assign' not in local_var_params or  # noqa: E501
                                                        local_var_params['only_assign'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `only_assign` when calling `kol_video_performance_v1_api_v1_douyin_xingtu_kol_video_performance_v1_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501
        if 'only_assign' in local_var_params and local_var_params['only_assign'] is not None:  # noqa: E501
            query_params.append(('onlyAssign', local_var_params['only_assign']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_video_performance_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_video_performance_v1_api_v1_douyin_xingtu_kol_video_performance_v1_get_0(self, kol_id, only_assign, **kwargs):  # noqa: E501
        """获取kol视频表现V1/Get kol Video Performance V1  # noqa: E501

        # [中文] ### 用途: - 获取kol视频表现V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - onlyAssign: 是否只显示分配作品，具体参数如下:     - false : 显示全部，包括个人作品和分配作品，默认值。     - true : 只显示来自星图的分配作品。 ### 返回: - kol视频表现  # [English] ### Purpose: - Get kol Video Performance V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - onlyAssign: Whether to display only assigned works, the specific parameters are as follows:     - false : Show all, including personal works and assigned works, default value.     - true : Only display assigned works from XingTu. ### Return: - kol Video Performance  # [示例/Example] kolId = \"7048929565493690398\" onlyAssign = False  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_video_performance_v1_api_v1_douyin_xingtu_kol_video_performance_v1_get_0(kol_id, only_assign, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param bool only_assign: 是否只显示分配作品/Whether to display only assigned works (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_video_performance_v1_api_v1_douyin_xingtu_kol_video_performance_v1_get_0_with_http_info(kol_id, only_assign, **kwargs)  # noqa: E501

    def kol_video_performance_v1_api_v1_douyin_xingtu_kol_video_performance_v1_get_0_with_http_info(self, kol_id, only_assign, **kwargs):  # noqa: E501
        """获取kol视频表现V1/Get kol Video Performance V1  # noqa: E501

        # [中文] ### 用途: - 获取kol视频表现V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - onlyAssign: 是否只显示分配作品，具体参数如下:     - false : 显示全部，包括个人作品和分配作品，默认值。     - true : 只显示来自星图的分配作品。 ### 返回: - kol视频表现  # [English] ### Purpose: - Get kol Video Performance V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` - onlyAssign: Whether to display only assigned works, the specific parameters are as follows:     - false : Show all, including personal works and assigned works, default value.     - true : Only display assigned works from XingTu. ### Return: - kol Video Performance  # [示例/Example] kolId = \"7048929565493690398\" onlyAssign = False  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_video_performance_v1_api_v1_douyin_xingtu_kol_video_performance_v1_get_0_with_http_info(kol_id, only_assign, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param bool only_assign: 是否只显示分配作品/Whether to display only assigned works (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id',
            'only_assign'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_video_performance_v1_api_v1_douyin_xingtu_kol_video_performance_v1_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_video_performance_v1_api_v1_douyin_xingtu_kol_video_performance_v1_get_0`")  # noqa: E501
        # verify the required parameter 'only_assign' is set
        if self.api_client.client_side_validation and ('only_assign' not in local_var_params or  # noqa: E501
                                                        local_var_params['only_assign'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `only_assign` when calling `kol_video_performance_v1_api_v1_douyin_xingtu_kol_video_performance_v1_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501
        if 'only_assign' in local_var_params and local_var_params['only_assign'] is not None:  # noqa: E501
            query_params.append(('onlyAssign', local_var_params['only_assign']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_video_performance_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_xingtu_index_v1_api_v1_douyin_xingtu_kol_xingtu_index_v1_get(self, kol_id, **kwargs):  # noqa: E501
        """获取kol星图指数V1/Get kol Xingtu Index V1  # noqa: E501

        # [中文] ### 用途: - 获取kol星图指数V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol星图指数  # [English] ### Purpose: - Get kol Xingtu Index V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Xingtu Index  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_xingtu_index_v1_api_v1_douyin_xingtu_kol_xingtu_index_v1_get(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_xingtu_index_v1_api_v1_douyin_xingtu_kol_xingtu_index_v1_get_with_http_info(kol_id, **kwargs)  # noqa: E501

    def kol_xingtu_index_v1_api_v1_douyin_xingtu_kol_xingtu_index_v1_get_with_http_info(self, kol_id, **kwargs):  # noqa: E501
        """获取kol星图指数V1/Get kol Xingtu Index V1  # noqa: E501

        # [中文] ### 用途: - 获取kol星图指数V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol星图指数  # [English] ### Purpose: - Get kol Xingtu Index V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Xingtu Index  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_xingtu_index_v1_api_v1_douyin_xingtu_kol_xingtu_index_v1_get_with_http_info(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_xingtu_index_v1_api_v1_douyin_xingtu_kol_xingtu_index_v1_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_xingtu_index_v1_api_v1_douyin_xingtu_kol_xingtu_index_v1_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_xingtu_index_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def kol_xingtu_index_v1_api_v1_douyin_xingtu_kol_xingtu_index_v1_get_0(self, kol_id, **kwargs):  # noqa: E501
        """获取kol星图指数V1/Get kol Xingtu Index V1  # noqa: E501

        # [中文] ### 用途: - 获取kol星图指数V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol星图指数  # [English] ### Purpose: - Get kol Xingtu Index V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Xingtu Index  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_xingtu_index_v1_api_v1_douyin_xingtu_kol_xingtu_index_v1_get_0(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.kol_xingtu_index_v1_api_v1_douyin_xingtu_kol_xingtu_index_v1_get_0_with_http_info(kol_id, **kwargs)  # noqa: E501

    def kol_xingtu_index_v1_api_v1_douyin_xingtu_kol_xingtu_index_v1_get_0_with_http_info(self, kol_id, **kwargs):  # noqa: E501
        """获取kol星图指数V1/Get kol Xingtu Index V1  # noqa: E501

        # [中文] ### 用途: - 获取kol星图指数V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### 返回: - kol星图指数  # [English] ### Purpose: - Get kol Xingtu Index V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id`     - `/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id` ### Return: - kol Xingtu Index  # [示例/Example] kolId = \"7048929565493690398\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.kol_xingtu_index_v1_api_v1_douyin_xingtu_kol_xingtu_index_v1_get_0_with_http_info(kol_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str kol_id: 用户的kolId/User kolId (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'kol_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method kol_xingtu_index_v1_api_v1_douyin_xingtu_kol_xingtu_index_v1_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'kol_id' is set
        if self.api_client.client_side_validation and ('kol_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['kol_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `kol_id` when calling `kol_xingtu_index_v1_api_v1_douyin_xingtu_kol_xingtu_index_v1_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'kol_id' in local_var_params and local_var_params['kol_id'] is not None:  # noqa: E501
            query_params.append(('kolId', local_var_params['kol_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/kol_xingtu_index_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_kol_v1_api_v1_douyin_xingtu_search_kol_v1_get(self, keyword, platform_source, page, **kwargs):  # noqa: E501
        """关键词搜索kol V1/Search Kol V1  # noqa: E501

        # [中文] ### 用途: - 关键词搜索kol V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - keyword: 关键词 - platformSource:     - 平台来源，支持以下参数:     - _1 :抖音(douyin)     - _2 :头条(toutiao)     - _3 :西瓜(xigua) - page: 页码，从1开始 ### 返回: - kol列表  # [English] ### Purpose: - Search Kol V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - keyword: Keyword - platformSource:     - Platform source, supports the following parameters:     - _1 :Douyin     - _2 :Toutiao     - _3 :Xigua - page: Page number, starting from 1 ### Return: - Kol List  # [示例/Example] keyword = \"人工智能\" platformSource = \"_1\" page = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_kol_v1_api_v1_douyin_xingtu_search_kol_v1_get(keyword, platform_source, page, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param str platform_source: 平台来源/Platform Source (required)
        :param int page: 页码/Page (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.search_kol_v1_api_v1_douyin_xingtu_search_kol_v1_get_with_http_info(keyword, platform_source, page, **kwargs)  # noqa: E501

    def search_kol_v1_api_v1_douyin_xingtu_search_kol_v1_get_with_http_info(self, keyword, platform_source, page, **kwargs):  # noqa: E501
        """关键词搜索kol V1/Search Kol V1  # noqa: E501

        # [中文] ### 用途: - 关键词搜索kol V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - keyword: 关键词 - platformSource:     - 平台来源，支持以下参数:     - _1 :抖音(douyin)     - _2 :头条(toutiao)     - _3 :西瓜(xigua) - page: 页码，从1开始 ### 返回: - kol列表  # [English] ### Purpose: - Search Kol V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - keyword: Keyword - platformSource:     - Platform source, supports the following parameters:     - _1 :Douyin     - _2 :Toutiao     - _3 :Xigua - page: Page number, starting from 1 ### Return: - Kol List  # [示例/Example] keyword = \"人工智能\" platformSource = \"_1\" page = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_kol_v1_api_v1_douyin_xingtu_search_kol_v1_get_with_http_info(keyword, platform_source, page, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param str platform_source: 平台来源/Platform Source (required)
        :param int page: 页码/Page (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'platform_source',
            'page'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_kol_v1_api_v1_douyin_xingtu_search_kol_v1_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `search_kol_v1_api_v1_douyin_xingtu_search_kol_v1_get`")  # noqa: E501
        # verify the required parameter 'platform_source' is set
        if self.api_client.client_side_validation and ('platform_source' not in local_var_params or  # noqa: E501
                                                        local_var_params['platform_source'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `platform_source` when calling `search_kol_v1_api_v1_douyin_xingtu_search_kol_v1_get`")  # noqa: E501
        # verify the required parameter 'page' is set
        if self.api_client.client_side_validation and ('page' not in local_var_params or  # noqa: E501
                                                        local_var_params['page'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page` when calling `search_kol_v1_api_v1_douyin_xingtu_search_kol_v1_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'platform_source' in local_var_params and local_var_params['platform_source'] is not None:  # noqa: E501
            query_params.append(('platformSource', local_var_params['platform_source']))  # noqa: E501
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/search_kol_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_kol_v1_api_v1_douyin_xingtu_search_kol_v1_get_0(self, keyword, platform_source, page, **kwargs):  # noqa: E501
        """关键词搜索kol V1/Search Kol V1  # noqa: E501

        # [中文] ### 用途: - 关键词搜索kol V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - keyword: 关键词 - platformSource:     - 平台来源，支持以下参数:     - _1 :抖音(douyin)     - _2 :头条(toutiao)     - _3 :西瓜(xigua) - page: 页码，从1开始 ### 返回: - kol列表  # [English] ### Purpose: - Search Kol V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - keyword: Keyword - platformSource:     - Platform source, supports the following parameters:     - _1 :Douyin     - _2 :Toutiao     - _3 :Xigua - page: Page number, starting from 1 ### Return: - Kol List  # [示例/Example] keyword = \"人工智能\" platformSource = \"_1\" page = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_kol_v1_api_v1_douyin_xingtu_search_kol_v1_get_0(keyword, platform_source, page, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param str platform_source: 平台来源/Platform Source (required)
        :param int page: 页码/Page (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.search_kol_v1_api_v1_douyin_xingtu_search_kol_v1_get_0_with_http_info(keyword, platform_source, page, **kwargs)  # noqa: E501

    def search_kol_v1_api_v1_douyin_xingtu_search_kol_v1_get_0_with_http_info(self, keyword, platform_source, page, **kwargs):  # noqa: E501
        """关键词搜索kol V1/Search Kol V1  # noqa: E501

        # [中文] ### 用途: - 关键词搜索kol V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - keyword: 关键词 - platformSource:     - 平台来源，支持以下参数:     - _1 :抖音(douyin)     - _2 :头条(toutiao)     - _3 :西瓜(xigua) - page: 页码，从1开始 ### 返回: - kol列表  # [English] ### Purpose: - Search Kol V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - keyword: Keyword - platformSource:     - Platform source, supports the following parameters:     - _1 :Douyin     - _2 :Toutiao     - _3 :Xigua - page: Page number, starting from 1 ### Return: - Kol List  # [示例/Example] keyword = \"人工智能\" platformSource = \"_1\" page = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_kol_v1_api_v1_douyin_xingtu_search_kol_v1_get_0_with_http_info(keyword, platform_source, page, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param str platform_source: 平台来源/Platform Source (required)
        :param int page: 页码/Page (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'platform_source',
            'page'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_kol_v1_api_v1_douyin_xingtu_search_kol_v1_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `search_kol_v1_api_v1_douyin_xingtu_search_kol_v1_get_0`")  # noqa: E501
        # verify the required parameter 'platform_source' is set
        if self.api_client.client_side_validation and ('platform_source' not in local_var_params or  # noqa: E501
                                                        local_var_params['platform_source'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `platform_source` when calling `search_kol_v1_api_v1_douyin_xingtu_search_kol_v1_get_0`")  # noqa: E501
        # verify the required parameter 'page' is set
        if self.api_client.client_side_validation and ('page' not in local_var_params or  # noqa: E501
                                                        local_var_params['page'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page` when calling `search_kol_v1_api_v1_douyin_xingtu_search_kol_v1_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'platform_source' in local_var_params and local_var_params['platform_source'] is not None:  # noqa: E501
            query_params.append(('platformSource', local_var_params['platform_source']))  # noqa: E501
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/xingtu/search_kol_v1', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
