# coding: utf-8

"""
    TikHub.io - Your Ultimate Social Media Data & API Marketplace

    High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tikhub_sdk_v2.api_client import ApiClient
from tikhub_sdk_v2.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class PiPiXiaAppAPIApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def fetch_hashtag_detail_api_v1_pipixia_app_fetch_hashtag_detail_get(self, hashtag_id, **kwargs):  # noqa: E501
        """获取话题详情/Get hashtag detail  # noqa: E501

        # [中文] ### 用途: - 获取话题详情数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 ### 返回: - 话题详情数据  # [English] ### Purpose: - Get hashtag detail data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. ### Return: - Hashtag detail data # [示例/Example] hashtag_id = \"129559\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hashtag_detail_api_v1_pipixia_app_fetch_hashtag_detail_get(hashtag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str hashtag_id: 话题id/Hashtag id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hashtag_detail_api_v1_pipixia_app_fetch_hashtag_detail_get_with_http_info(hashtag_id, **kwargs)  # noqa: E501

    def fetch_hashtag_detail_api_v1_pipixia_app_fetch_hashtag_detail_get_with_http_info(self, hashtag_id, **kwargs):  # noqa: E501
        """获取话题详情/Get hashtag detail  # noqa: E501

        # [中文] ### 用途: - 获取话题详情数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 ### 返回: - 话题详情数据  # [English] ### Purpose: - Get hashtag detail data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. ### Return: - Hashtag detail data # [示例/Example] hashtag_id = \"129559\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hashtag_detail_api_v1_pipixia_app_fetch_hashtag_detail_get_with_http_info(hashtag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str hashtag_id: 话题id/Hashtag id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'hashtag_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hashtag_detail_api_v1_pipixia_app_fetch_hashtag_detail_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'hashtag_id' is set
        if self.api_client.client_side_validation and ('hashtag_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['hashtag_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `hashtag_id` when calling `fetch_hashtag_detail_api_v1_pipixia_app_fetch_hashtag_detail_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'hashtag_id' in local_var_params and local_var_params['hashtag_id'] is not None:  # noqa: E501
            query_params.append(('hashtag_id', local_var_params['hashtag_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_hashtag_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hashtag_detail_api_v1_pipixia_app_fetch_hashtag_detail_get_0(self, hashtag_id, **kwargs):  # noqa: E501
        """获取话题详情/Get hashtag detail  # noqa: E501

        # [中文] ### 用途: - 获取话题详情数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 ### 返回: - 话题详情数据  # [English] ### Purpose: - Get hashtag detail data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. ### Return: - Hashtag detail data # [示例/Example] hashtag_id = \"129559\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hashtag_detail_api_v1_pipixia_app_fetch_hashtag_detail_get_0(hashtag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str hashtag_id: 话题id/Hashtag id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hashtag_detail_api_v1_pipixia_app_fetch_hashtag_detail_get_0_with_http_info(hashtag_id, **kwargs)  # noqa: E501

    def fetch_hashtag_detail_api_v1_pipixia_app_fetch_hashtag_detail_get_0_with_http_info(self, hashtag_id, **kwargs):  # noqa: E501
        """获取话题详情/Get hashtag detail  # noqa: E501

        # [中文] ### 用途: - 获取话题详情数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 ### 返回: - 话题详情数据  # [English] ### Purpose: - Get hashtag detail data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. ### Return: - Hashtag detail data # [示例/Example] hashtag_id = \"129559\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hashtag_detail_api_v1_pipixia_app_fetch_hashtag_detail_get_0_with_http_info(hashtag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str hashtag_id: 话题id/Hashtag id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'hashtag_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hashtag_detail_api_v1_pipixia_app_fetch_hashtag_detail_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'hashtag_id' is set
        if self.api_client.client_side_validation and ('hashtag_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['hashtag_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `hashtag_id` when calling `fetch_hashtag_detail_api_v1_pipixia_app_fetch_hashtag_detail_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'hashtag_id' in local_var_params and local_var_params['hashtag_id'] is not None:  # noqa: E501
            query_params.append(('hashtag_id', local_var_params['hashtag_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_hashtag_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hashtag_post_list_api_v1_pipixia_app_fetch_hashtag_post_list_get(self, hashtag_id, **kwargs):  # noqa: E501
        """获取话题作品列表/Get hashtag post list  # noqa: E501

        # [中文] ### 用途: - 获取话题作品列表数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 - hashtag_request_type: 话题请求类型，默认为0，可用值如下：     - 0: 热门     - 1: 最新     - 2: 精华 - hashtag_sort_type: 话题排序类型，默认为3，可用值如下：     - 3: 按热度     - 2: 按时间，从新到旧     - 1: 精华 ### 返回: - 话题作品列表数据  # [English] ### Purpose: - Get hashtag post list data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - Hashtag post list data  # [示例/Example] hashtag_id = \"129559\" cursor = \"0\" feed_count = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hashtag_post_list_api_v1_pipixia_app_fetch_hashtag_post_list_get(hashtag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str hashtag_id: 话题id/Hashtag id (required)
        :param str cursor: 翻页游标/Page cursor
        :param str feed_count: 翻页数量/Page count
        :param str hashtag_request_type: 话题请求类型/Hashtag request type
        :param str hashtag_sort_type: 话题排序类型/Hashtag sort type
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hashtag_post_list_api_v1_pipixia_app_fetch_hashtag_post_list_get_with_http_info(hashtag_id, **kwargs)  # noqa: E501

    def fetch_hashtag_post_list_api_v1_pipixia_app_fetch_hashtag_post_list_get_with_http_info(self, hashtag_id, **kwargs):  # noqa: E501
        """获取话题作品列表/Get hashtag post list  # noqa: E501

        # [中文] ### 用途: - 获取话题作品列表数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 - hashtag_request_type: 话题请求类型，默认为0，可用值如下：     - 0: 热门     - 1: 最新     - 2: 精华 - hashtag_sort_type: 话题排序类型，默认为3，可用值如下：     - 3: 按热度     - 2: 按时间，从新到旧     - 1: 精华 ### 返回: - 话题作品列表数据  # [English] ### Purpose: - Get hashtag post list data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - Hashtag post list data  # [示例/Example] hashtag_id = \"129559\" cursor = \"0\" feed_count = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hashtag_post_list_api_v1_pipixia_app_fetch_hashtag_post_list_get_with_http_info(hashtag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str hashtag_id: 话题id/Hashtag id (required)
        :param str cursor: 翻页游标/Page cursor
        :param str feed_count: 翻页数量/Page count
        :param str hashtag_request_type: 话题请求类型/Hashtag request type
        :param str hashtag_sort_type: 话题排序类型/Hashtag sort type
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'hashtag_id',
            'cursor',
            'feed_count',
            'hashtag_request_type',
            'hashtag_sort_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hashtag_post_list_api_v1_pipixia_app_fetch_hashtag_post_list_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'hashtag_id' is set
        if self.api_client.client_side_validation and ('hashtag_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['hashtag_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `hashtag_id` when calling `fetch_hashtag_post_list_api_v1_pipixia_app_fetch_hashtag_post_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'hashtag_id' in local_var_params and local_var_params['hashtag_id'] is not None:  # noqa: E501
            query_params.append(('hashtag_id', local_var_params['hashtag_id']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'feed_count' in local_var_params and local_var_params['feed_count'] is not None:  # noqa: E501
            query_params.append(('feed_count', local_var_params['feed_count']))  # noqa: E501
        if 'hashtag_request_type' in local_var_params and local_var_params['hashtag_request_type'] is not None:  # noqa: E501
            query_params.append(('hashtag_request_type', local_var_params['hashtag_request_type']))  # noqa: E501
        if 'hashtag_sort_type' in local_var_params and local_var_params['hashtag_sort_type'] is not None:  # noqa: E501
            query_params.append(('hashtag_sort_type', local_var_params['hashtag_sort_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_hashtag_post_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hashtag_post_list_api_v1_pipixia_app_fetch_hashtag_post_list_get_0(self, hashtag_id, **kwargs):  # noqa: E501
        """获取话题作品列表/Get hashtag post list  # noqa: E501

        # [中文] ### 用途: - 获取话题作品列表数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 - hashtag_request_type: 话题请求类型，默认为0，可用值如下：     - 0: 热门     - 1: 最新     - 2: 精华 - hashtag_sort_type: 话题排序类型，默认为3，可用值如下：     - 3: 按热度     - 2: 按时间，从新到旧     - 1: 精华 ### 返回: - 话题作品列表数据  # [English] ### Purpose: - Get hashtag post list data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - Hashtag post list data  # [示例/Example] hashtag_id = \"129559\" cursor = \"0\" feed_count = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hashtag_post_list_api_v1_pipixia_app_fetch_hashtag_post_list_get_0(hashtag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str hashtag_id: 话题id/Hashtag id (required)
        :param str cursor: 翻页游标/Page cursor
        :param str feed_count: 翻页数量/Page count
        :param str hashtag_request_type: 话题请求类型/Hashtag request type
        :param str hashtag_sort_type: 话题排序类型/Hashtag sort type
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hashtag_post_list_api_v1_pipixia_app_fetch_hashtag_post_list_get_0_with_http_info(hashtag_id, **kwargs)  # noqa: E501

    def fetch_hashtag_post_list_api_v1_pipixia_app_fetch_hashtag_post_list_get_0_with_http_info(self, hashtag_id, **kwargs):  # noqa: E501
        """获取话题作品列表/Get hashtag post list  # noqa: E501

        # [中文] ### 用途: - 获取话题作品列表数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 - hashtag_request_type: 话题请求类型，默认为0，可用值如下：     - 0: 热门     - 1: 最新     - 2: 精华 - hashtag_sort_type: 话题排序类型，默认为3，可用值如下：     - 3: 按热度     - 2: 按时间，从新到旧     - 1: 精华 ### 返回: - 话题作品列表数据  # [English] ### Purpose: - Get hashtag post list data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - Hashtag post list data  # [示例/Example] hashtag_id = \"129559\" cursor = \"0\" feed_count = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hashtag_post_list_api_v1_pipixia_app_fetch_hashtag_post_list_get_0_with_http_info(hashtag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str hashtag_id: 话题id/Hashtag id (required)
        :param str cursor: 翻页游标/Page cursor
        :param str feed_count: 翻页数量/Page count
        :param str hashtag_request_type: 话题请求类型/Hashtag request type
        :param str hashtag_sort_type: 话题排序类型/Hashtag sort type
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'hashtag_id',
            'cursor',
            'feed_count',
            'hashtag_request_type',
            'hashtag_sort_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hashtag_post_list_api_v1_pipixia_app_fetch_hashtag_post_list_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'hashtag_id' is set
        if self.api_client.client_side_validation and ('hashtag_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['hashtag_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `hashtag_id` when calling `fetch_hashtag_post_list_api_v1_pipixia_app_fetch_hashtag_post_list_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'hashtag_id' in local_var_params and local_var_params['hashtag_id'] is not None:  # noqa: E501
            query_params.append(('hashtag_id', local_var_params['hashtag_id']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'feed_count' in local_var_params and local_var_params['feed_count'] is not None:  # noqa: E501
            query_params.append(('feed_count', local_var_params['feed_count']))  # noqa: E501
        if 'hashtag_request_type' in local_var_params and local_var_params['hashtag_request_type'] is not None:  # noqa: E501
            query_params.append(('hashtag_request_type', local_var_params['hashtag_request_type']))  # noqa: E501
        if 'hashtag_sort_type' in local_var_params and local_var_params['hashtag_sort_type'] is not None:  # noqa: E501
            query_params.append(('hashtag_sort_type', local_var_params['hashtag_sort_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_hashtag_post_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_home_feed_api_v1_pipixia_app_fetch_home_feed_get(self, **kwargs):  # noqa: E501
        """获取首页推荐/Get home feed  # noqa: E501

        # [中文] ### 用途: - 获取首页推荐数据。 ### 参数: - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 首页推荐数据  # [English] ### Purpose: - Get home feed data. ### Parameters: - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - Home feed data  # [示例/Example] cursor = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_feed_api_v1_pipixia_app_fetch_home_feed_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cursor: 翻页游标/Page cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_home_feed_api_v1_pipixia_app_fetch_home_feed_get_with_http_info(**kwargs)  # noqa: E501

    def fetch_home_feed_api_v1_pipixia_app_fetch_home_feed_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取首页推荐/Get home feed  # noqa: E501

        # [中文] ### 用途: - 获取首页推荐数据。 ### 参数: - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 首页推荐数据  # [English] ### Purpose: - Get home feed data. ### Parameters: - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - Home feed data  # [示例/Example] cursor = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_feed_api_v1_pipixia_app_fetch_home_feed_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cursor: 翻页游标/Page cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_home_feed_api_v1_pipixia_app_fetch_home_feed_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_home_feed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_home_feed_api_v1_pipixia_app_fetch_home_feed_get_0(self, **kwargs):  # noqa: E501
        """获取首页推荐/Get home feed  # noqa: E501

        # [中文] ### 用途: - 获取首页推荐数据。 ### 参数: - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 首页推荐数据  # [English] ### Purpose: - Get home feed data. ### Parameters: - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - Home feed data  # [示例/Example] cursor = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_feed_api_v1_pipixia_app_fetch_home_feed_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cursor: 翻页游标/Page cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_home_feed_api_v1_pipixia_app_fetch_home_feed_get_0_with_http_info(**kwargs)  # noqa: E501

    def fetch_home_feed_api_v1_pipixia_app_fetch_home_feed_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取首页推荐/Get home feed  # noqa: E501

        # [中文] ### 用途: - 获取首页推荐数据。 ### 参数: - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 首页推荐数据  # [English] ### Purpose: - Get home feed data. ### Parameters: - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - Home feed data  # [示例/Example] cursor = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_feed_api_v1_pipixia_app_fetch_home_feed_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cursor: 翻页游标/Page cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_home_feed_api_v1_pipixia_app_fetch_home_feed_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_home_feed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_home_short_drama_feed_api_v1_pipixia_app_fetch_home_short_drama_feed_get(self, **kwargs):  # noqa: E501
        """获取首页短剧推荐/Get home short drama feed  # noqa: E501

        # [中文] ### 用途: - 获取首页短剧推荐数据。 ### 参数: - page: 页码，默认为1，每次翻页加1。 ### 返回: - 首页短剧推荐数据  # [English] ### Purpose: - Get home short drama feed data. ### Parameters: - page: Page number, default is 1, add 1 for each page. ### Return: - Home short drama feed data  # [示例/Example] page = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_short_drama_feed_api_v1_pipixia_app_fetch_home_short_drama_feed_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page: 页码/Page number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_home_short_drama_feed_api_v1_pipixia_app_fetch_home_short_drama_feed_get_with_http_info(**kwargs)  # noqa: E501

    def fetch_home_short_drama_feed_api_v1_pipixia_app_fetch_home_short_drama_feed_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取首页短剧推荐/Get home short drama feed  # noqa: E501

        # [中文] ### 用途: - 获取首页短剧推荐数据。 ### 参数: - page: 页码，默认为1，每次翻页加1。 ### 返回: - 首页短剧推荐数据  # [English] ### Purpose: - Get home short drama feed data. ### Parameters: - page: Page number, default is 1, add 1 for each page. ### Return: - Home short drama feed data  # [示例/Example] page = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_short_drama_feed_api_v1_pipixia_app_fetch_home_short_drama_feed_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page: 页码/Page number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'page'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_home_short_drama_feed_api_v1_pipixia_app_fetch_home_short_drama_feed_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_home_short_drama_feed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_home_short_drama_feed_api_v1_pipixia_app_fetch_home_short_drama_feed_get_0(self, **kwargs):  # noqa: E501
        """获取首页短剧推荐/Get home short drama feed  # noqa: E501

        # [中文] ### 用途: - 获取首页短剧推荐数据。 ### 参数: - page: 页码，默认为1，每次翻页加1。 ### 返回: - 首页短剧推荐数据  # [English] ### Purpose: - Get home short drama feed data. ### Parameters: - page: Page number, default is 1, add 1 for each page. ### Return: - Home short drama feed data  # [示例/Example] page = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_short_drama_feed_api_v1_pipixia_app_fetch_home_short_drama_feed_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page: 页码/Page number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_home_short_drama_feed_api_v1_pipixia_app_fetch_home_short_drama_feed_get_0_with_http_info(**kwargs)  # noqa: E501

    def fetch_home_short_drama_feed_api_v1_pipixia_app_fetch_home_short_drama_feed_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取首页短剧推荐/Get home short drama feed  # noqa: E501

        # [中文] ### 用途: - 获取首页短剧推荐数据。 ### 参数: - page: 页码，默认为1，每次翻页加1。 ### 返回: - 首页短剧推荐数据  # [English] ### Purpose: - Get home short drama feed data. ### Parameters: - page: Page number, default is 1, add 1 for each page. ### Return: - Home short drama feed data  # [示例/Example] page = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_short_drama_feed_api_v1_pipixia_app_fetch_home_short_drama_feed_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page: 页码/Page number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'page'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_home_short_drama_feed_api_v1_pipixia_app_fetch_home_short_drama_feed_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_home_short_drama_feed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hot_search_board_detail_api_v1_pipixia_app_fetch_hot_search_board_detail_get(self, block_type, **kwargs):  # noqa: E501
        """获取热搜榜单详情/Get hot search board detail  # noqa: E501

        # [中文] ### 用途: - 获取热搜榜单详情数据。 ### 参数: - block_type: 榜单类型，可以从`/fetch_hot_search_board_list`接口中获取。 ### 返回: - 热搜榜单详情数据  # [English] ### Purpose: - Get hot search board detail data. ### Parameters: - block_type: Board type, can be obtained from the `/fetch_hot_search_board_list` interface. ### Return: - Hot search board detail data  # [示例/Example] block_type = 12  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_search_board_detail_api_v1_pipixia_app_fetch_hot_search_board_detail_get(block_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int block_type: 榜单类型/Board type (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hot_search_board_detail_api_v1_pipixia_app_fetch_hot_search_board_detail_get_with_http_info(block_type, **kwargs)  # noqa: E501

    def fetch_hot_search_board_detail_api_v1_pipixia_app_fetch_hot_search_board_detail_get_with_http_info(self, block_type, **kwargs):  # noqa: E501
        """获取热搜榜单详情/Get hot search board detail  # noqa: E501

        # [中文] ### 用途: - 获取热搜榜单详情数据。 ### 参数: - block_type: 榜单类型，可以从`/fetch_hot_search_board_list`接口中获取。 ### 返回: - 热搜榜单详情数据  # [English] ### Purpose: - Get hot search board detail data. ### Parameters: - block_type: Board type, can be obtained from the `/fetch_hot_search_board_list` interface. ### Return: - Hot search board detail data  # [示例/Example] block_type = 12  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_search_board_detail_api_v1_pipixia_app_fetch_hot_search_board_detail_get_with_http_info(block_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int block_type: 榜单类型/Board type (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'block_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hot_search_board_detail_api_v1_pipixia_app_fetch_hot_search_board_detail_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'block_type' is set
        if self.api_client.client_side_validation and ('block_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['block_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `block_type` when calling `fetch_hot_search_board_detail_api_v1_pipixia_app_fetch_hot_search_board_detail_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'block_type' in local_var_params and local_var_params['block_type'] is not None:  # noqa: E501
            query_params.append(('block_type', local_var_params['block_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_hot_search_board_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hot_search_board_detail_api_v1_pipixia_app_fetch_hot_search_board_detail_get_0(self, block_type, **kwargs):  # noqa: E501
        """获取热搜榜单详情/Get hot search board detail  # noqa: E501

        # [中文] ### 用途: - 获取热搜榜单详情数据。 ### 参数: - block_type: 榜单类型，可以从`/fetch_hot_search_board_list`接口中获取。 ### 返回: - 热搜榜单详情数据  # [English] ### Purpose: - Get hot search board detail data. ### Parameters: - block_type: Board type, can be obtained from the `/fetch_hot_search_board_list` interface. ### Return: - Hot search board detail data  # [示例/Example] block_type = 12  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_search_board_detail_api_v1_pipixia_app_fetch_hot_search_board_detail_get_0(block_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int block_type: 榜单类型/Board type (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hot_search_board_detail_api_v1_pipixia_app_fetch_hot_search_board_detail_get_0_with_http_info(block_type, **kwargs)  # noqa: E501

    def fetch_hot_search_board_detail_api_v1_pipixia_app_fetch_hot_search_board_detail_get_0_with_http_info(self, block_type, **kwargs):  # noqa: E501
        """获取热搜榜单详情/Get hot search board detail  # noqa: E501

        # [中文] ### 用途: - 获取热搜榜单详情数据。 ### 参数: - block_type: 榜单类型，可以从`/fetch_hot_search_board_list`接口中获取。 ### 返回: - 热搜榜单详情数据  # [English] ### Purpose: - Get hot search board detail data. ### Parameters: - block_type: Board type, can be obtained from the `/fetch_hot_search_board_list` interface. ### Return: - Hot search board detail data  # [示例/Example] block_type = 12  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_search_board_detail_api_v1_pipixia_app_fetch_hot_search_board_detail_get_0_with_http_info(block_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int block_type: 榜单类型/Board type (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'block_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hot_search_board_detail_api_v1_pipixia_app_fetch_hot_search_board_detail_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'block_type' is set
        if self.api_client.client_side_validation and ('block_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['block_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `block_type` when calling `fetch_hot_search_board_detail_api_v1_pipixia_app_fetch_hot_search_board_detail_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'block_type' in local_var_params and local_var_params['block_type'] is not None:  # noqa: E501
            query_params.append(('block_type', local_var_params['block_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_hot_search_board_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hot_search_board_list_api_v1_pipixia_app_fetch_hot_search_board_list_get(self, **kwargs):  # noqa: E501
        """获取热搜榜单列表/Get hot search board list  # noqa: E501

        # [中文] ### 用途: - 获取热搜榜单列表数据。 ### 返回: - 热搜榜单列表数据  # [English] ### Purpose: - Get hot search board list data. ### Return: - Hot search board list data  # [示例/Example] 无/None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_search_board_list_api_v1_pipixia_app_fetch_hot_search_board_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hot_search_board_list_api_v1_pipixia_app_fetch_hot_search_board_list_get_with_http_info(**kwargs)  # noqa: E501

    def fetch_hot_search_board_list_api_v1_pipixia_app_fetch_hot_search_board_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取热搜榜单列表/Get hot search board list  # noqa: E501

        # [中文] ### 用途: - 获取热搜榜单列表数据。 ### 返回: - 热搜榜单列表数据  # [English] ### Purpose: - Get hot search board list data. ### Return: - Hot search board list data  # [示例/Example] 无/None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_search_board_list_api_v1_pipixia_app_fetch_hot_search_board_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hot_search_board_list_api_v1_pipixia_app_fetch_hot_search_board_list_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_hot_search_board_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hot_search_board_list_api_v1_pipixia_app_fetch_hot_search_board_list_get_0(self, **kwargs):  # noqa: E501
        """获取热搜榜单列表/Get hot search board list  # noqa: E501

        # [中文] ### 用途: - 获取热搜榜单列表数据。 ### 返回: - 热搜榜单列表数据  # [English] ### Purpose: - Get hot search board list data. ### Return: - Hot search board list data  # [示例/Example] 无/None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_search_board_list_api_v1_pipixia_app_fetch_hot_search_board_list_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hot_search_board_list_api_v1_pipixia_app_fetch_hot_search_board_list_get_0_with_http_info(**kwargs)  # noqa: E501

    def fetch_hot_search_board_list_api_v1_pipixia_app_fetch_hot_search_board_list_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取热搜榜单列表/Get hot search board list  # noqa: E501

        # [中文] ### 用途: - 获取热搜榜单列表数据。 ### 返回: - 热搜榜单列表数据  # [English] ### Purpose: - Get hot search board list data. ### Return: - Hot search board list data  # [示例/Example] 无/None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_search_board_list_api_v1_pipixia_app_fetch_hot_search_board_list_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hot_search_board_list_api_v1_pipixia_app_fetch_hot_search_board_list_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_hot_search_board_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hot_search_words_api_v1_pipixia_app_fetch_hot_search_words_get(self, **kwargs):  # noqa: E501
        """获取热搜词条/Get hot search words  # noqa: E501

        # [中文] ### 用途: - 获取热搜词条数据。 ### 返回: - 热搜词条数据  # [English] ### Purpose: - Get hot search words data. ### Return: - Hot search words data  # [示例/Example] 无/None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_search_words_api_v1_pipixia_app_fetch_hot_search_words_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hot_search_words_api_v1_pipixia_app_fetch_hot_search_words_get_with_http_info(**kwargs)  # noqa: E501

    def fetch_hot_search_words_api_v1_pipixia_app_fetch_hot_search_words_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取热搜词条/Get hot search words  # noqa: E501

        # [中文] ### 用途: - 获取热搜词条数据。 ### 返回: - 热搜词条数据  # [English] ### Purpose: - Get hot search words data. ### Return: - Hot search words data  # [示例/Example] 无/None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_search_words_api_v1_pipixia_app_fetch_hot_search_words_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hot_search_words_api_v1_pipixia_app_fetch_hot_search_words_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_hot_search_words', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hot_search_words_api_v1_pipixia_app_fetch_hot_search_words_get_0(self, **kwargs):  # noqa: E501
        """获取热搜词条/Get hot search words  # noqa: E501

        # [中文] ### 用途: - 获取热搜词条数据。 ### 返回: - 热搜词条数据  # [English] ### Purpose: - Get hot search words data. ### Return: - Hot search words data  # [示例/Example] 无/None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_search_words_api_v1_pipixia_app_fetch_hot_search_words_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hot_search_words_api_v1_pipixia_app_fetch_hot_search_words_get_0_with_http_info(**kwargs)  # noqa: E501

    def fetch_hot_search_words_api_v1_pipixia_app_fetch_hot_search_words_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取热搜词条/Get hot search words  # noqa: E501

        # [中文] ### 用途: - 获取热搜词条数据。 ### 返回: - 热搜词条数据  # [English] ### Purpose: - Get hot search words data. ### Return: - Hot search words data  # [示例/Example] 无/None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_search_words_api_v1_pipixia_app_fetch_hot_search_words_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hot_search_words_api_v1_pipixia_app_fetch_hot_search_words_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_hot_search_words', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_increase_post_view_count_api_v1_pipixia_app_fetch_increase_post_view_count_get(self, cell_id, **kwargs):  # noqa: E501
        """增加作品浏览数/Increase post view count  # noqa: E501

        # [中文] ### 用途: - 增加作品浏览数。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 执行结果  # [English] ### Purpose: - Increase post view count. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Execution result  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_increase_post_view_count_api_v1_pipixia_app_fetch_increase_post_view_count_get(cell_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cell_id: 作品id/Video id (required)
        :param int cell_type: 作品类型/Video type
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_increase_post_view_count_api_v1_pipixia_app_fetch_increase_post_view_count_get_with_http_info(cell_id, **kwargs)  # noqa: E501

    def fetch_increase_post_view_count_api_v1_pipixia_app_fetch_increase_post_view_count_get_with_http_info(self, cell_id, **kwargs):  # noqa: E501
        """增加作品浏览数/Increase post view count  # noqa: E501

        # [中文] ### 用途: - 增加作品浏览数。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 执行结果  # [English] ### Purpose: - Increase post view count. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Execution result  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_increase_post_view_count_api_v1_pipixia_app_fetch_increase_post_view_count_get_with_http_info(cell_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cell_id: 作品id/Video id (required)
        :param int cell_type: 作品类型/Video type
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cell_id',
            'cell_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_increase_post_view_count_api_v1_pipixia_app_fetch_increase_post_view_count_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cell_id' is set
        if self.api_client.client_side_validation and ('cell_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['cell_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cell_id` when calling `fetch_increase_post_view_count_api_v1_pipixia_app_fetch_increase_post_view_count_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cell_id' in local_var_params and local_var_params['cell_id'] is not None:  # noqa: E501
            query_params.append(('cell_id', local_var_params['cell_id']))  # noqa: E501
        if 'cell_type' in local_var_params and local_var_params['cell_type'] is not None:  # noqa: E501
            query_params.append(('cell_type', local_var_params['cell_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_increase_post_view_count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_increase_post_view_count_api_v1_pipixia_app_fetch_increase_post_view_count_get_0(self, cell_id, **kwargs):  # noqa: E501
        """增加作品浏览数/Increase post view count  # noqa: E501

        # [中文] ### 用途: - 增加作品浏览数。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 执行结果  # [English] ### Purpose: - Increase post view count. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Execution result  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_increase_post_view_count_api_v1_pipixia_app_fetch_increase_post_view_count_get_0(cell_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cell_id: 作品id/Video id (required)
        :param int cell_type: 作品类型/Video type
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_increase_post_view_count_api_v1_pipixia_app_fetch_increase_post_view_count_get_0_with_http_info(cell_id, **kwargs)  # noqa: E501

    def fetch_increase_post_view_count_api_v1_pipixia_app_fetch_increase_post_view_count_get_0_with_http_info(self, cell_id, **kwargs):  # noqa: E501
        """增加作品浏览数/Increase post view count  # noqa: E501

        # [中文] ### 用途: - 增加作品浏览数。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 执行结果  # [English] ### Purpose: - Increase post view count. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Execution result  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_increase_post_view_count_api_v1_pipixia_app_fetch_increase_post_view_count_get_0_with_http_info(cell_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cell_id: 作品id/Video id (required)
        :param int cell_type: 作品类型/Video type
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cell_id',
            'cell_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_increase_post_view_count_api_v1_pipixia_app_fetch_increase_post_view_count_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cell_id' is set
        if self.api_client.client_side_validation and ('cell_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['cell_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cell_id` when calling `fetch_increase_post_view_count_api_v1_pipixia_app_fetch_increase_post_view_count_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cell_id' in local_var_params and local_var_params['cell_id'] is not None:  # noqa: E501
            query_params.append(('cell_id', local_var_params['cell_id']))  # noqa: E501
        if 'cell_type' in local_var_params and local_var_params['cell_type'] is not None:  # noqa: E501
            query_params.append(('cell_type', local_var_params['cell_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_increase_post_view_count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_post_comment_list_api_v1_pipixia_app_fetch_post_comment_list_get(self, cell_id, **kwargs):  # noqa: E501
        """获取作品评论列表/Get post comment list  # noqa: E501

        # [中文] ### 用途: - 获取作品的评论列表。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 ### 返回: - 作品评论列表  # [English] ### Purpose: - Get the comment list of a post. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. ### Return: - Post comment list  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1 offset = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_comment_list_api_v1_pipixia_app_fetch_post_comment_list_get(cell_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cell_id: 作品id/Video id (required)
        :param int cell_type: 作品类型/Video type
        :param str offset: 翻页游标/Page cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_post_comment_list_api_v1_pipixia_app_fetch_post_comment_list_get_with_http_info(cell_id, **kwargs)  # noqa: E501

    def fetch_post_comment_list_api_v1_pipixia_app_fetch_post_comment_list_get_with_http_info(self, cell_id, **kwargs):  # noqa: E501
        """获取作品评论列表/Get post comment list  # noqa: E501

        # [中文] ### 用途: - 获取作品的评论列表。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 ### 返回: - 作品评论列表  # [English] ### Purpose: - Get the comment list of a post. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. ### Return: - Post comment list  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1 offset = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_comment_list_api_v1_pipixia_app_fetch_post_comment_list_get_with_http_info(cell_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cell_id: 作品id/Video id (required)
        :param int cell_type: 作品类型/Video type
        :param str offset: 翻页游标/Page cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cell_id',
            'cell_type',
            'offset'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_post_comment_list_api_v1_pipixia_app_fetch_post_comment_list_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cell_id' is set
        if self.api_client.client_side_validation and ('cell_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['cell_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cell_id` when calling `fetch_post_comment_list_api_v1_pipixia_app_fetch_post_comment_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cell_id' in local_var_params and local_var_params['cell_id'] is not None:  # noqa: E501
            query_params.append(('cell_id', local_var_params['cell_id']))  # noqa: E501
        if 'cell_type' in local_var_params and local_var_params['cell_type'] is not None:  # noqa: E501
            query_params.append(('cell_type', local_var_params['cell_type']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_post_comment_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_post_comment_list_api_v1_pipixia_app_fetch_post_comment_list_get_0(self, cell_id, **kwargs):  # noqa: E501
        """获取作品评论列表/Get post comment list  # noqa: E501

        # [中文] ### 用途: - 获取作品的评论列表。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 ### 返回: - 作品评论列表  # [English] ### Purpose: - Get the comment list of a post. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. ### Return: - Post comment list  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1 offset = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_comment_list_api_v1_pipixia_app_fetch_post_comment_list_get_0(cell_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cell_id: 作品id/Video id (required)
        :param int cell_type: 作品类型/Video type
        :param str offset: 翻页游标/Page cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_post_comment_list_api_v1_pipixia_app_fetch_post_comment_list_get_0_with_http_info(cell_id, **kwargs)  # noqa: E501

    def fetch_post_comment_list_api_v1_pipixia_app_fetch_post_comment_list_get_0_with_http_info(self, cell_id, **kwargs):  # noqa: E501
        """获取作品评论列表/Get post comment list  # noqa: E501

        # [中文] ### 用途: - 获取作品的评论列表。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 ### 返回: - 作品评论列表  # [English] ### Purpose: - Get the comment list of a post. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. ### Return: - Post comment list  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1 offset = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_comment_list_api_v1_pipixia_app_fetch_post_comment_list_get_0_with_http_info(cell_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cell_id: 作品id/Video id (required)
        :param int cell_type: 作品类型/Video type
        :param str offset: 翻页游标/Page cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cell_id',
            'cell_type',
            'offset'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_post_comment_list_api_v1_pipixia_app_fetch_post_comment_list_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cell_id' is set
        if self.api_client.client_side_validation and ('cell_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['cell_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cell_id` when calling `fetch_post_comment_list_api_v1_pipixia_app_fetch_post_comment_list_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cell_id' in local_var_params and local_var_params['cell_id'] is not None:  # noqa: E501
            query_params.append(('cell_id', local_var_params['cell_id']))  # noqa: E501
        if 'cell_type' in local_var_params and local_var_params['cell_type'] is not None:  # noqa: E501
            query_params.append(('cell_type', local_var_params['cell_type']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_post_comment_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_post_detail_api_v1_pipixia_app_fetch_post_detail_get(self, cell_id, **kwargs):  # noqa: E501
        """获取单个作品数据/Get single video data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Video data  # [示例/Example] cell_id = \"7411193113223371043\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_detail_api_v1_pipixia_app_fetch_post_detail_get(cell_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cell_id: 作品id/Video id (required)
        :param int cell_type: 作品类型/Video type
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_post_detail_api_v1_pipixia_app_fetch_post_detail_get_with_http_info(cell_id, **kwargs)  # noqa: E501

    def fetch_post_detail_api_v1_pipixia_app_fetch_post_detail_get_with_http_info(self, cell_id, **kwargs):  # noqa: E501
        """获取单个作品数据/Get single video data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Video data  # [示例/Example] cell_id = \"7411193113223371043\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_detail_api_v1_pipixia_app_fetch_post_detail_get_with_http_info(cell_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cell_id: 作品id/Video id (required)
        :param int cell_type: 作品类型/Video type
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cell_id',
            'cell_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_post_detail_api_v1_pipixia_app_fetch_post_detail_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cell_id' is set
        if self.api_client.client_side_validation and ('cell_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['cell_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cell_id` when calling `fetch_post_detail_api_v1_pipixia_app_fetch_post_detail_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cell_id' in local_var_params and local_var_params['cell_id'] is not None:  # noqa: E501
            query_params.append(('cell_id', local_var_params['cell_id']))  # noqa: E501
        if 'cell_type' in local_var_params and local_var_params['cell_type'] is not None:  # noqa: E501
            query_params.append(('cell_type', local_var_params['cell_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_post_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_post_detail_api_v1_pipixia_app_fetch_post_detail_get_0(self, cell_id, **kwargs):  # noqa: E501
        """获取单个作品数据/Get single video data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Video data  # [示例/Example] cell_id = \"7411193113223371043\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_detail_api_v1_pipixia_app_fetch_post_detail_get_0(cell_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cell_id: 作品id/Video id (required)
        :param int cell_type: 作品类型/Video type
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_post_detail_api_v1_pipixia_app_fetch_post_detail_get_0_with_http_info(cell_id, **kwargs)  # noqa: E501

    def fetch_post_detail_api_v1_pipixia_app_fetch_post_detail_get_0_with_http_info(self, cell_id, **kwargs):  # noqa: E501
        """获取单个作品数据/Get single video data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Video data  # [示例/Example] cell_id = \"7411193113223371043\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_detail_api_v1_pipixia_app_fetch_post_detail_get_0_with_http_info(cell_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cell_id: 作品id/Video id (required)
        :param int cell_type: 作品类型/Video type
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cell_id',
            'cell_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_post_detail_api_v1_pipixia_app_fetch_post_detail_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cell_id' is set
        if self.api_client.client_side_validation and ('cell_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['cell_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cell_id` when calling `fetch_post_detail_api_v1_pipixia_app_fetch_post_detail_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cell_id' in local_var_params and local_var_params['cell_id'] is not None:  # noqa: E501
            query_params.append(('cell_id', local_var_params['cell_id']))  # noqa: E501
        if 'cell_type' in local_var_params and local_var_params['cell_type'] is not None:  # noqa: E501
            query_params.append(('cell_type', local_var_params['cell_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_post_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_post_statistics_api_v1_pipixia_app_fetch_post_statistics_get(self, cell_id, **kwargs):  # noqa: E501
        """获取作品统计数据/Get post statistics  # noqa: E501

        # [中文] ### 用途: - 获取单个作品的统计数据，如点赞数、评论数、转发数等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistics of a single post, such as the number of likes, comments, reposts, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. ### Return: - Post statistics  # [示例/Example] cell_id = \"7411193113223371043\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_statistics_api_v1_pipixia_app_fetch_post_statistics_get(cell_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cell_id: 作品id/Video id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_post_statistics_api_v1_pipixia_app_fetch_post_statistics_get_with_http_info(cell_id, **kwargs)  # noqa: E501

    def fetch_post_statistics_api_v1_pipixia_app_fetch_post_statistics_get_with_http_info(self, cell_id, **kwargs):  # noqa: E501
        """获取作品统计数据/Get post statistics  # noqa: E501

        # [中文] ### 用途: - 获取单个作品的统计数据，如点赞数、评论数、转发数等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistics of a single post, such as the number of likes, comments, reposts, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. ### Return: - Post statistics  # [示例/Example] cell_id = \"7411193113223371043\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_statistics_api_v1_pipixia_app_fetch_post_statistics_get_with_http_info(cell_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cell_id: 作品id/Video id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cell_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_post_statistics_api_v1_pipixia_app_fetch_post_statistics_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cell_id' is set
        if self.api_client.client_side_validation and ('cell_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['cell_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cell_id` when calling `fetch_post_statistics_api_v1_pipixia_app_fetch_post_statistics_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cell_id' in local_var_params and local_var_params['cell_id'] is not None:  # noqa: E501
            query_params.append(('cell_id', local_var_params['cell_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_post_statistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_post_statistics_api_v1_pipixia_app_fetch_post_statistics_get_0(self, cell_id, **kwargs):  # noqa: E501
        """获取作品统计数据/Get post statistics  # noqa: E501

        # [中文] ### 用途: - 获取单个作品的统计数据，如点赞数、评论数、转发数等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistics of a single post, such as the number of likes, comments, reposts, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. ### Return: - Post statistics  # [示例/Example] cell_id = \"7411193113223371043\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_statistics_api_v1_pipixia_app_fetch_post_statistics_get_0(cell_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cell_id: 作品id/Video id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_post_statistics_api_v1_pipixia_app_fetch_post_statistics_get_0_with_http_info(cell_id, **kwargs)  # noqa: E501

    def fetch_post_statistics_api_v1_pipixia_app_fetch_post_statistics_get_0_with_http_info(self, cell_id, **kwargs):  # noqa: E501
        """获取作品统计数据/Get post statistics  # noqa: E501

        # [中文] ### 用途: - 获取单个作品的统计数据，如点赞数、评论数、转发数等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistics of a single post, such as the number of likes, comments, reposts, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. ### Return: - Post statistics  # [示例/Example] cell_id = \"7411193113223371043\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_statistics_api_v1_pipixia_app_fetch_post_statistics_get_0_with_http_info(cell_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cell_id: 作品id/Video id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cell_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_post_statistics_api_v1_pipixia_app_fetch_post_statistics_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cell_id' is set
        if self.api_client.client_side_validation and ('cell_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['cell_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cell_id` when calling `fetch_post_statistics_api_v1_pipixia_app_fetch_post_statistics_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cell_id' in local_var_params and local_var_params['cell_id'] is not None:  # noqa: E501
            query_params.append(('cell_id', local_var_params['cell_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_post_statistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_search_api_v1_pipixia_app_fetch_search_get(self, keyword, **kwargs):  # noqa: E501
        """搜索接口/Search API  # noqa: E501

        # [中文] ### 用途: - 搜索接口，支持搜索用户、作品等。 ### 参数: - keyword: 搜索关键词。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 - search_type: 搜索类型，可用值如下：     - 1: 综合     - 8: 热门     - 9: 新鲜     - 2：视频     - 3：图文     - 4：用户     - 5：话题 ### 返回: - 搜索结果  # [English] ### Purpose: - Search API, support search user, post, etc. ### Parameters: - keyword: Search keyword. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. - search_type: Search type, available values are as follows:     - 1: Comprehensive     - 8: Hot     - 9: Fresh     - 2: Video     - 3: Photo     - 4: User     - 5: Hashtag ### Return: - Search result  # [示例/Example] keyword = \"皮皮虾\" offset = \"0\" search_type = \"1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_api_v1_pipixia_app_fetch_search_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Search keyword (required)
        :param str offset: 翻页游标/Page cursor
        :param str search_type: 搜索类型/Search type
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_search_api_v1_pipixia_app_fetch_search_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_search_api_v1_pipixia_app_fetch_search_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """搜索接口/Search API  # noqa: E501

        # [中文] ### 用途: - 搜索接口，支持搜索用户、作品等。 ### 参数: - keyword: 搜索关键词。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 - search_type: 搜索类型，可用值如下：     - 1: 综合     - 8: 热门     - 9: 新鲜     - 2：视频     - 3：图文     - 4：用户     - 5：话题 ### 返回: - 搜索结果  # [English] ### Purpose: - Search API, support search user, post, etc. ### Parameters: - keyword: Search keyword. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. - search_type: Search type, available values are as follows:     - 1: Comprehensive     - 8: Hot     - 9: Fresh     - 2: Video     - 3: Photo     - 4: User     - 5: Hashtag ### Return: - Search result  # [示例/Example] keyword = \"皮皮虾\" offset = \"0\" search_type = \"1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_api_v1_pipixia_app_fetch_search_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Search keyword (required)
        :param str offset: 翻页游标/Page cursor
        :param str search_type: 搜索类型/Search type
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'offset',
            'search_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_search_api_v1_pipixia_app_fetch_search_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_search_api_v1_pipixia_app_fetch_search_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'search_type' in local_var_params and local_var_params['search_type'] is not None:  # noqa: E501
            query_params.append(('search_type', local_var_params['search_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_search_api_v1_pipixia_app_fetch_search_get_0(self, keyword, **kwargs):  # noqa: E501
        """搜索接口/Search API  # noqa: E501

        # [中文] ### 用途: - 搜索接口，支持搜索用户、作品等。 ### 参数: - keyword: 搜索关键词。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 - search_type: 搜索类型，可用值如下：     - 1: 综合     - 8: 热门     - 9: 新鲜     - 2：视频     - 3：图文     - 4：用户     - 5：话题 ### 返回: - 搜索结果  # [English] ### Purpose: - Search API, support search user, post, etc. ### Parameters: - keyword: Search keyword. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. - search_type: Search type, available values are as follows:     - 1: Comprehensive     - 8: Hot     - 9: Fresh     - 2: Video     - 3: Photo     - 4: User     - 5: Hashtag ### Return: - Search result  # [示例/Example] keyword = \"皮皮虾\" offset = \"0\" search_type = \"1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_api_v1_pipixia_app_fetch_search_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Search keyword (required)
        :param str offset: 翻页游标/Page cursor
        :param str search_type: 搜索类型/Search type
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_search_api_v1_pipixia_app_fetch_search_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_search_api_v1_pipixia_app_fetch_search_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """搜索接口/Search API  # noqa: E501

        # [中文] ### 用途: - 搜索接口，支持搜索用户、作品等。 ### 参数: - keyword: 搜索关键词。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 - search_type: 搜索类型，可用值如下：     - 1: 综合     - 8: 热门     - 9: 新鲜     - 2：视频     - 3：图文     - 4：用户     - 5：话题 ### 返回: - 搜索结果  # [English] ### Purpose: - Search API, support search user, post, etc. ### Parameters: - keyword: Search keyword. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. - search_type: Search type, available values are as follows:     - 1: Comprehensive     - 8: Hot     - 9: Fresh     - 2: Video     - 3: Photo     - 4: User     - 5: Hashtag ### Return: - Search result  # [示例/Example] keyword = \"皮皮虾\" offset = \"0\" search_type = \"1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_api_v1_pipixia_app_fetch_search_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Search keyword (required)
        :param str offset: 翻页游标/Page cursor
        :param str search_type: 搜索类型/Search type
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'offset',
            'search_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_search_api_v1_pipixia_app_fetch_search_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_search_api_v1_pipixia_app_fetch_search_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'search_type' in local_var_params and local_var_params['search_type'] is not None:  # noqa: E501
            query_params.append(('search_type', local_var_params['search_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_short_url_api_v1_pipixia_app_fetch_short_url_get(self, original_url, **kwargs):  # noqa: E501
        """生成短连接/Generate short URL  # noqa: E501

        # [中文] ### 用途: - 生成短连接。 ### 参数: - original_url: 原始链接，可以是任意链接。 ### 返回: - 短连接  # [English] ### Purpose: - Generate short URL. ### Parameters: - original_url: Original URL, can be any link. ### Return: - Short URL  # [示例/Example] original_url = \"https://h5.pipix.com/item/7385813877985909043\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_short_url_api_v1_pipixia_app_fetch_short_url_get(original_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str original_url: 原始链接/Original URL (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_short_url_api_v1_pipixia_app_fetch_short_url_get_with_http_info(original_url, **kwargs)  # noqa: E501

    def fetch_short_url_api_v1_pipixia_app_fetch_short_url_get_with_http_info(self, original_url, **kwargs):  # noqa: E501
        """生成短连接/Generate short URL  # noqa: E501

        # [中文] ### 用途: - 生成短连接。 ### 参数: - original_url: 原始链接，可以是任意链接。 ### 返回: - 短连接  # [English] ### Purpose: - Generate short URL. ### Parameters: - original_url: Original URL, can be any link. ### Return: - Short URL  # [示例/Example] original_url = \"https://h5.pipix.com/item/7385813877985909043\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_short_url_api_v1_pipixia_app_fetch_short_url_get_with_http_info(original_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str original_url: 原始链接/Original URL (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'original_url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_short_url_api_v1_pipixia_app_fetch_short_url_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'original_url' is set
        if self.api_client.client_side_validation and ('original_url' not in local_var_params or  # noqa: E501
                                                        local_var_params['original_url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `original_url` when calling `fetch_short_url_api_v1_pipixia_app_fetch_short_url_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'original_url' in local_var_params and local_var_params['original_url'] is not None:  # noqa: E501
            query_params.append(('original_url', local_var_params['original_url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_short_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_short_url_api_v1_pipixia_app_fetch_short_url_get_0(self, original_url, **kwargs):  # noqa: E501
        """生成短连接/Generate short URL  # noqa: E501

        # [中文] ### 用途: - 生成短连接。 ### 参数: - original_url: 原始链接，可以是任意链接。 ### 返回: - 短连接  # [English] ### Purpose: - Generate short URL. ### Parameters: - original_url: Original URL, can be any link. ### Return: - Short URL  # [示例/Example] original_url = \"https://h5.pipix.com/item/7385813877985909043\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_short_url_api_v1_pipixia_app_fetch_short_url_get_0(original_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str original_url: 原始链接/Original URL (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_short_url_api_v1_pipixia_app_fetch_short_url_get_0_with_http_info(original_url, **kwargs)  # noqa: E501

    def fetch_short_url_api_v1_pipixia_app_fetch_short_url_get_0_with_http_info(self, original_url, **kwargs):  # noqa: E501
        """生成短连接/Generate short URL  # noqa: E501

        # [中文] ### 用途: - 生成短连接。 ### 参数: - original_url: 原始链接，可以是任意链接。 ### 返回: - 短连接  # [English] ### Purpose: - Generate short URL. ### Parameters: - original_url: Original URL, can be any link. ### Return: - Short URL  # [示例/Example] original_url = \"https://h5.pipix.com/item/7385813877985909043\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_short_url_api_v1_pipixia_app_fetch_short_url_get_0_with_http_info(original_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str original_url: 原始链接/Original URL (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'original_url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_short_url_api_v1_pipixia_app_fetch_short_url_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'original_url' is set
        if self.api_client.client_side_validation and ('original_url' not in local_var_params or  # noqa: E501
                                                        local_var_params['original_url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `original_url` when calling `fetch_short_url_api_v1_pipixia_app_fetch_short_url_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'original_url' in local_var_params and local_var_params['original_url'] is not None:  # noqa: E501
            query_params.append(('original_url', local_var_params['original_url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_short_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_follower_list_api_v1_pipixia_app_fetch_user_follower_list_get(self, user_id, **kwargs):  # noqa: E501
        """获取用户粉丝列表/Get user follower list  # noqa: E501

        # [中文] ### 用途: - 获取用户的粉丝列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Get user's follower list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User follower list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_follower_list_api_v1_pipixia_app_fetch_user_follower_list_get(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户id/User id (required)
        :param str cursor: 翻页游标/Page cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_follower_list_api_v1_pipixia_app_fetch_user_follower_list_get_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_user_follower_list_api_v1_pipixia_app_fetch_user_follower_list_get_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """获取用户粉丝列表/Get user follower list  # noqa: E501

        # [中文] ### 用途: - 获取用户的粉丝列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Get user's follower list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User follower list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_follower_list_api_v1_pipixia_app_fetch_user_follower_list_get_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户id/User id (required)
        :param str cursor: 翻页游标/Page cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id',
            'cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_follower_list_api_v1_pipixia_app_fetch_user_follower_list_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_user_follower_list_api_v1_pipixia_app_fetch_user_follower_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_user_follower_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_follower_list_api_v1_pipixia_app_fetch_user_follower_list_get_0(self, user_id, **kwargs):  # noqa: E501
        """获取用户粉丝列表/Get user follower list  # noqa: E501

        # [中文] ### 用途: - 获取用户的粉丝列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Get user's follower list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User follower list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_follower_list_api_v1_pipixia_app_fetch_user_follower_list_get_0(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户id/User id (required)
        :param str cursor: 翻页游标/Page cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_follower_list_api_v1_pipixia_app_fetch_user_follower_list_get_0_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_user_follower_list_api_v1_pipixia_app_fetch_user_follower_list_get_0_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """获取用户粉丝列表/Get user follower list  # noqa: E501

        # [中文] ### 用途: - 获取用户的粉丝列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Get user's follower list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User follower list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_follower_list_api_v1_pipixia_app_fetch_user_follower_list_get_0_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户id/User id (required)
        :param str cursor: 翻页游标/Page cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id',
            'cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_follower_list_api_v1_pipixia_app_fetch_user_follower_list_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_user_follower_list_api_v1_pipixia_app_fetch_user_follower_list_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_user_follower_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_following_list_api_v1_pipixia_app_fetch_user_following_list_get(self, user_id, **kwargs):  # noqa: E501
        """获取用户关注列表/Get user following list  # noqa: E501

        # [中文] ### 用途: - 获取用户的关注列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Get user's following list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User following list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_following_list_api_v1_pipixia_app_fetch_user_following_list_get(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户id/User id (required)
        :param str cursor: 翻页游标/Page cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_following_list_api_v1_pipixia_app_fetch_user_following_list_get_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_user_following_list_api_v1_pipixia_app_fetch_user_following_list_get_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """获取用户关注列表/Get user following list  # noqa: E501

        # [中文] ### 用途: - 获取用户的关注列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Get user's following list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User following list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_following_list_api_v1_pipixia_app_fetch_user_following_list_get_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户id/User id (required)
        :param str cursor: 翻页游标/Page cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id',
            'cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_following_list_api_v1_pipixia_app_fetch_user_following_list_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_user_following_list_api_v1_pipixia_app_fetch_user_following_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_user_following_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_following_list_api_v1_pipixia_app_fetch_user_following_list_get_0(self, user_id, **kwargs):  # noqa: E501
        """获取用户关注列表/Get user following list  # noqa: E501

        # [中文] ### 用途: - 获取用户的关注列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Get user's following list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User following list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_following_list_api_v1_pipixia_app_fetch_user_following_list_get_0(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户id/User id (required)
        :param str cursor: 翻页游标/Page cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_following_list_api_v1_pipixia_app_fetch_user_following_list_get_0_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_user_following_list_api_v1_pipixia_app_fetch_user_following_list_get_0_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """获取用户关注列表/Get user following list  # noqa: E501

        # [中文] ### 用途: - 获取用户的关注列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Get user's following list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User following list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_following_list_api_v1_pipixia_app_fetch_user_following_list_get_0_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户id/User id (required)
        :param str cursor: 翻页游标/Page cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id',
            'cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_following_list_api_v1_pipixia_app_fetch_user_following_list_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_user_following_list_api_v1_pipixia_app_fetch_user_following_list_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_user_following_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_info_api_v1_pipixia_app_fetch_user_info_get(self, user_id, **kwargs):  # noqa: E501
        """获取用户信息/Get user information  # noqa: E501

        # [中文] ### 用途: - 获取用户信息，如昵称、性别、头像等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information, such as nickname and avatar. ### Parameters: - user_id: AKA user id, can be obtained from the share link. ### Return: - User information  # [示例/Example] user_id = \"1310254082831248\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_api_v1_pipixia_app_fetch_user_info_get(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户id/User id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_info_api_v1_pipixia_app_fetch_user_info_get_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_user_info_api_v1_pipixia_app_fetch_user_info_get_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """获取用户信息/Get user information  # noqa: E501

        # [中文] ### 用途: - 获取用户信息，如昵称、性别、头像等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information, such as nickname and avatar. ### Parameters: - user_id: AKA user id, can be obtained from the share link. ### Return: - User information  # [示例/Example] user_id = \"1310254082831248\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_api_v1_pipixia_app_fetch_user_info_get_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户id/User id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_info_api_v1_pipixia_app_fetch_user_info_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_user_info_api_v1_pipixia_app_fetch_user_info_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_user_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_info_api_v1_pipixia_app_fetch_user_info_get_0(self, user_id, **kwargs):  # noqa: E501
        """获取用户信息/Get user information  # noqa: E501

        # [中文] ### 用途: - 获取用户信息，如昵称、性别、头像等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information, such as nickname and avatar. ### Parameters: - user_id: AKA user id, can be obtained from the share link. ### Return: - User information  # [示例/Example] user_id = \"1310254082831248\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_api_v1_pipixia_app_fetch_user_info_get_0(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户id/User id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_info_api_v1_pipixia_app_fetch_user_info_get_0_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_user_info_api_v1_pipixia_app_fetch_user_info_get_0_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """获取用户信息/Get user information  # noqa: E501

        # [中文] ### 用途: - 获取用户信息，如昵称、性别、头像等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information, such as nickname and avatar. ### Parameters: - user_id: AKA user id, can be obtained from the share link. ### Return: - User information  # [示例/Example] user_id = \"1310254082831248\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_api_v1_pipixia_app_fetch_user_info_get_0_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户id/User id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_info_api_v1_pipixia_app_fetch_user_info_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_user_info_api_v1_pipixia_app_fetch_user_info_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_user_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_post_list_api_v1_pipixia_app_fetch_user_post_list_get(self, user_id, **kwargs):  # noqa: E501
        """获取用户作品列表/Get user post list  # noqa: E501

        # [中文] ### 用途: - 获取用户作品列表，如视频、图文等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 ### 返回: - 用户作品列表  # [English] ### Purpose: - Get user post list, such as videos, photos, etc. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - User post list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\" feed_count = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_post_list_api_v1_pipixia_app_fetch_user_post_list_get(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户id/User id (required)
        :param str cursor: 翻页游标/Page cursor
        :param str feed_count: 翻页数量/Page count
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_post_list_api_v1_pipixia_app_fetch_user_post_list_get_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_user_post_list_api_v1_pipixia_app_fetch_user_post_list_get_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """获取用户作品列表/Get user post list  # noqa: E501

        # [中文] ### 用途: - 获取用户作品列表，如视频、图文等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 ### 返回: - 用户作品列表  # [English] ### Purpose: - Get user post list, such as videos, photos, etc. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - User post list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\" feed_count = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_post_list_api_v1_pipixia_app_fetch_user_post_list_get_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户id/User id (required)
        :param str cursor: 翻页游标/Page cursor
        :param str feed_count: 翻页数量/Page count
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id',
            'cursor',
            'feed_count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_post_list_api_v1_pipixia_app_fetch_user_post_list_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_user_post_list_api_v1_pipixia_app_fetch_user_post_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'feed_count' in local_var_params and local_var_params['feed_count'] is not None:  # noqa: E501
            query_params.append(('feed_count', local_var_params['feed_count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_user_post_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_post_list_api_v1_pipixia_app_fetch_user_post_list_get_0(self, user_id, **kwargs):  # noqa: E501
        """获取用户作品列表/Get user post list  # noqa: E501

        # [中文] ### 用途: - 获取用户作品列表，如视频、图文等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 ### 返回: - 用户作品列表  # [English] ### Purpose: - Get user post list, such as videos, photos, etc. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - User post list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\" feed_count = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_post_list_api_v1_pipixia_app_fetch_user_post_list_get_0(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户id/User id (required)
        :param str cursor: 翻页游标/Page cursor
        :param str feed_count: 翻页数量/Page count
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_post_list_api_v1_pipixia_app_fetch_user_post_list_get_0_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_user_post_list_api_v1_pipixia_app_fetch_user_post_list_get_0_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """获取用户作品列表/Get user post list  # noqa: E501

        # [中文] ### 用途: - 获取用户作品列表，如视频、图文等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 ### 返回: - 用户作品列表  # [English] ### Purpose: - Get user post list, such as videos, photos, etc. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - User post list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\" feed_count = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_post_list_api_v1_pipixia_app_fetch_user_post_list_get_0_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: 用户id/User id (required)
        :param str cursor: 翻页游标/Page cursor
        :param str feed_count: 翻页数量/Page count
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id',
            'cursor',
            'feed_count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_post_list_api_v1_pipixia_app_fetch_user_post_list_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_user_post_list_api_v1_pipixia_app_fetch_user_post_list_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'feed_count' in local_var_params and local_var_params['feed_count'] is not None:  # noqa: E501
            query_params.append(('feed_count', local_var_params['feed_count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/pipixia/app/fetch_user_post_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
