# coding: utf-8

"""
    TikHub.io - Your Ultimate Social Media Data & API Marketplace

    High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tikhub_sdk_v2.api_client import ApiClient
from tikhub_sdk_v2.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class BilibiliWebAPIApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def fetch_collect_folders_api_v1_bilibili_web_fetch_all_live_areas_get(self, **kwargs):  # noqa: E501
        """获取所有直播分区列表/Get a list of all live areas  # noqa: E501

        # [中文] ### 用途: - 获取所有直播分区列表 ### 参数: ### 返回: - 所有直播分区列表  # [English] ### Purpose: - Get a list of all live areas ### Parameters: ### Return: - list of all live areas  # [示例/Example]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_all_live_areas_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_collect_folders_api_v1_bilibili_web_fetch_all_live_areas_get_with_http_info(**kwargs)  # noqa: E501

    def fetch_collect_folders_api_v1_bilibili_web_fetch_all_live_areas_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取所有直播分区列表/Get a list of all live areas  # noqa: E501

        # [中文] ### 用途: - 获取所有直播分区列表 ### 参数: ### 返回: - 所有直播分区列表  # [English] ### Purpose: - Get a list of all live areas ### Parameters: ### Return: - list of all live areas  # [示例/Example]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_all_live_areas_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_collect_folders_api_v1_bilibili_web_fetch_all_live_areas_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_all_live_areas', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_collect_folders_api_v1_bilibili_web_fetch_all_live_areas_get_0(self, **kwargs):  # noqa: E501
        """获取所有直播分区列表/Get a list of all live areas  # noqa: E501

        # [中文] ### 用途: - 获取所有直播分区列表 ### 参数: ### 返回: - 所有直播分区列表  # [English] ### Purpose: - Get a list of all live areas ### Parameters: ### Return: - list of all live areas  # [示例/Example]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_all_live_areas_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_collect_folders_api_v1_bilibili_web_fetch_all_live_areas_get_0_with_http_info(**kwargs)  # noqa: E501

    def fetch_collect_folders_api_v1_bilibili_web_fetch_all_live_areas_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取所有直播分区列表/Get a list of all live areas  # noqa: E501

        # [中文] ### 用途: - 获取所有直播分区列表 ### 参数: ### 返回: - 所有直播分区列表  # [English] ### Purpose: - Get a list of all live areas ### Parameters: ### Return: - list of all live areas  # [示例/Example]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_all_live_areas_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_collect_folders_api_v1_bilibili_web_fetch_all_live_areas_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_all_live_areas', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_collect_folders_api_v1_bilibili_web_fetch_collect_folders_get(self, uid, **kwargs):  # noqa: E501
        """获取用户所有收藏夹信息/Get user collection folders  # noqa: E501

        # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - uid: 用户UID ### 返回: - 用户收藏夹信息  # [English] ### Purpose: - Get user collection folders ### Parameters: - uid: User UID ### Return: - user collection folders  # [示例/Example] uid = \"178360345\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_collect_folders_get(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户UID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_collect_folders_api_v1_bilibili_web_fetch_collect_folders_get_with_http_info(uid, **kwargs)  # noqa: E501

    def fetch_collect_folders_api_v1_bilibili_web_fetch_collect_folders_get_with_http_info(self, uid, **kwargs):  # noqa: E501
        """获取用户所有收藏夹信息/Get user collection folders  # noqa: E501

        # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - uid: 用户UID ### 返回: - 用户收藏夹信息  # [English] ### Purpose: - Get user collection folders ### Parameters: - uid: User UID ### Return: - user collection folders  # [示例/Example] uid = \"178360345\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_collect_folders_get_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户UID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_collect_folders_api_v1_bilibili_web_fetch_collect_folders_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uid` when calling `fetch_collect_folders_api_v1_bilibili_web_fetch_collect_folders_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in local_var_params and local_var_params['uid'] is not None:  # noqa: E501
            query_params.append(('uid', local_var_params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_collect_folders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_collect_folders_api_v1_bilibili_web_fetch_collect_folders_get_0(self, uid, **kwargs):  # noqa: E501
        """获取用户所有收藏夹信息/Get user collection folders  # noqa: E501

        # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - uid: 用户UID ### 返回: - 用户收藏夹信息  # [English] ### Purpose: - Get user collection folders ### Parameters: - uid: User UID ### Return: - user collection folders  # [示例/Example] uid = \"178360345\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_collect_folders_get_0(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户UID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_collect_folders_api_v1_bilibili_web_fetch_collect_folders_get_0_with_http_info(uid, **kwargs)  # noqa: E501

    def fetch_collect_folders_api_v1_bilibili_web_fetch_collect_folders_get_0_with_http_info(self, uid, **kwargs):  # noqa: E501
        """获取用户所有收藏夹信息/Get user collection folders  # noqa: E501

        # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - uid: 用户UID ### 返回: - 用户收藏夹信息  # [English] ### Purpose: - Get user collection folders ### Parameters: - uid: User UID ### Return: - user collection folders  # [示例/Example] uid = \"178360345\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_collect_folders_get_0_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户UID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_collect_folders_api_v1_bilibili_web_fetch_collect_folders_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uid` when calling `fetch_collect_folders_api_v1_bilibili_web_fetch_collect_folders_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in local_var_params and local_var_params['uid'] is not None:  # noqa: E501
            query_params.append(('uid', local_var_params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_collect_folders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_collect_folders_api_v1_bilibili_web_fetch_com_popular_get(self, **kwargs):  # noqa: E501
        """获取综合热门视频信息/Get comprehensive popular video information  # noqa: E501

        # [中文] ### 用途: - 获取综合热门视频信息 ### 参数: - pn: 页码 ### 返回: - 综合热门视频信息  # [English] ### Purpose: - Get comprehensive popular video information ### Parameters: - pn: Page number ### Return: - comprehensive popular video information  # [示例/Example] pn = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_com_popular_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int pn: 页码/Page number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_collect_folders_api_v1_bilibili_web_fetch_com_popular_get_with_http_info(**kwargs)  # noqa: E501

    def fetch_collect_folders_api_v1_bilibili_web_fetch_com_popular_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取综合热门视频信息/Get comprehensive popular video information  # noqa: E501

        # [中文] ### 用途: - 获取综合热门视频信息 ### 参数: - pn: 页码 ### 返回: - 综合热门视频信息  # [English] ### Purpose: - Get comprehensive popular video information ### Parameters: - pn: Page number ### Return: - comprehensive popular video information  # [示例/Example] pn = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_com_popular_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int pn: 页码/Page number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'pn'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_collect_folders_api_v1_bilibili_web_fetch_com_popular_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pn' in local_var_params and local_var_params['pn'] is not None:  # noqa: E501
            query_params.append(('pn', local_var_params['pn']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_com_popular', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_collect_folders_api_v1_bilibili_web_fetch_com_popular_get_0(self, **kwargs):  # noqa: E501
        """获取综合热门视频信息/Get comprehensive popular video information  # noqa: E501

        # [中文] ### 用途: - 获取综合热门视频信息 ### 参数: - pn: 页码 ### 返回: - 综合热门视频信息  # [English] ### Purpose: - Get comprehensive popular video information ### Parameters: - pn: Page number ### Return: - comprehensive popular video information  # [示例/Example] pn = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_com_popular_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int pn: 页码/Page number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_collect_folders_api_v1_bilibili_web_fetch_com_popular_get_0_with_http_info(**kwargs)  # noqa: E501

    def fetch_collect_folders_api_v1_bilibili_web_fetch_com_popular_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取综合热门视频信息/Get comprehensive popular video information  # noqa: E501

        # [中文] ### 用途: - 获取综合热门视频信息 ### 参数: - pn: 页码 ### 返回: - 综合热门视频信息  # [English] ### Purpose: - Get comprehensive popular video information ### Parameters: - pn: Page number ### Return: - comprehensive popular video information  # [示例/Example] pn = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_com_popular_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int pn: 页码/Page number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'pn'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_collect_folders_api_v1_bilibili_web_fetch_com_popular_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pn' in local_var_params and local_var_params['pn'] is not None:  # noqa: E501
            query_params.append(('pn', local_var_params['pn']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_com_popular', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_collect_folders_api_v1_bilibili_web_fetch_comment_reply_get(self, bv_id, rpid, **kwargs):  # noqa: E501
        """获取视频下指定评论的回复/Get reply to the specified comment  # noqa: E501

        # [中文] ### 用途: - 获取视频下指定评论的回复 ### 参数: - bv_id: 作品id - pn: 页码 - rpid: 回复id ### 返回: - 指定评论的回复数据  # [English] ### Purpose: - Get reply to the specified comment ### Parameters: - bv_id: Video id - pn: Page number - rpid: Reply id ### Return: - Reply of the specified comment  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1 rpid = \"237109455120\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_comment_reply_get(bv_id, rpid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bv_id: 作品id/Video id (required)
        :param str rpid: 回复id/Reply id (required)
        :param int pn: 页码/Page number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_collect_folders_api_v1_bilibili_web_fetch_comment_reply_get_with_http_info(bv_id, rpid, **kwargs)  # noqa: E501

    def fetch_collect_folders_api_v1_bilibili_web_fetch_comment_reply_get_with_http_info(self, bv_id, rpid, **kwargs):  # noqa: E501
        """获取视频下指定评论的回复/Get reply to the specified comment  # noqa: E501

        # [中文] ### 用途: - 获取视频下指定评论的回复 ### 参数: - bv_id: 作品id - pn: 页码 - rpid: 回复id ### 返回: - 指定评论的回复数据  # [English] ### Purpose: - Get reply to the specified comment ### Parameters: - bv_id: Video id - pn: Page number - rpid: Reply id ### Return: - Reply of the specified comment  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1 rpid = \"237109455120\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_comment_reply_get_with_http_info(bv_id, rpid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bv_id: 作品id/Video id (required)
        :param str rpid: 回复id/Reply id (required)
        :param int pn: 页码/Page number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'bv_id',
            'rpid',
            'pn'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_collect_folders_api_v1_bilibili_web_fetch_comment_reply_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bv_id' is set
        if self.api_client.client_side_validation and ('bv_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bv_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bv_id` when calling `fetch_collect_folders_api_v1_bilibili_web_fetch_comment_reply_get`")  # noqa: E501
        # verify the required parameter 'rpid' is set
        if self.api_client.client_side_validation and ('rpid' not in local_var_params or  # noqa: E501
                                                        local_var_params['rpid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `rpid` when calling `fetch_collect_folders_api_v1_bilibili_web_fetch_comment_reply_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bv_id' in local_var_params and local_var_params['bv_id'] is not None:  # noqa: E501
            query_params.append(('bv_id', local_var_params['bv_id']))  # noqa: E501
        if 'pn' in local_var_params and local_var_params['pn'] is not None:  # noqa: E501
            query_params.append(('pn', local_var_params['pn']))  # noqa: E501
        if 'rpid' in local_var_params and local_var_params['rpid'] is not None:  # noqa: E501
            query_params.append(('rpid', local_var_params['rpid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_comment_reply', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_collect_folders_api_v1_bilibili_web_fetch_comment_reply_get_0(self, bv_id, rpid, **kwargs):  # noqa: E501
        """获取视频下指定评论的回复/Get reply to the specified comment  # noqa: E501

        # [中文] ### 用途: - 获取视频下指定评论的回复 ### 参数: - bv_id: 作品id - pn: 页码 - rpid: 回复id ### 返回: - 指定评论的回复数据  # [English] ### Purpose: - Get reply to the specified comment ### Parameters: - bv_id: Video id - pn: Page number - rpid: Reply id ### Return: - Reply of the specified comment  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1 rpid = \"237109455120\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_comment_reply_get_0(bv_id, rpid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bv_id: 作品id/Video id (required)
        :param str rpid: 回复id/Reply id (required)
        :param int pn: 页码/Page number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_collect_folders_api_v1_bilibili_web_fetch_comment_reply_get_0_with_http_info(bv_id, rpid, **kwargs)  # noqa: E501

    def fetch_collect_folders_api_v1_bilibili_web_fetch_comment_reply_get_0_with_http_info(self, bv_id, rpid, **kwargs):  # noqa: E501
        """获取视频下指定评论的回复/Get reply to the specified comment  # noqa: E501

        # [中文] ### 用途: - 获取视频下指定评论的回复 ### 参数: - bv_id: 作品id - pn: 页码 - rpid: 回复id ### 返回: - 指定评论的回复数据  # [English] ### Purpose: - Get reply to the specified comment ### Parameters: - bv_id: Video id - pn: Page number - rpid: Reply id ### Return: - Reply of the specified comment  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1 rpid = \"237109455120\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_comment_reply_get_0_with_http_info(bv_id, rpid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bv_id: 作品id/Video id (required)
        :param str rpid: 回复id/Reply id (required)
        :param int pn: 页码/Page number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'bv_id',
            'rpid',
            'pn'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_collect_folders_api_v1_bilibili_web_fetch_comment_reply_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bv_id' is set
        if self.api_client.client_side_validation and ('bv_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bv_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bv_id` when calling `fetch_collect_folders_api_v1_bilibili_web_fetch_comment_reply_get_0`")  # noqa: E501
        # verify the required parameter 'rpid' is set
        if self.api_client.client_side_validation and ('rpid' not in local_var_params or  # noqa: E501
                                                        local_var_params['rpid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `rpid` when calling `fetch_collect_folders_api_v1_bilibili_web_fetch_comment_reply_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bv_id' in local_var_params and local_var_params['bv_id'] is not None:  # noqa: E501
            query_params.append(('bv_id', local_var_params['bv_id']))  # noqa: E501
        if 'pn' in local_var_params and local_var_params['pn'] is not None:  # noqa: E501
            query_params.append(('pn', local_var_params['pn']))  # noqa: E501
        if 'rpid' in local_var_params and local_var_params['rpid'] is not None:  # noqa: E501
            query_params.append(('rpid', local_var_params['rpid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_comment_reply', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_collect_folders_api_v1_bilibili_web_fetch_live_room_detail_get(self, room_id, **kwargs):  # noqa: E501
        """获取指定直播间信息/Get information of specified live room  # noqa: E501

        # [中文] ### 用途: - 获取指定直播间信息 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间信息  # [English] ### Purpose: - Get information of specified live room ### Parameters: - room_id: Live room ID ### Return: - information of specified live room  # [示例/Example] room_id = \"22816111\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_live_room_detail_get(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间ID/Live room ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_collect_folders_api_v1_bilibili_web_fetch_live_room_detail_get_with_http_info(room_id, **kwargs)  # noqa: E501

    def fetch_collect_folders_api_v1_bilibili_web_fetch_live_room_detail_get_with_http_info(self, room_id, **kwargs):  # noqa: E501
        """获取指定直播间信息/Get information of specified live room  # noqa: E501

        # [中文] ### 用途: - 获取指定直播间信息 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间信息  # [English] ### Purpose: - Get information of specified live room ### Parameters: - room_id: Live room ID ### Return: - information of specified live room  # [示例/Example] room_id = \"22816111\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_live_room_detail_get_with_http_info(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间ID/Live room ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'room_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_collect_folders_api_v1_bilibili_web_fetch_live_room_detail_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'room_id' is set
        if self.api_client.client_side_validation and ('room_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['room_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `room_id` when calling `fetch_collect_folders_api_v1_bilibili_web_fetch_live_room_detail_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'room_id' in local_var_params and local_var_params['room_id'] is not None:  # noqa: E501
            query_params.append(('room_id', local_var_params['room_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_live_room_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_collect_folders_api_v1_bilibili_web_fetch_live_room_detail_get_0(self, room_id, **kwargs):  # noqa: E501
        """获取指定直播间信息/Get information of specified live room  # noqa: E501

        # [中文] ### 用途: - 获取指定直播间信息 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间信息  # [English] ### Purpose: - Get information of specified live room ### Parameters: - room_id: Live room ID ### Return: - information of specified live room  # [示例/Example] room_id = \"22816111\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_live_room_detail_get_0(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间ID/Live room ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_collect_folders_api_v1_bilibili_web_fetch_live_room_detail_get_0_with_http_info(room_id, **kwargs)  # noqa: E501

    def fetch_collect_folders_api_v1_bilibili_web_fetch_live_room_detail_get_0_with_http_info(self, room_id, **kwargs):  # noqa: E501
        """获取指定直播间信息/Get information of specified live room  # noqa: E501

        # [中文] ### 用途: - 获取指定直播间信息 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间信息  # [English] ### Purpose: - Get information of specified live room ### Parameters: - room_id: Live room ID ### Return: - information of specified live room  # [示例/Example] room_id = \"22816111\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_live_room_detail_get_0_with_http_info(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间ID/Live room ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'room_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_collect_folders_api_v1_bilibili_web_fetch_live_room_detail_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'room_id' is set
        if self.api_client.client_side_validation and ('room_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['room_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `room_id` when calling `fetch_collect_folders_api_v1_bilibili_web_fetch_live_room_detail_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'room_id' in local_var_params and local_var_params['room_id'] is not None:  # noqa: E501
            query_params.append(('room_id', local_var_params['room_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_live_room_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_collect_folders_api_v1_bilibili_web_fetch_live_streamers_get(self, area_id, **kwargs):  # noqa: E501
        """获取指定分区正在直播的主播/Get live streamers of specified live area  # noqa: E501

        # [中文] ### 用途: - 获取指定分区正在直播的主播 ### 参数: - area_id: 直播分区id - pn: 页码 ### 返回: - 指定分区正在直播的主播  # [English] ### Purpose: - Get live streamers of specified live area ### Parameters: - area_id: Live area ID - pn: Page number ### Return: - live streamers of specified live area  # [示例/Example] area_id = \"9\" pn = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_live_streamers_get(area_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str area_id: 直播分区id/Live area ID (required)
        :param int pn: 页码/Page number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_collect_folders_api_v1_bilibili_web_fetch_live_streamers_get_with_http_info(area_id, **kwargs)  # noqa: E501

    def fetch_collect_folders_api_v1_bilibili_web_fetch_live_streamers_get_with_http_info(self, area_id, **kwargs):  # noqa: E501
        """获取指定分区正在直播的主播/Get live streamers of specified live area  # noqa: E501

        # [中文] ### 用途: - 获取指定分区正在直播的主播 ### 参数: - area_id: 直播分区id - pn: 页码 ### 返回: - 指定分区正在直播的主播  # [English] ### Purpose: - Get live streamers of specified live area ### Parameters: - area_id: Live area ID - pn: Page number ### Return: - live streamers of specified live area  # [示例/Example] area_id = \"9\" pn = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_live_streamers_get_with_http_info(area_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str area_id: 直播分区id/Live area ID (required)
        :param int pn: 页码/Page number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'area_id',
            'pn'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_collect_folders_api_v1_bilibili_web_fetch_live_streamers_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'area_id' is set
        if self.api_client.client_side_validation and ('area_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['area_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `area_id` when calling `fetch_collect_folders_api_v1_bilibili_web_fetch_live_streamers_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'area_id' in local_var_params and local_var_params['area_id'] is not None:  # noqa: E501
            query_params.append(('area_id', local_var_params['area_id']))  # noqa: E501
        if 'pn' in local_var_params and local_var_params['pn'] is not None:  # noqa: E501
            query_params.append(('pn', local_var_params['pn']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_live_streamers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_collect_folders_api_v1_bilibili_web_fetch_live_streamers_get_0(self, area_id, **kwargs):  # noqa: E501
        """获取指定分区正在直播的主播/Get live streamers of specified live area  # noqa: E501

        # [中文] ### 用途: - 获取指定分区正在直播的主播 ### 参数: - area_id: 直播分区id - pn: 页码 ### 返回: - 指定分区正在直播的主播  # [English] ### Purpose: - Get live streamers of specified live area ### Parameters: - area_id: Live area ID - pn: Page number ### Return: - live streamers of specified live area  # [示例/Example] area_id = \"9\" pn = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_live_streamers_get_0(area_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str area_id: 直播分区id/Live area ID (required)
        :param int pn: 页码/Page number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_collect_folders_api_v1_bilibili_web_fetch_live_streamers_get_0_with_http_info(area_id, **kwargs)  # noqa: E501

    def fetch_collect_folders_api_v1_bilibili_web_fetch_live_streamers_get_0_with_http_info(self, area_id, **kwargs):  # noqa: E501
        """获取指定分区正在直播的主播/Get live streamers of specified live area  # noqa: E501

        # [中文] ### 用途: - 获取指定分区正在直播的主播 ### 参数: - area_id: 直播分区id - pn: 页码 ### 返回: - 指定分区正在直播的主播  # [English] ### Purpose: - Get live streamers of specified live area ### Parameters: - area_id: Live area ID - pn: Page number ### Return: - live streamers of specified live area  # [示例/Example] area_id = \"9\" pn = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_live_streamers_get_0_with_http_info(area_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str area_id: 直播分区id/Live area ID (required)
        :param int pn: 页码/Page number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'area_id',
            'pn'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_collect_folders_api_v1_bilibili_web_fetch_live_streamers_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'area_id' is set
        if self.api_client.client_side_validation and ('area_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['area_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `area_id` when calling `fetch_collect_folders_api_v1_bilibili_web_fetch_live_streamers_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'area_id' in local_var_params and local_var_params['area_id'] is not None:  # noqa: E501
            query_params.append(('area_id', local_var_params['area_id']))  # noqa: E501
        if 'pn' in local_var_params and local_var_params['pn'] is not None:  # noqa: E501
            query_params.append(('pn', local_var_params['pn']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_live_streamers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_collect_folders_api_v1_bilibili_web_fetch_live_videos_get(self, room_id, **kwargs):  # noqa: E501
        """获取直播间视频流/Get live video data of specified room  # noqa: E501

        # [中文] ### 用途: - 获取指定直播间视频流 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间视频流  # [English] ### Purpose: - Get live video data of specified room ### Parameters: - room_id: Live room ID ### Return: - live video data of specified room  # [示例/Example] room_id = \"1815229528\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_live_videos_get(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间ID/Live room ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_collect_folders_api_v1_bilibili_web_fetch_live_videos_get_with_http_info(room_id, **kwargs)  # noqa: E501

    def fetch_collect_folders_api_v1_bilibili_web_fetch_live_videos_get_with_http_info(self, room_id, **kwargs):  # noqa: E501
        """获取直播间视频流/Get live video data of specified room  # noqa: E501

        # [中文] ### 用途: - 获取指定直播间视频流 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间视频流  # [English] ### Purpose: - Get live video data of specified room ### Parameters: - room_id: Live room ID ### Return: - live video data of specified room  # [示例/Example] room_id = \"1815229528\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_live_videos_get_with_http_info(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间ID/Live room ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'room_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_collect_folders_api_v1_bilibili_web_fetch_live_videos_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'room_id' is set
        if self.api_client.client_side_validation and ('room_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['room_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `room_id` when calling `fetch_collect_folders_api_v1_bilibili_web_fetch_live_videos_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'room_id' in local_var_params and local_var_params['room_id'] is not None:  # noqa: E501
            query_params.append(('room_id', local_var_params['room_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_live_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_collect_folders_api_v1_bilibili_web_fetch_live_videos_get_0(self, room_id, **kwargs):  # noqa: E501
        """获取直播间视频流/Get live video data of specified room  # noqa: E501

        # [中文] ### 用途: - 获取指定直播间视频流 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间视频流  # [English] ### Purpose: - Get live video data of specified room ### Parameters: - room_id: Live room ID ### Return: - live video data of specified room  # [示例/Example] room_id = \"1815229528\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_live_videos_get_0(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间ID/Live room ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_collect_folders_api_v1_bilibili_web_fetch_live_videos_get_0_with_http_info(room_id, **kwargs)  # noqa: E501

    def fetch_collect_folders_api_v1_bilibili_web_fetch_live_videos_get_0_with_http_info(self, room_id, **kwargs):  # noqa: E501
        """获取直播间视频流/Get live video data of specified room  # noqa: E501

        # [中文] ### 用途: - 获取指定直播间视频流 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间视频流  # [English] ### Purpose: - Get live video data of specified room ### Parameters: - room_id: Live room ID ### Return: - live video data of specified room  # [示例/Example] room_id = \"1815229528\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_live_videos_get_0_with_http_info(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间ID/Live room ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'room_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_collect_folders_api_v1_bilibili_web_fetch_live_videos_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'room_id' is set
        if self.api_client.client_side_validation and ('room_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['room_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `room_id` when calling `fetch_collect_folders_api_v1_bilibili_web_fetch_live_videos_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'room_id' in local_var_params and local_var_params['room_id'] is not None:  # noqa: E501
            query_params.append(('room_id', local_var_params['room_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_live_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_collect_folders_api_v1_bilibili_web_fetch_user_dynamic_get(self, uid, **kwargs):  # noqa: E501
        """获取指定用户动态/Get dynamic information of specified user  # noqa: E501

        # [中文] ### 用途: - 获取指定用户动态 ### 参数: - uid: 用户UID - offset: 开始索引 ### 返回: - 指定用户动态数据  # [English] ### Purpose: - Get dynamic information of specified user ### Parameters: - uid: User UID - offset: offset ### Return: - dynamic information of specified user  # [示例/Example] uid = \"178360345\" offset = \"953154282154098691\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_user_dynamic_get(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户UID (required)
        :param str offset: 开始索引/offset
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_collect_folders_api_v1_bilibili_web_fetch_user_dynamic_get_with_http_info(uid, **kwargs)  # noqa: E501

    def fetch_collect_folders_api_v1_bilibili_web_fetch_user_dynamic_get_with_http_info(self, uid, **kwargs):  # noqa: E501
        """获取指定用户动态/Get dynamic information of specified user  # noqa: E501

        # [中文] ### 用途: - 获取指定用户动态 ### 参数: - uid: 用户UID - offset: 开始索引 ### 返回: - 指定用户动态数据  # [English] ### Purpose: - Get dynamic information of specified user ### Parameters: - uid: User UID - offset: offset ### Return: - dynamic information of specified user  # [示例/Example] uid = \"178360345\" offset = \"953154282154098691\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_user_dynamic_get_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户UID (required)
        :param str offset: 开始索引/offset
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uid',
            'offset'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_collect_folders_api_v1_bilibili_web_fetch_user_dynamic_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uid` when calling `fetch_collect_folders_api_v1_bilibili_web_fetch_user_dynamic_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in local_var_params and local_var_params['uid'] is not None:  # noqa: E501
            query_params.append(('uid', local_var_params['uid']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_user_dynamic', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_collect_folders_api_v1_bilibili_web_fetch_user_dynamic_get_0(self, uid, **kwargs):  # noqa: E501
        """获取指定用户动态/Get dynamic information of specified user  # noqa: E501

        # [中文] ### 用途: - 获取指定用户动态 ### 参数: - uid: 用户UID - offset: 开始索引 ### 返回: - 指定用户动态数据  # [English] ### Purpose: - Get dynamic information of specified user ### Parameters: - uid: User UID - offset: offset ### Return: - dynamic information of specified user  # [示例/Example] uid = \"178360345\" offset = \"953154282154098691\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_user_dynamic_get_0(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户UID (required)
        :param str offset: 开始索引/offset
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_collect_folders_api_v1_bilibili_web_fetch_user_dynamic_get_0_with_http_info(uid, **kwargs)  # noqa: E501

    def fetch_collect_folders_api_v1_bilibili_web_fetch_user_dynamic_get_0_with_http_info(self, uid, **kwargs):  # noqa: E501
        """获取指定用户动态/Get dynamic information of specified user  # noqa: E501

        # [中文] ### 用途: - 获取指定用户动态 ### 参数: - uid: 用户UID - offset: 开始索引 ### 返回: - 指定用户动态数据  # [English] ### Purpose: - Get dynamic information of specified user ### Parameters: - uid: User UID - offset: offset ### Return: - dynamic information of specified user  # [示例/Example] uid = \"178360345\" offset = \"953154282154098691\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_user_dynamic_get_0_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户UID (required)
        :param str offset: 开始索引/offset
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uid',
            'offset'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_collect_folders_api_v1_bilibili_web_fetch_user_dynamic_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uid` when calling `fetch_collect_folders_api_v1_bilibili_web_fetch_user_dynamic_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in local_var_params and local_var_params['uid'] is not None:  # noqa: E501
            query_params.append(('uid', local_var_params['uid']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_user_dynamic', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_collect_folders_api_v1_bilibili_web_fetch_user_profile_get(self, uid, **kwargs):  # noqa: E501
        """获取指定用户的信息/Get information of specified user  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - uid: 用户UID ### 返回: - 指定用户的个人信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - uid: User UID ### Return: - information of specified user  # [示例/Example] uid = \"178360345\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_user_profile_get(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户UID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_collect_folders_api_v1_bilibili_web_fetch_user_profile_get_with_http_info(uid, **kwargs)  # noqa: E501

    def fetch_collect_folders_api_v1_bilibili_web_fetch_user_profile_get_with_http_info(self, uid, **kwargs):  # noqa: E501
        """获取指定用户的信息/Get information of specified user  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - uid: 用户UID ### 返回: - 指定用户的个人信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - uid: User UID ### Return: - information of specified user  # [示例/Example] uid = \"178360345\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_user_profile_get_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户UID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_collect_folders_api_v1_bilibili_web_fetch_user_profile_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uid` when calling `fetch_collect_folders_api_v1_bilibili_web_fetch_user_profile_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in local_var_params and local_var_params['uid'] is not None:  # noqa: E501
            query_params.append(('uid', local_var_params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_user_profile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_collect_folders_api_v1_bilibili_web_fetch_user_profile_get_0(self, uid, **kwargs):  # noqa: E501
        """获取指定用户的信息/Get information of specified user  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - uid: 用户UID ### 返回: - 指定用户的个人信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - uid: User UID ### Return: - information of specified user  # [示例/Example] uid = \"178360345\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_user_profile_get_0(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户UID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_collect_folders_api_v1_bilibili_web_fetch_user_profile_get_0_with_http_info(uid, **kwargs)  # noqa: E501

    def fetch_collect_folders_api_v1_bilibili_web_fetch_user_profile_get_0_with_http_info(self, uid, **kwargs):  # noqa: E501
        """获取指定用户的信息/Get information of specified user  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - uid: 用户UID ### 返回: - 指定用户的个人信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - uid: User UID ### Return: - information of specified user  # [示例/Example] uid = \"178360345\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_user_profile_get_0_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户UID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_collect_folders_api_v1_bilibili_web_fetch_user_profile_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uid` when calling `fetch_collect_folders_api_v1_bilibili_web_fetch_user_profile_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in local_var_params and local_var_params['uid'] is not None:  # noqa: E501
            query_params.append(('uid', local_var_params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_user_profile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_collect_folders_api_v1_bilibili_web_fetch_video_comments_get(self, bv_id, **kwargs):  # noqa: E501
        """获取指定视频的评论/Get comments on the specified video  # noqa: E501

        # [中文] ### 用途: - 获取指定视频的评论 ### 参数: - bv_id: 作品id - pn: 页码 ### 返回: - 指定视频的评论数据  # [English] ### Purpose: - Get comments on the specified video ### Parameters: - bv_id: Video id - pn: Page number ### Return: - comments of the specified video  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_video_comments_get(bv_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bv_id: 作品id/Video id (required)
        :param int pn: 页码/Page number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_collect_folders_api_v1_bilibili_web_fetch_video_comments_get_with_http_info(bv_id, **kwargs)  # noqa: E501

    def fetch_collect_folders_api_v1_bilibili_web_fetch_video_comments_get_with_http_info(self, bv_id, **kwargs):  # noqa: E501
        """获取指定视频的评论/Get comments on the specified video  # noqa: E501

        # [中文] ### 用途: - 获取指定视频的评论 ### 参数: - bv_id: 作品id - pn: 页码 ### 返回: - 指定视频的评论数据  # [English] ### Purpose: - Get comments on the specified video ### Parameters: - bv_id: Video id - pn: Page number ### Return: - comments of the specified video  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_video_comments_get_with_http_info(bv_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bv_id: 作品id/Video id (required)
        :param int pn: 页码/Page number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'bv_id',
            'pn'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_collect_folders_api_v1_bilibili_web_fetch_video_comments_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bv_id' is set
        if self.api_client.client_side_validation and ('bv_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bv_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bv_id` when calling `fetch_collect_folders_api_v1_bilibili_web_fetch_video_comments_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bv_id' in local_var_params and local_var_params['bv_id'] is not None:  # noqa: E501
            query_params.append(('bv_id', local_var_params['bv_id']))  # noqa: E501
        if 'pn' in local_var_params and local_var_params['pn'] is not None:  # noqa: E501
            query_params.append(('pn', local_var_params['pn']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_video_comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_collect_folders_api_v1_bilibili_web_fetch_video_comments_get_0(self, bv_id, **kwargs):  # noqa: E501
        """获取指定视频的评论/Get comments on the specified video  # noqa: E501

        # [中文] ### 用途: - 获取指定视频的评论 ### 参数: - bv_id: 作品id - pn: 页码 ### 返回: - 指定视频的评论数据  # [English] ### Purpose: - Get comments on the specified video ### Parameters: - bv_id: Video id - pn: Page number ### Return: - comments of the specified video  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_video_comments_get_0(bv_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bv_id: 作品id/Video id (required)
        :param int pn: 页码/Page number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_collect_folders_api_v1_bilibili_web_fetch_video_comments_get_0_with_http_info(bv_id, **kwargs)  # noqa: E501

    def fetch_collect_folders_api_v1_bilibili_web_fetch_video_comments_get_0_with_http_info(self, bv_id, **kwargs):  # noqa: E501
        """获取指定视频的评论/Get comments on the specified video  # noqa: E501

        # [中文] ### 用途: - 获取指定视频的评论 ### 参数: - bv_id: 作品id - pn: 页码 ### 返回: - 指定视频的评论数据  # [English] ### Purpose: - Get comments on the specified video ### Parameters: - bv_id: Video id - pn: Page number ### Return: - comments of the specified video  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_collect_folders_api_v1_bilibili_web_fetch_video_comments_get_0_with_http_info(bv_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bv_id: 作品id/Video id (required)
        :param int pn: 页码/Page number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'bv_id',
            'pn'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_collect_folders_api_v1_bilibili_web_fetch_video_comments_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bv_id' is set
        if self.api_client.client_side_validation and ('bv_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bv_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bv_id` when calling `fetch_collect_folders_api_v1_bilibili_web_fetch_video_comments_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bv_id' in local_var_params and local_var_params['bv_id'] is not None:  # noqa: E501
            query_params.append(('bv_id', local_var_params['bv_id']))  # noqa: E501
        if 'pn' in local_var_params and local_var_params['pn'] is not None:  # noqa: E501
            query_params.append(('pn', local_var_params['pn']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_video_comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_api_v1_bilibili_web_bv_to_aid_get(self, bv_id, **kwargs):  # noqa: E501
        """通过bv号获得视频aid号/Generate aid by bvid  # noqa: E501

        # [中文] ### 用途: - 通过bv号获得视频aid号 ### 参数: - bv_id: 作品id ### 返回: - 视频aid号  # [English] ### Purpose: - Generate aid by bvid ### Parameters: - bv_id: Video id ### Return: - Video aid  # [示例/Example] bv_id = \"BV1M1421t7hT\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_bilibili_web_bv_to_aid_get(bv_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bv_id: 作品id/Video id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_api_v1_bilibili_web_bv_to_aid_get_with_http_info(bv_id, **kwargs)  # noqa: E501

    def fetch_one_video_api_v1_bilibili_web_bv_to_aid_get_with_http_info(self, bv_id, **kwargs):  # noqa: E501
        """通过bv号获得视频aid号/Generate aid by bvid  # noqa: E501

        # [中文] ### 用途: - 通过bv号获得视频aid号 ### 参数: - bv_id: 作品id ### 返回: - 视频aid号  # [English] ### Purpose: - Generate aid by bvid ### Parameters: - bv_id: Video id ### Return: - Video aid  # [示例/Example] bv_id = \"BV1M1421t7hT\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_bilibili_web_bv_to_aid_get_with_http_info(bv_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bv_id: 作品id/Video id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'bv_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_api_v1_bilibili_web_bv_to_aid_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bv_id' is set
        if self.api_client.client_side_validation and ('bv_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bv_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bv_id` when calling `fetch_one_video_api_v1_bilibili_web_bv_to_aid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bv_id' in local_var_params and local_var_params['bv_id'] is not None:  # noqa: E501
            query_params.append(('bv_id', local_var_params['bv_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/bv_to_aid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_api_v1_bilibili_web_bv_to_aid_get_0(self, bv_id, **kwargs):  # noqa: E501
        """通过bv号获得视频aid号/Generate aid by bvid  # noqa: E501

        # [中文] ### 用途: - 通过bv号获得视频aid号 ### 参数: - bv_id: 作品id ### 返回: - 视频aid号  # [English] ### Purpose: - Generate aid by bvid ### Parameters: - bv_id: Video id ### Return: - Video aid  # [示例/Example] bv_id = \"BV1M1421t7hT\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_bilibili_web_bv_to_aid_get_0(bv_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bv_id: 作品id/Video id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_api_v1_bilibili_web_bv_to_aid_get_0_with_http_info(bv_id, **kwargs)  # noqa: E501

    def fetch_one_video_api_v1_bilibili_web_bv_to_aid_get_0_with_http_info(self, bv_id, **kwargs):  # noqa: E501
        """通过bv号获得视频aid号/Generate aid by bvid  # noqa: E501

        # [中文] ### 用途: - 通过bv号获得视频aid号 ### 参数: - bv_id: 作品id ### 返回: - 视频aid号  # [English] ### Purpose: - Generate aid by bvid ### Parameters: - bv_id: Video id ### Return: - Video aid  # [示例/Example] bv_id = \"BV1M1421t7hT\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_bilibili_web_bv_to_aid_get_0_with_http_info(bv_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bv_id: 作品id/Video id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'bv_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_api_v1_bilibili_web_bv_to_aid_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bv_id' is set
        if self.api_client.client_side_validation and ('bv_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bv_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bv_id` when calling `fetch_one_video_api_v1_bilibili_web_bv_to_aid_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bv_id' in local_var_params and local_var_params['bv_id'] is not None:  # noqa: E501
            query_params.append(('bv_id', local_var_params['bv_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/bv_to_aid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_api_v1_bilibili_web_fetch_one_video_get(self, bv_id, **kwargs):  # noqa: E501
        """获取单个视频详情信息/Get single video data  # noqa: E501

        # [中文] ### 用途: - 获取单个视频详情信息 ### 参数: - bv_id: 作品id ### 返回: - 视频详情信息  # [English] ### Purpose: - Get single video data ### Parameters: - bv_id: Video id ### Return: - Video data  # [示例/Example] bv_id = \"BV1M1421t7hT\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_bilibili_web_fetch_one_video_get(bv_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bv_id: 作品id/Video id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_api_v1_bilibili_web_fetch_one_video_get_with_http_info(bv_id, **kwargs)  # noqa: E501

    def fetch_one_video_api_v1_bilibili_web_fetch_one_video_get_with_http_info(self, bv_id, **kwargs):  # noqa: E501
        """获取单个视频详情信息/Get single video data  # noqa: E501

        # [中文] ### 用途: - 获取单个视频详情信息 ### 参数: - bv_id: 作品id ### 返回: - 视频详情信息  # [English] ### Purpose: - Get single video data ### Parameters: - bv_id: Video id ### Return: - Video data  # [示例/Example] bv_id = \"BV1M1421t7hT\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_bilibili_web_fetch_one_video_get_with_http_info(bv_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bv_id: 作品id/Video id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'bv_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_api_v1_bilibili_web_fetch_one_video_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bv_id' is set
        if self.api_client.client_side_validation and ('bv_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bv_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bv_id` when calling `fetch_one_video_api_v1_bilibili_web_fetch_one_video_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bv_id' in local_var_params and local_var_params['bv_id'] is not None:  # noqa: E501
            query_params.append(('bv_id', local_var_params['bv_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_one_video', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_api_v1_bilibili_web_fetch_one_video_get_0(self, bv_id, **kwargs):  # noqa: E501
        """获取单个视频详情信息/Get single video data  # noqa: E501

        # [中文] ### 用途: - 获取单个视频详情信息 ### 参数: - bv_id: 作品id ### 返回: - 视频详情信息  # [English] ### Purpose: - Get single video data ### Parameters: - bv_id: Video id ### Return: - Video data  # [示例/Example] bv_id = \"BV1M1421t7hT\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_bilibili_web_fetch_one_video_get_0(bv_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bv_id: 作品id/Video id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_api_v1_bilibili_web_fetch_one_video_get_0_with_http_info(bv_id, **kwargs)  # noqa: E501

    def fetch_one_video_api_v1_bilibili_web_fetch_one_video_get_0_with_http_info(self, bv_id, **kwargs):  # noqa: E501
        """获取单个视频详情信息/Get single video data  # noqa: E501

        # [中文] ### 用途: - 获取单个视频详情信息 ### 参数: - bv_id: 作品id ### 返回: - 视频详情信息  # [English] ### Purpose: - Get single video data ### Parameters: - bv_id: Video id ### Return: - Video data  # [示例/Example] bv_id = \"BV1M1421t7hT\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_bilibili_web_fetch_one_video_get_0_with_http_info(bv_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bv_id: 作品id/Video id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'bv_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_api_v1_bilibili_web_fetch_one_video_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bv_id' is set
        if self.api_client.client_side_validation and ('bv_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bv_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bv_id` when calling `fetch_one_video_api_v1_bilibili_web_fetch_one_video_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bv_id' in local_var_params and local_var_params['bv_id'] is not None:  # noqa: E501
            query_params.append(('bv_id', local_var_params['bv_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_one_video', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_api_v1_bilibili_web_fetch_video_danmaku_get(self, cid, **kwargs):  # noqa: E501
        """获取视频实时弹幕/Get Video Danmaku  # noqa: E501

        # [中文] ### 用途: - 获取视频实时弹幕 ### 参数: - cid: 作品cid ### 返回: - 视频实时弹幕  # [English] ### Purpose: - Get Video Danmaku ### Parameters: - cid: Video cid ### Return: - Video Danmaku  # [示例/Example] cid = \"1639235405\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_bilibili_web_fetch_video_danmaku_get(cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cid: 作品cid/Video cid (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_api_v1_bilibili_web_fetch_video_danmaku_get_with_http_info(cid, **kwargs)  # noqa: E501

    def fetch_one_video_api_v1_bilibili_web_fetch_video_danmaku_get_with_http_info(self, cid, **kwargs):  # noqa: E501
        """获取视频实时弹幕/Get Video Danmaku  # noqa: E501

        # [中文] ### 用途: - 获取视频实时弹幕 ### 参数: - cid: 作品cid ### 返回: - 视频实时弹幕  # [English] ### Purpose: - Get Video Danmaku ### Parameters: - cid: Video cid ### Return: - Video Danmaku  # [示例/Example] cid = \"1639235405\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_bilibili_web_fetch_video_danmaku_get_with_http_info(cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cid: 作品cid/Video cid (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_api_v1_bilibili_web_fetch_video_danmaku_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cid' is set
        if self.api_client.client_side_validation and ('cid' not in local_var_params or  # noqa: E501
                                                        local_var_params['cid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cid` when calling `fetch_one_video_api_v1_bilibili_web_fetch_video_danmaku_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cid' in local_var_params and local_var_params['cid'] is not None:  # noqa: E501
            query_params.append(('cid', local_var_params['cid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_video_danmaku', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_api_v1_bilibili_web_fetch_video_danmaku_get_0(self, cid, **kwargs):  # noqa: E501
        """获取视频实时弹幕/Get Video Danmaku  # noqa: E501

        # [中文] ### 用途: - 获取视频实时弹幕 ### 参数: - cid: 作品cid ### 返回: - 视频实时弹幕  # [English] ### Purpose: - Get Video Danmaku ### Parameters: - cid: Video cid ### Return: - Video Danmaku  # [示例/Example] cid = \"1639235405\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_bilibili_web_fetch_video_danmaku_get_0(cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cid: 作品cid/Video cid (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_api_v1_bilibili_web_fetch_video_danmaku_get_0_with_http_info(cid, **kwargs)  # noqa: E501

    def fetch_one_video_api_v1_bilibili_web_fetch_video_danmaku_get_0_with_http_info(self, cid, **kwargs):  # noqa: E501
        """获取视频实时弹幕/Get Video Danmaku  # noqa: E501

        # [中文] ### 用途: - 获取视频实时弹幕 ### 参数: - cid: 作品cid ### 返回: - 视频实时弹幕  # [English] ### Purpose: - Get Video Danmaku ### Parameters: - cid: Video cid ### Return: - Video Danmaku  # [示例/Example] cid = \"1639235405\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_bilibili_web_fetch_video_danmaku_get_0_with_http_info(cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cid: 作品cid/Video cid (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_api_v1_bilibili_web_fetch_video_danmaku_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cid' is set
        if self.api_client.client_side_validation and ('cid' not in local_var_params or  # noqa: E501
                                                        local_var_params['cid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cid` when calling `fetch_one_video_api_v1_bilibili_web_fetch_video_danmaku_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cid' in local_var_params and local_var_params['cid'] is not None:  # noqa: E501
            query_params.append(('cid', local_var_params['cid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_video_danmaku', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_api_v1_bilibili_web_fetch_video_parts_get(self, bv_id, **kwargs):  # noqa: E501
        """通过bv号获得视频分p信息/Get Video Parts By bvid  # noqa: E501

        # [中文] ### 用途: - 通过bv号获得视频分p信息 ### 参数: - bv_id: 作品id ### 返回: - 视频分p信息  # [English] ### Purpose: - Get Video Parts By bvid ### Parameters: - bv_id: Video id ### Return: - Video Parts  # [示例/Example] bv_id = \"BV1vf421i7hV\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_bilibili_web_fetch_video_parts_get(bv_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bv_id: 作品id/Video id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_api_v1_bilibili_web_fetch_video_parts_get_with_http_info(bv_id, **kwargs)  # noqa: E501

    def fetch_one_video_api_v1_bilibili_web_fetch_video_parts_get_with_http_info(self, bv_id, **kwargs):  # noqa: E501
        """通过bv号获得视频分p信息/Get Video Parts By bvid  # noqa: E501

        # [中文] ### 用途: - 通过bv号获得视频分p信息 ### 参数: - bv_id: 作品id ### 返回: - 视频分p信息  # [English] ### Purpose: - Get Video Parts By bvid ### Parameters: - bv_id: Video id ### Return: - Video Parts  # [示例/Example] bv_id = \"BV1vf421i7hV\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_bilibili_web_fetch_video_parts_get_with_http_info(bv_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bv_id: 作品id/Video id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'bv_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_api_v1_bilibili_web_fetch_video_parts_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bv_id' is set
        if self.api_client.client_side_validation and ('bv_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bv_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bv_id` when calling `fetch_one_video_api_v1_bilibili_web_fetch_video_parts_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bv_id' in local_var_params and local_var_params['bv_id'] is not None:  # noqa: E501
            query_params.append(('bv_id', local_var_params['bv_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_video_parts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_api_v1_bilibili_web_fetch_video_parts_get_0(self, bv_id, **kwargs):  # noqa: E501
        """通过bv号获得视频分p信息/Get Video Parts By bvid  # noqa: E501

        # [中文] ### 用途: - 通过bv号获得视频分p信息 ### 参数: - bv_id: 作品id ### 返回: - 视频分p信息  # [English] ### Purpose: - Get Video Parts By bvid ### Parameters: - bv_id: Video id ### Return: - Video Parts  # [示例/Example] bv_id = \"BV1vf421i7hV\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_bilibili_web_fetch_video_parts_get_0(bv_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bv_id: 作品id/Video id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_api_v1_bilibili_web_fetch_video_parts_get_0_with_http_info(bv_id, **kwargs)  # noqa: E501

    def fetch_one_video_api_v1_bilibili_web_fetch_video_parts_get_0_with_http_info(self, bv_id, **kwargs):  # noqa: E501
        """通过bv号获得视频分p信息/Get Video Parts By bvid  # noqa: E501

        # [中文] ### 用途: - 通过bv号获得视频分p信息 ### 参数: - bv_id: 作品id ### 返回: - 视频分p信息  # [English] ### Purpose: - Get Video Parts By bvid ### Parameters: - bv_id: Video id ### Return: - Video Parts  # [示例/Example] bv_id = \"BV1vf421i7hV\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_bilibili_web_fetch_video_parts_get_0_with_http_info(bv_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bv_id: 作品id/Video id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'bv_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_api_v1_bilibili_web_fetch_video_parts_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bv_id' is set
        if self.api_client.client_side_validation and ('bv_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bv_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bv_id` when calling `fetch_one_video_api_v1_bilibili_web_fetch_video_parts_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bv_id' in local_var_params and local_var_params['bv_id'] is not None:  # noqa: E501
            query_params.append(('bv_id', local_var_params['bv_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_video_parts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_api_v1_bilibili_web_fetch_video_playurl_get(self, bv_id, cid, **kwargs):  # noqa: E501
        """获取视频流地址/Get video playurl  # noqa: E501

        # [中文] ### 用途: - 获取视频流地址 ### 参数: - bv_id: 作品id - cid: 作品cid ### 返回: - 视频流地址  # [English] ### Purpose: - Get video playurl ### Parameters: - bv_id: Video id - cid: Video cid ### Return: - Video playurl  # [示例/Example] bv_id = \"BV1y7411Q7Eq\" cid = \"171776208\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_bilibili_web_fetch_video_playurl_get(bv_id, cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bv_id: 作品id/Video id (required)
        :param str cid: 作品cid/Video cid (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_api_v1_bilibili_web_fetch_video_playurl_get_with_http_info(bv_id, cid, **kwargs)  # noqa: E501

    def fetch_one_video_api_v1_bilibili_web_fetch_video_playurl_get_with_http_info(self, bv_id, cid, **kwargs):  # noqa: E501
        """获取视频流地址/Get video playurl  # noqa: E501

        # [中文] ### 用途: - 获取视频流地址 ### 参数: - bv_id: 作品id - cid: 作品cid ### 返回: - 视频流地址  # [English] ### Purpose: - Get video playurl ### Parameters: - bv_id: Video id - cid: Video cid ### Return: - Video playurl  # [示例/Example] bv_id = \"BV1y7411Q7Eq\" cid = \"171776208\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_bilibili_web_fetch_video_playurl_get_with_http_info(bv_id, cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bv_id: 作品id/Video id (required)
        :param str cid: 作品cid/Video cid (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'bv_id',
            'cid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_api_v1_bilibili_web_fetch_video_playurl_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bv_id' is set
        if self.api_client.client_side_validation and ('bv_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bv_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bv_id` when calling `fetch_one_video_api_v1_bilibili_web_fetch_video_playurl_get`")  # noqa: E501
        # verify the required parameter 'cid' is set
        if self.api_client.client_side_validation and ('cid' not in local_var_params or  # noqa: E501
                                                        local_var_params['cid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cid` when calling `fetch_one_video_api_v1_bilibili_web_fetch_video_playurl_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bv_id' in local_var_params and local_var_params['bv_id'] is not None:  # noqa: E501
            query_params.append(('bv_id', local_var_params['bv_id']))  # noqa: E501
        if 'cid' in local_var_params and local_var_params['cid'] is not None:  # noqa: E501
            query_params.append(('cid', local_var_params['cid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_video_playurl', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_api_v1_bilibili_web_fetch_video_playurl_get_0(self, bv_id, cid, **kwargs):  # noqa: E501
        """获取视频流地址/Get video playurl  # noqa: E501

        # [中文] ### 用途: - 获取视频流地址 ### 参数: - bv_id: 作品id - cid: 作品cid ### 返回: - 视频流地址  # [English] ### Purpose: - Get video playurl ### Parameters: - bv_id: Video id - cid: Video cid ### Return: - Video playurl  # [示例/Example] bv_id = \"BV1y7411Q7Eq\" cid = \"171776208\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_bilibili_web_fetch_video_playurl_get_0(bv_id, cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bv_id: 作品id/Video id (required)
        :param str cid: 作品cid/Video cid (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_api_v1_bilibili_web_fetch_video_playurl_get_0_with_http_info(bv_id, cid, **kwargs)  # noqa: E501

    def fetch_one_video_api_v1_bilibili_web_fetch_video_playurl_get_0_with_http_info(self, bv_id, cid, **kwargs):  # noqa: E501
        """获取视频流地址/Get video playurl  # noqa: E501

        # [中文] ### 用途: - 获取视频流地址 ### 参数: - bv_id: 作品id - cid: 作品cid ### 返回: - 视频流地址  # [English] ### Purpose: - Get video playurl ### Parameters: - bv_id: Video id - cid: Video cid ### Return: - Video playurl  # [示例/Example] bv_id = \"BV1y7411Q7Eq\" cid = \"171776208\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_bilibili_web_fetch_video_playurl_get_0_with_http_info(bv_id, cid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bv_id: 作品id/Video id (required)
        :param str cid: 作品cid/Video cid (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'bv_id',
            'cid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_api_v1_bilibili_web_fetch_video_playurl_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bv_id' is set
        if self.api_client.client_side_validation and ('bv_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bv_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bv_id` when calling `fetch_one_video_api_v1_bilibili_web_fetch_video_playurl_get_0`")  # noqa: E501
        # verify the required parameter 'cid' is set
        if self.api_client.client_side_validation and ('cid' not in local_var_params or  # noqa: E501
                                                        local_var_params['cid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cid` when calling `fetch_one_video_api_v1_bilibili_web_fetch_video_playurl_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bv_id' in local_var_params and local_var_params['bv_id'] is not None:  # noqa: E501
            query_params.append(('bv_id', local_var_params['bv_id']))  # noqa: E501
        if 'cid' in local_var_params and local_var_params['cid'] is not None:  # noqa: E501
            query_params.append(('cid', local_var_params['cid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_video_playurl', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_collection_videos_api_v1_bilibili_web_fetch_user_collection_videos_get(self, folder_id, **kwargs):  # noqa: E501
        """获取指定收藏夹内视频数据/Gets video data from a collection folder  # noqa: E501

        # [中文] ### 用途: - 获取指定收藏夹内视频数据 ### 参数: - folder_id: 用户UID - pn: 页码 ### 返回: - 指定收藏夹内视频数据  # [English] ### Purpose: - Gets video data from a collection folder ### Parameters: - folder_id: collection folder id - pn: Page number ### Return: - video data from collection folder  # [示例/Example] folder_id = \"1756059545\" pn = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_collection_videos_api_v1_bilibili_web_fetch_user_collection_videos_get(folder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str folder_id: 收藏夹id/collection folder id (required)
        :param int pn: 页码/Page number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_collection_videos_api_v1_bilibili_web_fetch_user_collection_videos_get_with_http_info(folder_id, **kwargs)  # noqa: E501

    def fetch_user_collection_videos_api_v1_bilibili_web_fetch_user_collection_videos_get_with_http_info(self, folder_id, **kwargs):  # noqa: E501
        """获取指定收藏夹内视频数据/Gets video data from a collection folder  # noqa: E501

        # [中文] ### 用途: - 获取指定收藏夹内视频数据 ### 参数: - folder_id: 用户UID - pn: 页码 ### 返回: - 指定收藏夹内视频数据  # [English] ### Purpose: - Gets video data from a collection folder ### Parameters: - folder_id: collection folder id - pn: Page number ### Return: - video data from collection folder  # [示例/Example] folder_id = \"1756059545\" pn = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_collection_videos_api_v1_bilibili_web_fetch_user_collection_videos_get_with_http_info(folder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str folder_id: 收藏夹id/collection folder id (required)
        :param int pn: 页码/Page number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'folder_id',
            'pn'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_collection_videos_api_v1_bilibili_web_fetch_user_collection_videos_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'folder_id' is set
        if self.api_client.client_side_validation and ('folder_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['folder_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `folder_id` when calling `fetch_user_collection_videos_api_v1_bilibili_web_fetch_user_collection_videos_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'folder_id' in local_var_params and local_var_params['folder_id'] is not None:  # noqa: E501
            query_params.append(('folder_id', local_var_params['folder_id']))  # noqa: E501
        if 'pn' in local_var_params and local_var_params['pn'] is not None:  # noqa: E501
            query_params.append(('pn', local_var_params['pn']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_user_collection_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_collection_videos_api_v1_bilibili_web_fetch_user_collection_videos_get_0(self, folder_id, **kwargs):  # noqa: E501
        """获取指定收藏夹内视频数据/Gets video data from a collection folder  # noqa: E501

        # [中文] ### 用途: - 获取指定收藏夹内视频数据 ### 参数: - folder_id: 用户UID - pn: 页码 ### 返回: - 指定收藏夹内视频数据  # [English] ### Purpose: - Gets video data from a collection folder ### Parameters: - folder_id: collection folder id - pn: Page number ### Return: - video data from collection folder  # [示例/Example] folder_id = \"1756059545\" pn = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_collection_videos_api_v1_bilibili_web_fetch_user_collection_videos_get_0(folder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str folder_id: 收藏夹id/collection folder id (required)
        :param int pn: 页码/Page number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_collection_videos_api_v1_bilibili_web_fetch_user_collection_videos_get_0_with_http_info(folder_id, **kwargs)  # noqa: E501

    def fetch_user_collection_videos_api_v1_bilibili_web_fetch_user_collection_videos_get_0_with_http_info(self, folder_id, **kwargs):  # noqa: E501
        """获取指定收藏夹内视频数据/Gets video data from a collection folder  # noqa: E501

        # [中文] ### 用途: - 获取指定收藏夹内视频数据 ### 参数: - folder_id: 用户UID - pn: 页码 ### 返回: - 指定收藏夹内视频数据  # [English] ### Purpose: - Gets video data from a collection folder ### Parameters: - folder_id: collection folder id - pn: Page number ### Return: - video data from collection folder  # [示例/Example] folder_id = \"1756059545\" pn = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_collection_videos_api_v1_bilibili_web_fetch_user_collection_videos_get_0_with_http_info(folder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str folder_id: 收藏夹id/collection folder id (required)
        :param int pn: 页码/Page number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'folder_id',
            'pn'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_collection_videos_api_v1_bilibili_web_fetch_user_collection_videos_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'folder_id' is set
        if self.api_client.client_side_validation and ('folder_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['folder_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `folder_id` when calling `fetch_user_collection_videos_api_v1_bilibili_web_fetch_user_collection_videos_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'folder_id' in local_var_params and local_var_params['folder_id'] is not None:  # noqa: E501
            query_params.append(('folder_id', local_var_params['folder_id']))  # noqa: E501
        if 'pn' in local_var_params and local_var_params['pn'] is not None:  # noqa: E501
            query_params.append(('pn', local_var_params['pn']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_user_collection_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_post_videos_api_v1_bilibili_web_fetch_user_post_videos_get(self, uid, **kwargs):  # noqa: E501
        """获取用户主页作品数据/Get user homepage video data  # noqa: E501

        # [中文] ### 用途: - 获取用户发布的视频数据 ### 参数: - uid: 用户UID - pn: 页码 ### 返回: - 用户发布的视频数据  # [English] ### Purpose: - Get user post video data ### Parameters: - uid: User UID - pn: Page number ### Return: - User posted video data  # [示例/Example] uid = \"178360345\" pn = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_post_videos_api_v1_bilibili_web_fetch_user_post_videos_get(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户UID (required)
        :param int pn: 页码/Page number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_post_videos_api_v1_bilibili_web_fetch_user_post_videos_get_with_http_info(uid, **kwargs)  # noqa: E501

    def fetch_user_post_videos_api_v1_bilibili_web_fetch_user_post_videos_get_with_http_info(self, uid, **kwargs):  # noqa: E501
        """获取用户主页作品数据/Get user homepage video data  # noqa: E501

        # [中文] ### 用途: - 获取用户发布的视频数据 ### 参数: - uid: 用户UID - pn: 页码 ### 返回: - 用户发布的视频数据  # [English] ### Purpose: - Get user post video data ### Parameters: - uid: User UID - pn: Page number ### Return: - User posted video data  # [示例/Example] uid = \"178360345\" pn = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_post_videos_api_v1_bilibili_web_fetch_user_post_videos_get_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户UID (required)
        :param int pn: 页码/Page number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uid',
            'pn'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_post_videos_api_v1_bilibili_web_fetch_user_post_videos_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uid` when calling `fetch_user_post_videos_api_v1_bilibili_web_fetch_user_post_videos_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in local_var_params and local_var_params['uid'] is not None:  # noqa: E501
            query_params.append(('uid', local_var_params['uid']))  # noqa: E501
        if 'pn' in local_var_params and local_var_params['pn'] is not None:  # noqa: E501
            query_params.append(('pn', local_var_params['pn']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_user_post_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_post_videos_api_v1_bilibili_web_fetch_user_post_videos_get_0(self, uid, **kwargs):  # noqa: E501
        """获取用户主页作品数据/Get user homepage video data  # noqa: E501

        # [中文] ### 用途: - 获取用户发布的视频数据 ### 参数: - uid: 用户UID - pn: 页码 ### 返回: - 用户发布的视频数据  # [English] ### Purpose: - Get user post video data ### Parameters: - uid: User UID - pn: Page number ### Return: - User posted video data  # [示例/Example] uid = \"178360345\" pn = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_post_videos_api_v1_bilibili_web_fetch_user_post_videos_get_0(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户UID (required)
        :param int pn: 页码/Page number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_post_videos_api_v1_bilibili_web_fetch_user_post_videos_get_0_with_http_info(uid, **kwargs)  # noqa: E501

    def fetch_user_post_videos_api_v1_bilibili_web_fetch_user_post_videos_get_0_with_http_info(self, uid, **kwargs):  # noqa: E501
        """获取用户主页作品数据/Get user homepage video data  # noqa: E501

        # [中文] ### 用途: - 获取用户发布的视频数据 ### 参数: - uid: 用户UID - pn: 页码 ### 返回: - 用户发布的视频数据  # [English] ### Purpose: - Get user post video data ### Parameters: - uid: User UID - pn: Page number ### Return: - User posted video data  # [示例/Example] uid = \"178360345\" pn = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_post_videos_api_v1_bilibili_web_fetch_user_post_videos_get_0_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户UID (required)
        :param int pn: 页码/Page number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uid',
            'pn'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_post_videos_api_v1_bilibili_web_fetch_user_post_videos_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uid` when calling `fetch_user_post_videos_api_v1_bilibili_web_fetch_user_post_videos_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in local_var_params and local_var_params['uid'] is not None:  # noqa: E501
            query_params.append(('uid', local_var_params['uid']))  # noqa: E501
        if 'pn' in local_var_params and local_var_params['pn'] is not None:  # noqa: E501
            query_params.append(('pn', local_var_params['pn']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/bilibili/web/fetch_user_post_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
