# coding: utf-8

"""
    TikHub.io - Your Ultimate Social Media Data & API Marketplace

    High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tikhub_sdk_v2.api_client import ApiClient
from tikhub_sdk_v2.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class WeChatMediaPlatformWebAPIApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def fetch_mp_article_ad_api_v1_wechat_mp_web_fetch_mp_article_ad_get(self, url, **kwargs):  # noqa: E501
        """获取微信公众号广告/Get Wechat MP Article Ad  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号广告 ### 参数: - url: 文章链接 ### 返回: - 广告  # [English] ### Purpose: - Get Wechat MP Article Ad ### Parameters: - url: Article URL ### Returns: - Ad  # [示例/Example] url = \"https://mp.weixin.qq.com/s/hrTDuwh0pWyJFYC93kKCrg\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_ad_api_v1_wechat_mp_web_fetch_mp_article_ad_get(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_mp_article_ad_api_v1_wechat_mp_web_fetch_mp_article_ad_get_with_http_info(url, **kwargs)  # noqa: E501

    def fetch_mp_article_ad_api_v1_wechat_mp_web_fetch_mp_article_ad_get_with_http_info(self, url, **kwargs):  # noqa: E501
        """获取微信公众号广告/Get Wechat MP Article Ad  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号广告 ### 参数: - url: 文章链接 ### 返回: - 广告  # [English] ### Purpose: - Get Wechat MP Article Ad ### Parameters: - url: Article URL ### Returns: - Ad  # [示例/Example] url = \"https://mp.weixin.qq.com/s/hrTDuwh0pWyJFYC93kKCrg\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_ad_api_v1_wechat_mp_web_fetch_mp_article_ad_get_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_mp_article_ad_api_v1_wechat_mp_web_fetch_mp_article_ad_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_mp_article_ad_api_v1_wechat_mp_web_fetch_mp_article_ad_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/wechat_mp/web/fetch_mp_article_ad', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_mp_article_ad_api_v1_wechat_mp_web_fetch_mp_article_ad_get_0(self, url, **kwargs):  # noqa: E501
        """获取微信公众号广告/Get Wechat MP Article Ad  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号广告 ### 参数: - url: 文章链接 ### 返回: - 广告  # [English] ### Purpose: - Get Wechat MP Article Ad ### Parameters: - url: Article URL ### Returns: - Ad  # [示例/Example] url = \"https://mp.weixin.qq.com/s/hrTDuwh0pWyJFYC93kKCrg\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_ad_api_v1_wechat_mp_web_fetch_mp_article_ad_get_0(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_mp_article_ad_api_v1_wechat_mp_web_fetch_mp_article_ad_get_0_with_http_info(url, **kwargs)  # noqa: E501

    def fetch_mp_article_ad_api_v1_wechat_mp_web_fetch_mp_article_ad_get_0_with_http_info(self, url, **kwargs):  # noqa: E501
        """获取微信公众号广告/Get Wechat MP Article Ad  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号广告 ### 参数: - url: 文章链接 ### 返回: - 广告  # [English] ### Purpose: - Get Wechat MP Article Ad ### Parameters: - url: Article URL ### Returns: - Ad  # [示例/Example] url = \"https://mp.weixin.qq.com/s/hrTDuwh0pWyJFYC93kKCrg\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_ad_api_v1_wechat_mp_web_fetch_mp_article_ad_get_0_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_mp_article_ad_api_v1_wechat_mp_web_fetch_mp_article_ad_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_mp_article_ad_api_v1_wechat_mp_web_fetch_mp_article_ad_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/wechat_mp/web/fetch_mp_article_ad', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_mp_article_comment_list_api_v1_wechat_mp_web_fetch_mp_article_comment_list_get(self, url, **kwargs):  # noqa: E501
        """获取微信公众号文章评论列表/Get Wechat MP Article Comment List  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章评论列表 ### 参数: - url: 文章链接 - comment_id: 评论ID - offset: 偏移量 ### 返回: - 评论列表  # [English] ### Purpose: - Get Wechat MP Article Comment List ### Parameters: - url: Article URL - comment_id: Comment ID - offset: Offset ### Returns: - Comment List  # [示例/Example] url = \"https://mp.weixin.qq.com/s/Ko5V9jw9kwL8TO6Q7J3UqQ\" comment_id = \"\" offset = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_comment_list_api_v1_wechat_mp_web_fetch_mp_article_comment_list_get(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param str comment_id: 评论ID/Comment ID
        :param str offset: 偏移量/Offset
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_mp_article_comment_list_api_v1_wechat_mp_web_fetch_mp_article_comment_list_get_with_http_info(url, **kwargs)  # noqa: E501

    def fetch_mp_article_comment_list_api_v1_wechat_mp_web_fetch_mp_article_comment_list_get_with_http_info(self, url, **kwargs):  # noqa: E501
        """获取微信公众号文章评论列表/Get Wechat MP Article Comment List  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章评论列表 ### 参数: - url: 文章链接 - comment_id: 评论ID - offset: 偏移量 ### 返回: - 评论列表  # [English] ### Purpose: - Get Wechat MP Article Comment List ### Parameters: - url: Article URL - comment_id: Comment ID - offset: Offset ### Returns: - Comment List  # [示例/Example] url = \"https://mp.weixin.qq.com/s/Ko5V9jw9kwL8TO6Q7J3UqQ\" comment_id = \"\" offset = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_comment_list_api_v1_wechat_mp_web_fetch_mp_article_comment_list_get_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param str comment_id: 评论ID/Comment ID
        :param str offset: 偏移量/Offset
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url',
            'comment_id',
            'offset'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_mp_article_comment_list_api_v1_wechat_mp_web_fetch_mp_article_comment_list_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_mp_article_comment_list_api_v1_wechat_mp_web_fetch_mp_article_comment_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501
        if 'comment_id' in local_var_params and local_var_params['comment_id'] is not None:  # noqa: E501
            query_params.append(('comment_id', local_var_params['comment_id']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/wechat_mp/web/fetch_mp_article_comment_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_mp_article_comment_list_api_v1_wechat_mp_web_fetch_mp_article_comment_list_get_0(self, url, **kwargs):  # noqa: E501
        """获取微信公众号文章评论列表/Get Wechat MP Article Comment List  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章评论列表 ### 参数: - url: 文章链接 - comment_id: 评论ID - offset: 偏移量 ### 返回: - 评论列表  # [English] ### Purpose: - Get Wechat MP Article Comment List ### Parameters: - url: Article URL - comment_id: Comment ID - offset: Offset ### Returns: - Comment List  # [示例/Example] url = \"https://mp.weixin.qq.com/s/Ko5V9jw9kwL8TO6Q7J3UqQ\" comment_id = \"\" offset = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_comment_list_api_v1_wechat_mp_web_fetch_mp_article_comment_list_get_0(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param str comment_id: 评论ID/Comment ID
        :param str offset: 偏移量/Offset
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_mp_article_comment_list_api_v1_wechat_mp_web_fetch_mp_article_comment_list_get_0_with_http_info(url, **kwargs)  # noqa: E501

    def fetch_mp_article_comment_list_api_v1_wechat_mp_web_fetch_mp_article_comment_list_get_0_with_http_info(self, url, **kwargs):  # noqa: E501
        """获取微信公众号文章评论列表/Get Wechat MP Article Comment List  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章评论列表 ### 参数: - url: 文章链接 - comment_id: 评论ID - offset: 偏移量 ### 返回: - 评论列表  # [English] ### Purpose: - Get Wechat MP Article Comment List ### Parameters: - url: Article URL - comment_id: Comment ID - offset: Offset ### Returns: - Comment List  # [示例/Example] url = \"https://mp.weixin.qq.com/s/Ko5V9jw9kwL8TO6Q7J3UqQ\" comment_id = \"\" offset = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_comment_list_api_v1_wechat_mp_web_fetch_mp_article_comment_list_get_0_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param str comment_id: 评论ID/Comment ID
        :param str offset: 偏移量/Offset
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url',
            'comment_id',
            'offset'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_mp_article_comment_list_api_v1_wechat_mp_web_fetch_mp_article_comment_list_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_mp_article_comment_list_api_v1_wechat_mp_web_fetch_mp_article_comment_list_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501
        if 'comment_id' in local_var_params and local_var_params['comment_id'] is not None:  # noqa: E501
            query_params.append(('comment_id', local_var_params['comment_id']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/wechat_mp/web/fetch_mp_article_comment_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_mp_article_comment_reply_list_api_v1_wechat_mp_web_fetch_mp_article_comment_reply_list_get(self, comment_id, content_id, **kwargs):  # noqa: E501
        """获取微信公众号文章评论回复列表/Get Wechat MP Article Comment Reply List  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章评论回复列表 ### 参数: - url: 文章链接 - comment_id: 评论ID - content_id: 内容ID - offset: 偏移量 ### 返回: - 评论回复列表  # [English] ### Purpose: - Get Wechat MP Article Comment Reply List ### Parameters: - url: Article URL - comment_id: Comment ID - content_id: Content ID - offset: Offset ### Returns: - Comment Reply List  # [示例/Example] url = \"https://mp.weixin.qq.com/s/RCjkQlkRS4oKZ0GAT9slzA\" comment_id = \"3601466901697855492\" content_id = \"6387234930341970671\" offset = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_comment_reply_list_api_v1_wechat_mp_web_fetch_mp_article_comment_reply_list_get(comment_id, content_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str comment_id: 评论ID/Comment ID (required)
        :param str content_id: 内容ID/Content ID (required)
        :param str url: 文章链接/Article URL
        :param str offset: 偏移量/Offset
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_mp_article_comment_reply_list_api_v1_wechat_mp_web_fetch_mp_article_comment_reply_list_get_with_http_info(comment_id, content_id, **kwargs)  # noqa: E501

    def fetch_mp_article_comment_reply_list_api_v1_wechat_mp_web_fetch_mp_article_comment_reply_list_get_with_http_info(self, comment_id, content_id, **kwargs):  # noqa: E501
        """获取微信公众号文章评论回复列表/Get Wechat MP Article Comment Reply List  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章评论回复列表 ### 参数: - url: 文章链接 - comment_id: 评论ID - content_id: 内容ID - offset: 偏移量 ### 返回: - 评论回复列表  # [English] ### Purpose: - Get Wechat MP Article Comment Reply List ### Parameters: - url: Article URL - comment_id: Comment ID - content_id: Content ID - offset: Offset ### Returns: - Comment Reply List  # [示例/Example] url = \"https://mp.weixin.qq.com/s/RCjkQlkRS4oKZ0GAT9slzA\" comment_id = \"3601466901697855492\" content_id = \"6387234930341970671\" offset = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_comment_reply_list_api_v1_wechat_mp_web_fetch_mp_article_comment_reply_list_get_with_http_info(comment_id, content_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str comment_id: 评论ID/Comment ID (required)
        :param str content_id: 内容ID/Content ID (required)
        :param str url: 文章链接/Article URL
        :param str offset: 偏移量/Offset
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'comment_id',
            'content_id',
            'url',
            'offset'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_mp_article_comment_reply_list_api_v1_wechat_mp_web_fetch_mp_article_comment_reply_list_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'comment_id' is set
        if self.api_client.client_side_validation and ('comment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['comment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `comment_id` when calling `fetch_mp_article_comment_reply_list_api_v1_wechat_mp_web_fetch_mp_article_comment_reply_list_get`")  # noqa: E501
        # verify the required parameter 'content_id' is set
        if self.api_client.client_side_validation and ('content_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['content_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `content_id` when calling `fetch_mp_article_comment_reply_list_api_v1_wechat_mp_web_fetch_mp_article_comment_reply_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501
        if 'comment_id' in local_var_params and local_var_params['comment_id'] is not None:  # noqa: E501
            query_params.append(('comment_id', local_var_params['comment_id']))  # noqa: E501
        if 'content_id' in local_var_params and local_var_params['content_id'] is not None:  # noqa: E501
            query_params.append(('content_id', local_var_params['content_id']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/wechat_mp/web/fetch_mp_article_comment_reply_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_mp_article_comment_reply_list_api_v1_wechat_mp_web_fetch_mp_article_comment_reply_list_get_0(self, comment_id, content_id, **kwargs):  # noqa: E501
        """获取微信公众号文章评论回复列表/Get Wechat MP Article Comment Reply List  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章评论回复列表 ### 参数: - url: 文章链接 - comment_id: 评论ID - content_id: 内容ID - offset: 偏移量 ### 返回: - 评论回复列表  # [English] ### Purpose: - Get Wechat MP Article Comment Reply List ### Parameters: - url: Article URL - comment_id: Comment ID - content_id: Content ID - offset: Offset ### Returns: - Comment Reply List  # [示例/Example] url = \"https://mp.weixin.qq.com/s/RCjkQlkRS4oKZ0GAT9slzA\" comment_id = \"3601466901697855492\" content_id = \"6387234930341970671\" offset = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_comment_reply_list_api_v1_wechat_mp_web_fetch_mp_article_comment_reply_list_get_0(comment_id, content_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str comment_id: 评论ID/Comment ID (required)
        :param str content_id: 内容ID/Content ID (required)
        :param str url: 文章链接/Article URL
        :param str offset: 偏移量/Offset
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_mp_article_comment_reply_list_api_v1_wechat_mp_web_fetch_mp_article_comment_reply_list_get_0_with_http_info(comment_id, content_id, **kwargs)  # noqa: E501

    def fetch_mp_article_comment_reply_list_api_v1_wechat_mp_web_fetch_mp_article_comment_reply_list_get_0_with_http_info(self, comment_id, content_id, **kwargs):  # noqa: E501
        """获取微信公众号文章评论回复列表/Get Wechat MP Article Comment Reply List  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章评论回复列表 ### 参数: - url: 文章链接 - comment_id: 评论ID - content_id: 内容ID - offset: 偏移量 ### 返回: - 评论回复列表  # [English] ### Purpose: - Get Wechat MP Article Comment Reply List ### Parameters: - url: Article URL - comment_id: Comment ID - content_id: Content ID - offset: Offset ### Returns: - Comment Reply List  # [示例/Example] url = \"https://mp.weixin.qq.com/s/RCjkQlkRS4oKZ0GAT9slzA\" comment_id = \"3601466901697855492\" content_id = \"6387234930341970671\" offset = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_comment_reply_list_api_v1_wechat_mp_web_fetch_mp_article_comment_reply_list_get_0_with_http_info(comment_id, content_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str comment_id: 评论ID/Comment ID (required)
        :param str content_id: 内容ID/Content ID (required)
        :param str url: 文章链接/Article URL
        :param str offset: 偏移量/Offset
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'comment_id',
            'content_id',
            'url',
            'offset'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_mp_article_comment_reply_list_api_v1_wechat_mp_web_fetch_mp_article_comment_reply_list_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'comment_id' is set
        if self.api_client.client_side_validation and ('comment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['comment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `comment_id` when calling `fetch_mp_article_comment_reply_list_api_v1_wechat_mp_web_fetch_mp_article_comment_reply_list_get_0`")  # noqa: E501
        # verify the required parameter 'content_id' is set
        if self.api_client.client_side_validation and ('content_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['content_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `content_id` when calling `fetch_mp_article_comment_reply_list_api_v1_wechat_mp_web_fetch_mp_article_comment_reply_list_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501
        if 'comment_id' in local_var_params and local_var_params['comment_id'] is not None:  # noqa: E501
            query_params.append(('comment_id', local_var_params['comment_id']))  # noqa: E501
        if 'content_id' in local_var_params and local_var_params['content_id'] is not None:  # noqa: E501
            query_params.append(('content_id', local_var_params['content_id']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/wechat_mp/web/fetch_mp_article_comment_reply_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_mp_article_detail_html_api_v1_wechat_mp_web_fetch_mp_article_detail_html_get(self, url, **kwargs):  # noqa: E501
        """获取微信公众号文章详情的HTML/Get Wechat MP Article Detail HTML  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章详情的HTML，如果你需要获取详细的JSON格式数据，请使用`/api/v1/wechat_mp/web/fetch_mp_article_detail_json`接口 - 此接口收费贵，价格：0.01$/次 ### 参数: - url: 文章链接 ### 返回: - 文章详情的HTML  # [English] ### Purpose: - Get WeChat MP Article Detail, if you need detailed JSON format data, please use the `/api/v1/wechat_mp/web/fetch_mp_article_detail_json` interface - This interface is more expensive, price: 0.01$/time ### Parameters: - url: Article URL ### Returns: - Article Detail HTML  # [示例/Example] url = \"https://mp.weixin.qq.com/s/TSNQKkRpN1qbKsT7BvzqIw\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_detail_html_api_v1_wechat_mp_web_fetch_mp_article_detail_html_get(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_mp_article_detail_html_api_v1_wechat_mp_web_fetch_mp_article_detail_html_get_with_http_info(url, **kwargs)  # noqa: E501

    def fetch_mp_article_detail_html_api_v1_wechat_mp_web_fetch_mp_article_detail_html_get_with_http_info(self, url, **kwargs):  # noqa: E501
        """获取微信公众号文章详情的HTML/Get Wechat MP Article Detail HTML  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章详情的HTML，如果你需要获取详细的JSON格式数据，请使用`/api/v1/wechat_mp/web/fetch_mp_article_detail_json`接口 - 此接口收费贵，价格：0.01$/次 ### 参数: - url: 文章链接 ### 返回: - 文章详情的HTML  # [English] ### Purpose: - Get WeChat MP Article Detail, if you need detailed JSON format data, please use the `/api/v1/wechat_mp/web/fetch_mp_article_detail_json` interface - This interface is more expensive, price: 0.01$/time ### Parameters: - url: Article URL ### Returns: - Article Detail HTML  # [示例/Example] url = \"https://mp.weixin.qq.com/s/TSNQKkRpN1qbKsT7BvzqIw\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_detail_html_api_v1_wechat_mp_web_fetch_mp_article_detail_html_get_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_mp_article_detail_html_api_v1_wechat_mp_web_fetch_mp_article_detail_html_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_mp_article_detail_html_api_v1_wechat_mp_web_fetch_mp_article_detail_html_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/wechat_mp/web/fetch_mp_article_detail_html', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_mp_article_detail_html_api_v1_wechat_mp_web_fetch_mp_article_detail_html_get_0(self, url, **kwargs):  # noqa: E501
        """获取微信公众号文章详情的HTML/Get Wechat MP Article Detail HTML  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章详情的HTML，如果你需要获取详细的JSON格式数据，请使用`/api/v1/wechat_mp/web/fetch_mp_article_detail_json`接口 - 此接口收费贵，价格：0.01$/次 ### 参数: - url: 文章链接 ### 返回: - 文章详情的HTML  # [English] ### Purpose: - Get WeChat MP Article Detail, if you need detailed JSON format data, please use the `/api/v1/wechat_mp/web/fetch_mp_article_detail_json` interface - This interface is more expensive, price: 0.01$/time ### Parameters: - url: Article URL ### Returns: - Article Detail HTML  # [示例/Example] url = \"https://mp.weixin.qq.com/s/TSNQKkRpN1qbKsT7BvzqIw\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_detail_html_api_v1_wechat_mp_web_fetch_mp_article_detail_html_get_0(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_mp_article_detail_html_api_v1_wechat_mp_web_fetch_mp_article_detail_html_get_0_with_http_info(url, **kwargs)  # noqa: E501

    def fetch_mp_article_detail_html_api_v1_wechat_mp_web_fetch_mp_article_detail_html_get_0_with_http_info(self, url, **kwargs):  # noqa: E501
        """获取微信公众号文章详情的HTML/Get Wechat MP Article Detail HTML  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章详情的HTML，如果你需要获取详细的JSON格式数据，请使用`/api/v1/wechat_mp/web/fetch_mp_article_detail_json`接口 - 此接口收费贵，价格：0.01$/次 ### 参数: - url: 文章链接 ### 返回: - 文章详情的HTML  # [English] ### Purpose: - Get WeChat MP Article Detail, if you need detailed JSON format data, please use the `/api/v1/wechat_mp/web/fetch_mp_article_detail_json` interface - This interface is more expensive, price: 0.01$/time ### Parameters: - url: Article URL ### Returns: - Article Detail HTML  # [示例/Example] url = \"https://mp.weixin.qq.com/s/TSNQKkRpN1qbKsT7BvzqIw\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_detail_html_api_v1_wechat_mp_web_fetch_mp_article_detail_html_get_0_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_mp_article_detail_html_api_v1_wechat_mp_web_fetch_mp_article_detail_html_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_mp_article_detail_html_api_v1_wechat_mp_web_fetch_mp_article_detail_html_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/wechat_mp/web/fetch_mp_article_detail_html', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_mp_article_detail_json_api_v1_wechat_mp_web_fetch_mp_article_detail_json_get(self, url, **kwargs):  # noqa: E501
        """获取微信公众号文章详情的JSON/Get Wechat MP Article Detail JSON  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章详情的JSON格式数据 - 此接口收费便宜，如果你需要获取详细的HTML格式数据，请使用`/api/v1/wechat_mp/web/fetch_mp_article_detail_html`接口，但是此接口收费更贵。 - 价格：0.001$/次 ### 参数: - url: 文章链接 ### 返回: - 文章详情的HTML  # [English] ### Purpose: - Get WeChat MP Article Detail in JSON format - This interface is cheaper, if you need detailed HTML format data, please use the `/api/v1/wechat_mp/web/fetch_mp_article_detail_html` interface, but this interface is more expensive. - Price: 0.001$/time ### Parameters: - url: Article URL ### Returns: - Article Detail HTML  # [示例/Example] url = \"https://mp.weixin.qq.com/s/TSNQKkRpN1qbKsT7BvzqIw\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_detail_json_api_v1_wechat_mp_web_fetch_mp_article_detail_json_get(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_mp_article_detail_json_api_v1_wechat_mp_web_fetch_mp_article_detail_json_get_with_http_info(url, **kwargs)  # noqa: E501

    def fetch_mp_article_detail_json_api_v1_wechat_mp_web_fetch_mp_article_detail_json_get_with_http_info(self, url, **kwargs):  # noqa: E501
        """获取微信公众号文章详情的JSON/Get Wechat MP Article Detail JSON  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章详情的JSON格式数据 - 此接口收费便宜，如果你需要获取详细的HTML格式数据，请使用`/api/v1/wechat_mp/web/fetch_mp_article_detail_html`接口，但是此接口收费更贵。 - 价格：0.001$/次 ### 参数: - url: 文章链接 ### 返回: - 文章详情的HTML  # [English] ### Purpose: - Get WeChat MP Article Detail in JSON format - This interface is cheaper, if you need detailed HTML format data, please use the `/api/v1/wechat_mp/web/fetch_mp_article_detail_html` interface, but this interface is more expensive. - Price: 0.001$/time ### Parameters: - url: Article URL ### Returns: - Article Detail HTML  # [示例/Example] url = \"https://mp.weixin.qq.com/s/TSNQKkRpN1qbKsT7BvzqIw\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_detail_json_api_v1_wechat_mp_web_fetch_mp_article_detail_json_get_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_mp_article_detail_json_api_v1_wechat_mp_web_fetch_mp_article_detail_json_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_mp_article_detail_json_api_v1_wechat_mp_web_fetch_mp_article_detail_json_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/wechat_mp/web/fetch_mp_article_detail_json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_mp_article_detail_json_api_v1_wechat_mp_web_fetch_mp_article_detail_json_get_0(self, url, **kwargs):  # noqa: E501
        """获取微信公众号文章详情的JSON/Get Wechat MP Article Detail JSON  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章详情的JSON格式数据 - 此接口收费便宜，如果你需要获取详细的HTML格式数据，请使用`/api/v1/wechat_mp/web/fetch_mp_article_detail_html`接口，但是此接口收费更贵。 - 价格：0.001$/次 ### 参数: - url: 文章链接 ### 返回: - 文章详情的HTML  # [English] ### Purpose: - Get WeChat MP Article Detail in JSON format - This interface is cheaper, if you need detailed HTML format data, please use the `/api/v1/wechat_mp/web/fetch_mp_article_detail_html` interface, but this interface is more expensive. - Price: 0.001$/time ### Parameters: - url: Article URL ### Returns: - Article Detail HTML  # [示例/Example] url = \"https://mp.weixin.qq.com/s/TSNQKkRpN1qbKsT7BvzqIw\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_detail_json_api_v1_wechat_mp_web_fetch_mp_article_detail_json_get_0(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_mp_article_detail_json_api_v1_wechat_mp_web_fetch_mp_article_detail_json_get_0_with_http_info(url, **kwargs)  # noqa: E501

    def fetch_mp_article_detail_json_api_v1_wechat_mp_web_fetch_mp_article_detail_json_get_0_with_http_info(self, url, **kwargs):  # noqa: E501
        """获取微信公众号文章详情的JSON/Get Wechat MP Article Detail JSON  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章详情的JSON格式数据 - 此接口收费便宜，如果你需要获取详细的HTML格式数据，请使用`/api/v1/wechat_mp/web/fetch_mp_article_detail_html`接口，但是此接口收费更贵。 - 价格：0.001$/次 ### 参数: - url: 文章链接 ### 返回: - 文章详情的HTML  # [English] ### Purpose: - Get WeChat MP Article Detail in JSON format - This interface is cheaper, if you need detailed HTML format data, please use the `/api/v1/wechat_mp/web/fetch_mp_article_detail_html` interface, but this interface is more expensive. - Price: 0.001$/time ### Parameters: - url: Article URL ### Returns: - Article Detail HTML  # [示例/Example] url = \"https://mp.weixin.qq.com/s/TSNQKkRpN1qbKsT7BvzqIw\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_detail_json_api_v1_wechat_mp_web_fetch_mp_article_detail_json_get_0_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_mp_article_detail_json_api_v1_wechat_mp_web_fetch_mp_article_detail_json_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_mp_article_detail_json_api_v1_wechat_mp_web_fetch_mp_article_detail_json_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/wechat_mp/web/fetch_mp_article_detail_json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_mp_article_list_api_v1_wechat_mp_web_fetch_mp_article_list_get(self, ghid, **kwargs):  # noqa: E501
        """获取微信公众号文章列表/Get Wechat MP Article List  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章列表 ### 参数: - ghid: 公众号ID - offset: 偏移量 ### 返回: - 文章列表  # [English] ### Purpose: - Get Wechat MP Article List ### Parameters: - ghid: MP ID - offset: Offset ### Returns: - Article List  # [示例/Example] ghid = \"gh_a3d35d4c9d3f\" offset = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_list_api_v1_wechat_mp_web_fetch_mp_article_list_get(ghid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str ghid: 公众号ID/MP ID (required)
        :param str offset: 偏移量/Offset
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_mp_article_list_api_v1_wechat_mp_web_fetch_mp_article_list_get_with_http_info(ghid, **kwargs)  # noqa: E501

    def fetch_mp_article_list_api_v1_wechat_mp_web_fetch_mp_article_list_get_with_http_info(self, ghid, **kwargs):  # noqa: E501
        """获取微信公众号文章列表/Get Wechat MP Article List  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章列表 ### 参数: - ghid: 公众号ID - offset: 偏移量 ### 返回: - 文章列表  # [English] ### Purpose: - Get Wechat MP Article List ### Parameters: - ghid: MP ID - offset: Offset ### Returns: - Article List  # [示例/Example] ghid = \"gh_a3d35d4c9d3f\" offset = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_list_api_v1_wechat_mp_web_fetch_mp_article_list_get_with_http_info(ghid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str ghid: 公众号ID/MP ID (required)
        :param str offset: 偏移量/Offset
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'ghid',
            'offset'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_mp_article_list_api_v1_wechat_mp_web_fetch_mp_article_list_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ghid' is set
        if self.api_client.client_side_validation and ('ghid' not in local_var_params or  # noqa: E501
                                                        local_var_params['ghid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ghid` when calling `fetch_mp_article_list_api_v1_wechat_mp_web_fetch_mp_article_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ghid' in local_var_params and local_var_params['ghid'] is not None:  # noqa: E501
            query_params.append(('ghid', local_var_params['ghid']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/wechat_mp/web/fetch_mp_article_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_mp_article_list_api_v1_wechat_mp_web_fetch_mp_article_list_get_0(self, ghid, **kwargs):  # noqa: E501
        """获取微信公众号文章列表/Get Wechat MP Article List  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章列表 ### 参数: - ghid: 公众号ID - offset: 偏移量 ### 返回: - 文章列表  # [English] ### Purpose: - Get Wechat MP Article List ### Parameters: - ghid: MP ID - offset: Offset ### Returns: - Article List  # [示例/Example] ghid = \"gh_a3d35d4c9d3f\" offset = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_list_api_v1_wechat_mp_web_fetch_mp_article_list_get_0(ghid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str ghid: 公众号ID/MP ID (required)
        :param str offset: 偏移量/Offset
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_mp_article_list_api_v1_wechat_mp_web_fetch_mp_article_list_get_0_with_http_info(ghid, **kwargs)  # noqa: E501

    def fetch_mp_article_list_api_v1_wechat_mp_web_fetch_mp_article_list_get_0_with_http_info(self, ghid, **kwargs):  # noqa: E501
        """获取微信公众号文章列表/Get Wechat MP Article List  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章列表 ### 参数: - ghid: 公众号ID - offset: 偏移量 ### 返回: - 文章列表  # [English] ### Purpose: - Get Wechat MP Article List ### Parameters: - ghid: MP ID - offset: Offset ### Returns: - Article List  # [示例/Example] ghid = \"gh_a3d35d4c9d3f\" offset = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_list_api_v1_wechat_mp_web_fetch_mp_article_list_get_0_with_http_info(ghid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str ghid: 公众号ID/MP ID (required)
        :param str offset: 偏移量/Offset
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'ghid',
            'offset'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_mp_article_list_api_v1_wechat_mp_web_fetch_mp_article_list_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ghid' is set
        if self.api_client.client_side_validation and ('ghid' not in local_var_params or  # noqa: E501
                                                        local_var_params['ghid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ghid` when calling `fetch_mp_article_list_api_v1_wechat_mp_web_fetch_mp_article_list_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ghid' in local_var_params and local_var_params['ghid'] is not None:  # noqa: E501
            query_params.append(('ghid', local_var_params['ghid']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/wechat_mp/web/fetch_mp_article_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_mp_article_read_count_api_v1_wechat_mp_web_fetch_mp_article_read_count_get(self, url, comment_id, **kwargs):  # noqa: E501
        """获取微信公众号文章阅读量/Get Wechat MP Article Read Count  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章阅读量 ### 参数: - url: 文章链接 - comment_id: 评论ID ### 返回: - 阅读量  # [English] ### Purpose: - Get Wechat MP Article Read Count ### Parameters: - url: Article URL - comment_id: Comment ID ### Returns: - Read Count  # [示例/Example] url = \"https://mp.weixin.qq.com/s/hrTDuwh0pWyJFYC93kKCrg\" comment_id = \"3363399664632332289\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_read_count_api_v1_wechat_mp_web_fetch_mp_article_read_count_get(url, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param str comment_id: 评论ID/Comment ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_mp_article_read_count_api_v1_wechat_mp_web_fetch_mp_article_read_count_get_with_http_info(url, comment_id, **kwargs)  # noqa: E501

    def fetch_mp_article_read_count_api_v1_wechat_mp_web_fetch_mp_article_read_count_get_with_http_info(self, url, comment_id, **kwargs):  # noqa: E501
        """获取微信公众号文章阅读量/Get Wechat MP Article Read Count  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章阅读量 ### 参数: - url: 文章链接 - comment_id: 评论ID ### 返回: - 阅读量  # [English] ### Purpose: - Get Wechat MP Article Read Count ### Parameters: - url: Article URL - comment_id: Comment ID ### Returns: - Read Count  # [示例/Example] url = \"https://mp.weixin.qq.com/s/hrTDuwh0pWyJFYC93kKCrg\" comment_id = \"3363399664632332289\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_read_count_api_v1_wechat_mp_web_fetch_mp_article_read_count_get_with_http_info(url, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param str comment_id: 评论ID/Comment ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url',
            'comment_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_mp_article_read_count_api_v1_wechat_mp_web_fetch_mp_article_read_count_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_mp_article_read_count_api_v1_wechat_mp_web_fetch_mp_article_read_count_get`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if self.api_client.client_side_validation and ('comment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['comment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `comment_id` when calling `fetch_mp_article_read_count_api_v1_wechat_mp_web_fetch_mp_article_read_count_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501
        if 'comment_id' in local_var_params and local_var_params['comment_id'] is not None:  # noqa: E501
            query_params.append(('comment_id', local_var_params['comment_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/wechat_mp/web/fetch_mp_article_read_count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_mp_article_read_count_api_v1_wechat_mp_web_fetch_mp_article_read_count_get_0(self, url, comment_id, **kwargs):  # noqa: E501
        """获取微信公众号文章阅读量/Get Wechat MP Article Read Count  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章阅读量 ### 参数: - url: 文章链接 - comment_id: 评论ID ### 返回: - 阅读量  # [English] ### Purpose: - Get Wechat MP Article Read Count ### Parameters: - url: Article URL - comment_id: Comment ID ### Returns: - Read Count  # [示例/Example] url = \"https://mp.weixin.qq.com/s/hrTDuwh0pWyJFYC93kKCrg\" comment_id = \"3363399664632332289\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_read_count_api_v1_wechat_mp_web_fetch_mp_article_read_count_get_0(url, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param str comment_id: 评论ID/Comment ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_mp_article_read_count_api_v1_wechat_mp_web_fetch_mp_article_read_count_get_0_with_http_info(url, comment_id, **kwargs)  # noqa: E501

    def fetch_mp_article_read_count_api_v1_wechat_mp_web_fetch_mp_article_read_count_get_0_with_http_info(self, url, comment_id, **kwargs):  # noqa: E501
        """获取微信公众号文章阅读量/Get Wechat MP Article Read Count  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章阅读量 ### 参数: - url: 文章链接 - comment_id: 评论ID ### 返回: - 阅读量  # [English] ### Purpose: - Get Wechat MP Article Read Count ### Parameters: - url: Article URL - comment_id: Comment ID ### Returns: - Read Count  # [示例/Example] url = \"https://mp.weixin.qq.com/s/hrTDuwh0pWyJFYC93kKCrg\" comment_id = \"3363399664632332289\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_read_count_api_v1_wechat_mp_web_fetch_mp_article_read_count_get_0_with_http_info(url, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param str comment_id: 评论ID/Comment ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url',
            'comment_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_mp_article_read_count_api_v1_wechat_mp_web_fetch_mp_article_read_count_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_mp_article_read_count_api_v1_wechat_mp_web_fetch_mp_article_read_count_get_0`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if self.api_client.client_side_validation and ('comment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['comment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `comment_id` when calling `fetch_mp_article_read_count_api_v1_wechat_mp_web_fetch_mp_article_read_count_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501
        if 'comment_id' in local_var_params and local_var_params['comment_id'] is not None:  # noqa: E501
            query_params.append(('comment_id', local_var_params['comment_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/wechat_mp/web/fetch_mp_article_read_count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_mp_article_url_api_v1_wechat_mp_web_fetch_mp_article_url_get(self, sogou_url, **kwargs):  # noqa: E501
        """获取微信公众号文章永久链接/Get Wechat MP Article URL  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章永久链接 ### 参数: - sogou_url: 搜狗链接 ### 返回: - 永久链接  # [English] ### Purpose: - Get Wechat MP Article URL ### Parameters: - sogou_url: Sogou URL ### Returns: - Article URL  # [示例/Example] sogou_url = \"https://weixin.sogou.com/link?url=dn9a_-gY295K0Rci_xozVXfdMkSQTLW6cwJThYulHEtVjXrGTiVgS5mzcw64XRlRaPIdMgILsPEBI9djq3byAlqXa8Fplpd9bV3r44ewJj5IFttt-prmTSHShu8JtNlpDYR_z_1xvD2J_XrGTUriRYOOY2mt9pZSIUQEepUVTybxAOW4P5fEPd23R0CgK6W3KEODtIkcv1U5w5VkZ8a7_lyyAqreiCgr1YH9mz_7mzFDl6rX6ZnkVYNsUHV_OmaXBUCqpZ1Pa6YO8fIRwtipOg..&type=2&query=deepseek&token=C2E90D2050EB6EA5C2C4EDB1541D855FC322013E67C5DC5A&k=4&h=k\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_url_api_v1_wechat_mp_web_fetch_mp_article_url_get(sogou_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sogou_url: 搜狗链接/Sogou URL (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_mp_article_url_api_v1_wechat_mp_web_fetch_mp_article_url_get_with_http_info(sogou_url, **kwargs)  # noqa: E501

    def fetch_mp_article_url_api_v1_wechat_mp_web_fetch_mp_article_url_get_with_http_info(self, sogou_url, **kwargs):  # noqa: E501
        """获取微信公众号文章永久链接/Get Wechat MP Article URL  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章永久链接 ### 参数: - sogou_url: 搜狗链接 ### 返回: - 永久链接  # [English] ### Purpose: - Get Wechat MP Article URL ### Parameters: - sogou_url: Sogou URL ### Returns: - Article URL  # [示例/Example] sogou_url = \"https://weixin.sogou.com/link?url=dn9a_-gY295K0Rci_xozVXfdMkSQTLW6cwJThYulHEtVjXrGTiVgS5mzcw64XRlRaPIdMgILsPEBI9djq3byAlqXa8Fplpd9bV3r44ewJj5IFttt-prmTSHShu8JtNlpDYR_z_1xvD2J_XrGTUriRYOOY2mt9pZSIUQEepUVTybxAOW4P5fEPd23R0CgK6W3KEODtIkcv1U5w5VkZ8a7_lyyAqreiCgr1YH9mz_7mzFDl6rX6ZnkVYNsUHV_OmaXBUCqpZ1Pa6YO8fIRwtipOg..&type=2&query=deepseek&token=C2E90D2050EB6EA5C2C4EDB1541D855FC322013E67C5DC5A&k=4&h=k\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_url_api_v1_wechat_mp_web_fetch_mp_article_url_get_with_http_info(sogou_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sogou_url: 搜狗链接/Sogou URL (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sogou_url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_mp_article_url_api_v1_wechat_mp_web_fetch_mp_article_url_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sogou_url' is set
        if self.api_client.client_side_validation and ('sogou_url' not in local_var_params or  # noqa: E501
                                                        local_var_params['sogou_url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sogou_url` when calling `fetch_mp_article_url_api_v1_wechat_mp_web_fetch_mp_article_url_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sogou_url' in local_var_params and local_var_params['sogou_url'] is not None:  # noqa: E501
            query_params.append(('sogou_url', local_var_params['sogou_url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/wechat_mp/web/fetch_mp_article_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_mp_article_url_api_v1_wechat_mp_web_fetch_mp_article_url_get_0(self, sogou_url, **kwargs):  # noqa: E501
        """获取微信公众号文章永久链接/Get Wechat MP Article URL  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章永久链接 ### 参数: - sogou_url: 搜狗链接 ### 返回: - 永久链接  # [English] ### Purpose: - Get Wechat MP Article URL ### Parameters: - sogou_url: Sogou URL ### Returns: - Article URL  # [示例/Example] sogou_url = \"https://weixin.sogou.com/link?url=dn9a_-gY295K0Rci_xozVXfdMkSQTLW6cwJThYulHEtVjXrGTiVgS5mzcw64XRlRaPIdMgILsPEBI9djq3byAlqXa8Fplpd9bV3r44ewJj5IFttt-prmTSHShu8JtNlpDYR_z_1xvD2J_XrGTUriRYOOY2mt9pZSIUQEepUVTybxAOW4P5fEPd23R0CgK6W3KEODtIkcv1U5w5VkZ8a7_lyyAqreiCgr1YH9mz_7mzFDl6rX6ZnkVYNsUHV_OmaXBUCqpZ1Pa6YO8fIRwtipOg..&type=2&query=deepseek&token=C2E90D2050EB6EA5C2C4EDB1541D855FC322013E67C5DC5A&k=4&h=k\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_url_api_v1_wechat_mp_web_fetch_mp_article_url_get_0(sogou_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sogou_url: 搜狗链接/Sogou URL (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_mp_article_url_api_v1_wechat_mp_web_fetch_mp_article_url_get_0_with_http_info(sogou_url, **kwargs)  # noqa: E501

    def fetch_mp_article_url_api_v1_wechat_mp_web_fetch_mp_article_url_get_0_with_http_info(self, sogou_url, **kwargs):  # noqa: E501
        """获取微信公众号文章永久链接/Get Wechat MP Article URL  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号文章永久链接 ### 参数: - sogou_url: 搜狗链接 ### 返回: - 永久链接  # [English] ### Purpose: - Get Wechat MP Article URL ### Parameters: - sogou_url: Sogou URL ### Returns: - Article URL  # [示例/Example] sogou_url = \"https://weixin.sogou.com/link?url=dn9a_-gY295K0Rci_xozVXfdMkSQTLW6cwJThYulHEtVjXrGTiVgS5mzcw64XRlRaPIdMgILsPEBI9djq3byAlqXa8Fplpd9bV3r44ewJj5IFttt-prmTSHShu8JtNlpDYR_z_1xvD2J_XrGTUriRYOOY2mt9pZSIUQEepUVTybxAOW4P5fEPd23R0CgK6W3KEODtIkcv1U5w5VkZ8a7_lyyAqreiCgr1YH9mz_7mzFDl6rX6ZnkVYNsUHV_OmaXBUCqpZ1Pa6YO8fIRwtipOg..&type=2&query=deepseek&token=C2E90D2050EB6EA5C2C4EDB1541D855FC322013E67C5DC5A&k=4&h=k\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_url_api_v1_wechat_mp_web_fetch_mp_article_url_get_0_with_http_info(sogou_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sogou_url: 搜狗链接/Sogou URL (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sogou_url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_mp_article_url_api_v1_wechat_mp_web_fetch_mp_article_url_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sogou_url' is set
        if self.api_client.client_side_validation and ('sogou_url' not in local_var_params or  # noqa: E501
                                                        local_var_params['sogou_url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sogou_url` when calling `fetch_mp_article_url_api_v1_wechat_mp_web_fetch_mp_article_url_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sogou_url' in local_var_params and local_var_params['sogou_url'] is not None:  # noqa: E501
            query_params.append(('sogou_url', local_var_params['sogou_url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/wechat_mp/web/fetch_mp_article_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_mp_article_url_conversion_api_v1_wechat_mp_web_fetch_mp_article_url_conversion_get(self, url, **kwargs):  # noqa: E501
        """获取微信公众号长链接转短链接/Get Wechat MP Long URL to Short URL  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号长链接转短链接 ### 参数: - url: 文章链接 ### 返回: - 短链接  # [English] ### Purpose: - Get Wechat MP Long URL to Short URL ### Parameters: - url: Article URL ### Returns: - Short URL  # [示例/Example] url = \"http://mp.weixin.qq.com/s?__biz=MzIyMDQzMTM4Mg==&mid=2247504868&idx=1&sn=37ee48875df1be54cb766783177ce61d\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_url_conversion_api_v1_wechat_mp_web_fetch_mp_article_url_conversion_get(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_mp_article_url_conversion_api_v1_wechat_mp_web_fetch_mp_article_url_conversion_get_with_http_info(url, **kwargs)  # noqa: E501

    def fetch_mp_article_url_conversion_api_v1_wechat_mp_web_fetch_mp_article_url_conversion_get_with_http_info(self, url, **kwargs):  # noqa: E501
        """获取微信公众号长链接转短链接/Get Wechat MP Long URL to Short URL  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号长链接转短链接 ### 参数: - url: 文章链接 ### 返回: - 短链接  # [English] ### Purpose: - Get Wechat MP Long URL to Short URL ### Parameters: - url: Article URL ### Returns: - Short URL  # [示例/Example] url = \"http://mp.weixin.qq.com/s?__biz=MzIyMDQzMTM4Mg==&mid=2247504868&idx=1&sn=37ee48875df1be54cb766783177ce61d\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_url_conversion_api_v1_wechat_mp_web_fetch_mp_article_url_conversion_get_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_mp_article_url_conversion_api_v1_wechat_mp_web_fetch_mp_article_url_conversion_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_mp_article_url_conversion_api_v1_wechat_mp_web_fetch_mp_article_url_conversion_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/wechat_mp/web/fetch_mp_article_url_conversion', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_mp_article_url_conversion_api_v1_wechat_mp_web_fetch_mp_article_url_conversion_get_0(self, url, **kwargs):  # noqa: E501
        """获取微信公众号长链接转短链接/Get Wechat MP Long URL to Short URL  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号长链接转短链接 ### 参数: - url: 文章链接 ### 返回: - 短链接  # [English] ### Purpose: - Get Wechat MP Long URL to Short URL ### Parameters: - url: Article URL ### Returns: - Short URL  # [示例/Example] url = \"http://mp.weixin.qq.com/s?__biz=MzIyMDQzMTM4Mg==&mid=2247504868&idx=1&sn=37ee48875df1be54cb766783177ce61d\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_url_conversion_api_v1_wechat_mp_web_fetch_mp_article_url_conversion_get_0(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_mp_article_url_conversion_api_v1_wechat_mp_web_fetch_mp_article_url_conversion_get_0_with_http_info(url, **kwargs)  # noqa: E501

    def fetch_mp_article_url_conversion_api_v1_wechat_mp_web_fetch_mp_article_url_conversion_get_0_with_http_info(self, url, **kwargs):  # noqa: E501
        """获取微信公众号长链接转短链接/Get Wechat MP Long URL to Short URL  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号长链接转短链接 ### 参数: - url: 文章链接 ### 返回: - 短链接  # [English] ### Purpose: - Get Wechat MP Long URL to Short URL ### Parameters: - url: Article URL ### Returns: - Short URL  # [示例/Example] url = \"http://mp.weixin.qq.com/s?__biz=MzIyMDQzMTM4Mg==&mid=2247504868&idx=1&sn=37ee48875df1be54cb766783177ce61d\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_article_url_conversion_api_v1_wechat_mp_web_fetch_mp_article_url_conversion_get_0_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_mp_article_url_conversion_api_v1_wechat_mp_web_fetch_mp_article_url_conversion_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_mp_article_url_conversion_api_v1_wechat_mp_web_fetch_mp_article_url_conversion_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/wechat_mp/web/fetch_mp_article_url_conversion', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_mp_related_articles_api_v1_wechat_mp_web_fetch_mp_related_articles_get(self, url, **kwargs):  # noqa: E501
        """获取微信公众号关联文章/Get Wechat MP Related Articles  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号关联文章 ### 参数: - url: 文章链接 ### 返回: - 关联文章  # [English] ### Purpose: - Get Wechat MP Related Articles ### Parameters: - url: Article URL ### Returns: - Related Articles  # [示例/Example] url = \"https://mp.weixin.qq.com/s/Ko5V9jw9kwL8TO6Q7J3UqQ\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_related_articles_api_v1_wechat_mp_web_fetch_mp_related_articles_get(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_mp_related_articles_api_v1_wechat_mp_web_fetch_mp_related_articles_get_with_http_info(url, **kwargs)  # noqa: E501

    def fetch_mp_related_articles_api_v1_wechat_mp_web_fetch_mp_related_articles_get_with_http_info(self, url, **kwargs):  # noqa: E501
        """获取微信公众号关联文章/Get Wechat MP Related Articles  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号关联文章 ### 参数: - url: 文章链接 ### 返回: - 关联文章  # [English] ### Purpose: - Get Wechat MP Related Articles ### Parameters: - url: Article URL ### Returns: - Related Articles  # [示例/Example] url = \"https://mp.weixin.qq.com/s/Ko5V9jw9kwL8TO6Q7J3UqQ\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_related_articles_api_v1_wechat_mp_web_fetch_mp_related_articles_get_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_mp_related_articles_api_v1_wechat_mp_web_fetch_mp_related_articles_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_mp_related_articles_api_v1_wechat_mp_web_fetch_mp_related_articles_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/wechat_mp/web/fetch_mp_related_articles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_mp_related_articles_api_v1_wechat_mp_web_fetch_mp_related_articles_get_0(self, url, **kwargs):  # noqa: E501
        """获取微信公众号关联文章/Get Wechat MP Related Articles  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号关联文章 ### 参数: - url: 文章链接 ### 返回: - 关联文章  # [English] ### Purpose: - Get Wechat MP Related Articles ### Parameters: - url: Article URL ### Returns: - Related Articles  # [示例/Example] url = \"https://mp.weixin.qq.com/s/Ko5V9jw9kwL8TO6Q7J3UqQ\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_related_articles_api_v1_wechat_mp_web_fetch_mp_related_articles_get_0(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_mp_related_articles_api_v1_wechat_mp_web_fetch_mp_related_articles_get_0_with_http_info(url, **kwargs)  # noqa: E501

    def fetch_mp_related_articles_api_v1_wechat_mp_web_fetch_mp_related_articles_get_0_with_http_info(self, url, **kwargs):  # noqa: E501
        """获取微信公众号关联文章/Get Wechat MP Related Articles  # noqa: E501

        # [中文] ### 用途: - 获取微信公众号关联文章 ### 参数: - url: 文章链接 ### 返回: - 关联文章  # [English] ### Purpose: - Get Wechat MP Related Articles ### Parameters: - url: Article URL ### Returns: - Related Articles  # [示例/Example] url = \"https://mp.weixin.qq.com/s/Ko5V9jw9kwL8TO6Q7J3UqQ\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_mp_related_articles_api_v1_wechat_mp_web_fetch_mp_related_articles_get_0_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 文章链接/Article URL (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_mp_related_articles_api_v1_wechat_mp_web_fetch_mp_related_articles_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_mp_related_articles_api_v1_wechat_mp_web_fetch_mp_related_articles_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/wechat_mp/web/fetch_mp_related_articles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
