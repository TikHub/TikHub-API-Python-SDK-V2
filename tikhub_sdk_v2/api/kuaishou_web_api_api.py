# coding: utf-8

"""
    TikHub.io - Your Ultimate Social Media Data & API Marketplace

    High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tikhub_sdk_v2.api_client import ApiClient
from tikhub_sdk_v2.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class KuaishouWebAPIApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def fetch_home_page_info_api_v1_kuaishou_web_fetch_home_page_info_get(self, user_id, **kwargs):  # noqa: E501
        """获取主页信息数据/Get home page info data  # noqa: E501

        # [中文] ### 用途: - 获取主页信息数据 ### 参数: - user_id: 用户ID ### 返回: - 主页信息数据  # [English] ### Purpose: - Fetch home page info data ### Parameters: - user_id: User ID ### Returns: - Home page info data  # [示例/Example] user_id = \"3xduik3j7us2ge6\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_page_info_api_v1_kuaishou_web_fetch_home_page_info_get(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_home_page_info_api_v1_kuaishou_web_fetch_home_page_info_get_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_home_page_info_api_v1_kuaishou_web_fetch_home_page_info_get_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """获取主页信息数据/Get home page info data  # noqa: E501

        # [中文] ### 用途: - 获取主页信息数据 ### 参数: - user_id: 用户ID ### 返回: - 主页信息数据  # [English] ### Purpose: - Fetch home page info data ### Parameters: - user_id: User ID ### Returns: - Home page info data  # [示例/Example] user_id = \"3xduik3j7us2ge6\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_page_info_api_v1_kuaishou_web_fetch_home_page_info_get_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_home_page_info_api_v1_kuaishou_web_fetch_home_page_info_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_home_page_info_api_v1_kuaishou_web_fetch_home_page_info_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/web/fetch_home_page_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_home_page_info_api_v1_kuaishou_web_fetch_home_page_info_get_0(self, user_id, **kwargs):  # noqa: E501
        """获取主页信息数据/Get home page info data  # noqa: E501

        # [中文] ### 用途: - 获取主页信息数据 ### 参数: - user_id: 用户ID ### 返回: - 主页信息数据  # [English] ### Purpose: - Fetch home page info data ### Parameters: - user_id: User ID ### Returns: - Home page info data  # [示例/Example] user_id = \"3xduik3j7us2ge6\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_page_info_api_v1_kuaishou_web_fetch_home_page_info_get_0(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_home_page_info_api_v1_kuaishou_web_fetch_home_page_info_get_0_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_home_page_info_api_v1_kuaishou_web_fetch_home_page_info_get_0_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """获取主页信息数据/Get home page info data  # noqa: E501

        # [中文] ### 用途: - 获取主页信息数据 ### 参数: - user_id: 用户ID ### 返回: - 主页信息数据  # [English] ### Purpose: - Fetch home page info data ### Parameters: - user_id: User ID ### Returns: - Home page info data  # [示例/Example] user_id = \"3xduik3j7us2ge6\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_page_info_api_v1_kuaishou_web_fetch_home_page_info_get_0_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_home_page_info_api_v1_kuaishou_web_fetch_home_page_info_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_home_page_info_api_v1_kuaishou_web_fetch_home_page_info_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/web/fetch_home_page_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_home_page_video_api_v1_kuaishou_web_fetch_home_page_video_get(self, **kwargs):  # noqa: E501
        """获取主页视频数据/Get home page video data  # noqa: E501

        # [中文] ### 用途: - 获取主页视频数据 ### 参数: - user_id: 用户ID - user_profile_url: 用户主页链接，user_id和user_profile_url必须传一个 - pcursor: 视频游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch home page video data ### Parameters: - user_id: User ID - user_profile_url: User profile URL, one of user_id and user_profile_url must be passed - pcursor: Video cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Videos data  # [示例/Example] user_id = \"3xduik3j7us2ge6\" user_profile_url = \"https://www.kuaishou.com/profile/3xduik3j7us2ge6\" pcursor = '1.718349959396E12'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_page_video_api_v1_kuaishou_web_fetch_home_page_video_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id:
        :param str user_profile_url:
        :param str pcursor:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_home_page_video_api_v1_kuaishou_web_fetch_home_page_video_get_with_http_info(**kwargs)  # noqa: E501

    def fetch_home_page_video_api_v1_kuaishou_web_fetch_home_page_video_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取主页视频数据/Get home page video data  # noqa: E501

        # [中文] ### 用途: - 获取主页视频数据 ### 参数: - user_id: 用户ID - user_profile_url: 用户主页链接，user_id和user_profile_url必须传一个 - pcursor: 视频游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch home page video data ### Parameters: - user_id: User ID - user_profile_url: User profile URL, one of user_id and user_profile_url must be passed - pcursor: Video cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Videos data  # [示例/Example] user_id = \"3xduik3j7us2ge6\" user_profile_url = \"https://www.kuaishou.com/profile/3xduik3j7us2ge6\" pcursor = '1.718349959396E12'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_page_video_api_v1_kuaishou_web_fetch_home_page_video_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id:
        :param str user_profile_url:
        :param str pcursor:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id',
            'user_profile_url',
            'pcursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_home_page_video_api_v1_kuaishou_web_fetch_home_page_video_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501
        if 'user_profile_url' in local_var_params and local_var_params['user_profile_url'] is not None:  # noqa: E501
            query_params.append(('user_profile_url', local_var_params['user_profile_url']))  # noqa: E501
        if 'pcursor' in local_var_params and local_var_params['pcursor'] is not None:  # noqa: E501
            query_params.append(('pcursor', local_var_params['pcursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/web/fetch_home_page_video', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_home_page_video_api_v1_kuaishou_web_fetch_home_page_video_get_0(self, **kwargs):  # noqa: E501
        """获取主页视频数据/Get home page video data  # noqa: E501

        # [中文] ### 用途: - 获取主页视频数据 ### 参数: - user_id: 用户ID - user_profile_url: 用户主页链接，user_id和user_profile_url必须传一个 - pcursor: 视频游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch home page video data ### Parameters: - user_id: User ID - user_profile_url: User profile URL, one of user_id and user_profile_url must be passed - pcursor: Video cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Videos data  # [示例/Example] user_id = \"3xduik3j7us2ge6\" user_profile_url = \"https://www.kuaishou.com/profile/3xduik3j7us2ge6\" pcursor = '1.718349959396E12'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_page_video_api_v1_kuaishou_web_fetch_home_page_video_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id:
        :param str user_profile_url:
        :param str pcursor:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_home_page_video_api_v1_kuaishou_web_fetch_home_page_video_get_0_with_http_info(**kwargs)  # noqa: E501

    def fetch_home_page_video_api_v1_kuaishou_web_fetch_home_page_video_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取主页视频数据/Get home page video data  # noqa: E501

        # [中文] ### 用途: - 获取主页视频数据 ### 参数: - user_id: 用户ID - user_profile_url: 用户主页链接，user_id和user_profile_url必须传一个 - pcursor: 视频游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch home page video data ### Parameters: - user_id: User ID - user_profile_url: User profile URL, one of user_id and user_profile_url must be passed - pcursor: Video cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Videos data  # [示例/Example] user_id = \"3xduik3j7us2ge6\" user_profile_url = \"https://www.kuaishou.com/profile/3xduik3j7us2ge6\" pcursor = '1.718349959396E12'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_page_video_api_v1_kuaishou_web_fetch_home_page_video_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id:
        :param str user_profile_url:
        :param str pcursor:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id',
            'user_profile_url',
            'pcursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_home_page_video_api_v1_kuaishou_web_fetch_home_page_video_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501
        if 'user_profile_url' in local_var_params and local_var_params['user_profile_url'] is not None:  # noqa: E501
            query_params.append(('user_profile_url', local_var_params['user_profile_url']))  # noqa: E501
        if 'pcursor' in local_var_params and local_var_params['pcursor'] is not None:  # noqa: E501
            query_params.append(('pcursor', local_var_params['pcursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/web/fetch_home_page_video', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_api_v1_kuaishou_web_fetch_one_video_get(self, share_text, **kwargs):  # noqa: E501
        """获取单个作品数据/Get single video data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据，此接口不支持图文作品。 ### 参数: - share_text: 作品分享链接 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video data, this interface does not support photo only posts. ### Parameters: - share_text: Photo share link ### Returns: - Video data  # [示例/Example] share_text = \"https://www.kuaishou.com/f/X-f2k5KJpiXN1SY\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_kuaishou_web_fetch_one_video_get(share_text, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_text: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_api_v1_kuaishou_web_fetch_one_video_get_with_http_info(share_text, **kwargs)  # noqa: E501

    def fetch_one_video_api_v1_kuaishou_web_fetch_one_video_get_with_http_info(self, share_text, **kwargs):  # noqa: E501
        """获取单个作品数据/Get single video data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据，此接口不支持图文作品。 ### 参数: - share_text: 作品分享链接 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video data, this interface does not support photo only posts. ### Parameters: - share_text: Photo share link ### Returns: - Video data  # [示例/Example] share_text = \"https://www.kuaishou.com/f/X-f2k5KJpiXN1SY\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_kuaishou_web_fetch_one_video_get_with_http_info(share_text, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_text: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'share_text'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_api_v1_kuaishou_web_fetch_one_video_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'share_text' is set
        if self.api_client.client_side_validation and ('share_text' not in local_var_params or  # noqa: E501
                                                        local_var_params['share_text'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `share_text` when calling `fetch_one_video_api_v1_kuaishou_web_fetch_one_video_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'share_text' in local_var_params and local_var_params['share_text'] is not None:  # noqa: E501
            query_params.append(('share_text', local_var_params['share_text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/web/fetch_one_video', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_api_v1_kuaishou_web_fetch_one_video_get_0(self, share_text, **kwargs):  # noqa: E501
        """获取单个作品数据/Get single video data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据，此接口不支持图文作品。 ### 参数: - share_text: 作品分享链接 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video data, this interface does not support photo only posts. ### Parameters: - share_text: Photo share link ### Returns: - Video data  # [示例/Example] share_text = \"https://www.kuaishou.com/f/X-f2k5KJpiXN1SY\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_kuaishou_web_fetch_one_video_get_0(share_text, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_text: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_api_v1_kuaishou_web_fetch_one_video_get_0_with_http_info(share_text, **kwargs)  # noqa: E501

    def fetch_one_video_api_v1_kuaishou_web_fetch_one_video_get_0_with_http_info(self, share_text, **kwargs):  # noqa: E501
        """获取单个作品数据/Get single video data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据，此接口不支持图文作品。 ### 参数: - share_text: 作品分享链接 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video data, this interface does not support photo only posts. ### Parameters: - share_text: Photo share link ### Returns: - Video data  # [示例/Example] share_text = \"https://www.kuaishou.com/f/X-f2k5KJpiXN1SY\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_kuaishou_web_fetch_one_video_get_0_with_http_info(share_text, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_text: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'share_text'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_api_v1_kuaishou_web_fetch_one_video_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'share_text' is set
        if self.api_client.client_side_validation and ('share_text' not in local_var_params or  # noqa: E501
                                                        local_var_params['share_text'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `share_text` when calling `fetch_one_video_api_v1_kuaishou_web_fetch_one_video_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'share_text' in local_var_params and local_var_params['share_text'] is not None:  # noqa: E501
            query_params.append(('share_text', local_var_params['share_text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/web/fetch_one_video', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_by_url_api_v1_kuaishou_web_fetch_one_video_by_url_get(self, url, **kwargs):  # noqa: E501
        """根据链接获取单个作品数据/Fetch single video by URL  # noqa: E501

        # [中文] ### 用途: - 根据链接获取单个作品数据 ### 参数: - url: 作品链接 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL ### Parameters: - url: Photo URL ### Returns: - Video data  # [示例/Example] url = \"https://v.kuaishou.com/GKTpYm\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_by_url_api_v1_kuaishou_web_fetch_one_video_by_url_get(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_by_url_api_v1_kuaishou_web_fetch_one_video_by_url_get_with_http_info(url, **kwargs)  # noqa: E501

    def fetch_one_video_by_url_api_v1_kuaishou_web_fetch_one_video_by_url_get_with_http_info(self, url, **kwargs):  # noqa: E501
        """根据链接获取单个作品数据/Fetch single video by URL  # noqa: E501

        # [中文] ### 用途: - 根据链接获取单个作品数据 ### 参数: - url: 作品链接 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL ### Parameters: - url: Photo URL ### Returns: - Video data  # [示例/Example] url = \"https://v.kuaishou.com/GKTpYm\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_by_url_api_v1_kuaishou_web_fetch_one_video_by_url_get_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_by_url_api_v1_kuaishou_web_fetch_one_video_by_url_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_one_video_by_url_api_v1_kuaishou_web_fetch_one_video_by_url_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/web/fetch_one_video_by_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_by_url_api_v1_kuaishou_web_fetch_one_video_by_url_get_0(self, url, **kwargs):  # noqa: E501
        """根据链接获取单个作品数据/Fetch single video by URL  # noqa: E501

        # [中文] ### 用途: - 根据链接获取单个作品数据 ### 参数: - url: 作品链接 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL ### Parameters: - url: Photo URL ### Returns: - Video data  # [示例/Example] url = \"https://v.kuaishou.com/GKTpYm\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_by_url_api_v1_kuaishou_web_fetch_one_video_by_url_get_0(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_by_url_api_v1_kuaishou_web_fetch_one_video_by_url_get_0_with_http_info(url, **kwargs)  # noqa: E501

    def fetch_one_video_by_url_api_v1_kuaishou_web_fetch_one_video_by_url_get_0_with_http_info(self, url, **kwargs):  # noqa: E501
        """根据链接获取单个作品数据/Fetch single video by URL  # noqa: E501

        # [中文] ### 用途: - 根据链接获取单个作品数据 ### 参数: - url: 作品链接 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL ### Parameters: - url: Photo URL ### Returns: - Video data  # [示例/Example] url = \"https://v.kuaishou.com/GKTpYm\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_by_url_api_v1_kuaishou_web_fetch_one_video_by_url_get_0_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_by_url_api_v1_kuaishou_web_fetch_one_video_by_url_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_one_video_by_url_api_v1_kuaishou_web_fetch_one_video_by_url_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/web/fetch_one_video_by_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_by_url_v2_api_v1_kuaishou_web_fetch_one_video_by_url_v2_get(self, url, **kwargs):  # noqa: E501
        """根据链接获取单个作品数据V2/Fetch single video by URL V2  # noqa: E501

        # [中文] ### 用途: - 根据链接获取单个作品数据V2 ### 参数: - url: 作品链接 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL V2 ### Parameters: - url: Photo URL ### Returns: - Video data  # [示例/Example] url = \"https://v.kuaishou.com/GKTpYm\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_by_url_v2_api_v1_kuaishou_web_fetch_one_video_by_url_v2_get(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_by_url_v2_api_v1_kuaishou_web_fetch_one_video_by_url_v2_get_with_http_info(url, **kwargs)  # noqa: E501

    def fetch_one_video_by_url_v2_api_v1_kuaishou_web_fetch_one_video_by_url_v2_get_with_http_info(self, url, **kwargs):  # noqa: E501
        """根据链接获取单个作品数据V2/Fetch single video by URL V2  # noqa: E501

        # [中文] ### 用途: - 根据链接获取单个作品数据V2 ### 参数: - url: 作品链接 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL V2 ### Parameters: - url: Photo URL ### Returns: - Video data  # [示例/Example] url = \"https://v.kuaishou.com/GKTpYm\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_by_url_v2_api_v1_kuaishou_web_fetch_one_video_by_url_v2_get_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_by_url_v2_api_v1_kuaishou_web_fetch_one_video_by_url_v2_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_one_video_by_url_v2_api_v1_kuaishou_web_fetch_one_video_by_url_v2_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/web/fetch_one_video_by_url_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_by_url_v2_api_v1_kuaishou_web_fetch_one_video_by_url_v2_get_0(self, url, **kwargs):  # noqa: E501
        """根据链接获取单个作品数据V2/Fetch single video by URL V2  # noqa: E501

        # [中文] ### 用途: - 根据链接获取单个作品数据V2 ### 参数: - url: 作品链接 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL V2 ### Parameters: - url: Photo URL ### Returns: - Video data  # [示例/Example] url = \"https://v.kuaishou.com/GKTpYm\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_by_url_v2_api_v1_kuaishou_web_fetch_one_video_by_url_v2_get_0(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_by_url_v2_api_v1_kuaishou_web_fetch_one_video_by_url_v2_get_0_with_http_info(url, **kwargs)  # noqa: E501

    def fetch_one_video_by_url_v2_api_v1_kuaishou_web_fetch_one_video_by_url_v2_get_0_with_http_info(self, url, **kwargs):  # noqa: E501
        """根据链接获取单个作品数据V2/Fetch single video by URL V2  # noqa: E501

        # [中文] ### 用途: - 根据链接获取单个作品数据V2 ### 参数: - url: 作品链接 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL V2 ### Parameters: - url: Photo URL ### Returns: - Video data  # [示例/Example] url = \"https://v.kuaishou.com/GKTpYm\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_by_url_v2_api_v1_kuaishou_web_fetch_one_video_by_url_v2_get_0_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_by_url_v2_api_v1_kuaishou_web_fetch_one_video_by_url_v2_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `fetch_one_video_by_url_v2_api_v1_kuaishou_web_fetch_one_video_by_url_v2_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/web/fetch_one_video_by_url_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_comment_api_v1_kuaishou_web_fetch_one_video_comment_get(self, photo_id, **kwargs):  # noqa: E501
        """获取单个作品评论数据/Get single video comment data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品评论数据 ### 参数: - photo_id: 作品ID - pcursor: 评论游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 评论数据  # [English] ### Purpose: - Fetch single video comment data ### Parameters: - photo_id: Photo ID - pcursor: Comment cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Comments data  # [示例/Example] photo_id = \"3x7gxp2zhgjv832\" pcursor = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_comment_api_v1_kuaishou_web_fetch_one_video_comment_get(photo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str photo_id: (required)
        :param str pcursor:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_comment_api_v1_kuaishou_web_fetch_one_video_comment_get_with_http_info(photo_id, **kwargs)  # noqa: E501

    def fetch_one_video_comment_api_v1_kuaishou_web_fetch_one_video_comment_get_with_http_info(self, photo_id, **kwargs):  # noqa: E501
        """获取单个作品评论数据/Get single video comment data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品评论数据 ### 参数: - photo_id: 作品ID - pcursor: 评论游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 评论数据  # [English] ### Purpose: - Fetch single video comment data ### Parameters: - photo_id: Photo ID - pcursor: Comment cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Comments data  # [示例/Example] photo_id = \"3x7gxp2zhgjv832\" pcursor = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_comment_api_v1_kuaishou_web_fetch_one_video_comment_get_with_http_info(photo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str photo_id: (required)
        :param str pcursor:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'photo_id',
            'pcursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_comment_api_v1_kuaishou_web_fetch_one_video_comment_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'photo_id' is set
        if self.api_client.client_side_validation and ('photo_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['photo_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `photo_id` when calling `fetch_one_video_comment_api_v1_kuaishou_web_fetch_one_video_comment_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'photo_id' in local_var_params and local_var_params['photo_id'] is not None:  # noqa: E501
            query_params.append(('photo_id', local_var_params['photo_id']))  # noqa: E501
        if 'pcursor' in local_var_params and local_var_params['pcursor'] is not None:  # noqa: E501
            query_params.append(('pcursor', local_var_params['pcursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/web/fetch_one_video_comment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_comment_api_v1_kuaishou_web_fetch_one_video_comment_get_0(self, photo_id, **kwargs):  # noqa: E501
        """获取单个作品评论数据/Get single video comment data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品评论数据 ### 参数: - photo_id: 作品ID - pcursor: 评论游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 评论数据  # [English] ### Purpose: - Fetch single video comment data ### Parameters: - photo_id: Photo ID - pcursor: Comment cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Comments data  # [示例/Example] photo_id = \"3x7gxp2zhgjv832\" pcursor = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_comment_api_v1_kuaishou_web_fetch_one_video_comment_get_0(photo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str photo_id: (required)
        :param str pcursor:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_comment_api_v1_kuaishou_web_fetch_one_video_comment_get_0_with_http_info(photo_id, **kwargs)  # noqa: E501

    def fetch_one_video_comment_api_v1_kuaishou_web_fetch_one_video_comment_get_0_with_http_info(self, photo_id, **kwargs):  # noqa: E501
        """获取单个作品评论数据/Get single video comment data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品评论数据 ### 参数: - photo_id: 作品ID - pcursor: 评论游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 评论数据  # [English] ### Purpose: - Fetch single video comment data ### Parameters: - photo_id: Photo ID - pcursor: Comment cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Comments data  # [示例/Example] photo_id = \"3x7gxp2zhgjv832\" pcursor = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_comment_api_v1_kuaishou_web_fetch_one_video_comment_get_0_with_http_info(photo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str photo_id: (required)
        :param str pcursor:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'photo_id',
            'pcursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_comment_api_v1_kuaishou_web_fetch_one_video_comment_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'photo_id' is set
        if self.api_client.client_side_validation and ('photo_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['photo_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `photo_id` when calling `fetch_one_video_comment_api_v1_kuaishou_web_fetch_one_video_comment_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'photo_id' in local_var_params and local_var_params['photo_id'] is not None:  # noqa: E501
            query_params.append(('photo_id', local_var_params['photo_id']))  # noqa: E501
        if 'pcursor' in local_var_params and local_var_params['pcursor'] is not None:  # noqa: E501
            query_params.append(('pcursor', local_var_params['pcursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/web/fetch_one_video_comment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_v2_api_v1_kuaishou_web_fetch_one_video_v2_get(self, photo_id, **kwargs):  # noqa: E501
        """快手单一视频查询接口V2/Kuaishou single video query API V2  # noqa: E501

        # [中文] ### 用途: - 快手单一视频查询接口V2 ### 参数: - photo_id: 作品ID，作品ID可以从作品链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Kuaishou single video query API V2 ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the photo link ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_v2_api_v1_kuaishou_web_fetch_one_video_v2_get(photo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str photo_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_v2_api_v1_kuaishou_web_fetch_one_video_v2_get_with_http_info(photo_id, **kwargs)  # noqa: E501

    def fetch_one_video_v2_api_v1_kuaishou_web_fetch_one_video_v2_get_with_http_info(self, photo_id, **kwargs):  # noqa: E501
        """快手单一视频查询接口V2/Kuaishou single video query API V2  # noqa: E501

        # [中文] ### 用途: - 快手单一视频查询接口V2 ### 参数: - photo_id: 作品ID，作品ID可以从作品链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Kuaishou single video query API V2 ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the photo link ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_v2_api_v1_kuaishou_web_fetch_one_video_v2_get_with_http_info(photo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str photo_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'photo_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_v2_api_v1_kuaishou_web_fetch_one_video_v2_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'photo_id' is set
        if self.api_client.client_side_validation and ('photo_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['photo_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `photo_id` when calling `fetch_one_video_v2_api_v1_kuaishou_web_fetch_one_video_v2_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'photo_id' in local_var_params and local_var_params['photo_id'] is not None:  # noqa: E501
            query_params.append(('photo_id', local_var_params['photo_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/web/fetch_one_video_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_v2_api_v1_kuaishou_web_fetch_one_video_v2_get_0(self, photo_id, **kwargs):  # noqa: E501
        """快手单一视频查询接口V2/Kuaishou single video query API V2  # noqa: E501

        # [中文] ### 用途: - 快手单一视频查询接口V2 ### 参数: - photo_id: 作品ID，作品ID可以从作品链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Kuaishou single video query API V2 ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the photo link ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_v2_api_v1_kuaishou_web_fetch_one_video_v2_get_0(photo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str photo_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_v2_api_v1_kuaishou_web_fetch_one_video_v2_get_0_with_http_info(photo_id, **kwargs)  # noqa: E501

    def fetch_one_video_v2_api_v1_kuaishou_web_fetch_one_video_v2_get_0_with_http_info(self, photo_id, **kwargs):  # noqa: E501
        """快手单一视频查询接口V2/Kuaishou single video query API V2  # noqa: E501

        # [中文] ### 用途: - 快手单一视频查询接口V2 ### 参数: - photo_id: 作品ID，作品ID可以从作品链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Kuaishou single video query API V2 ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the photo link ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_v2_api_v1_kuaishou_web_fetch_one_video_v2_get_0_with_http_info(photo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str photo_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'photo_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_v2_api_v1_kuaishou_web_fetch_one_video_v2_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'photo_id' is set
        if self.api_client.client_side_validation and ('photo_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['photo_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `photo_id` when calling `fetch_one_video_v2_api_v1_kuaishou_web_fetch_one_video_v2_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'photo_id' in local_var_params and local_var_params['photo_id'] is not None:  # noqa: E501
            query_params.append(('photo_id', local_var_params['photo_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/web/fetch_one_video_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_info_api_v1_kuaishou_web_fetch_user_info_get(self, share_text, **kwargs):  # noqa: E501
        """获取主页信息数据/Get home page info data  # noqa: E501

        # [中文] ### 用途: - 获取主页信息数据 ### 参数: - share_text: APP用户主页分享链接 ### 返回: - 主页信息数据  # [English] ### Purpose: - Fetch home page info data ### Parameters: - share_text: APP user home page share link ### Returns: - Home page info data  # [示例/Example] share_text = \"https://v.kuaishou.com/2LS90E\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_api_v1_kuaishou_web_fetch_user_info_get(share_text, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_text: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_info_api_v1_kuaishou_web_fetch_user_info_get_with_http_info(share_text, **kwargs)  # noqa: E501

    def fetch_user_info_api_v1_kuaishou_web_fetch_user_info_get_with_http_info(self, share_text, **kwargs):  # noqa: E501
        """获取主页信息数据/Get home page info data  # noqa: E501

        # [中文] ### 用途: - 获取主页信息数据 ### 参数: - share_text: APP用户主页分享链接 ### 返回: - 主页信息数据  # [English] ### Purpose: - Fetch home page info data ### Parameters: - share_text: APP user home page share link ### Returns: - Home page info data  # [示例/Example] share_text = \"https://v.kuaishou.com/2LS90E\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_api_v1_kuaishou_web_fetch_user_info_get_with_http_info(share_text, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_text: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'share_text'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_info_api_v1_kuaishou_web_fetch_user_info_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'share_text' is set
        if self.api_client.client_side_validation and ('share_text' not in local_var_params or  # noqa: E501
                                                        local_var_params['share_text'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `share_text` when calling `fetch_user_info_api_v1_kuaishou_web_fetch_user_info_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'share_text' in local_var_params and local_var_params['share_text'] is not None:  # noqa: E501
            query_params.append(('share_text', local_var_params['share_text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/web/fetch_user_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_info_api_v1_kuaishou_web_fetch_user_info_get_0(self, share_text, **kwargs):  # noqa: E501
        """获取主页信息数据/Get home page info data  # noqa: E501

        # [中文] ### 用途: - 获取主页信息数据 ### 参数: - share_text: APP用户主页分享链接 ### 返回: - 主页信息数据  # [English] ### Purpose: - Fetch home page info data ### Parameters: - share_text: APP user home page share link ### Returns: - Home page info data  # [示例/Example] share_text = \"https://v.kuaishou.com/2LS90E\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_api_v1_kuaishou_web_fetch_user_info_get_0(share_text, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_text: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_info_api_v1_kuaishou_web_fetch_user_info_get_0_with_http_info(share_text, **kwargs)  # noqa: E501

    def fetch_user_info_api_v1_kuaishou_web_fetch_user_info_get_0_with_http_info(self, share_text, **kwargs):  # noqa: E501
        """获取主页信息数据/Get home page info data  # noqa: E501

        # [中文] ### 用途: - 获取主页信息数据 ### 参数: - share_text: APP用户主页分享链接 ### 返回: - 主页信息数据  # [English] ### Purpose: - Fetch home page info data ### Parameters: - share_text: APP user home page share link ### Returns: - Home page info data  # [示例/Example] share_text = \"https://v.kuaishou.com/2LS90E\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_info_api_v1_kuaishou_web_fetch_user_info_get_0_with_http_info(share_text, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_text: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'share_text'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_info_api_v1_kuaishou_web_fetch_user_info_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'share_text' is set
        if self.api_client.client_side_validation and ('share_text' not in local_var_params or  # noqa: E501
                                                        local_var_params['share_text'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `share_text` when calling `fetch_user_info_api_v1_kuaishou_web_fetch_user_info_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'share_text' in local_var_params and local_var_params['share_text'] is not None:  # noqa: E501
            query_params.append(('share_text', local_var_params['share_text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/web/fetch_user_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
