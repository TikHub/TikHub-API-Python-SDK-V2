# coding: utf-8

"""
    TikHub.io - Your Ultimate Social Media Data & API Marketplace

    High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tikhub_sdk_v2.api_client import ApiClient
from tikhub_sdk_v2.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class TikHubUserAPIApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def calculate_price_api_v1_tikhub_user_calculate_price_get(self, endpoint, **kwargs):  # noqa: E501
        """计算价格/Calculate price  # noqa: E501

        # [中文] ### 用途: - 根据用户输入的每日请求次数以及端点信息计算最终价格。 ### 参数: - endpoint: 请求的端点，用于查询端点的原始请求单价 - request_per_day: 每日请求次数，用于计算价格，将自动根据阶梯式计费的折扣百分比计算最终价格 ### 计算公式: - 总成本 = ∑ (阶梯内请求次数 * 阶梯折后单价) - 其中，阶梯折后单价 = 基础价格 * (1 - 折扣) ### 详细计算步骤: 1. **初始化总成本**：    总成本=0 2. **遍历每个阶梯**：    * 对于每个阶梯，计算该阶梯内的请求次数。    * 计算该阶梯内的折后单价。    * 计算该阶梯内的总费用，并累加到总成本中。    * 更新剩余的请求次数。 ### 数学表示: > 设有 𝑛 个阶梯，每个阶梯的参数为： * min_rpd𝑖: 第 𝑖 个阶梯的最小请求次数 * max_rpd𝑖: 第 𝑖 个阶梯的最大请求次数 * discount𝑖: 第 𝑖 个阶梯的折扣（百分比形式） * base_price：基础价格 * request_per_day：每日请求次数 > 那么，总成本的计算公式如下： - 总成本 = Σ𝑖=1𝑛（阶梯𝑖中的请求数量 * 阶梯𝑖中的折扣单价） - 其中，阶梯折扣单价 𝑖 = base_price * (1 - 折扣𝑖/100) - 该阶梯中的请求数 𝑖 = min(request_per_day - 累计付费请求数, max_rpd𝑖 - min_rpd𝑖) ### 示例 > 假设有以下定价阶梯： * 第 1 阶梯：0 ≤ rpd < 1000，折扣 0% * 第 2 阶梯：1000 ≤ rpd < 5000，折扣 10% * 第 3 阶梯：5000 ≤ rpd < 10000，折扣 20% * 第 4 阶梯：10000 ≤ rpd < 20000，折扣 30% * 第 5 阶梯：20000 ≤ rpd < 30000，折扣 40% * 第 6 阶梯：30000 ≤ rpd，折扣 50% > 假设基础价格为 0.001 USD，每日请求次数为 12000，则计算过程如下： 1. **第 1 阶梯**（0 ≤ rpd < 1000）：    * 阶梯内请求次数=1000−0=1000    * 阶梯折后单价=0.001×(1−0/100)=0.001    * 总成本=1000×0.001=1 2. **第 2 阶梯**（1000 ≤ rpd < 5000）：    * 阶梯内请求次数=5000−1000=4000    * 阶梯折后单价=0.001×(1−10/100)=0.0009    * 总成本=4000×0.0009=3.6 3. **第 3 阶梯**（5000 ≤ rpd < 10000）：    * 阶梯内请求次数=10000−5000=5000    * 阶梯折后单价=0.001×(1−20/100)=0.0008    * 总成本=5000×0.0008=4 4. **第 4 阶梯**（10000 ≤ rpd < 20000）：    * 阶梯内请求次数=12000−10000=2000    * 阶梯折后单价=0.001×(1−30/100)=0.0007    * 总成本=2000×0.0007=1.4 5. **累加总成本**：    * 总成本=1+3.6+4+1.4=10 ### 返回: - 端点uri - 每日请求次数 - 端点原始请求单价 - 总价格 - 货币单位 - 阶梯式计费的折扣百分比信息  # [English] ### Purpose: - Calculate the final price based on the user's input of the number of daily requests and endpoint information. - Price calculation formula: Price = Number of daily requests * (Original request unit price of the endpoint * (1 - discount percentage of tiered billing)) ### Parameters: - endpoint: Requested endpoint, used to query the original request unit price of the endpoint - request_per_day: Number of daily requests, used to calculate the price, the final price will be calculated automatically based on the discount percentage of the tiered billing ### Calculation formula: - Total cost = ∑ (Number of requests in the tier * Discounted unit price in the tier) - Where, Discounted unit price in the tier = Base price * (1 - Discount) ### Detailed calculation steps: 1. **Initialize the total cost**:      Total cost = 0 2. **Traverse each tier**:         * For each tier, calculate the number of requests in the tier.         * Calculate the discounted unit price in the tier.         * Calculate the total cost in the tier and add it to the total cost.         * Update the remaining number of requests. ### Mathematical representation: Suppose there are 𝑛 tiers, and the parameters of each tier are: * min_rpd𝑖: The minimum number of requests in the 𝑖-th tier * max_rpd𝑖: The maximum number of requests in the 𝑖-th tier * discount𝑖: The discount of the 𝑖-th tier (in percentage form) * base_price: Base price * request_per_day: Number of daily requests > Then, the formula for calculating the total cost is as follows: - Total cost = ∑𝑖=1𝑛(Number of requests in the tier 𝑖 * Discounted unit price in the tier 𝑖) - Where, Discounted unit price in the tier 𝑖 = base_price * (1 - discount𝑖/100) - Number of requests in the tier 𝑖 = min(request_per_day - accumulated number of paid requests, max_rpd𝑖 - min_rpd𝑖) ### Example Suppose there are the following pricing tiers: * Tier 1: 0 ≤ rpd < 1000, discount 0% * Tier 2: 1000 ≤ rpd < 5000, discount 10% * Tier 3: 5000 ≤ rpd < 10000, discount 20% * Tier 4: 10000 ≤ rpd < 20000, discount 30% * Tier 5: 20000 ≤ rpd < 30000, discount 40% * Tier 6: 30000 ≤ rpd, discount 50% > Suppose the base price is 0.001 USD and the number of daily requests is 12000, the calculation process is as follows: 1. **Tier 1** (0 ≤ rpd < 1000):      - Number of requests in the tier 1 = 1000 - 0 = 1000      - Discounted unit price in the tier 1 = 0.001 * (1 - 0/100) = 0.001      - Total cost 1 = 1000 * 0.001 = 1 2. **Tier 2** (1000 ≤ rpd < 5000):     - Number of requests in the tier 2 = 5000 - 1000 = 4000     - Discounted unit price in the tier 2 = 0.001 * (1 - 10/100) = 0.0009     - Total cost 2 = 4000 * 0.0009 = 3.6 3. **Tier 3** (5000 ≤ rpd < 10000):     - Number of requests in the tier 3 = 10000 - 5000 = 5000     - Discounted unit price in the tier 3 = 0.001 * (1 - 20/100) = 0.0008     - Total cost 3 = 5000 * 0.0008 = 4 4. **Tier 4** (10000 ≤ rpd < 20000):     - Number of requests in the tier 4 = 12000 - 10000 = 2000     - Discounted unit price in the tier 4 = 0.001 * (1 - 30/100) = 0.0007     - Total cost 4 = 2000 * 0.0007 = 1.4 5. **Accumulated total cost**:     - Total cost = 1 + 3.6 + 4 + 1.4 = 10 ### Return: - Endpoint uri - Number of daily requests - Original request unit price of the endpoint - Total price - Currency unit - Discount percentage information of tiered billing  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.calculate_price_api_v1_tikhub_user_calculate_price_get(endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str endpoint: 请求的端点/Requested endpoint (required)
        :param int request_per_day: 每日请求次数/Request per day
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.calculate_price_api_v1_tikhub_user_calculate_price_get_with_http_info(endpoint, **kwargs)  # noqa: E501

    def calculate_price_api_v1_tikhub_user_calculate_price_get_with_http_info(self, endpoint, **kwargs):  # noqa: E501
        """计算价格/Calculate price  # noqa: E501

        # [中文] ### 用途: - 根据用户输入的每日请求次数以及端点信息计算最终价格。 ### 参数: - endpoint: 请求的端点，用于查询端点的原始请求单价 - request_per_day: 每日请求次数，用于计算价格，将自动根据阶梯式计费的折扣百分比计算最终价格 ### 计算公式: - 总成本 = ∑ (阶梯内请求次数 * 阶梯折后单价) - 其中，阶梯折后单价 = 基础价格 * (1 - 折扣) ### 详细计算步骤: 1. **初始化总成本**：    总成本=0 2. **遍历每个阶梯**：    * 对于每个阶梯，计算该阶梯内的请求次数。    * 计算该阶梯内的折后单价。    * 计算该阶梯内的总费用，并累加到总成本中。    * 更新剩余的请求次数。 ### 数学表示: > 设有 𝑛 个阶梯，每个阶梯的参数为： * min_rpd𝑖: 第 𝑖 个阶梯的最小请求次数 * max_rpd𝑖: 第 𝑖 个阶梯的最大请求次数 * discount𝑖: 第 𝑖 个阶梯的折扣（百分比形式） * base_price：基础价格 * request_per_day：每日请求次数 > 那么，总成本的计算公式如下： - 总成本 = Σ𝑖=1𝑛（阶梯𝑖中的请求数量 * 阶梯𝑖中的折扣单价） - 其中，阶梯折扣单价 𝑖 = base_price * (1 - 折扣𝑖/100) - 该阶梯中的请求数 𝑖 = min(request_per_day - 累计付费请求数, max_rpd𝑖 - min_rpd𝑖) ### 示例 > 假设有以下定价阶梯： * 第 1 阶梯：0 ≤ rpd < 1000，折扣 0% * 第 2 阶梯：1000 ≤ rpd < 5000，折扣 10% * 第 3 阶梯：5000 ≤ rpd < 10000，折扣 20% * 第 4 阶梯：10000 ≤ rpd < 20000，折扣 30% * 第 5 阶梯：20000 ≤ rpd < 30000，折扣 40% * 第 6 阶梯：30000 ≤ rpd，折扣 50% > 假设基础价格为 0.001 USD，每日请求次数为 12000，则计算过程如下： 1. **第 1 阶梯**（0 ≤ rpd < 1000）：    * 阶梯内请求次数=1000−0=1000    * 阶梯折后单价=0.001×(1−0/100)=0.001    * 总成本=1000×0.001=1 2. **第 2 阶梯**（1000 ≤ rpd < 5000）：    * 阶梯内请求次数=5000−1000=4000    * 阶梯折后单价=0.001×(1−10/100)=0.0009    * 总成本=4000×0.0009=3.6 3. **第 3 阶梯**（5000 ≤ rpd < 10000）：    * 阶梯内请求次数=10000−5000=5000    * 阶梯折后单价=0.001×(1−20/100)=0.0008    * 总成本=5000×0.0008=4 4. **第 4 阶梯**（10000 ≤ rpd < 20000）：    * 阶梯内请求次数=12000−10000=2000    * 阶梯折后单价=0.001×(1−30/100)=0.0007    * 总成本=2000×0.0007=1.4 5. **累加总成本**：    * 总成本=1+3.6+4+1.4=10 ### 返回: - 端点uri - 每日请求次数 - 端点原始请求单价 - 总价格 - 货币单位 - 阶梯式计费的折扣百分比信息  # [English] ### Purpose: - Calculate the final price based on the user's input of the number of daily requests and endpoint information. - Price calculation formula: Price = Number of daily requests * (Original request unit price of the endpoint * (1 - discount percentage of tiered billing)) ### Parameters: - endpoint: Requested endpoint, used to query the original request unit price of the endpoint - request_per_day: Number of daily requests, used to calculate the price, the final price will be calculated automatically based on the discount percentage of the tiered billing ### Calculation formula: - Total cost = ∑ (Number of requests in the tier * Discounted unit price in the tier) - Where, Discounted unit price in the tier = Base price * (1 - Discount) ### Detailed calculation steps: 1. **Initialize the total cost**:      Total cost = 0 2. **Traverse each tier**:         * For each tier, calculate the number of requests in the tier.         * Calculate the discounted unit price in the tier.         * Calculate the total cost in the tier and add it to the total cost.         * Update the remaining number of requests. ### Mathematical representation: Suppose there are 𝑛 tiers, and the parameters of each tier are: * min_rpd𝑖: The minimum number of requests in the 𝑖-th tier * max_rpd𝑖: The maximum number of requests in the 𝑖-th tier * discount𝑖: The discount of the 𝑖-th tier (in percentage form) * base_price: Base price * request_per_day: Number of daily requests > Then, the formula for calculating the total cost is as follows: - Total cost = ∑𝑖=1𝑛(Number of requests in the tier 𝑖 * Discounted unit price in the tier 𝑖) - Where, Discounted unit price in the tier 𝑖 = base_price * (1 - discount𝑖/100) - Number of requests in the tier 𝑖 = min(request_per_day - accumulated number of paid requests, max_rpd𝑖 - min_rpd𝑖) ### Example Suppose there are the following pricing tiers: * Tier 1: 0 ≤ rpd < 1000, discount 0% * Tier 2: 1000 ≤ rpd < 5000, discount 10% * Tier 3: 5000 ≤ rpd < 10000, discount 20% * Tier 4: 10000 ≤ rpd < 20000, discount 30% * Tier 5: 20000 ≤ rpd < 30000, discount 40% * Tier 6: 30000 ≤ rpd, discount 50% > Suppose the base price is 0.001 USD and the number of daily requests is 12000, the calculation process is as follows: 1. **Tier 1** (0 ≤ rpd < 1000):      - Number of requests in the tier 1 = 1000 - 0 = 1000      - Discounted unit price in the tier 1 = 0.001 * (1 - 0/100) = 0.001      - Total cost 1 = 1000 * 0.001 = 1 2. **Tier 2** (1000 ≤ rpd < 5000):     - Number of requests in the tier 2 = 5000 - 1000 = 4000     - Discounted unit price in the tier 2 = 0.001 * (1 - 10/100) = 0.0009     - Total cost 2 = 4000 * 0.0009 = 3.6 3. **Tier 3** (5000 ≤ rpd < 10000):     - Number of requests in the tier 3 = 10000 - 5000 = 5000     - Discounted unit price in the tier 3 = 0.001 * (1 - 20/100) = 0.0008     - Total cost 3 = 5000 * 0.0008 = 4 4. **Tier 4** (10000 ≤ rpd < 20000):     - Number of requests in the tier 4 = 12000 - 10000 = 2000     - Discounted unit price in the tier 4 = 0.001 * (1 - 30/100) = 0.0007     - Total cost 4 = 2000 * 0.0007 = 1.4 5. **Accumulated total cost**:     - Total cost = 1 + 3.6 + 4 + 1.4 = 10 ### Return: - Endpoint uri - Number of daily requests - Original request unit price of the endpoint - Total price - Currency unit - Discount percentage information of tiered billing  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.calculate_price_api_v1_tikhub_user_calculate_price_get_with_http_info(endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str endpoint: 请求的端点/Requested endpoint (required)
        :param int request_per_day: 每日请求次数/Request per day
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'endpoint',
            'request_per_day'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calculate_price_api_v1_tikhub_user_calculate_price_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'endpoint' is set
        if self.api_client.client_side_validation and ('endpoint' not in local_var_params or  # noqa: E501
                                                        local_var_params['endpoint'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `endpoint` when calling `calculate_price_api_v1_tikhub_user_calculate_price_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'endpoint' in local_var_params and local_var_params['endpoint'] is not None:  # noqa: E501
            query_params.append(('endpoint', local_var_params['endpoint']))  # noqa: E501
        if 'request_per_day' in local_var_params and local_var_params['request_per_day'] is not None:  # noqa: E501
            query_params.append(('request_per_day', local_var_params['request_per_day']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tikhub/user/calculate_price', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def calculate_price_api_v1_tikhub_user_calculate_price_get_0(self, endpoint, **kwargs):  # noqa: E501
        """计算价格/Calculate price  # noqa: E501

        # [中文] ### 用途: - 根据用户输入的每日请求次数以及端点信息计算最终价格。 ### 参数: - endpoint: 请求的端点，用于查询端点的原始请求单价 - request_per_day: 每日请求次数，用于计算价格，将自动根据阶梯式计费的折扣百分比计算最终价格 ### 计算公式: - 总成本 = ∑ (阶梯内请求次数 * 阶梯折后单价) - 其中，阶梯折后单价 = 基础价格 * (1 - 折扣) ### 详细计算步骤: 1. **初始化总成本**：    总成本=0 2. **遍历每个阶梯**：    * 对于每个阶梯，计算该阶梯内的请求次数。    * 计算该阶梯内的折后单价。    * 计算该阶梯内的总费用，并累加到总成本中。    * 更新剩余的请求次数。 ### 数学表示: > 设有 𝑛 个阶梯，每个阶梯的参数为： * min_rpd𝑖: 第 𝑖 个阶梯的最小请求次数 * max_rpd𝑖: 第 𝑖 个阶梯的最大请求次数 * discount𝑖: 第 𝑖 个阶梯的折扣（百分比形式） * base_price：基础价格 * request_per_day：每日请求次数 > 那么，总成本的计算公式如下： - 总成本 = Σ𝑖=1𝑛（阶梯𝑖中的请求数量 * 阶梯𝑖中的折扣单价） - 其中，阶梯折扣单价 𝑖 = base_price * (1 - 折扣𝑖/100) - 该阶梯中的请求数 𝑖 = min(request_per_day - 累计付费请求数, max_rpd𝑖 - min_rpd𝑖) ### 示例 > 假设有以下定价阶梯： * 第 1 阶梯：0 ≤ rpd < 1000，折扣 0% * 第 2 阶梯：1000 ≤ rpd < 5000，折扣 10% * 第 3 阶梯：5000 ≤ rpd < 10000，折扣 20% * 第 4 阶梯：10000 ≤ rpd < 20000，折扣 30% * 第 5 阶梯：20000 ≤ rpd < 30000，折扣 40% * 第 6 阶梯：30000 ≤ rpd，折扣 50% > 假设基础价格为 0.001 USD，每日请求次数为 12000，则计算过程如下： 1. **第 1 阶梯**（0 ≤ rpd < 1000）：    * 阶梯内请求次数=1000−0=1000    * 阶梯折后单价=0.001×(1−0/100)=0.001    * 总成本=1000×0.001=1 2. **第 2 阶梯**（1000 ≤ rpd < 5000）：    * 阶梯内请求次数=5000−1000=4000    * 阶梯折后单价=0.001×(1−10/100)=0.0009    * 总成本=4000×0.0009=3.6 3. **第 3 阶梯**（5000 ≤ rpd < 10000）：    * 阶梯内请求次数=10000−5000=5000    * 阶梯折后单价=0.001×(1−20/100)=0.0008    * 总成本=5000×0.0008=4 4. **第 4 阶梯**（10000 ≤ rpd < 20000）：    * 阶梯内请求次数=12000−10000=2000    * 阶梯折后单价=0.001×(1−30/100)=0.0007    * 总成本=2000×0.0007=1.4 5. **累加总成本**：    * 总成本=1+3.6+4+1.4=10 ### 返回: - 端点uri - 每日请求次数 - 端点原始请求单价 - 总价格 - 货币单位 - 阶梯式计费的折扣百分比信息  # [English] ### Purpose: - Calculate the final price based on the user's input of the number of daily requests and endpoint information. - Price calculation formula: Price = Number of daily requests * (Original request unit price of the endpoint * (1 - discount percentage of tiered billing)) ### Parameters: - endpoint: Requested endpoint, used to query the original request unit price of the endpoint - request_per_day: Number of daily requests, used to calculate the price, the final price will be calculated automatically based on the discount percentage of the tiered billing ### Calculation formula: - Total cost = ∑ (Number of requests in the tier * Discounted unit price in the tier) - Where, Discounted unit price in the tier = Base price * (1 - Discount) ### Detailed calculation steps: 1. **Initialize the total cost**:      Total cost = 0 2. **Traverse each tier**:         * For each tier, calculate the number of requests in the tier.         * Calculate the discounted unit price in the tier.         * Calculate the total cost in the tier and add it to the total cost.         * Update the remaining number of requests. ### Mathematical representation: Suppose there are 𝑛 tiers, and the parameters of each tier are: * min_rpd𝑖: The minimum number of requests in the 𝑖-th tier * max_rpd𝑖: The maximum number of requests in the 𝑖-th tier * discount𝑖: The discount of the 𝑖-th tier (in percentage form) * base_price: Base price * request_per_day: Number of daily requests > Then, the formula for calculating the total cost is as follows: - Total cost = ∑𝑖=1𝑛(Number of requests in the tier 𝑖 * Discounted unit price in the tier 𝑖) - Where, Discounted unit price in the tier 𝑖 = base_price * (1 - discount𝑖/100) - Number of requests in the tier 𝑖 = min(request_per_day - accumulated number of paid requests, max_rpd𝑖 - min_rpd𝑖) ### Example Suppose there are the following pricing tiers: * Tier 1: 0 ≤ rpd < 1000, discount 0% * Tier 2: 1000 ≤ rpd < 5000, discount 10% * Tier 3: 5000 ≤ rpd < 10000, discount 20% * Tier 4: 10000 ≤ rpd < 20000, discount 30% * Tier 5: 20000 ≤ rpd < 30000, discount 40% * Tier 6: 30000 ≤ rpd, discount 50% > Suppose the base price is 0.001 USD and the number of daily requests is 12000, the calculation process is as follows: 1. **Tier 1** (0 ≤ rpd < 1000):      - Number of requests in the tier 1 = 1000 - 0 = 1000      - Discounted unit price in the tier 1 = 0.001 * (1 - 0/100) = 0.001      - Total cost 1 = 1000 * 0.001 = 1 2. **Tier 2** (1000 ≤ rpd < 5000):     - Number of requests in the tier 2 = 5000 - 1000 = 4000     - Discounted unit price in the tier 2 = 0.001 * (1 - 10/100) = 0.0009     - Total cost 2 = 4000 * 0.0009 = 3.6 3. **Tier 3** (5000 ≤ rpd < 10000):     - Number of requests in the tier 3 = 10000 - 5000 = 5000     - Discounted unit price in the tier 3 = 0.001 * (1 - 20/100) = 0.0008     - Total cost 3 = 5000 * 0.0008 = 4 4. **Tier 4** (10000 ≤ rpd < 20000):     - Number of requests in the tier 4 = 12000 - 10000 = 2000     - Discounted unit price in the tier 4 = 0.001 * (1 - 30/100) = 0.0007     - Total cost 4 = 2000 * 0.0007 = 1.4 5. **Accumulated total cost**:     - Total cost = 1 + 3.6 + 4 + 1.4 = 10 ### Return: - Endpoint uri - Number of daily requests - Original request unit price of the endpoint - Total price - Currency unit - Discount percentage information of tiered billing  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.calculate_price_api_v1_tikhub_user_calculate_price_get_0(endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str endpoint: 请求的端点/Requested endpoint (required)
        :param int request_per_day: 每日请求次数/Request per day
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.calculate_price_api_v1_tikhub_user_calculate_price_get_0_with_http_info(endpoint, **kwargs)  # noqa: E501

    def calculate_price_api_v1_tikhub_user_calculate_price_get_0_with_http_info(self, endpoint, **kwargs):  # noqa: E501
        """计算价格/Calculate price  # noqa: E501

        # [中文] ### 用途: - 根据用户输入的每日请求次数以及端点信息计算最终价格。 ### 参数: - endpoint: 请求的端点，用于查询端点的原始请求单价 - request_per_day: 每日请求次数，用于计算价格，将自动根据阶梯式计费的折扣百分比计算最终价格 ### 计算公式: - 总成本 = ∑ (阶梯内请求次数 * 阶梯折后单价) - 其中，阶梯折后单价 = 基础价格 * (1 - 折扣) ### 详细计算步骤: 1. **初始化总成本**：    总成本=0 2. **遍历每个阶梯**：    * 对于每个阶梯，计算该阶梯内的请求次数。    * 计算该阶梯内的折后单价。    * 计算该阶梯内的总费用，并累加到总成本中。    * 更新剩余的请求次数。 ### 数学表示: > 设有 𝑛 个阶梯，每个阶梯的参数为： * min_rpd𝑖: 第 𝑖 个阶梯的最小请求次数 * max_rpd𝑖: 第 𝑖 个阶梯的最大请求次数 * discount𝑖: 第 𝑖 个阶梯的折扣（百分比形式） * base_price：基础价格 * request_per_day：每日请求次数 > 那么，总成本的计算公式如下： - 总成本 = Σ𝑖=1𝑛（阶梯𝑖中的请求数量 * 阶梯𝑖中的折扣单价） - 其中，阶梯折扣单价 𝑖 = base_price * (1 - 折扣𝑖/100) - 该阶梯中的请求数 𝑖 = min(request_per_day - 累计付费请求数, max_rpd𝑖 - min_rpd𝑖) ### 示例 > 假设有以下定价阶梯： * 第 1 阶梯：0 ≤ rpd < 1000，折扣 0% * 第 2 阶梯：1000 ≤ rpd < 5000，折扣 10% * 第 3 阶梯：5000 ≤ rpd < 10000，折扣 20% * 第 4 阶梯：10000 ≤ rpd < 20000，折扣 30% * 第 5 阶梯：20000 ≤ rpd < 30000，折扣 40% * 第 6 阶梯：30000 ≤ rpd，折扣 50% > 假设基础价格为 0.001 USD，每日请求次数为 12000，则计算过程如下： 1. **第 1 阶梯**（0 ≤ rpd < 1000）：    * 阶梯内请求次数=1000−0=1000    * 阶梯折后单价=0.001×(1−0/100)=0.001    * 总成本=1000×0.001=1 2. **第 2 阶梯**（1000 ≤ rpd < 5000）：    * 阶梯内请求次数=5000−1000=4000    * 阶梯折后单价=0.001×(1−10/100)=0.0009    * 总成本=4000×0.0009=3.6 3. **第 3 阶梯**（5000 ≤ rpd < 10000）：    * 阶梯内请求次数=10000−5000=5000    * 阶梯折后单价=0.001×(1−20/100)=0.0008    * 总成本=5000×0.0008=4 4. **第 4 阶梯**（10000 ≤ rpd < 20000）：    * 阶梯内请求次数=12000−10000=2000    * 阶梯折后单价=0.001×(1−30/100)=0.0007    * 总成本=2000×0.0007=1.4 5. **累加总成本**：    * 总成本=1+3.6+4+1.4=10 ### 返回: - 端点uri - 每日请求次数 - 端点原始请求单价 - 总价格 - 货币单位 - 阶梯式计费的折扣百分比信息  # [English] ### Purpose: - Calculate the final price based on the user's input of the number of daily requests and endpoint information. - Price calculation formula: Price = Number of daily requests * (Original request unit price of the endpoint * (1 - discount percentage of tiered billing)) ### Parameters: - endpoint: Requested endpoint, used to query the original request unit price of the endpoint - request_per_day: Number of daily requests, used to calculate the price, the final price will be calculated automatically based on the discount percentage of the tiered billing ### Calculation formula: - Total cost = ∑ (Number of requests in the tier * Discounted unit price in the tier) - Where, Discounted unit price in the tier = Base price * (1 - Discount) ### Detailed calculation steps: 1. **Initialize the total cost**:      Total cost = 0 2. **Traverse each tier**:         * For each tier, calculate the number of requests in the tier.         * Calculate the discounted unit price in the tier.         * Calculate the total cost in the tier and add it to the total cost.         * Update the remaining number of requests. ### Mathematical representation: Suppose there are 𝑛 tiers, and the parameters of each tier are: * min_rpd𝑖: The minimum number of requests in the 𝑖-th tier * max_rpd𝑖: The maximum number of requests in the 𝑖-th tier * discount𝑖: The discount of the 𝑖-th tier (in percentage form) * base_price: Base price * request_per_day: Number of daily requests > Then, the formula for calculating the total cost is as follows: - Total cost = ∑𝑖=1𝑛(Number of requests in the tier 𝑖 * Discounted unit price in the tier 𝑖) - Where, Discounted unit price in the tier 𝑖 = base_price * (1 - discount𝑖/100) - Number of requests in the tier 𝑖 = min(request_per_day - accumulated number of paid requests, max_rpd𝑖 - min_rpd𝑖) ### Example Suppose there are the following pricing tiers: * Tier 1: 0 ≤ rpd < 1000, discount 0% * Tier 2: 1000 ≤ rpd < 5000, discount 10% * Tier 3: 5000 ≤ rpd < 10000, discount 20% * Tier 4: 10000 ≤ rpd < 20000, discount 30% * Tier 5: 20000 ≤ rpd < 30000, discount 40% * Tier 6: 30000 ≤ rpd, discount 50% > Suppose the base price is 0.001 USD and the number of daily requests is 12000, the calculation process is as follows: 1. **Tier 1** (0 ≤ rpd < 1000):      - Number of requests in the tier 1 = 1000 - 0 = 1000      - Discounted unit price in the tier 1 = 0.001 * (1 - 0/100) = 0.001      - Total cost 1 = 1000 * 0.001 = 1 2. **Tier 2** (1000 ≤ rpd < 5000):     - Number of requests in the tier 2 = 5000 - 1000 = 4000     - Discounted unit price in the tier 2 = 0.001 * (1 - 10/100) = 0.0009     - Total cost 2 = 4000 * 0.0009 = 3.6 3. **Tier 3** (5000 ≤ rpd < 10000):     - Number of requests in the tier 3 = 10000 - 5000 = 5000     - Discounted unit price in the tier 3 = 0.001 * (1 - 20/100) = 0.0008     - Total cost 3 = 5000 * 0.0008 = 4 4. **Tier 4** (10000 ≤ rpd < 20000):     - Number of requests in the tier 4 = 12000 - 10000 = 2000     - Discounted unit price in the tier 4 = 0.001 * (1 - 30/100) = 0.0007     - Total cost 4 = 2000 * 0.0007 = 1.4 5. **Accumulated total cost**:     - Total cost = 1 + 3.6 + 4 + 1.4 = 10 ### Return: - Endpoint uri - Number of daily requests - Original request unit price of the endpoint - Total price - Currency unit - Discount percentage information of tiered billing  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.calculate_price_api_v1_tikhub_user_calculate_price_get_0_with_http_info(endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str endpoint: 请求的端点/Requested endpoint (required)
        :param int request_per_day: 每日请求次数/Request per day
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'endpoint',
            'request_per_day'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method calculate_price_api_v1_tikhub_user_calculate_price_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'endpoint' is set
        if self.api_client.client_side_validation and ('endpoint' not in local_var_params or  # noqa: E501
                                                        local_var_params['endpoint'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `endpoint` when calling `calculate_price_api_v1_tikhub_user_calculate_price_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'endpoint' in local_var_params and local_var_params['endpoint'] is not None:  # noqa: E501
            query_params.append(('endpoint', local_var_params['endpoint']))  # noqa: E501
        if 'request_per_day' in local_var_params and local_var_params['request_per_day'] is not None:  # noqa: E501
            query_params.append(('request_per_day', local_var_params['request_per_day']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tikhub/user/calculate_price', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_endpoints_info_api_v1_tikhub_user_get_all_endpoints_info_get(self, **kwargs):  # noqa: E501
        """获取所有端点信息/Get all endpoints information  # noqa: E501

        # [中文] ### 用途: - 获取所有端点信息 ### 返回: - 所有端点信息  # [English] ### Purpose: - Get all endpoints information ### Return: - All endpoints information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_endpoints_info_api_v1_tikhub_user_get_all_endpoints_info_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_endpoints_info_api_v1_tikhub_user_get_all_endpoints_info_get_with_http_info(**kwargs)  # noqa: E501

    def get_all_endpoints_info_api_v1_tikhub_user_get_all_endpoints_info_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取所有端点信息/Get all endpoints information  # noqa: E501

        # [中文] ### 用途: - 获取所有端点信息 ### 返回: - 所有端点信息  # [English] ### Purpose: - Get all endpoints information ### Return: - All endpoints information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_endpoints_info_api_v1_tikhub_user_get_all_endpoints_info_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_endpoints_info_api_v1_tikhub_user_get_all_endpoints_info_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tikhub/user/get_all_endpoints_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_endpoints_info_api_v1_tikhub_user_get_all_endpoints_info_get_0(self, **kwargs):  # noqa: E501
        """获取所有端点信息/Get all endpoints information  # noqa: E501

        # [中文] ### 用途: - 获取所有端点信息 ### 返回: - 所有端点信息  # [English] ### Purpose: - Get all endpoints information ### Return: - All endpoints information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_endpoints_info_api_v1_tikhub_user_get_all_endpoints_info_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_endpoints_info_api_v1_tikhub_user_get_all_endpoints_info_get_0_with_http_info(**kwargs)  # noqa: E501

    def get_all_endpoints_info_api_v1_tikhub_user_get_all_endpoints_info_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取所有端点信息/Get all endpoints information  # noqa: E501

        # [中文] ### 用途: - 获取所有端点信息 ### 返回: - 所有端点信息  # [English] ### Purpose: - Get all endpoints information ### Return: - All endpoints information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_endpoints_info_api_v1_tikhub_user_get_all_endpoints_info_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_endpoints_info_api_v1_tikhub_user_get_all_endpoints_info_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tikhub/user/get_all_endpoints_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_endpoint_info_api_v1_tikhub_user_get_endpoint_info_get(self, endpoint, **kwargs):  # noqa: E501
        """获取一个端点的信息/Get information of an endpoint  # noqa: E501

        # [中文] ### 用途: - 获取一个端点的信息 ### 参数: - endpoint: 请求的端点 ### 返回: - 端点信息  # [English] ### Purpose: - Get information of an endpoint ### Parameters: - endpoint: Requested endpoint ### Return: - Endpoint information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_endpoint_info_api_v1_tikhub_user_get_endpoint_info_get(endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str endpoint: 请求的端点/Requested endpoint (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_endpoint_info_api_v1_tikhub_user_get_endpoint_info_get_with_http_info(endpoint, **kwargs)  # noqa: E501

    def get_endpoint_info_api_v1_tikhub_user_get_endpoint_info_get_with_http_info(self, endpoint, **kwargs):  # noqa: E501
        """获取一个端点的信息/Get information of an endpoint  # noqa: E501

        # [中文] ### 用途: - 获取一个端点的信息 ### 参数: - endpoint: 请求的端点 ### 返回: - 端点信息  # [English] ### Purpose: - Get information of an endpoint ### Parameters: - endpoint: Requested endpoint ### Return: - Endpoint information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_endpoint_info_api_v1_tikhub_user_get_endpoint_info_get_with_http_info(endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str endpoint: 请求的端点/Requested endpoint (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'endpoint'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_endpoint_info_api_v1_tikhub_user_get_endpoint_info_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'endpoint' is set
        if self.api_client.client_side_validation and ('endpoint' not in local_var_params or  # noqa: E501
                                                        local_var_params['endpoint'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `endpoint` when calling `get_endpoint_info_api_v1_tikhub_user_get_endpoint_info_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'endpoint' in local_var_params and local_var_params['endpoint'] is not None:  # noqa: E501
            query_params.append(('endpoint', local_var_params['endpoint']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tikhub/user/get_endpoint_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_endpoint_info_api_v1_tikhub_user_get_endpoint_info_get_0(self, endpoint, **kwargs):  # noqa: E501
        """获取一个端点的信息/Get information of an endpoint  # noqa: E501

        # [中文] ### 用途: - 获取一个端点的信息 ### 参数: - endpoint: 请求的端点 ### 返回: - 端点信息  # [English] ### Purpose: - Get information of an endpoint ### Parameters: - endpoint: Requested endpoint ### Return: - Endpoint information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_endpoint_info_api_v1_tikhub_user_get_endpoint_info_get_0(endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str endpoint: 请求的端点/Requested endpoint (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_endpoint_info_api_v1_tikhub_user_get_endpoint_info_get_0_with_http_info(endpoint, **kwargs)  # noqa: E501

    def get_endpoint_info_api_v1_tikhub_user_get_endpoint_info_get_0_with_http_info(self, endpoint, **kwargs):  # noqa: E501
        """获取一个端点的信息/Get information of an endpoint  # noqa: E501

        # [中文] ### 用途: - 获取一个端点的信息 ### 参数: - endpoint: 请求的端点 ### 返回: - 端点信息  # [English] ### Purpose: - Get information of an endpoint ### Parameters: - endpoint: Requested endpoint ### Return: - Endpoint information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_endpoint_info_api_v1_tikhub_user_get_endpoint_info_get_0_with_http_info(endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str endpoint: 请求的端点/Requested endpoint (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'endpoint'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_endpoint_info_api_v1_tikhub_user_get_endpoint_info_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'endpoint' is set
        if self.api_client.client_side_validation and ('endpoint' not in local_var_params or  # noqa: E501
                                                        local_var_params['endpoint'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `endpoint` when calling `get_endpoint_info_api_v1_tikhub_user_get_endpoint_info_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'endpoint' in local_var_params and local_var_params['endpoint'] is not None:  # noqa: E501
            query_params.append(('endpoint', local_var_params['endpoint']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tikhub/user/get_endpoint_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tiered_discount_info_api_v1_tikhub_user_get_tiered_discount_info_get(self, **kwargs):  # noqa: E501
        """获取阶梯式折扣百分比信息/Get tiered discount percentage information  # noqa: E501

        # [中文] ### 用途: - 获取阶梯式折扣百分比信息 ### 返回: - 阶梯式折扣百分比信息  # [English] ### Purpose: - Get tiered discount percentage information ### Return: - Tiered discount percentage information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tiered_discount_info_api_v1_tikhub_user_get_tiered_discount_info_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_tiered_discount_info_api_v1_tikhub_user_get_tiered_discount_info_get_with_http_info(**kwargs)  # noqa: E501

    def get_tiered_discount_info_api_v1_tikhub_user_get_tiered_discount_info_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取阶梯式折扣百分比信息/Get tiered discount percentage information  # noqa: E501

        # [中文] ### 用途: - 获取阶梯式折扣百分比信息 ### 返回: - 阶梯式折扣百分比信息  # [English] ### Purpose: - Get tiered discount percentage information ### Return: - Tiered discount percentage information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tiered_discount_info_api_v1_tikhub_user_get_tiered_discount_info_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tiered_discount_info_api_v1_tikhub_user_get_tiered_discount_info_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tikhub/user/get_tiered_discount_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tiered_discount_info_api_v1_tikhub_user_get_tiered_discount_info_get_0(self, **kwargs):  # noqa: E501
        """获取阶梯式折扣百分比信息/Get tiered discount percentage information  # noqa: E501

        # [中文] ### 用途: - 获取阶梯式折扣百分比信息 ### 返回: - 阶梯式折扣百分比信息  # [English] ### Purpose: - Get tiered discount percentage information ### Return: - Tiered discount percentage information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tiered_discount_info_api_v1_tikhub_user_get_tiered_discount_info_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_tiered_discount_info_api_v1_tikhub_user_get_tiered_discount_info_get_0_with_http_info(**kwargs)  # noqa: E501

    def get_tiered_discount_info_api_v1_tikhub_user_get_tiered_discount_info_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取阶梯式折扣百分比信息/Get tiered discount percentage information  # noqa: E501

        # [中文] ### 用途: - 获取阶梯式折扣百分比信息 ### 返回: - 阶梯式折扣百分比信息  # [English] ### Purpose: - Get tiered discount percentage information ### Return: - Tiered discount percentage information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tiered_discount_info_api_v1_tikhub_user_get_tiered_discount_info_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tiered_discount_info_api_v1_tikhub_user_get_tiered_discount_info_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tikhub/user/get_tiered_discount_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_daily_usage_api_v1_tikhub_user_get_user_daily_usage_get(self, **kwargs):  # noqa: E501
        """获取用户每日使用情况/Get user daily usage  # noqa: E501

        # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户每日使用情况。 ### 参数: - 请求头：{'Authorization': 'Bearer API Key'} ### 返回: - 用户每日使用情况  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account daily usage. ### Parameters: - Headers: {'Authorization': 'Bearer API Key'} ### Return: - User daily usage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_daily_usage_api_v1_tikhub_user_get_user_daily_usage_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_user_daily_usage_api_v1_tikhub_user_get_user_daily_usage_get_with_http_info(**kwargs)  # noqa: E501

    def get_user_daily_usage_api_v1_tikhub_user_get_user_daily_usage_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取用户每日使用情况/Get user daily usage  # noqa: E501

        # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户每日使用情况。 ### 参数: - 请求头：{'Authorization': 'Bearer API Key'} ### 返回: - 用户每日使用情况  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account daily usage. ### Parameters: - Headers: {'Authorization': 'Bearer API Key'} ### Return: - User daily usage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_daily_usage_api_v1_tikhub_user_get_user_daily_usage_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_daily_usage_api_v1_tikhub_user_get_user_daily_usage_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tikhub/user/get_user_daily_usage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_daily_usage_api_v1_tikhub_user_get_user_daily_usage_get_0(self, **kwargs):  # noqa: E501
        """获取用户每日使用情况/Get user daily usage  # noqa: E501

        # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户每日使用情况。 ### 参数: - 请求头：{'Authorization': 'Bearer API Key'} ### 返回: - 用户每日使用情况  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account daily usage. ### Parameters: - Headers: {'Authorization': 'Bearer API Key'} ### Return: - User daily usage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_daily_usage_api_v1_tikhub_user_get_user_daily_usage_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_user_daily_usage_api_v1_tikhub_user_get_user_daily_usage_get_0_with_http_info(**kwargs)  # noqa: E501

    def get_user_daily_usage_api_v1_tikhub_user_get_user_daily_usage_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取用户每日使用情况/Get user daily usage  # noqa: E501

        # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户每日使用情况。 ### 参数: - 请求头：{'Authorization': 'Bearer API Key'} ### 返回: - 用户每日使用情况  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account daily usage. ### Parameters: - Headers: {'Authorization': 'Bearer API Key'} ### Return: - User daily usage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_daily_usage_api_v1_tikhub_user_get_user_daily_usage_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_daily_usage_api_v1_tikhub_user_get_user_daily_usage_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tikhub/user/get_user_daily_usage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_info_api_v1_tikhub_user_get_user_info_get(self, **kwargs):  # noqa: E501
        """获取TikHub用户信息/Get TikHub user info  # noqa: E501

        # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户信息。 ### 参数: - 请求头：{'Authorization': 'Bearer API_KEY'} ### 返回: - 用户信息  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account information. ### Parameters: - Headers: {'Authorization': 'Bearer API_KEY'} ### Return: - User information  # [示例/Example] ```python response = {       \"code\": 200,       \"router\": \"/api/v1/tikhub/user/get_user_info\",       \"api_key_data\": {         \"api_key_name\": \"Develop Test\",         \"api_key_scopes\": [           \"/api/v1/tikhub/user/\"         ],         \"created_at\": \"2024-05-22T06:07:12.495520\",         \"expires_at\": null,         \"api_key_status\": 1       },       \"user_data\": {         \"email\": \"example@example.com\",         \"balance\": 100,         \"free_credit\": 100,         \"email_verified\": true,         \"account_disabled\": false,         \"is_active\": true       }     } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_info_api_v1_tikhub_user_get_user_info_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: UserInfoResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_user_info_api_v1_tikhub_user_get_user_info_get_with_http_info(**kwargs)  # noqa: E501

    def get_user_info_api_v1_tikhub_user_get_user_info_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取TikHub用户信息/Get TikHub user info  # noqa: E501

        # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户信息。 ### 参数: - 请求头：{'Authorization': 'Bearer API_KEY'} ### 返回: - 用户信息  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account information. ### Parameters: - Headers: {'Authorization': 'Bearer API_KEY'} ### Return: - User information  # [示例/Example] ```python response = {       \"code\": 200,       \"router\": \"/api/v1/tikhub/user/get_user_info\",       \"api_key_data\": {         \"api_key_name\": \"Develop Test\",         \"api_key_scopes\": [           \"/api/v1/tikhub/user/\"         ],         \"created_at\": \"2024-05-22T06:07:12.495520\",         \"expires_at\": null,         \"api_key_status\": 1       },       \"user_data\": {         \"email\": \"example@example.com\",         \"balance\": 100,         \"free_credit\": 100,         \"email_verified\": true,         \"account_disabled\": false,         \"is_active\": true       }     } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_info_api_v1_tikhub_user_get_user_info_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(UserInfoResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_info_api_v1_tikhub_user_get_user_info_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tikhub/user/get_user_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserInfoResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_info_api_v1_tikhub_user_get_user_info_get_0(self, **kwargs):  # noqa: E501
        """获取TikHub用户信息/Get TikHub user info  # noqa: E501

        # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户信息。 ### 参数: - 请求头：{'Authorization': 'Bearer API_KEY'} ### 返回: - 用户信息  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account information. ### Parameters: - Headers: {'Authorization': 'Bearer API_KEY'} ### Return: - User information  # [示例/Example] ```python response = {       \"code\": 200,       \"router\": \"/api/v1/tikhub/user/get_user_info\",       \"api_key_data\": {         \"api_key_name\": \"Develop Test\",         \"api_key_scopes\": [           \"/api/v1/tikhub/user/\"         ],         \"created_at\": \"2024-05-22T06:07:12.495520\",         \"expires_at\": null,         \"api_key_status\": 1       },       \"user_data\": {         \"email\": \"example@example.com\",         \"balance\": 100,         \"free_credit\": 100,         \"email_verified\": true,         \"account_disabled\": false,         \"is_active\": true       }     } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_info_api_v1_tikhub_user_get_user_info_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: UserInfoResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_user_info_api_v1_tikhub_user_get_user_info_get_0_with_http_info(**kwargs)  # noqa: E501

    def get_user_info_api_v1_tikhub_user_get_user_info_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取TikHub用户信息/Get TikHub user info  # noqa: E501

        # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户信息。 ### 参数: - 请求头：{'Authorization': 'Bearer API_KEY'} ### 返回: - 用户信息  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account information. ### Parameters: - Headers: {'Authorization': 'Bearer API_KEY'} ### Return: - User information  # [示例/Example] ```python response = {       \"code\": 200,       \"router\": \"/api/v1/tikhub/user/get_user_info\",       \"api_key_data\": {         \"api_key_name\": \"Develop Test\",         \"api_key_scopes\": [           \"/api/v1/tikhub/user/\"         ],         \"created_at\": \"2024-05-22T06:07:12.495520\",         \"expires_at\": null,         \"api_key_status\": 1       },       \"user_data\": {         \"email\": \"example@example.com\",         \"balance\": 100,         \"free_credit\": 100,         \"email_verified\": true,         \"account_disabled\": false,         \"is_active\": true       }     } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_info_api_v1_tikhub_user_get_user_info_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(UserInfoResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_info_api_v1_tikhub_user_get_user_info_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tikhub/user/get_user_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserInfoResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
