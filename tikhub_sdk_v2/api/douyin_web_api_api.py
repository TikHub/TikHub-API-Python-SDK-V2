# coding: utf-8

"""
    TikHub.io - Your Ultimate Social Media Data & API Marketplace

    High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tikhub_sdk_v2.api_client import ApiClient
from tikhub_sdk_v2.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DouyinWebAPIApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def douyin_live_room_api_v1_douyin_web_douyin_live_room_get(self, live_room_url, danmaku_type, **kwargs):  # noqa: E501
        """提取直播间弹幕/Extract live room danmaku  # noqa: E501

        # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastRoomMessage：直播间消息     - WebcastLikeMessage：点赞消息     - WebcastMemberMessage：成员消息     - WebcastChatMessage：聊天消息     - WebcastGiftMessage：礼物消息     - WebcastSocialMessage：社交消息     - WebcastRoomUserSeqMessage：用户序列消息     - WebcastUpdateFanTicketMessage：更新粉丝消息     - WebcastCommonTextMessage：常规文本消息     - WebcastMatchAgainstScoreMessage：比赛得分消息     - WebcastFansclubMessage：粉丝俱乐部消息     - WebcastRanklistHourEntranceMessage：排行榜小时入口消息     - WebcastRoomStatsMessage：直播间统计消息     - WebcastLiveShoppingMessage: 直播购物消息     - WebcastLiveEcomGeneralMessage: 直播电商通用消息     - WebcastProductChangeMessage: 直播商品变更消息     - WebcastRoomStreamAdaptationMessage: 直播间流适配消息     - WebcastNotifyEffectMessage: 通知效果消息     - WebcastLightGiftMessage: 亮礼物消息     - WebcastProfitInteractionScoreMessage: 收益互动分消息     - WebcastRoomRankMessage: 直播间排行消息 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discounts. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastRoomMessage: Live room message     - WebcastLikeMessage: Like message     - WebcastMemberMessage: Member message     - WebcastChatMessage: Chat message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastUpdateFanTicketMessage: Update fan message     - WebcastCommonTextMessage: Common text message     - WebcastMatchAgainstScoreMessage: Match score message     - WebcastFansclubMessage: Fans club message     - WebcastRanklistHourEntranceMessage: Ranking list hour entrance message     - WebcastRoomStatsMessage: Live room statistics message     - WebcastLiveShoppingMessage: Live shopping message     - WebcastLiveEcomGeneralMessage: Live e-commerce general message     - WebcastProductChangeMessage: Live product change message     - WebcastRoomStreamAdaptationMessage: Live room stream adaptation message     - WebcastNotifyEffectMessage: Notification effect message     - WebcastLightGiftMessage: Light gift message     - WebcastProfitInteractionScoreMessage: Profit interaction score message     - WebcastRoomRankMessage: Live room ranking message ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.douyin_live_room_api_v1_douyin_web_douyin_live_room_get(live_room_url, danmaku_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str live_room_url: 直播间链接/Live room link (required)
        :param str danmaku_type: 消息类型/Message type (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.douyin_live_room_api_v1_douyin_web_douyin_live_room_get_with_http_info(live_room_url, danmaku_type, **kwargs)  # noqa: E501

    def douyin_live_room_api_v1_douyin_web_douyin_live_room_get_with_http_info(self, live_room_url, danmaku_type, **kwargs):  # noqa: E501
        """提取直播间弹幕/Extract live room danmaku  # noqa: E501

        # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastRoomMessage：直播间消息     - WebcastLikeMessage：点赞消息     - WebcastMemberMessage：成员消息     - WebcastChatMessage：聊天消息     - WebcastGiftMessage：礼物消息     - WebcastSocialMessage：社交消息     - WebcastRoomUserSeqMessage：用户序列消息     - WebcastUpdateFanTicketMessage：更新粉丝消息     - WebcastCommonTextMessage：常规文本消息     - WebcastMatchAgainstScoreMessage：比赛得分消息     - WebcastFansclubMessage：粉丝俱乐部消息     - WebcastRanklistHourEntranceMessage：排行榜小时入口消息     - WebcastRoomStatsMessage：直播间统计消息     - WebcastLiveShoppingMessage: 直播购物消息     - WebcastLiveEcomGeneralMessage: 直播电商通用消息     - WebcastProductChangeMessage: 直播商品变更消息     - WebcastRoomStreamAdaptationMessage: 直播间流适配消息     - WebcastNotifyEffectMessage: 通知效果消息     - WebcastLightGiftMessage: 亮礼物消息     - WebcastProfitInteractionScoreMessage: 收益互动分消息     - WebcastRoomRankMessage: 直播间排行消息 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discounts. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastRoomMessage: Live room message     - WebcastLikeMessage: Like message     - WebcastMemberMessage: Member message     - WebcastChatMessage: Chat message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastUpdateFanTicketMessage: Update fan message     - WebcastCommonTextMessage: Common text message     - WebcastMatchAgainstScoreMessage: Match score message     - WebcastFansclubMessage: Fans club message     - WebcastRanklistHourEntranceMessage: Ranking list hour entrance message     - WebcastRoomStatsMessage: Live room statistics message     - WebcastLiveShoppingMessage: Live shopping message     - WebcastLiveEcomGeneralMessage: Live e-commerce general message     - WebcastProductChangeMessage: Live product change message     - WebcastRoomStreamAdaptationMessage: Live room stream adaptation message     - WebcastNotifyEffectMessage: Notification effect message     - WebcastLightGiftMessage: Light gift message     - WebcastProfitInteractionScoreMessage: Profit interaction score message     - WebcastRoomRankMessage: Live room ranking message ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.douyin_live_room_api_v1_douyin_web_douyin_live_room_get_with_http_info(live_room_url, danmaku_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str live_room_url: 直播间链接/Live room link (required)
        :param str danmaku_type: 消息类型/Message type (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'live_room_url',
            'danmaku_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method douyin_live_room_api_v1_douyin_web_douyin_live_room_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'live_room_url' is set
        if self.api_client.client_side_validation and ('live_room_url' not in local_var_params or  # noqa: E501
                                                        local_var_params['live_room_url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `live_room_url` when calling `douyin_live_room_api_v1_douyin_web_douyin_live_room_get`")  # noqa: E501
        # verify the required parameter 'danmaku_type' is set
        if self.api_client.client_side_validation and ('danmaku_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['danmaku_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `danmaku_type` when calling `douyin_live_room_api_v1_douyin_web_douyin_live_room_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'live_room_url' in local_var_params and local_var_params['live_room_url'] is not None:  # noqa: E501
            query_params.append(('live_room_url', local_var_params['live_room_url']))  # noqa: E501
        if 'danmaku_type' in local_var_params and local_var_params['danmaku_type'] is not None:  # noqa: E501
            query_params.append(('danmaku_type', local_var_params['danmaku_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/douyin_live_room', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def douyin_live_room_api_v1_douyin_web_douyin_live_room_get_0(self, live_room_url, danmaku_type, **kwargs):  # noqa: E501
        """提取直播间弹幕/Extract live room danmaku  # noqa: E501

        # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastRoomMessage：直播间消息     - WebcastLikeMessage：点赞消息     - WebcastMemberMessage：成员消息     - WebcastChatMessage：聊天消息     - WebcastGiftMessage：礼物消息     - WebcastSocialMessage：社交消息     - WebcastRoomUserSeqMessage：用户序列消息     - WebcastUpdateFanTicketMessage：更新粉丝消息     - WebcastCommonTextMessage：常规文本消息     - WebcastMatchAgainstScoreMessage：比赛得分消息     - WebcastFansclubMessage：粉丝俱乐部消息     - WebcastRanklistHourEntranceMessage：排行榜小时入口消息     - WebcastRoomStatsMessage：直播间统计消息     - WebcastLiveShoppingMessage: 直播购物消息     - WebcastLiveEcomGeneralMessage: 直播电商通用消息     - WebcastProductChangeMessage: 直播商品变更消息     - WebcastRoomStreamAdaptationMessage: 直播间流适配消息     - WebcastNotifyEffectMessage: 通知效果消息     - WebcastLightGiftMessage: 亮礼物消息     - WebcastProfitInteractionScoreMessage: 收益互动分消息     - WebcastRoomRankMessage: 直播间排行消息 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discounts. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastRoomMessage: Live room message     - WebcastLikeMessage: Like message     - WebcastMemberMessage: Member message     - WebcastChatMessage: Chat message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastUpdateFanTicketMessage: Update fan message     - WebcastCommonTextMessage: Common text message     - WebcastMatchAgainstScoreMessage: Match score message     - WebcastFansclubMessage: Fans club message     - WebcastRanklistHourEntranceMessage: Ranking list hour entrance message     - WebcastRoomStatsMessage: Live room statistics message     - WebcastLiveShoppingMessage: Live shopping message     - WebcastLiveEcomGeneralMessage: Live e-commerce general message     - WebcastProductChangeMessage: Live product change message     - WebcastRoomStreamAdaptationMessage: Live room stream adaptation message     - WebcastNotifyEffectMessage: Notification effect message     - WebcastLightGiftMessage: Light gift message     - WebcastProfitInteractionScoreMessage: Profit interaction score message     - WebcastRoomRankMessage: Live room ranking message ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.douyin_live_room_api_v1_douyin_web_douyin_live_room_get_0(live_room_url, danmaku_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str live_room_url: 直播间链接/Live room link (required)
        :param str danmaku_type: 消息类型/Message type (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.douyin_live_room_api_v1_douyin_web_douyin_live_room_get_0_with_http_info(live_room_url, danmaku_type, **kwargs)  # noqa: E501

    def douyin_live_room_api_v1_douyin_web_douyin_live_room_get_0_with_http_info(self, live_room_url, danmaku_type, **kwargs):  # noqa: E501
        """提取直播间弹幕/Extract live room danmaku  # noqa: E501

        # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastRoomMessage：直播间消息     - WebcastLikeMessage：点赞消息     - WebcastMemberMessage：成员消息     - WebcastChatMessage：聊天消息     - WebcastGiftMessage：礼物消息     - WebcastSocialMessage：社交消息     - WebcastRoomUserSeqMessage：用户序列消息     - WebcastUpdateFanTicketMessage：更新粉丝消息     - WebcastCommonTextMessage：常规文本消息     - WebcastMatchAgainstScoreMessage：比赛得分消息     - WebcastFansclubMessage：粉丝俱乐部消息     - WebcastRanklistHourEntranceMessage：排行榜小时入口消息     - WebcastRoomStatsMessage：直播间统计消息     - WebcastLiveShoppingMessage: 直播购物消息     - WebcastLiveEcomGeneralMessage: 直播电商通用消息     - WebcastProductChangeMessage: 直播商品变更消息     - WebcastRoomStreamAdaptationMessage: 直播间流适配消息     - WebcastNotifyEffectMessage: 通知效果消息     - WebcastLightGiftMessage: 亮礼物消息     - WebcastProfitInteractionScoreMessage: 收益互动分消息     - WebcastRoomRankMessage: 直播间排行消息 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discounts. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastRoomMessage: Live room message     - WebcastLikeMessage: Like message     - WebcastMemberMessage: Member message     - WebcastChatMessage: Chat message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastUpdateFanTicketMessage: Update fan message     - WebcastCommonTextMessage: Common text message     - WebcastMatchAgainstScoreMessage: Match score message     - WebcastFansclubMessage: Fans club message     - WebcastRanklistHourEntranceMessage: Ranking list hour entrance message     - WebcastRoomStatsMessage: Live room statistics message     - WebcastLiveShoppingMessage: Live shopping message     - WebcastLiveEcomGeneralMessage: Live e-commerce general message     - WebcastProductChangeMessage: Live product change message     - WebcastRoomStreamAdaptationMessage: Live room stream adaptation message     - WebcastNotifyEffectMessage: Notification effect message     - WebcastLightGiftMessage: Light gift message     - WebcastProfitInteractionScoreMessage: Profit interaction score message     - WebcastRoomRankMessage: Live room ranking message ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.douyin_live_room_api_v1_douyin_web_douyin_live_room_get_0_with_http_info(live_room_url, danmaku_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str live_room_url: 直播间链接/Live room link (required)
        :param str danmaku_type: 消息类型/Message type (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'live_room_url',
            'danmaku_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method douyin_live_room_api_v1_douyin_web_douyin_live_room_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'live_room_url' is set
        if self.api_client.client_side_validation and ('live_room_url' not in local_var_params or  # noqa: E501
                                                        local_var_params['live_room_url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `live_room_url` when calling `douyin_live_room_api_v1_douyin_web_douyin_live_room_get_0`")  # noqa: E501
        # verify the required parameter 'danmaku_type' is set
        if self.api_client.client_side_validation and ('danmaku_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['danmaku_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `danmaku_type` when calling `douyin_live_room_api_v1_douyin_web_douyin_live_room_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'live_room_url' in local_var_params and local_var_params['live_room_url'] is not None:  # noqa: E501
            query_params.append(('live_room_url', local_var_params['live_room_url']))  # noqa: E501
        if 'danmaku_type' in local_var_params and local_var_params['danmaku_type'] is not None:  # noqa: E501
            query_params.append(('danmaku_type', local_var_params['danmaku_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/douyin_live_room', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_billboard_categories_api_v1_douyin_web_fetch_billboard_categories_get(self, billboard_type, **kwargs):  # noqa: E501
        """抖音热点分类/Douyin Billboard Categories  # noqa: E501

        # [中文] ### 用途: - 抖音热点分类 ### 参数: - billboard_type: 热点类型     - rise: 上升热点榜分类     - city: 同城热点榜分类     - total: 热点总榜分类 ### 返回: - 热点分类数据  # [English] ### Purpose: - Douyin Billboard Categories ### Parameters: - billboard_type: Hotspot type     - rise: Rising hot spot list category     - city: City hot spot list category     - total: Total hot spot list category ### Return: - Hotspot category data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_billboard_categories_api_v1_douyin_web_fetch_billboard_categories_get(billboard_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str billboard_type: 热点类型/Hotspot type (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_billboard_categories_api_v1_douyin_web_fetch_billboard_categories_get_with_http_info(billboard_type, **kwargs)  # noqa: E501

    def fetch_billboard_categories_api_v1_douyin_web_fetch_billboard_categories_get_with_http_info(self, billboard_type, **kwargs):  # noqa: E501
        """抖音热点分类/Douyin Billboard Categories  # noqa: E501

        # [中文] ### 用途: - 抖音热点分类 ### 参数: - billboard_type: 热点类型     - rise: 上升热点榜分类     - city: 同城热点榜分类     - total: 热点总榜分类 ### 返回: - 热点分类数据  # [English] ### Purpose: - Douyin Billboard Categories ### Parameters: - billboard_type: Hotspot type     - rise: Rising hot spot list category     - city: City hot spot list category     - total: Total hot spot list category ### Return: - Hotspot category data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_billboard_categories_api_v1_douyin_web_fetch_billboard_categories_get_with_http_info(billboard_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str billboard_type: 热点类型/Hotspot type (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'billboard_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_billboard_categories_api_v1_douyin_web_fetch_billboard_categories_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'billboard_type' is set
        if self.api_client.client_side_validation and ('billboard_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['billboard_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `billboard_type` when calling `fetch_billboard_categories_api_v1_douyin_web_fetch_billboard_categories_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'billboard_type' in local_var_params and local_var_params['billboard_type'] is not None:  # noqa: E501
            query_params.append(('billboard_type', local_var_params['billboard_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_billboard_categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_billboard_categories_api_v1_douyin_web_fetch_billboard_categories_get_0(self, billboard_type, **kwargs):  # noqa: E501
        """抖音热点分类/Douyin Billboard Categories  # noqa: E501

        # [中文] ### 用途: - 抖音热点分类 ### 参数: - billboard_type: 热点类型     - rise: 上升热点榜分类     - city: 同城热点榜分类     - total: 热点总榜分类 ### 返回: - 热点分类数据  # [English] ### Purpose: - Douyin Billboard Categories ### Parameters: - billboard_type: Hotspot type     - rise: Rising hot spot list category     - city: City hot spot list category     - total: Total hot spot list category ### Return: - Hotspot category data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_billboard_categories_api_v1_douyin_web_fetch_billboard_categories_get_0(billboard_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str billboard_type: 热点类型/Hotspot type (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_billboard_categories_api_v1_douyin_web_fetch_billboard_categories_get_0_with_http_info(billboard_type, **kwargs)  # noqa: E501

    def fetch_billboard_categories_api_v1_douyin_web_fetch_billboard_categories_get_0_with_http_info(self, billboard_type, **kwargs):  # noqa: E501
        """抖音热点分类/Douyin Billboard Categories  # noqa: E501

        # [中文] ### 用途: - 抖音热点分类 ### 参数: - billboard_type: 热点类型     - rise: 上升热点榜分类     - city: 同城热点榜分类     - total: 热点总榜分类 ### 返回: - 热点分类数据  # [English] ### Purpose: - Douyin Billboard Categories ### Parameters: - billboard_type: Hotspot type     - rise: Rising hot spot list category     - city: City hot spot list category     - total: Total hot spot list category ### Return: - Hotspot category data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_billboard_categories_api_v1_douyin_web_fetch_billboard_categories_get_0_with_http_info(billboard_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str billboard_type: 热点类型/Hotspot type (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'billboard_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_billboard_categories_api_v1_douyin_web_fetch_billboard_categories_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'billboard_type' is set
        if self.api_client.client_side_validation and ('billboard_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['billboard_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `billboard_type` when calling `fetch_billboard_categories_api_v1_douyin_web_fetch_billboard_categories_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'billboard_type' in local_var_params and local_var_params['billboard_type'] is not None:  # noqa: E501
            query_params.append(('billboard_type', local_var_params['billboard_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_billboard_categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_billboard_related_videos_api_v1_douyin_web_fetch_billboard_related_videos_get(self, page, page_size, sentence_id, **kwargs):  # noqa: E501
        """抖音榜单相关视频/Douyin Billboard Related Videos  # noqa: E501

        # [中文] ### 用途: - 抖音榜单相关视频 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_id: 分类ID ### 返回: - 相关视频数据  # [English] ### Purpose: - Douyin Billboard Related Videos ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_id: Category ID ### Return: - Related video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_billboard_related_videos_api_v1_douyin_web_fetch_billboard_related_videos_get(page, page_size, sentence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page: 页码/Page number (required)
        :param int page_size: 每页数量/Number per page (required)
        :param str sentence_id: 分类ID/Category ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_billboard_related_videos_api_v1_douyin_web_fetch_billboard_related_videos_get_with_http_info(page, page_size, sentence_id, **kwargs)  # noqa: E501

    def fetch_billboard_related_videos_api_v1_douyin_web_fetch_billboard_related_videos_get_with_http_info(self, page, page_size, sentence_id, **kwargs):  # noqa: E501
        """抖音榜单相关视频/Douyin Billboard Related Videos  # noqa: E501

        # [中文] ### 用途: - 抖音榜单相关视频 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_id: 分类ID ### 返回: - 相关视频数据  # [English] ### Purpose: - Douyin Billboard Related Videos ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_id: Category ID ### Return: - Related video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_billboard_related_videos_api_v1_douyin_web_fetch_billboard_related_videos_get_with_http_info(page, page_size, sentence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page: 页码/Page number (required)
        :param int page_size: 每页数量/Number per page (required)
        :param str sentence_id: 分类ID/Category ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'page',
            'page_size',
            'sentence_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_billboard_related_videos_api_v1_douyin_web_fetch_billboard_related_videos_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page' is set
        if self.api_client.client_side_validation and ('page' not in local_var_params or  # noqa: E501
                                                        local_var_params['page'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page` when calling `fetch_billboard_related_videos_api_v1_douyin_web_fetch_billboard_related_videos_get`")  # noqa: E501
        # verify the required parameter 'page_size' is set
        if self.api_client.client_side_validation and ('page_size' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_size'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_size` when calling `fetch_billboard_related_videos_api_v1_douyin_web_fetch_billboard_related_videos_get`")  # noqa: E501
        # verify the required parameter 'sentence_id' is set
        if self.api_client.client_side_validation and ('sentence_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['sentence_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sentence_id` when calling `fetch_billboard_related_videos_api_v1_douyin_web_fetch_billboard_related_videos_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('page_size', local_var_params['page_size']))  # noqa: E501
        if 'sentence_id' in local_var_params and local_var_params['sentence_id'] is not None:  # noqa: E501
            query_params.append(('sentence_id', local_var_params['sentence_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_billboard_related_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_billboard_related_videos_api_v1_douyin_web_fetch_billboard_related_videos_get_0(self, page, page_size, sentence_id, **kwargs):  # noqa: E501
        """抖音榜单相关视频/Douyin Billboard Related Videos  # noqa: E501

        # [中文] ### 用途: - 抖音榜单相关视频 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_id: 分类ID ### 返回: - 相关视频数据  # [English] ### Purpose: - Douyin Billboard Related Videos ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_id: Category ID ### Return: - Related video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_billboard_related_videos_api_v1_douyin_web_fetch_billboard_related_videos_get_0(page, page_size, sentence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page: 页码/Page number (required)
        :param int page_size: 每页数量/Number per page (required)
        :param str sentence_id: 分类ID/Category ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_billboard_related_videos_api_v1_douyin_web_fetch_billboard_related_videos_get_0_with_http_info(page, page_size, sentence_id, **kwargs)  # noqa: E501

    def fetch_billboard_related_videos_api_v1_douyin_web_fetch_billboard_related_videos_get_0_with_http_info(self, page, page_size, sentence_id, **kwargs):  # noqa: E501
        """抖音榜单相关视频/Douyin Billboard Related Videos  # noqa: E501

        # [中文] ### 用途: - 抖音榜单相关视频 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_id: 分类ID ### 返回: - 相关视频数据  # [English] ### Purpose: - Douyin Billboard Related Videos ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_id: Category ID ### Return: - Related video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_billboard_related_videos_api_v1_douyin_web_fetch_billboard_related_videos_get_0_with_http_info(page, page_size, sentence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page: 页码/Page number (required)
        :param int page_size: 每页数量/Number per page (required)
        :param str sentence_id: 分类ID/Category ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'page',
            'page_size',
            'sentence_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_billboard_related_videos_api_v1_douyin_web_fetch_billboard_related_videos_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page' is set
        if self.api_client.client_side_validation and ('page' not in local_var_params or  # noqa: E501
                                                        local_var_params['page'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page` when calling `fetch_billboard_related_videos_api_v1_douyin_web_fetch_billboard_related_videos_get_0`")  # noqa: E501
        # verify the required parameter 'page_size' is set
        if self.api_client.client_side_validation and ('page_size' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_size'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_size` when calling `fetch_billboard_related_videos_api_v1_douyin_web_fetch_billboard_related_videos_get_0`")  # noqa: E501
        # verify the required parameter 'sentence_id' is set
        if self.api_client.client_side_validation and ('sentence_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['sentence_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sentence_id` when calling `fetch_billboard_related_videos_api_v1_douyin_web_fetch_billboard_related_videos_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('page_size', local_var_params['page_size']))  # noqa: E501
        if 'sentence_id' in local_var_params and local_var_params['sentence_id'] is not None:  # noqa: E501
            query_params.append(('sentence_id', local_var_params['sentence_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_billboard_related_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_cartoon_aweme_api_v1_douyin_web_fetch_cartoon_aweme_get(self, count, **kwargs):  # noqa: E501
        """二次元作品推荐/Knowledge Video  # noqa: E501

        # [中文] ### 用途: - 二次元作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 二次元作品数据  # [English] ### Purpose: - Cartoon Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Cartoon Video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_cartoon_aweme_api_v1_douyin_web_fetch_cartoon_aweme_get(count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int count: 每页数量/Number per page (required)
        :param int refresh_index: 翻页索引/Paging index
        :param str cookie: 用户自行提供的Cookie/User provided Cookie
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_cartoon_aweme_api_v1_douyin_web_fetch_cartoon_aweme_get_with_http_info(count, **kwargs)  # noqa: E501

    def fetch_cartoon_aweme_api_v1_douyin_web_fetch_cartoon_aweme_get_with_http_info(self, count, **kwargs):  # noqa: E501
        """二次元作品推荐/Knowledge Video  # noqa: E501

        # [中文] ### 用途: - 二次元作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 二次元作品数据  # [English] ### Purpose: - Cartoon Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Cartoon Video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_cartoon_aweme_api_v1_douyin_web_fetch_cartoon_aweme_get_with_http_info(count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int count: 每页数量/Number per page (required)
        :param int refresh_index: 翻页索引/Paging index
        :param str cookie: 用户自行提供的Cookie/User provided Cookie
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'count',
            'refresh_index',
            'cookie'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_cartoon_aweme_api_v1_douyin_web_fetch_cartoon_aweme_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'count' is set
        if self.api_client.client_side_validation and ('count' not in local_var_params or  # noqa: E501
                                                        local_var_params['count'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `count` when calling `fetch_cartoon_aweme_api_v1_douyin_web_fetch_cartoon_aweme_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'refresh_index' in local_var_params and local_var_params['refresh_index'] is not None:  # noqa: E501
            query_params.append(('refresh_index', local_var_params['refresh_index']))  # noqa: E501
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_cartoon_aweme', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_cartoon_aweme_api_v1_douyin_web_fetch_cartoon_aweme_get_0(self, count, **kwargs):  # noqa: E501
        """二次元作品推荐/Knowledge Video  # noqa: E501

        # [中文] ### 用途: - 二次元作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 二次元作品数据  # [English] ### Purpose: - Cartoon Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Cartoon Video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_cartoon_aweme_api_v1_douyin_web_fetch_cartoon_aweme_get_0(count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int count: 每页数量/Number per page (required)
        :param int refresh_index: 翻页索引/Paging index
        :param str cookie: 用户自行提供的Cookie/User provided Cookie
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_cartoon_aweme_api_v1_douyin_web_fetch_cartoon_aweme_get_0_with_http_info(count, **kwargs)  # noqa: E501

    def fetch_cartoon_aweme_api_v1_douyin_web_fetch_cartoon_aweme_get_0_with_http_info(self, count, **kwargs):  # noqa: E501
        """二次元作品推荐/Knowledge Video  # noqa: E501

        # [中文] ### 用途: - 二次元作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 二次元作品数据  # [English] ### Purpose: - Cartoon Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Cartoon Video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_cartoon_aweme_api_v1_douyin_web_fetch_cartoon_aweme_get_0_with_http_info(count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int count: 每页数量/Number per page (required)
        :param int refresh_index: 翻页索引/Paging index
        :param str cookie: 用户自行提供的Cookie/User provided Cookie
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'count',
            'refresh_index',
            'cookie'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_cartoon_aweme_api_v1_douyin_web_fetch_cartoon_aweme_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'count' is set
        if self.api_client.client_side_validation and ('count' not in local_var_params or  # noqa: E501
                                                        local_var_params['count'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `count` when calling `fetch_cartoon_aweme_api_v1_douyin_web_fetch_cartoon_aweme_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'refresh_index' in local_var_params and local_var_params['refresh_index'] is not None:  # noqa: E501
            query_params.append(('refresh_index', local_var_params['refresh_index']))  # noqa: E501
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_cartoon_aweme', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_cartoon_aweme_api_v1_douyin_web_fetch_food_aweme_get(self, count, **kwargs):  # noqa: E501
        """美食作品推荐/Knowledge Video  # noqa: E501

        # [中文] ### 用途: - 美食作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 美食作品数据  # [English] ### Purpose: - Food Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Food Video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_cartoon_aweme_api_v1_douyin_web_fetch_food_aweme_get(count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int count: 每页数量/Number per page (required)
        :param int refresh_index: 翻页索引/Paging index
        :param str cookie: 用户自行提供的Cookie/User provided Cookie
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_cartoon_aweme_api_v1_douyin_web_fetch_food_aweme_get_with_http_info(count, **kwargs)  # noqa: E501

    def fetch_cartoon_aweme_api_v1_douyin_web_fetch_food_aweme_get_with_http_info(self, count, **kwargs):  # noqa: E501
        """美食作品推荐/Knowledge Video  # noqa: E501

        # [中文] ### 用途: - 美食作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 美食作品数据  # [English] ### Purpose: - Food Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Food Video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_cartoon_aweme_api_v1_douyin_web_fetch_food_aweme_get_with_http_info(count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int count: 每页数量/Number per page (required)
        :param int refresh_index: 翻页索引/Paging index
        :param str cookie: 用户自行提供的Cookie/User provided Cookie
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'count',
            'refresh_index',
            'cookie'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_cartoon_aweme_api_v1_douyin_web_fetch_food_aweme_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'count' is set
        if self.api_client.client_side_validation and ('count' not in local_var_params or  # noqa: E501
                                                        local_var_params['count'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `count` when calling `fetch_cartoon_aweme_api_v1_douyin_web_fetch_food_aweme_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'refresh_index' in local_var_params and local_var_params['refresh_index'] is not None:  # noqa: E501
            query_params.append(('refresh_index', local_var_params['refresh_index']))  # noqa: E501
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_food_aweme', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_cartoon_aweme_api_v1_douyin_web_fetch_food_aweme_get_0(self, count, **kwargs):  # noqa: E501
        """美食作品推荐/Knowledge Video  # noqa: E501

        # [中文] ### 用途: - 美食作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 美食作品数据  # [English] ### Purpose: - Food Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Food Video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_cartoon_aweme_api_v1_douyin_web_fetch_food_aweme_get_0(count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int count: 每页数量/Number per page (required)
        :param int refresh_index: 翻页索引/Paging index
        :param str cookie: 用户自行提供的Cookie/User provided Cookie
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_cartoon_aweme_api_v1_douyin_web_fetch_food_aweme_get_0_with_http_info(count, **kwargs)  # noqa: E501

    def fetch_cartoon_aweme_api_v1_douyin_web_fetch_food_aweme_get_0_with_http_info(self, count, **kwargs):  # noqa: E501
        """美食作品推荐/Knowledge Video  # noqa: E501

        # [中文] ### 用途: - 美食作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 美食作品数据  # [English] ### Purpose: - Food Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Food Video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_cartoon_aweme_api_v1_douyin_web_fetch_food_aweme_get_0_with_http_info(count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int count: 每页数量/Number per page (required)
        :param int refresh_index: 翻页索引/Paging index
        :param str cookie: 用户自行提供的Cookie/User provided Cookie
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'count',
            'refresh_index',
            'cookie'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_cartoon_aweme_api_v1_douyin_web_fetch_food_aweme_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'count' is set
        if self.api_client.client_side_validation and ('count' not in local_var_params or  # noqa: E501
                                                        local_var_params['count'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `count` when calling `fetch_cartoon_aweme_api_v1_douyin_web_fetch_food_aweme_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'refresh_index' in local_var_params and local_var_params['refresh_index'] is not None:  # noqa: E501
            query_params.append(('refresh_index', local_var_params['refresh_index']))  # noqa: E501
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_food_aweme', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_cartoon_aweme_api_v1_douyin_web_fetch_music_aweme_get(self, count, **kwargs):  # noqa: E501
        """音乐作品推荐/Knowledge Video  # noqa: E501

        # [中文] ### 用途: - 音乐作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 音乐作品数据  # [English] ### Purpose: - Music Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Music Video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_cartoon_aweme_api_v1_douyin_web_fetch_music_aweme_get(count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int count: 每页数量/Number per page (required)
        :param int refresh_index: 翻页索引/Paging index
        :param str cookie: 用户自行提供的Cookie/User provided Cookie
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_cartoon_aweme_api_v1_douyin_web_fetch_music_aweme_get_with_http_info(count, **kwargs)  # noqa: E501

    def fetch_cartoon_aweme_api_v1_douyin_web_fetch_music_aweme_get_with_http_info(self, count, **kwargs):  # noqa: E501
        """音乐作品推荐/Knowledge Video  # noqa: E501

        # [中文] ### 用途: - 音乐作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 音乐作品数据  # [English] ### Purpose: - Music Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Music Video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_cartoon_aweme_api_v1_douyin_web_fetch_music_aweme_get_with_http_info(count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int count: 每页数量/Number per page (required)
        :param int refresh_index: 翻页索引/Paging index
        :param str cookie: 用户自行提供的Cookie/User provided Cookie
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'count',
            'refresh_index',
            'cookie'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_cartoon_aweme_api_v1_douyin_web_fetch_music_aweme_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'count' is set
        if self.api_client.client_side_validation and ('count' not in local_var_params or  # noqa: E501
                                                        local_var_params['count'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `count` when calling `fetch_cartoon_aweme_api_v1_douyin_web_fetch_music_aweme_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'refresh_index' in local_var_params and local_var_params['refresh_index'] is not None:  # noqa: E501
            query_params.append(('refresh_index', local_var_params['refresh_index']))  # noqa: E501
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_music_aweme', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_cartoon_aweme_api_v1_douyin_web_fetch_music_aweme_get_0(self, count, **kwargs):  # noqa: E501
        """音乐作品推荐/Knowledge Video  # noqa: E501

        # [中文] ### 用途: - 音乐作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 音乐作品数据  # [English] ### Purpose: - Music Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Music Video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_cartoon_aweme_api_v1_douyin_web_fetch_music_aweme_get_0(count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int count: 每页数量/Number per page (required)
        :param int refresh_index: 翻页索引/Paging index
        :param str cookie: 用户自行提供的Cookie/User provided Cookie
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_cartoon_aweme_api_v1_douyin_web_fetch_music_aweme_get_0_with_http_info(count, **kwargs)  # noqa: E501

    def fetch_cartoon_aweme_api_v1_douyin_web_fetch_music_aweme_get_0_with_http_info(self, count, **kwargs):  # noqa: E501
        """音乐作品推荐/Knowledge Video  # noqa: E501

        # [中文] ### 用途: - 音乐作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 音乐作品数据  # [English] ### Purpose: - Music Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Music Video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_cartoon_aweme_api_v1_douyin_web_fetch_music_aweme_get_0_with_http_info(count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int count: 每页数量/Number per page (required)
        :param int refresh_index: 翻页索引/Paging index
        :param str cookie: 用户自行提供的Cookie/User provided Cookie
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'count',
            'refresh_index',
            'cookie'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_cartoon_aweme_api_v1_douyin_web_fetch_music_aweme_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'count' is set
        if self.api_client.client_side_validation and ('count' not in local_var_params or  # noqa: E501
                                                        local_var_params['count'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `count` when calling `fetch_cartoon_aweme_api_v1_douyin_web_fetch_music_aweme_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'refresh_index' in local_var_params and local_var_params['refresh_index'] is not None:  # noqa: E501
            query_params.append(('refresh_index', local_var_params['refresh_index']))  # noqa: E501
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_music_aweme', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_challenge_posts_api_v1_douyin_web_fetch_challenge_posts_post(self, **kwargs):  # noqa: E501
        """话题作品/Challenge Posts  # noqa: E501

        # [中文] ### 用途: - 话题作品 ### 参数: - challenge_id: 话题id - sort_type: 排序类型     - 0:综合排序 1:最热排序 2:最新排序 - cursor: 游标 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题作品  # [English] ### Purpose: - Challenge Posts ### Parameters: - challenge_id: Challenge id - sort_type: Sort type     - 0: Comprehensive sorting 1: Hottest sorting 2: Latest sorting - cursor: Cursor - count: Number - cookie: User provided Cookie, used to get more data ### Return: - Challenge Posts  # [示例/Example] challenge_id = \"1750525814851611\" sort_type = 0 offset = 0 cursor = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_challenge_posts_api_v1_douyin_web_fetch_challenge_posts_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param ChallengePostRequest challenge_post_request:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_challenge_posts_api_v1_douyin_web_fetch_challenge_posts_post_with_http_info(**kwargs)  # noqa: E501

    def fetch_challenge_posts_api_v1_douyin_web_fetch_challenge_posts_post_with_http_info(self, **kwargs):  # noqa: E501
        """话题作品/Challenge Posts  # noqa: E501

        # [中文] ### 用途: - 话题作品 ### 参数: - challenge_id: 话题id - sort_type: 排序类型     - 0:综合排序 1:最热排序 2:最新排序 - cursor: 游标 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题作品  # [English] ### Purpose: - Challenge Posts ### Parameters: - challenge_id: Challenge id - sort_type: Sort type     - 0: Comprehensive sorting 1: Hottest sorting 2: Latest sorting - cursor: Cursor - count: Number - cookie: User provided Cookie, used to get more data ### Return: - Challenge Posts  # [示例/Example] challenge_id = \"1750525814851611\" sort_type = 0 offset = 0 cursor = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_challenge_posts_api_v1_douyin_web_fetch_challenge_posts_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param ChallengePostRequest challenge_post_request:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'challenge_post_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_challenge_posts_api_v1_douyin_web_fetch_challenge_posts_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'challenge_post_request' in local_var_params:
            body_params = local_var_params['challenge_post_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_challenge_posts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_challenge_posts_api_v1_douyin_web_fetch_challenge_posts_post_0(self, **kwargs):  # noqa: E501
        """话题作品/Challenge Posts  # noqa: E501

        # [中文] ### 用途: - 话题作品 ### 参数: - challenge_id: 话题id - sort_type: 排序类型     - 0:综合排序 1:最热排序 2:最新排序 - cursor: 游标 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题作品  # [English] ### Purpose: - Challenge Posts ### Parameters: - challenge_id: Challenge id - sort_type: Sort type     - 0: Comprehensive sorting 1: Hottest sorting 2: Latest sorting - cursor: Cursor - count: Number - cookie: User provided Cookie, used to get more data ### Return: - Challenge Posts  # [示例/Example] challenge_id = \"1750525814851611\" sort_type = 0 offset = 0 cursor = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_challenge_posts_api_v1_douyin_web_fetch_challenge_posts_post_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param ChallengePostRequest challenge_post_request:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_challenge_posts_api_v1_douyin_web_fetch_challenge_posts_post_0_with_http_info(**kwargs)  # noqa: E501

    def fetch_challenge_posts_api_v1_douyin_web_fetch_challenge_posts_post_0_with_http_info(self, **kwargs):  # noqa: E501
        """话题作品/Challenge Posts  # noqa: E501

        # [中文] ### 用途: - 话题作品 ### 参数: - challenge_id: 话题id - sort_type: 排序类型     - 0:综合排序 1:最热排序 2:最新排序 - cursor: 游标 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题作品  # [English] ### Purpose: - Challenge Posts ### Parameters: - challenge_id: Challenge id - sort_type: Sort type     - 0: Comprehensive sorting 1: Hottest sorting 2: Latest sorting - cursor: Cursor - count: Number - cookie: User provided Cookie, used to get more data ### Return: - Challenge Posts  # [示例/Example] challenge_id = \"1750525814851611\" sort_type = 0 offset = 0 cursor = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_challenge_posts_api_v1_douyin_web_fetch_challenge_posts_post_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param ChallengePostRequest challenge_post_request:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'challenge_post_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_challenge_posts_api_v1_douyin_web_fetch_challenge_posts_post_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'challenge_post_request' in local_var_params:
            body_params = local_var_params['challenge_post_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_challenge_posts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_city_hot_list_api_v1_douyin_web_fetch_city_hot_list_get(self, page, page_size, sentence_tag, order, city_code, **kwargs):  # noqa: E501
        """抖音同城热点榜单/Douyin City Hot List  # noqa: E501

        # [中文] ### 用途: - 抖音同城热点榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 - city_code: 城市代码，默认为110000(北京)     - 110000: 北京     - 更多城市代码请参考城市列表接口     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin City Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change - city_code: City code, default is 110000     - 110000: Beijing     - For more city codes, please refer to the city list interface     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### Return: - Hotspot list data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_city_hot_list_api_v1_douyin_web_fetch_city_hot_list_get(page, page_size, sentence_tag, order, city_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page: 页码/Page number (required)
        :param int page_size: 每页数量/Number per page (required)
        :param str sentence_tag: 分类标签/Category tag (required)
        :param str order: 排序方式/Sorting method (required)
        :param str city_code: 城市代码/City code (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_city_hot_list_api_v1_douyin_web_fetch_city_hot_list_get_with_http_info(page, page_size, sentence_tag, order, city_code, **kwargs)  # noqa: E501

    def fetch_city_hot_list_api_v1_douyin_web_fetch_city_hot_list_get_with_http_info(self, page, page_size, sentence_tag, order, city_code, **kwargs):  # noqa: E501
        """抖音同城热点榜单/Douyin City Hot List  # noqa: E501

        # [中文] ### 用途: - 抖音同城热点榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 - city_code: 城市代码，默认为110000(北京)     - 110000: 北京     - 更多城市代码请参考城市列表接口     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin City Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change - city_code: City code, default is 110000     - 110000: Beijing     - For more city codes, please refer to the city list interface     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### Return: - Hotspot list data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_city_hot_list_api_v1_douyin_web_fetch_city_hot_list_get_with_http_info(page, page_size, sentence_tag, order, city_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page: 页码/Page number (required)
        :param int page_size: 每页数量/Number per page (required)
        :param str sentence_tag: 分类标签/Category tag (required)
        :param str order: 排序方式/Sorting method (required)
        :param str city_code: 城市代码/City code (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'page',
            'page_size',
            'sentence_tag',
            'order',
            'city_code'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_city_hot_list_api_v1_douyin_web_fetch_city_hot_list_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page' is set
        if self.api_client.client_side_validation and ('page' not in local_var_params or  # noqa: E501
                                                        local_var_params['page'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page` when calling `fetch_city_hot_list_api_v1_douyin_web_fetch_city_hot_list_get`")  # noqa: E501
        # verify the required parameter 'page_size' is set
        if self.api_client.client_side_validation and ('page_size' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_size'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_size` when calling `fetch_city_hot_list_api_v1_douyin_web_fetch_city_hot_list_get`")  # noqa: E501
        # verify the required parameter 'sentence_tag' is set
        if self.api_client.client_side_validation and ('sentence_tag' not in local_var_params or  # noqa: E501
                                                        local_var_params['sentence_tag'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sentence_tag` when calling `fetch_city_hot_list_api_v1_douyin_web_fetch_city_hot_list_get`")  # noqa: E501
        # verify the required parameter 'order' is set
        if self.api_client.client_side_validation and ('order' not in local_var_params or  # noqa: E501
                                                        local_var_params['order'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `order` when calling `fetch_city_hot_list_api_v1_douyin_web_fetch_city_hot_list_get`")  # noqa: E501
        # verify the required parameter 'city_code' is set
        if self.api_client.client_side_validation and ('city_code' not in local_var_params or  # noqa: E501
                                                        local_var_params['city_code'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `city_code` when calling `fetch_city_hot_list_api_v1_douyin_web_fetch_city_hot_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('page_size', local_var_params['page_size']))  # noqa: E501
        if 'sentence_tag' in local_var_params and local_var_params['sentence_tag'] is not None:  # noqa: E501
            query_params.append(('sentence_tag', local_var_params['sentence_tag']))  # noqa: E501
        if 'order' in local_var_params and local_var_params['order'] is not None:  # noqa: E501
            query_params.append(('order', local_var_params['order']))  # noqa: E501
        if 'city_code' in local_var_params and local_var_params['city_code'] is not None:  # noqa: E501
            query_params.append(('city_code', local_var_params['city_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_city_hot_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_city_hot_list_api_v1_douyin_web_fetch_city_hot_list_get_0(self, page, page_size, sentence_tag, order, city_code, **kwargs):  # noqa: E501
        """抖音同城热点榜单/Douyin City Hot List  # noqa: E501

        # [中文] ### 用途: - 抖音同城热点榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 - city_code: 城市代码，默认为110000(北京)     - 110000: 北京     - 更多城市代码请参考城市列表接口     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin City Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change - city_code: City code, default is 110000     - 110000: Beijing     - For more city codes, please refer to the city list interface     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### Return: - Hotspot list data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_city_hot_list_api_v1_douyin_web_fetch_city_hot_list_get_0(page, page_size, sentence_tag, order, city_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page: 页码/Page number (required)
        :param int page_size: 每页数量/Number per page (required)
        :param str sentence_tag: 分类标签/Category tag (required)
        :param str order: 排序方式/Sorting method (required)
        :param str city_code: 城市代码/City code (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_city_hot_list_api_v1_douyin_web_fetch_city_hot_list_get_0_with_http_info(page, page_size, sentence_tag, order, city_code, **kwargs)  # noqa: E501

    def fetch_city_hot_list_api_v1_douyin_web_fetch_city_hot_list_get_0_with_http_info(self, page, page_size, sentence_tag, order, city_code, **kwargs):  # noqa: E501
        """抖音同城热点榜单/Douyin City Hot List  # noqa: E501

        # [中文] ### 用途: - 抖音同城热点榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 - city_code: 城市代码，默认为110000(北京)     - 110000: 北京     - 更多城市代码请参考城市列表接口     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin City Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change - city_code: City code, default is 110000     - 110000: Beijing     - For more city codes, please refer to the city list interface     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### Return: - Hotspot list data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_city_hot_list_api_v1_douyin_web_fetch_city_hot_list_get_0_with_http_info(page, page_size, sentence_tag, order, city_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page: 页码/Page number (required)
        :param int page_size: 每页数量/Number per page (required)
        :param str sentence_tag: 分类标签/Category tag (required)
        :param str order: 排序方式/Sorting method (required)
        :param str city_code: 城市代码/City code (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'page',
            'page_size',
            'sentence_tag',
            'order',
            'city_code'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_city_hot_list_api_v1_douyin_web_fetch_city_hot_list_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page' is set
        if self.api_client.client_side_validation and ('page' not in local_var_params or  # noqa: E501
                                                        local_var_params['page'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page` when calling `fetch_city_hot_list_api_v1_douyin_web_fetch_city_hot_list_get_0`")  # noqa: E501
        # verify the required parameter 'page_size' is set
        if self.api_client.client_side_validation and ('page_size' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_size'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_size` when calling `fetch_city_hot_list_api_v1_douyin_web_fetch_city_hot_list_get_0`")  # noqa: E501
        # verify the required parameter 'sentence_tag' is set
        if self.api_client.client_side_validation and ('sentence_tag' not in local_var_params or  # noqa: E501
                                                        local_var_params['sentence_tag'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sentence_tag` when calling `fetch_city_hot_list_api_v1_douyin_web_fetch_city_hot_list_get_0`")  # noqa: E501
        # verify the required parameter 'order' is set
        if self.api_client.client_side_validation and ('order' not in local_var_params or  # noqa: E501
                                                        local_var_params['order'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `order` when calling `fetch_city_hot_list_api_v1_douyin_web_fetch_city_hot_list_get_0`")  # noqa: E501
        # verify the required parameter 'city_code' is set
        if self.api_client.client_side_validation and ('city_code' not in local_var_params or  # noqa: E501
                                                        local_var_params['city_code'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `city_code` when calling `fetch_city_hot_list_api_v1_douyin_web_fetch_city_hot_list_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('page_size', local_var_params['page_size']))  # noqa: E501
        if 'sentence_tag' in local_var_params and local_var_params['sentence_tag'] is not None:  # noqa: E501
            query_params.append(('sentence_tag', local_var_params['sentence_tag']))  # noqa: E501
        if 'order' in local_var_params and local_var_params['order'] is not None:  # noqa: E501
            query_params.append(('order', local_var_params['order']))  # noqa: E501
        if 'city_code' in local_var_params and local_var_params['city_code'] is not None:  # noqa: E501
            query_params.append(('city_code', local_var_params['city_code']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_city_hot_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_city_list_api_v1_douyin_web_fetch_city_list_get(self, **kwargs):  # noqa: E501
        """抖音城市列表/Douyin City List  # noqa: E501

        # [中文] ### 用途: - 抖音城市列表以及城市ID ### 返回: - 城市列表数据  # [English] ### Purpose: - Douyin City List and City ID ### Return: - City list data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_city_list_api_v1_douyin_web_fetch_city_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_city_list_api_v1_douyin_web_fetch_city_list_get_with_http_info(**kwargs)  # noqa: E501

    def fetch_city_list_api_v1_douyin_web_fetch_city_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """抖音城市列表/Douyin City List  # noqa: E501

        # [中文] ### 用途: - 抖音城市列表以及城市ID ### 返回: - 城市列表数据  # [English] ### Purpose: - Douyin City List and City ID ### Return: - City list data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_city_list_api_v1_douyin_web_fetch_city_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_city_list_api_v1_douyin_web_fetch_city_list_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_city_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_city_list_api_v1_douyin_web_fetch_city_list_get_0(self, **kwargs):  # noqa: E501
        """抖音城市列表/Douyin City List  # noqa: E501

        # [中文] ### 用途: - 抖音城市列表以及城市ID ### 返回: - 城市列表数据  # [English] ### Purpose: - Douyin City List and City ID ### Return: - City list data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_city_list_api_v1_douyin_web_fetch_city_list_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_city_list_api_v1_douyin_web_fetch_city_list_get_0_with_http_info(**kwargs)  # noqa: E501

    def fetch_city_list_api_v1_douyin_web_fetch_city_list_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """抖音城市列表/Douyin City List  # noqa: E501

        # [中文] ### 用途: - 抖音城市列表以及城市ID ### 返回: - 城市列表数据  # [English] ### Purpose: - Douyin City List and City ID ### Return: - City list data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_city_list_api_v1_douyin_web_fetch_city_list_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_city_list_api_v1_douyin_web_fetch_city_list_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_city_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_douyin_web_guest_cookie_api_v1_douyin_web_fetch_douyin_web_guest_cookie_get(self, user_agent, **kwargs):  # noqa: E501
        """获取抖音Web的游客Cookie/Get the guest Cookie of Douyin Web  # noqa: E501

        # [中文] ### 用途: - 获取抖音Web的游客Cookie - 可以用于爬取抖音Web的数据，如用户作品、合辑作品等。 - 可以固定身份避免部分接口重复数据。 - 请注意：游客Cookie无法爬取所有数据，有一定的限制。 - 可以配合开源项目使用此接口实现抖音Web的数据爬取。 ### 参数: - user_agent: 用户浏览器代理 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get the guest Cookie of Douyin Web - Can be used to crawl data of Douyin Web, such as user videos, mix videos, etc. - Can fix identity to avoid duplicate data for some interfaces. - Please note: Guest Cookie cannot crawl all data, there are certain restrictions. - Can be used with open source projects to implement data crawling of Douyin Web using this interface. ### Parameters: - user_agent: User browser agent ### Return: - Guest Cookie  # [示例/Example] user_agent = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_douyin_web_guest_cookie_api_v1_douyin_web_fetch_douyin_web_guest_cookie_get(user_agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_agent: 用户浏览器代理/User browser agent (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_douyin_web_guest_cookie_api_v1_douyin_web_fetch_douyin_web_guest_cookie_get_with_http_info(user_agent, **kwargs)  # noqa: E501

    def fetch_douyin_web_guest_cookie_api_v1_douyin_web_fetch_douyin_web_guest_cookie_get_with_http_info(self, user_agent, **kwargs):  # noqa: E501
        """获取抖音Web的游客Cookie/Get the guest Cookie of Douyin Web  # noqa: E501

        # [中文] ### 用途: - 获取抖音Web的游客Cookie - 可以用于爬取抖音Web的数据，如用户作品、合辑作品等。 - 可以固定身份避免部分接口重复数据。 - 请注意：游客Cookie无法爬取所有数据，有一定的限制。 - 可以配合开源项目使用此接口实现抖音Web的数据爬取。 ### 参数: - user_agent: 用户浏览器代理 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get the guest Cookie of Douyin Web - Can be used to crawl data of Douyin Web, such as user videos, mix videos, etc. - Can fix identity to avoid duplicate data for some interfaces. - Please note: Guest Cookie cannot crawl all data, there are certain restrictions. - Can be used with open source projects to implement data crawling of Douyin Web using this interface. ### Parameters: - user_agent: User browser agent ### Return: - Guest Cookie  # [示例/Example] user_agent = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_douyin_web_guest_cookie_api_v1_douyin_web_fetch_douyin_web_guest_cookie_get_with_http_info(user_agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_agent: 用户浏览器代理/User browser agent (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_agent'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_douyin_web_guest_cookie_api_v1_douyin_web_fetch_douyin_web_guest_cookie_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_agent' is set
        if self.api_client.client_side_validation and ('user_agent' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_agent'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_agent` when calling `fetch_douyin_web_guest_cookie_api_v1_douyin_web_fetch_douyin_web_guest_cookie_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_agent' in local_var_params and local_var_params['user_agent'] is not None:  # noqa: E501
            query_params.append(('user_agent', local_var_params['user_agent']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_douyin_web_guest_cookie', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_douyin_web_guest_cookie_api_v1_douyin_web_fetch_douyin_web_guest_cookie_get_0(self, user_agent, **kwargs):  # noqa: E501
        """获取抖音Web的游客Cookie/Get the guest Cookie of Douyin Web  # noqa: E501

        # [中文] ### 用途: - 获取抖音Web的游客Cookie - 可以用于爬取抖音Web的数据，如用户作品、合辑作品等。 - 可以固定身份避免部分接口重复数据。 - 请注意：游客Cookie无法爬取所有数据，有一定的限制。 - 可以配合开源项目使用此接口实现抖音Web的数据爬取。 ### 参数: - user_agent: 用户浏览器代理 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get the guest Cookie of Douyin Web - Can be used to crawl data of Douyin Web, such as user videos, mix videos, etc. - Can fix identity to avoid duplicate data for some interfaces. - Please note: Guest Cookie cannot crawl all data, there are certain restrictions. - Can be used with open source projects to implement data crawling of Douyin Web using this interface. ### Parameters: - user_agent: User browser agent ### Return: - Guest Cookie  # [示例/Example] user_agent = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_douyin_web_guest_cookie_api_v1_douyin_web_fetch_douyin_web_guest_cookie_get_0(user_agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_agent: 用户浏览器代理/User browser agent (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_douyin_web_guest_cookie_api_v1_douyin_web_fetch_douyin_web_guest_cookie_get_0_with_http_info(user_agent, **kwargs)  # noqa: E501

    def fetch_douyin_web_guest_cookie_api_v1_douyin_web_fetch_douyin_web_guest_cookie_get_0_with_http_info(self, user_agent, **kwargs):  # noqa: E501
        """获取抖音Web的游客Cookie/Get the guest Cookie of Douyin Web  # noqa: E501

        # [中文] ### 用途: - 获取抖音Web的游客Cookie - 可以用于爬取抖音Web的数据，如用户作品、合辑作品等。 - 可以固定身份避免部分接口重复数据。 - 请注意：游客Cookie无法爬取所有数据，有一定的限制。 - 可以配合开源项目使用此接口实现抖音Web的数据爬取。 ### 参数: - user_agent: 用户浏览器代理 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get the guest Cookie of Douyin Web - Can be used to crawl data of Douyin Web, such as user videos, mix videos, etc. - Can fix identity to avoid duplicate data for some interfaces. - Please note: Guest Cookie cannot crawl all data, there are certain restrictions. - Can be used with open source projects to implement data crawling of Douyin Web using this interface. ### Parameters: - user_agent: User browser agent ### Return: - Guest Cookie  # [示例/Example] user_agent = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_douyin_web_guest_cookie_api_v1_douyin_web_fetch_douyin_web_guest_cookie_get_0_with_http_info(user_agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_agent: 用户浏览器代理/User browser agent (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_agent'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_douyin_web_guest_cookie_api_v1_douyin_web_fetch_douyin_web_guest_cookie_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_agent' is set
        if self.api_client.client_side_validation and ('user_agent' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_agent'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_agent` when calling `fetch_douyin_web_guest_cookie_api_v1_douyin_web_fetch_douyin_web_guest_cookie_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_agent' in local_var_params and local_var_params['user_agent'] is not None:  # noqa: E501
            query_params.append(('user_agent', local_var_params['user_agent']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_douyin_web_guest_cookie', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_game_aweme_api_v1_douyin_web_fetch_game_aweme_get(self, count, **kwargs):  # noqa: E501
        """游戏作品推荐/Knowledge Video  # noqa: E501

        # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 游戏作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Game Video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_game_aweme_api_v1_douyin_web_fetch_game_aweme_get(count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int count: 每页数量/Number per page (required)
        :param int refresh_index: 翻页索引/Paging index
        :param str cookie: 用户自行提供的Cookie/User provided Cookie
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_game_aweme_api_v1_douyin_web_fetch_game_aweme_get_with_http_info(count, **kwargs)  # noqa: E501

    def fetch_game_aweme_api_v1_douyin_web_fetch_game_aweme_get_with_http_info(self, count, **kwargs):  # noqa: E501
        """游戏作品推荐/Knowledge Video  # noqa: E501

        # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 游戏作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Game Video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_game_aweme_api_v1_douyin_web_fetch_game_aweme_get_with_http_info(count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int count: 每页数量/Number per page (required)
        :param int refresh_index: 翻页索引/Paging index
        :param str cookie: 用户自行提供的Cookie/User provided Cookie
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'count',
            'refresh_index',
            'cookie'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_game_aweme_api_v1_douyin_web_fetch_game_aweme_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'count' is set
        if self.api_client.client_side_validation and ('count' not in local_var_params or  # noqa: E501
                                                        local_var_params['count'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `count` when calling `fetch_game_aweme_api_v1_douyin_web_fetch_game_aweme_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'refresh_index' in local_var_params and local_var_params['refresh_index'] is not None:  # noqa: E501
            query_params.append(('refresh_index', local_var_params['refresh_index']))  # noqa: E501
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_game_aweme', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_game_aweme_api_v1_douyin_web_fetch_game_aweme_get_0(self, count, **kwargs):  # noqa: E501
        """游戏作品推荐/Knowledge Video  # noqa: E501

        # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 游戏作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Game Video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_game_aweme_api_v1_douyin_web_fetch_game_aweme_get_0(count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int count: 每页数量/Number per page (required)
        :param int refresh_index: 翻页索引/Paging index
        :param str cookie: 用户自行提供的Cookie/User provided Cookie
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_game_aweme_api_v1_douyin_web_fetch_game_aweme_get_0_with_http_info(count, **kwargs)  # noqa: E501

    def fetch_game_aweme_api_v1_douyin_web_fetch_game_aweme_get_0_with_http_info(self, count, **kwargs):  # noqa: E501
        """游戏作品推荐/Knowledge Video  # noqa: E501

        # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 游戏作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Game Video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_game_aweme_api_v1_douyin_web_fetch_game_aweme_get_0_with_http_info(count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int count: 每页数量/Number per page (required)
        :param int refresh_index: 翻页索引/Paging index
        :param str cookie: 用户自行提供的Cookie/User provided Cookie
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'count',
            'refresh_index',
            'cookie'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_game_aweme_api_v1_douyin_web_fetch_game_aweme_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'count' is set
        if self.api_client.client_side_validation and ('count' not in local_var_params or  # noqa: E501
                                                        local_var_params['count'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `count` when calling `fetch_game_aweme_api_v1_douyin_web_fetch_game_aweme_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'refresh_index' in local_var_params and local_var_params['refresh_index'] is not None:  # noqa: E501
            query_params.append(('refresh_index', local_var_params['refresh_index']))  # noqa: E501
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_game_aweme', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_general_search_result_api_v1_douyin_web_fetch_general_search_result_get(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 -search_range: 0:不限 1:最近看过 2:还未看过 3:关注的人 -content_type: 0:不限 1:视频 2:图集 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - search_range: 0: Unlimited 1: Recently viewed 2: Not yet viewed 3: Followed - content_type: 0: Unlimited 1: Video 2: Album - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_general_search_result_api_v1_douyin_web_fetch_general_search_result_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param str sort_type: 排序类型/Sort type
        :param str publish_time: 发布时间/Publish time
        :param str filter_duration: 视频时长/Duration filter
        :param str search_range: 搜索范围/Search range
        :param str content_type: 内容类型/Content type
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_general_search_result_api_v1_douyin_web_fetch_general_search_result_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_general_search_result_api_v1_douyin_web_fetch_general_search_result_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 -search_range: 0:不限 1:最近看过 2:还未看过 3:关注的人 -content_type: 0:不限 1:视频 2:图集 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - search_range: 0: Unlimited 1: Recently viewed 2: Not yet viewed 3: Followed - content_type: 0: Unlimited 1: Video 2: Album - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_general_search_result_api_v1_douyin_web_fetch_general_search_result_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param str sort_type: 排序类型/Sort type
        :param str publish_time: 发布时间/Publish time
        :param str filter_duration: 视频时长/Duration filter
        :param str search_range: 搜索范围/Search range
        :param str content_type: 内容类型/Content type
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'offset',
            'count',
            'sort_type',
            'publish_time',
            'filter_duration',
            'search_range',
            'content_type',
            'search_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_general_search_result_api_v1_douyin_web_fetch_general_search_result_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_general_search_result_api_v1_douyin_web_fetch_general_search_result_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'sort_type' in local_var_params and local_var_params['sort_type'] is not None:  # noqa: E501
            query_params.append(('sort_type', local_var_params['sort_type']))  # noqa: E501
        if 'publish_time' in local_var_params and local_var_params['publish_time'] is not None:  # noqa: E501
            query_params.append(('publish_time', local_var_params['publish_time']))  # noqa: E501
        if 'filter_duration' in local_var_params and local_var_params['filter_duration'] is not None:  # noqa: E501
            query_params.append(('filter_duration', local_var_params['filter_duration']))  # noqa: E501
        if 'search_range' in local_var_params and local_var_params['search_range'] is not None:  # noqa: E501
            query_params.append(('search_range', local_var_params['search_range']))  # noqa: E501
        if 'content_type' in local_var_params and local_var_params['content_type'] is not None:  # noqa: E501
            query_params.append(('content_type', local_var_params['content_type']))  # noqa: E501
        if 'search_id' in local_var_params and local_var_params['search_id'] is not None:  # noqa: E501
            query_params.append(('search_id', local_var_params['search_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_general_search_result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_general_search_result_api_v1_douyin_web_fetch_general_search_result_get_0(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 -search_range: 0:不限 1:最近看过 2:还未看过 3:关注的人 -content_type: 0:不限 1:视频 2:图集 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - search_range: 0: Unlimited 1: Recently viewed 2: Not yet viewed 3: Followed - content_type: 0: Unlimited 1: Video 2: Album - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_general_search_result_api_v1_douyin_web_fetch_general_search_result_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param str sort_type: 排序类型/Sort type
        :param str publish_time: 发布时间/Publish time
        :param str filter_duration: 视频时长/Duration filter
        :param str search_range: 搜索范围/Search range
        :param str content_type: 内容类型/Content type
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_general_search_result_api_v1_douyin_web_fetch_general_search_result_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_general_search_result_api_v1_douyin_web_fetch_general_search_result_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 -search_range: 0:不限 1:最近看过 2:还未看过 3:关注的人 -content_type: 0:不限 1:视频 2:图集 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - search_range: 0: Unlimited 1: Recently viewed 2: Not yet viewed 3: Followed - content_type: 0: Unlimited 1: Video 2: Album - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_general_search_result_api_v1_douyin_web_fetch_general_search_result_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param str sort_type: 排序类型/Sort type
        :param str publish_time: 发布时间/Publish time
        :param str filter_duration: 视频时长/Duration filter
        :param str search_range: 搜索范围/Search range
        :param str content_type: 内容类型/Content type
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'offset',
            'count',
            'sort_type',
            'publish_time',
            'filter_duration',
            'search_range',
            'content_type',
            'search_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_general_search_result_api_v1_douyin_web_fetch_general_search_result_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_general_search_result_api_v1_douyin_web_fetch_general_search_result_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'sort_type' in local_var_params and local_var_params['sort_type'] is not None:  # noqa: E501
            query_params.append(('sort_type', local_var_params['sort_type']))  # noqa: E501
        if 'publish_time' in local_var_params and local_var_params['publish_time'] is not None:  # noqa: E501
            query_params.append(('publish_time', local_var_params['publish_time']))  # noqa: E501
        if 'filter_duration' in local_var_params and local_var_params['filter_duration'] is not None:  # noqa: E501
            query_params.append(('filter_duration', local_var_params['filter_duration']))  # noqa: E501
        if 'search_range' in local_var_params and local_var_params['search_range'] is not None:  # noqa: E501
            query_params.append(('search_range', local_var_params['search_range']))  # noqa: E501
        if 'content_type' in local_var_params and local_var_params['content_type'] is not None:  # noqa: E501
            query_params.append(('content_type', local_var_params['content_type']))  # noqa: E501
        if 'search_id' in local_var_params and local_var_params['search_id'] is not None:  # noqa: E501
            query_params.append(('search_id', local_var_params['search_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_general_search_result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_home_feed_api_v1_douyin_web_fetch_home_feed_get(self, **kwargs):  # noqa: E501
        """获取首页推荐数据/Get home feed data  # noqa: E501

        # [中文] ### 用途: - 获取首页推荐数据 ### 参数: - count: 数量，默认为10，建议保持不变。 - refresh_index: 翻页索引，默认为0，然后每次增加1用于翻页。 ### 返回: - Feed数据  # [English] ### Purpose: - Get home feed data ### Parameters: - count: Number, default is 10, it is recommended to keep it unchanged. - refresh_index: Paging index, default is 0, then increase by 1 each time for paging. ### Return: - Feed data  # [示例/Example] count = 10 refresh_index = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_feed_api_v1_douyin_web_fetch_home_feed_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int count: 数量/Number
        :param int refresh_index: 翻页索引/Paging index
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_home_feed_api_v1_douyin_web_fetch_home_feed_get_with_http_info(**kwargs)  # noqa: E501

    def fetch_home_feed_api_v1_douyin_web_fetch_home_feed_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取首页推荐数据/Get home feed data  # noqa: E501

        # [中文] ### 用途: - 获取首页推荐数据 ### 参数: - count: 数量，默认为10，建议保持不变。 - refresh_index: 翻页索引，默认为0，然后每次增加1用于翻页。 ### 返回: - Feed数据  # [English] ### Purpose: - Get home feed data ### Parameters: - count: Number, default is 10, it is recommended to keep it unchanged. - refresh_index: Paging index, default is 0, then increase by 1 each time for paging. ### Return: - Feed data  # [示例/Example] count = 10 refresh_index = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_feed_api_v1_douyin_web_fetch_home_feed_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int count: 数量/Number
        :param int refresh_index: 翻页索引/Paging index
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'count',
            'refresh_index'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_home_feed_api_v1_douyin_web_fetch_home_feed_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'refresh_index' in local_var_params and local_var_params['refresh_index'] is not None:  # noqa: E501
            query_params.append(('refresh_index', local_var_params['refresh_index']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_home_feed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_home_feed_api_v1_douyin_web_fetch_home_feed_get_0(self, **kwargs):  # noqa: E501
        """获取首页推荐数据/Get home feed data  # noqa: E501

        # [中文] ### 用途: - 获取首页推荐数据 ### 参数: - count: 数量，默认为10，建议保持不变。 - refresh_index: 翻页索引，默认为0，然后每次增加1用于翻页。 ### 返回: - Feed数据  # [English] ### Purpose: - Get home feed data ### Parameters: - count: Number, default is 10, it is recommended to keep it unchanged. - refresh_index: Paging index, default is 0, then increase by 1 each time for paging. ### Return: - Feed data  # [示例/Example] count = 10 refresh_index = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_feed_api_v1_douyin_web_fetch_home_feed_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int count: 数量/Number
        :param int refresh_index: 翻页索引/Paging index
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_home_feed_api_v1_douyin_web_fetch_home_feed_get_0_with_http_info(**kwargs)  # noqa: E501

    def fetch_home_feed_api_v1_douyin_web_fetch_home_feed_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取首页推荐数据/Get home feed data  # noqa: E501

        # [中文] ### 用途: - 获取首页推荐数据 ### 参数: - count: 数量，默认为10，建议保持不变。 - refresh_index: 翻页索引，默认为0，然后每次增加1用于翻页。 ### 返回: - Feed数据  # [English] ### Purpose: - Get home feed data ### Parameters: - count: Number, default is 10, it is recommended to keep it unchanged. - refresh_index: Paging index, default is 0, then increase by 1 each time for paging. ### Return: - Feed data  # [示例/Example] count = 10 refresh_index = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_feed_api_v1_douyin_web_fetch_home_feed_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int count: 数量/Number
        :param int refresh_index: 翻页索引/Paging index
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'count',
            'refresh_index'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_home_feed_api_v1_douyin_web_fetch_home_feed_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'refresh_index' in local_var_params and local_var_params['refresh_index'] is not None:  # noqa: E501
            query_params.append(('refresh_index', local_var_params['refresh_index']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_home_feed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hot_list_api_v1_douyin_web_fetch_hot_list_get(self, page, page_size, sentence_tag, **kwargs):  # noqa: E501
        """抖音热点总榜单/Douyin Hot List  # noqa: E501

        # [中文] ### 用途: - 抖音热点总榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty ### Return: - Hotspot list data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_list_api_v1_douyin_web_fetch_hot_list_get(page, page_size, sentence_tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page: 页码/Page number (required)
        :param int page_size: 每页数量/Number per page (required)
        :param str sentence_tag: 分类标签/Category tag (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hot_list_api_v1_douyin_web_fetch_hot_list_get_with_http_info(page, page_size, sentence_tag, **kwargs)  # noqa: E501

    def fetch_hot_list_api_v1_douyin_web_fetch_hot_list_get_with_http_info(self, page, page_size, sentence_tag, **kwargs):  # noqa: E501
        """抖音热点总榜单/Douyin Hot List  # noqa: E501

        # [中文] ### 用途: - 抖音热点总榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty ### Return: - Hotspot list data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_list_api_v1_douyin_web_fetch_hot_list_get_with_http_info(page, page_size, sentence_tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page: 页码/Page number (required)
        :param int page_size: 每页数量/Number per page (required)
        :param str sentence_tag: 分类标签/Category tag (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'page',
            'page_size',
            'sentence_tag'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hot_list_api_v1_douyin_web_fetch_hot_list_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page' is set
        if self.api_client.client_side_validation and ('page' not in local_var_params or  # noqa: E501
                                                        local_var_params['page'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page` when calling `fetch_hot_list_api_v1_douyin_web_fetch_hot_list_get`")  # noqa: E501
        # verify the required parameter 'page_size' is set
        if self.api_client.client_side_validation and ('page_size' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_size'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_size` when calling `fetch_hot_list_api_v1_douyin_web_fetch_hot_list_get`")  # noqa: E501
        # verify the required parameter 'sentence_tag' is set
        if self.api_client.client_side_validation and ('sentence_tag' not in local_var_params or  # noqa: E501
                                                        local_var_params['sentence_tag'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sentence_tag` when calling `fetch_hot_list_api_v1_douyin_web_fetch_hot_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('page_size', local_var_params['page_size']))  # noqa: E501
        if 'sentence_tag' in local_var_params and local_var_params['sentence_tag'] is not None:  # noqa: E501
            query_params.append(('sentence_tag', local_var_params['sentence_tag']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_hot_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hot_list_api_v1_douyin_web_fetch_hot_list_get_0(self, page, page_size, sentence_tag, **kwargs):  # noqa: E501
        """抖音热点总榜单/Douyin Hot List  # noqa: E501

        # [中文] ### 用途: - 抖音热点总榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty ### Return: - Hotspot list data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_list_api_v1_douyin_web_fetch_hot_list_get_0(page, page_size, sentence_tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page: 页码/Page number (required)
        :param int page_size: 每页数量/Number per page (required)
        :param str sentence_tag: 分类标签/Category tag (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hot_list_api_v1_douyin_web_fetch_hot_list_get_0_with_http_info(page, page_size, sentence_tag, **kwargs)  # noqa: E501

    def fetch_hot_list_api_v1_douyin_web_fetch_hot_list_get_0_with_http_info(self, page, page_size, sentence_tag, **kwargs):  # noqa: E501
        """抖音热点总榜单/Douyin Hot List  # noqa: E501

        # [中文] ### 用途: - 抖音热点总榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty ### Return: - Hotspot list data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_list_api_v1_douyin_web_fetch_hot_list_get_0_with_http_info(page, page_size, sentence_tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page: 页码/Page number (required)
        :param int page_size: 每页数量/Number per page (required)
        :param str sentence_tag: 分类标签/Category tag (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'page',
            'page_size',
            'sentence_tag'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hot_list_api_v1_douyin_web_fetch_hot_list_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page' is set
        if self.api_client.client_side_validation and ('page' not in local_var_params or  # noqa: E501
                                                        local_var_params['page'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page` when calling `fetch_hot_list_api_v1_douyin_web_fetch_hot_list_get_0`")  # noqa: E501
        # verify the required parameter 'page_size' is set
        if self.api_client.client_side_validation and ('page_size' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_size'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_size` when calling `fetch_hot_list_api_v1_douyin_web_fetch_hot_list_get_0`")  # noqa: E501
        # verify the required parameter 'sentence_tag' is set
        if self.api_client.client_side_validation and ('sentence_tag' not in local_var_params or  # noqa: E501
                                                        local_var_params['sentence_tag'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sentence_tag` when calling `fetch_hot_list_api_v1_douyin_web_fetch_hot_list_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('page_size', local_var_params['page_size']))  # noqa: E501
        if 'sentence_tag' in local_var_params and local_var_params['sentence_tag'] is not None:  # noqa: E501
            query_params.append(('sentence_tag', local_var_params['sentence_tag']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_hot_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hot_search_result_api_v1_douyin_web_fetch_hot_search_result_get(self, **kwargs):  # noqa: E501
        """获取抖音热榜数据/Get Douyin hot search results  # noqa: E501

        # [中文] ### 用途: - 获取抖音热榜数据 ### 返回: - 热榜数据  # [English] ### Purpose: - Get Douyin hot search results ### Return: - Hot search results  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_search_result_api_v1_douyin_web_fetch_hot_search_result_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hot_search_result_api_v1_douyin_web_fetch_hot_search_result_get_with_http_info(**kwargs)  # noqa: E501

    def fetch_hot_search_result_api_v1_douyin_web_fetch_hot_search_result_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取抖音热榜数据/Get Douyin hot search results  # noqa: E501

        # [中文] ### 用途: - 获取抖音热榜数据 ### 返回: - 热榜数据  # [English] ### Purpose: - Get Douyin hot search results ### Return: - Hot search results  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_search_result_api_v1_douyin_web_fetch_hot_search_result_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hot_search_result_api_v1_douyin_web_fetch_hot_search_result_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_hot_search_result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hot_search_result_api_v1_douyin_web_fetch_hot_search_result_get_0(self, **kwargs):  # noqa: E501
        """获取抖音热榜数据/Get Douyin hot search results  # noqa: E501

        # [中文] ### 用途: - 获取抖音热榜数据 ### 返回: - 热榜数据  # [English] ### Purpose: - Get Douyin hot search results ### Return: - Hot search results  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_search_result_api_v1_douyin_web_fetch_hot_search_result_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hot_search_result_api_v1_douyin_web_fetch_hot_search_result_get_0_with_http_info(**kwargs)  # noqa: E501

    def fetch_hot_search_result_api_v1_douyin_web_fetch_hot_search_result_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取抖音热榜数据/Get Douyin hot search results  # noqa: E501

        # [中文] ### 用途: - 获取抖音热榜数据 ### 返回: - 热榜数据  # [English] ### Purpose: - Get Douyin hot search results ### Return: - Hot search results  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_search_result_api_v1_douyin_web_fetch_hot_search_result_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hot_search_result_api_v1_douyin_web_fetch_hot_search_result_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_hot_search_result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_knowledge_aweme_api_v1_douyin_web_fetch_knowledge_aweme_get(self, count, **kwargs):  # noqa: E501
        """知识作品推荐/Knowledge Video  # noqa: E501

        # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 知识作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Knowledge Video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_knowledge_aweme_api_v1_douyin_web_fetch_knowledge_aweme_get(count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int count: 每页数量/Number per page (required)
        :param int refresh_index: 翻页索引/Paging index
        :param str cookie: 用户自行提供的Cookie/User provided Cookie
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_knowledge_aweme_api_v1_douyin_web_fetch_knowledge_aweme_get_with_http_info(count, **kwargs)  # noqa: E501

    def fetch_knowledge_aweme_api_v1_douyin_web_fetch_knowledge_aweme_get_with_http_info(self, count, **kwargs):  # noqa: E501
        """知识作品推荐/Knowledge Video  # noqa: E501

        # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 知识作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Knowledge Video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_knowledge_aweme_api_v1_douyin_web_fetch_knowledge_aweme_get_with_http_info(count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int count: 每页数量/Number per page (required)
        :param int refresh_index: 翻页索引/Paging index
        :param str cookie: 用户自行提供的Cookie/User provided Cookie
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'count',
            'refresh_index',
            'cookie'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_knowledge_aweme_api_v1_douyin_web_fetch_knowledge_aweme_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'count' is set
        if self.api_client.client_side_validation and ('count' not in local_var_params or  # noqa: E501
                                                        local_var_params['count'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `count` when calling `fetch_knowledge_aweme_api_v1_douyin_web_fetch_knowledge_aweme_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'refresh_index' in local_var_params and local_var_params['refresh_index'] is not None:  # noqa: E501
            query_params.append(('refresh_index', local_var_params['refresh_index']))  # noqa: E501
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_knowledge_aweme', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_knowledge_aweme_api_v1_douyin_web_fetch_knowledge_aweme_get_0(self, count, **kwargs):  # noqa: E501
        """知识作品推荐/Knowledge Video  # noqa: E501

        # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 知识作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Knowledge Video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_knowledge_aweme_api_v1_douyin_web_fetch_knowledge_aweme_get_0(count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int count: 每页数量/Number per page (required)
        :param int refresh_index: 翻页索引/Paging index
        :param str cookie: 用户自行提供的Cookie/User provided Cookie
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_knowledge_aweme_api_v1_douyin_web_fetch_knowledge_aweme_get_0_with_http_info(count, **kwargs)  # noqa: E501

    def fetch_knowledge_aweme_api_v1_douyin_web_fetch_knowledge_aweme_get_0_with_http_info(self, count, **kwargs):  # noqa: E501
        """知识作品推荐/Knowledge Video  # noqa: E501

        # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 知识作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Knowledge Video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_knowledge_aweme_api_v1_douyin_web_fetch_knowledge_aweme_get_0_with_http_info(count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int count: 每页数量/Number per page (required)
        :param int refresh_index: 翻页索引/Paging index
        :param str cookie: 用户自行提供的Cookie/User provided Cookie
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'count',
            'refresh_index',
            'cookie'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_knowledge_aweme_api_v1_douyin_web_fetch_knowledge_aweme_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'count' is set
        if self.api_client.client_side_validation and ('count' not in local_var_params or  # noqa: E501
                                                        local_var_params['count'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `count` when calling `fetch_knowledge_aweme_api_v1_douyin_web_fetch_knowledge_aweme_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'refresh_index' in local_var_params and local_var_params['refresh_index'] is not None:  # noqa: E501
            query_params.append(('refresh_index', local_var_params['refresh_index']))  # noqa: E501
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_knowledge_aweme', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_live_gift_ranking_api_v1_douyin_web_fetch_live_gift_ranking_get(self, room_id, **kwargs):  # noqa: E501
        """获取直播间送礼用户排行榜/Get live room gift user ranking  # noqa: E501

        # [中文] ### 用途: - 获取直播间送礼用户排行榜 ### 参数: - room_id: 直播间room_id - rank_type: 排行类型，默认为30不用修改。 ### 返回: - 排行榜数据  # [English] ### Purpose: - Get live room gift user ranking ### Parameters: - room_id: Room room_id - rank_type: Leaderboard type, default is 30, no need to modify. ### Return: - Leaderboard data  # [示例/Example] room_id = \"7356585666190461731\" rank_type = 30  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_gift_ranking_api_v1_douyin_web_fetch_live_gift_ranking_get(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间room_id/Room room_id (required)
        :param int rank_type: 排行类型/Leaderboard type
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_live_gift_ranking_api_v1_douyin_web_fetch_live_gift_ranking_get_with_http_info(room_id, **kwargs)  # noqa: E501

    def fetch_live_gift_ranking_api_v1_douyin_web_fetch_live_gift_ranking_get_with_http_info(self, room_id, **kwargs):  # noqa: E501
        """获取直播间送礼用户排行榜/Get live room gift user ranking  # noqa: E501

        # [中文] ### 用途: - 获取直播间送礼用户排行榜 ### 参数: - room_id: 直播间room_id - rank_type: 排行类型，默认为30不用修改。 ### 返回: - 排行榜数据  # [English] ### Purpose: - Get live room gift user ranking ### Parameters: - room_id: Room room_id - rank_type: Leaderboard type, default is 30, no need to modify. ### Return: - Leaderboard data  # [示例/Example] room_id = \"7356585666190461731\" rank_type = 30  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_gift_ranking_api_v1_douyin_web_fetch_live_gift_ranking_get_with_http_info(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间room_id/Room room_id (required)
        :param int rank_type: 排行类型/Leaderboard type
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'room_id',
            'rank_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_live_gift_ranking_api_v1_douyin_web_fetch_live_gift_ranking_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'room_id' is set
        if self.api_client.client_side_validation and ('room_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['room_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `room_id` when calling `fetch_live_gift_ranking_api_v1_douyin_web_fetch_live_gift_ranking_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'room_id' in local_var_params and local_var_params['room_id'] is not None:  # noqa: E501
            query_params.append(('room_id', local_var_params['room_id']))  # noqa: E501
        if 'rank_type' in local_var_params and local_var_params['rank_type'] is not None:  # noqa: E501
            query_params.append(('rank_type', local_var_params['rank_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_live_gift_ranking', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_live_gift_ranking_api_v1_douyin_web_fetch_live_gift_ranking_get_0(self, room_id, **kwargs):  # noqa: E501
        """获取直播间送礼用户排行榜/Get live room gift user ranking  # noqa: E501

        # [中文] ### 用途: - 获取直播间送礼用户排行榜 ### 参数: - room_id: 直播间room_id - rank_type: 排行类型，默认为30不用修改。 ### 返回: - 排行榜数据  # [English] ### Purpose: - Get live room gift user ranking ### Parameters: - room_id: Room room_id - rank_type: Leaderboard type, default is 30, no need to modify. ### Return: - Leaderboard data  # [示例/Example] room_id = \"7356585666190461731\" rank_type = 30  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_gift_ranking_api_v1_douyin_web_fetch_live_gift_ranking_get_0(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间room_id/Room room_id (required)
        :param int rank_type: 排行类型/Leaderboard type
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_live_gift_ranking_api_v1_douyin_web_fetch_live_gift_ranking_get_0_with_http_info(room_id, **kwargs)  # noqa: E501

    def fetch_live_gift_ranking_api_v1_douyin_web_fetch_live_gift_ranking_get_0_with_http_info(self, room_id, **kwargs):  # noqa: E501
        """获取直播间送礼用户排行榜/Get live room gift user ranking  # noqa: E501

        # [中文] ### 用途: - 获取直播间送礼用户排行榜 ### 参数: - room_id: 直播间room_id - rank_type: 排行类型，默认为30不用修改。 ### 返回: - 排行榜数据  # [English] ### Purpose: - Get live room gift user ranking ### Parameters: - room_id: Room room_id - rank_type: Leaderboard type, default is 30, no need to modify. ### Return: - Leaderboard data  # [示例/Example] room_id = \"7356585666190461731\" rank_type = 30  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_gift_ranking_api_v1_douyin_web_fetch_live_gift_ranking_get_0_with_http_info(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间room_id/Room room_id (required)
        :param int rank_type: 排行类型/Leaderboard type
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'room_id',
            'rank_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_live_gift_ranking_api_v1_douyin_web_fetch_live_gift_ranking_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'room_id' is set
        if self.api_client.client_side_validation and ('room_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['room_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `room_id` when calling `fetch_live_gift_ranking_api_v1_douyin_web_fetch_live_gift_ranking_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'room_id' in local_var_params and local_var_params['room_id'] is not None:  # noqa: E501
            query_params.append(('room_id', local_var_params['room_id']))  # noqa: E501
        if 'rank_type' in local_var_params and local_var_params['rank_type'] is not None:  # noqa: E501
            query_params.append(('rank_type', local_var_params['rank_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_live_gift_ranking', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_live_room_product_result_api_v1_douyin_web_fetch_live_room_product_result_get(self, room_id, author_id, **kwargs):  # noqa: E501
        """抖音直播间商品信息/Douyin live room product information  # noqa: E501

        # [中文] ### 用途: - 抖音直播间商品信息 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie，如获取失败请手动过一次验证码) - room_id: 直播间room_id - author_id: 作者id - limit: 数量 ### 返回: - 商品信息  # [English] ### Purpose: - Douyin live room product information ### Parameters: - cookie: User's web version of Douyin Cookie (This interface requires users to provide their own Cookie, if the acquisition fails, please manually pass the captcha code once) - room_id: Room room_id - author_id: Author id - limit: Number ### Return: - Product information  # [示例/Example] cookie = \"YOUR_COOKIE\" room_id = \"7356742011975715619\" author_id = \"2207432981615527\" limit = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_room_product_result_api_v1_douyin_web_fetch_live_room_product_result_get(room_id, author_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间room_id/Room room_id (required)
        :param str author_id: 作者id/Author id (required)
        :param int limit: 数量/Number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_live_room_product_result_api_v1_douyin_web_fetch_live_room_product_result_get_with_http_info(room_id, author_id, **kwargs)  # noqa: E501

    def fetch_live_room_product_result_api_v1_douyin_web_fetch_live_room_product_result_get_with_http_info(self, room_id, author_id, **kwargs):  # noqa: E501
        """抖音直播间商品信息/Douyin live room product information  # noqa: E501

        # [中文] ### 用途: - 抖音直播间商品信息 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie，如获取失败请手动过一次验证码) - room_id: 直播间room_id - author_id: 作者id - limit: 数量 ### 返回: - 商品信息  # [English] ### Purpose: - Douyin live room product information ### Parameters: - cookie: User's web version of Douyin Cookie (This interface requires users to provide their own Cookie, if the acquisition fails, please manually pass the captcha code once) - room_id: Room room_id - author_id: Author id - limit: Number ### Return: - Product information  # [示例/Example] cookie = \"YOUR_COOKIE\" room_id = \"7356742011975715619\" author_id = \"2207432981615527\" limit = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_room_product_result_api_v1_douyin_web_fetch_live_room_product_result_get_with_http_info(room_id, author_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间room_id/Room room_id (required)
        :param str author_id: 作者id/Author id (required)
        :param int limit: 数量/Number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'room_id',
            'author_id',
            'limit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_live_room_product_result_api_v1_douyin_web_fetch_live_room_product_result_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'room_id' is set
        if self.api_client.client_side_validation and ('room_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['room_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `room_id` when calling `fetch_live_room_product_result_api_v1_douyin_web_fetch_live_room_product_result_get`")  # noqa: E501
        # verify the required parameter 'author_id' is set
        if self.api_client.client_side_validation and ('author_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['author_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `author_id` when calling `fetch_live_room_product_result_api_v1_douyin_web_fetch_live_room_product_result_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'room_id' in local_var_params and local_var_params['room_id'] is not None:  # noqa: E501
            query_params.append(('room_id', local_var_params['room_id']))  # noqa: E501
        if 'author_id' in local_var_params and local_var_params['author_id'] is not None:  # noqa: E501
            query_params.append(('author_id', local_var_params['author_id']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_live_room_product_result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_live_room_product_result_api_v1_douyin_web_fetch_live_room_product_result_get_0(self, room_id, author_id, **kwargs):  # noqa: E501
        """抖音直播间商品信息/Douyin live room product information  # noqa: E501

        # [中文] ### 用途: - 抖音直播间商品信息 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie，如获取失败请手动过一次验证码) - room_id: 直播间room_id - author_id: 作者id - limit: 数量 ### 返回: - 商品信息  # [English] ### Purpose: - Douyin live room product information ### Parameters: - cookie: User's web version of Douyin Cookie (This interface requires users to provide their own Cookie, if the acquisition fails, please manually pass the captcha code once) - room_id: Room room_id - author_id: Author id - limit: Number ### Return: - Product information  # [示例/Example] cookie = \"YOUR_COOKIE\" room_id = \"7356742011975715619\" author_id = \"2207432981615527\" limit = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_room_product_result_api_v1_douyin_web_fetch_live_room_product_result_get_0(room_id, author_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间room_id/Room room_id (required)
        :param str author_id: 作者id/Author id (required)
        :param int limit: 数量/Number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_live_room_product_result_api_v1_douyin_web_fetch_live_room_product_result_get_0_with_http_info(room_id, author_id, **kwargs)  # noqa: E501

    def fetch_live_room_product_result_api_v1_douyin_web_fetch_live_room_product_result_get_0_with_http_info(self, room_id, author_id, **kwargs):  # noqa: E501
        """抖音直播间商品信息/Douyin live room product information  # noqa: E501

        # [中文] ### 用途: - 抖音直播间商品信息 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie，如获取失败请手动过一次验证码) - room_id: 直播间room_id - author_id: 作者id - limit: 数量 ### 返回: - 商品信息  # [English] ### Purpose: - Douyin live room product information ### Parameters: - cookie: User's web version of Douyin Cookie (This interface requires users to provide their own Cookie, if the acquisition fails, please manually pass the captcha code once) - room_id: Room room_id - author_id: Author id - limit: Number ### Return: - Product information  # [示例/Example] cookie = \"YOUR_COOKIE\" room_id = \"7356742011975715619\" author_id = \"2207432981615527\" limit = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_room_product_result_api_v1_douyin_web_fetch_live_room_product_result_get_0_with_http_info(room_id, author_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间room_id/Room room_id (required)
        :param str author_id: 作者id/Author id (required)
        :param int limit: 数量/Number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'room_id',
            'author_id',
            'limit'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_live_room_product_result_api_v1_douyin_web_fetch_live_room_product_result_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'room_id' is set
        if self.api_client.client_side_validation and ('room_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['room_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `room_id` when calling `fetch_live_room_product_result_api_v1_douyin_web_fetch_live_room_product_result_get_0`")  # noqa: E501
        # verify the required parameter 'author_id' is set
        if self.api_client.client_side_validation and ('author_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['author_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `author_id` when calling `fetch_live_room_product_result_api_v1_douyin_web_fetch_live_room_product_result_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'room_id' in local_var_params and local_var_params['room_id'] is not None:  # noqa: E501
            query_params.append(('room_id', local_var_params['room_id']))  # noqa: E501
        if 'author_id' in local_var_params and local_var_params['author_id'] is not None:  # noqa: E501
            query_params.append(('author_id', local_var_params['author_id']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_live_room_product_result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_live_search_result_api_v1_douyin_web_fetch_live_search_result_get(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的直播搜索结果/Get live search results of specified keywords  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_search_result_api_v1_douyin_web_fetch_live_search_result_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_live_search_result_api_v1_douyin_web_fetch_live_search_result_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_live_search_result_api_v1_douyin_web_fetch_live_search_result_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的直播搜索结果/Get live search results of specified keywords  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_search_result_api_v1_douyin_web_fetch_live_search_result_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'offset',
            'count',
            'search_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_live_search_result_api_v1_douyin_web_fetch_live_search_result_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_live_search_result_api_v1_douyin_web_fetch_live_search_result_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'search_id' in local_var_params and local_var_params['search_id'] is not None:  # noqa: E501
            query_params.append(('search_id', local_var_params['search_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_live_search_result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_live_search_result_api_v1_douyin_web_fetch_live_search_result_get_0(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的直播搜索结果/Get live search results of specified keywords  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_search_result_api_v1_douyin_web_fetch_live_search_result_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_live_search_result_api_v1_douyin_web_fetch_live_search_result_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_live_search_result_api_v1_douyin_web_fetch_live_search_result_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的直播搜索结果/Get live search results of specified keywords  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_search_result_api_v1_douyin_web_fetch_live_search_result_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'offset',
            'count',
            'search_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_live_search_result_api_v1_douyin_web_fetch_live_search_result_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_live_search_result_api_v1_douyin_web_fetch_live_search_result_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'search_id' in local_var_params and local_var_params['search_id'] is not None:  # noqa: E501
            query_params.append(('search_id', local_var_params['search_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_live_search_result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_multi_video_api_v1_douyin_web_fetch_multi_video_post(self, **kwargs):  # noqa: E501
        """批量获取视频信息/Batch Get Video Information  # noqa: E501

        # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持50个视频，此接口收费固定价格为0.001$ * 50 = 0.05$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持50个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 50 videos at a time, this interface charges a fixed price of 0.001$ * 50 = 0.05$ each time. ### Parameters: - aweme_ids: List of video ids, up to 50 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [\"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\"]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_multi_video_api_v1_douyin_web_fetch_multi_video_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_multi_video_api_v1_douyin_web_fetch_multi_video_post_with_http_info(**kwargs)  # noqa: E501

    def fetch_multi_video_api_v1_douyin_web_fetch_multi_video_post_with_http_info(self, **kwargs):  # noqa: E501
        """批量获取视频信息/Batch Get Video Information  # noqa: E501

        # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持50个视频，此接口收费固定价格为0.001$ * 50 = 0.05$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持50个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 50 videos at a time, this interface charges a fixed price of 0.001$ * 50 = 0.05$ each time. ### Parameters: - aweme_ids: List of video ids, up to 50 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [\"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\"]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_multi_video_api_v1_douyin_web_fetch_multi_video_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'request_body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_multi_video_api_v1_douyin_web_fetch_multi_video_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_multi_video', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_multi_video_api_v1_douyin_web_fetch_multi_video_post_0(self, **kwargs):  # noqa: E501
        """批量获取视频信息/Batch Get Video Information  # noqa: E501

        # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持50个视频，此接口收费固定价格为0.001$ * 50 = 0.05$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持50个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 50 videos at a time, this interface charges a fixed price of 0.001$ * 50 = 0.05$ each time. ### Parameters: - aweme_ids: List of video ids, up to 50 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [\"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\"]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_multi_video_api_v1_douyin_web_fetch_multi_video_post_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_multi_video_api_v1_douyin_web_fetch_multi_video_post_0_with_http_info(**kwargs)  # noqa: E501

    def fetch_multi_video_api_v1_douyin_web_fetch_multi_video_post_0_with_http_info(self, **kwargs):  # noqa: E501
        """批量获取视频信息/Batch Get Video Information  # noqa: E501

        # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持50个视频，此接口收费固定价格为0.001$ * 50 = 0.05$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持50个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 50 videos at a time, this interface charges a fixed price of 0.001$ * 50 = 0.05$ each time. ### Parameters: - aweme_ids: List of video ids, up to 50 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [\"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\"]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_multi_video_api_v1_douyin_web_fetch_multi_video_post_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'request_body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_multi_video_api_v1_douyin_web_fetch_multi_video_post_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_multi_video', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_api_v1_douyin_web_fetch_one_video_get(self, aweme_id, **kwargs):  # noqa: E501
        """获取单个作品数据，此接口即将废弃，请使用APP接口/Get single video data, this endpoint will be deprecated soon, please use APP endpoint  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据 - 此接口无法保障稳定性，如果有爬取单一视频需求，请使用下面的接口。 - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot guarantee stability. If you need to crawl a single video, please use the following interface. - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_douyin_web_fetch_one_video_get(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_api_v1_douyin_web_fetch_one_video_get_with_http_info(aweme_id, **kwargs)  # noqa: E501

    def fetch_one_video_api_v1_douyin_web_fetch_one_video_get_with_http_info(self, aweme_id, **kwargs):  # noqa: E501
        """获取单个作品数据，此接口即将废弃，请使用APP接口/Get single video data, this endpoint will be deprecated soon, please use APP endpoint  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据 - 此接口无法保障稳定性，如果有爬取单一视频需求，请使用下面的接口。 - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot guarantee stability. If you need to crawl a single video, please use the following interface. - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_douyin_web_fetch_one_video_get_with_http_info(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'aweme_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_api_v1_douyin_web_fetch_one_video_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'aweme_id' is set
        if self.api_client.client_side_validation and ('aweme_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['aweme_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `aweme_id` when calling `fetch_one_video_api_v1_douyin_web_fetch_one_video_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'aweme_id' in local_var_params and local_var_params['aweme_id'] is not None:  # noqa: E501
            query_params.append(('aweme_id', local_var_params['aweme_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_one_video', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_api_v1_douyin_web_fetch_one_video_get_0(self, aweme_id, **kwargs):  # noqa: E501
        """获取单个作品数据，此接口即将废弃，请使用APP接口/Get single video data, this endpoint will be deprecated soon, please use APP endpoint  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据 - 此接口无法保障稳定性，如果有爬取单一视频需求，请使用下面的接口。 - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot guarantee stability. If you need to crawl a single video, please use the following interface. - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_douyin_web_fetch_one_video_get_0(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_api_v1_douyin_web_fetch_one_video_get_0_with_http_info(aweme_id, **kwargs)  # noqa: E501

    def fetch_one_video_api_v1_douyin_web_fetch_one_video_get_0_with_http_info(self, aweme_id, **kwargs):  # noqa: E501
        """获取单个作品数据，此接口即将废弃，请使用APP接口/Get single video data, this endpoint will be deprecated soon, please use APP endpoint  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据 - 此接口无法保障稳定性，如果有爬取单一视频需求，请使用下面的接口。 - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot guarantee stability. If you need to crawl a single video, please use the following interface. - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_douyin_web_fetch_one_video_get_0_with_http_info(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'aweme_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_api_v1_douyin_web_fetch_one_video_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'aweme_id' is set
        if self.api_client.client_side_validation and ('aweme_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['aweme_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `aweme_id` when calling `fetch_one_video_api_v1_douyin_web_fetch_one_video_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'aweme_id' in local_var_params and local_var_params['aweme_id'] is not None:  # noqa: E501
            query_params.append(('aweme_id', local_var_params['aweme_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_one_video', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_api_v1_douyin_web_fetch_one_video_v2_get(self, aweme_id, **kwargs):  # noqa: E501
        """获取单个作品数据 V2/Get single video data V2  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_douyin_web_fetch_one_video_v2_get(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_api_v1_douyin_web_fetch_one_video_v2_get_with_http_info(aweme_id, **kwargs)  # noqa: E501

    def fetch_one_video_api_v1_douyin_web_fetch_one_video_v2_get_with_http_info(self, aweme_id, **kwargs):  # noqa: E501
        """获取单个作品数据 V2/Get single video data V2  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_douyin_web_fetch_one_video_v2_get_with_http_info(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'aweme_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_api_v1_douyin_web_fetch_one_video_v2_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'aweme_id' is set
        if self.api_client.client_side_validation and ('aweme_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['aweme_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `aweme_id` when calling `fetch_one_video_api_v1_douyin_web_fetch_one_video_v2_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'aweme_id' in local_var_params and local_var_params['aweme_id'] is not None:  # noqa: E501
            query_params.append(('aweme_id', local_var_params['aweme_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_one_video_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_api_v1_douyin_web_fetch_one_video_v2_get_0(self, aweme_id, **kwargs):  # noqa: E501
        """获取单个作品数据 V2/Get single video data V2  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_douyin_web_fetch_one_video_v2_get_0(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_api_v1_douyin_web_fetch_one_video_v2_get_0_with_http_info(aweme_id, **kwargs)  # noqa: E501

    def fetch_one_video_api_v1_douyin_web_fetch_one_video_v2_get_0_with_http_info(self, aweme_id, **kwargs):  # noqa: E501
        """获取单个作品数据 V2/Get single video data V2  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_api_v1_douyin_web_fetch_one_video_v2_get_0_with_http_info(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'aweme_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_api_v1_douyin_web_fetch_one_video_v2_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'aweme_id' is set
        if self.api_client.client_side_validation and ('aweme_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['aweme_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `aweme_id` when calling `fetch_one_video_api_v1_douyin_web_fetch_one_video_v2_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'aweme_id' in local_var_params and local_var_params['aweme_id'] is not None:  # noqa: E501
            query_params.append(('aweme_id', local_var_params['aweme_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_one_video_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_by_share_url_api_v1_douyin_web_fetch_one_video_by_share_url_get(self, share_url, **kwargs):  # noqa: E501
        """根据分享链接获取单个作品数据/Get single video data by sharing link  # noqa: E501

        # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_by_share_url_api_v1_douyin_web_fetch_one_video_by_share_url_get(share_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_url: 分享链接/Share link (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_by_share_url_api_v1_douyin_web_fetch_one_video_by_share_url_get_with_http_info(share_url, **kwargs)  # noqa: E501

    def fetch_one_video_by_share_url_api_v1_douyin_web_fetch_one_video_by_share_url_get_with_http_info(self, share_url, **kwargs):  # noqa: E501
        """根据分享链接获取单个作品数据/Get single video data by sharing link  # noqa: E501

        # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_by_share_url_api_v1_douyin_web_fetch_one_video_by_share_url_get_with_http_info(share_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_url: 分享链接/Share link (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'share_url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_by_share_url_api_v1_douyin_web_fetch_one_video_by_share_url_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'share_url' is set
        if self.api_client.client_side_validation and ('share_url' not in local_var_params or  # noqa: E501
                                                        local_var_params['share_url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `share_url` when calling `fetch_one_video_by_share_url_api_v1_douyin_web_fetch_one_video_by_share_url_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'share_url' in local_var_params and local_var_params['share_url'] is not None:  # noqa: E501
            query_params.append(('share_url', local_var_params['share_url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_one_video_by_share_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_by_share_url_api_v1_douyin_web_fetch_one_video_by_share_url_get_0(self, share_url, **kwargs):  # noqa: E501
        """根据分享链接获取单个作品数据/Get single video data by sharing link  # noqa: E501

        # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_by_share_url_api_v1_douyin_web_fetch_one_video_by_share_url_get_0(share_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_url: 分享链接/Share link (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_by_share_url_api_v1_douyin_web_fetch_one_video_by_share_url_get_0_with_http_info(share_url, **kwargs)  # noqa: E501

    def fetch_one_video_by_share_url_api_v1_douyin_web_fetch_one_video_by_share_url_get_0_with_http_info(self, share_url, **kwargs):  # noqa: E501
        """根据分享链接获取单个作品数据/Get single video data by sharing link  # noqa: E501

        # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_by_share_url_api_v1_douyin_web_fetch_one_video_by_share_url_get_0_with_http_info(share_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_url: 分享链接/Share link (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'share_url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_by_share_url_api_v1_douyin_web_fetch_one_video_by_share_url_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'share_url' is set
        if self.api_client.client_side_validation and ('share_url' not in local_var_params or  # noqa: E501
                                                        local_var_params['share_url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `share_url` when calling `fetch_one_video_by_share_url_api_v1_douyin_web_fetch_one_video_by_share_url_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'share_url' in local_var_params and local_var_params['share_url'] is not None:  # noqa: E501
            query_params.append(('share_url', local_var_params['share_url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_one_video_by_share_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_danmaku_api_v1_douyin_web_fetch_one_video_danmaku_get(self, item_id, duration, end_time, start_time, **kwargs):  # noqa: E501
        """获取单个作品视频弹幕数据/Get single video danmaku data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品视频弹幕数据 ### 参数: - item_id: 作品id - duration: 视频总时长 - end_time: 结束时间 - start_time: 开始时间 ### 返回: - 视频弹幕数据  # [English] ### Purpose: - Get single video danmaku data ### Parameters: - item_id: Video id - duration: Video total duration - end_time: End time - start_time: Start time ### Return: - Video danmaku data  # [示例/Example] item_id = \"7355433624046472498\" duration = 15134 end_time = 15133 start_time = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_danmaku_api_v1_douyin_web_fetch_one_video_danmaku_get(item_id, duration, end_time, start_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str item_id: 作品id/Video id (required)
        :param int duration: 视频总时长/Video total duration (required)
        :param int end_time: 结束时间/End time (required)
        :param int start_time: 开始时间/Start time (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_danmaku_api_v1_douyin_web_fetch_one_video_danmaku_get_with_http_info(item_id, duration, end_time, start_time, **kwargs)  # noqa: E501

    def fetch_one_video_danmaku_api_v1_douyin_web_fetch_one_video_danmaku_get_with_http_info(self, item_id, duration, end_time, start_time, **kwargs):  # noqa: E501
        """获取单个作品视频弹幕数据/Get single video danmaku data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品视频弹幕数据 ### 参数: - item_id: 作品id - duration: 视频总时长 - end_time: 结束时间 - start_time: 开始时间 ### 返回: - 视频弹幕数据  # [English] ### Purpose: - Get single video danmaku data ### Parameters: - item_id: Video id - duration: Video total duration - end_time: End time - start_time: Start time ### Return: - Video danmaku data  # [示例/Example] item_id = \"7355433624046472498\" duration = 15134 end_time = 15133 start_time = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_danmaku_api_v1_douyin_web_fetch_one_video_danmaku_get_with_http_info(item_id, duration, end_time, start_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str item_id: 作品id/Video id (required)
        :param int duration: 视频总时长/Video total duration (required)
        :param int end_time: 结束时间/End time (required)
        :param int start_time: 开始时间/Start time (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'item_id',
            'duration',
            'end_time',
            'start_time'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_danmaku_api_v1_douyin_web_fetch_one_video_danmaku_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'item_id' is set
        if self.api_client.client_side_validation and ('item_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['item_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `item_id` when calling `fetch_one_video_danmaku_api_v1_douyin_web_fetch_one_video_danmaku_get`")  # noqa: E501
        # verify the required parameter 'duration' is set
        if self.api_client.client_side_validation and ('duration' not in local_var_params or  # noqa: E501
                                                        local_var_params['duration'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `duration` when calling `fetch_one_video_danmaku_api_v1_douyin_web_fetch_one_video_danmaku_get`")  # noqa: E501
        # verify the required parameter 'end_time' is set
        if self.api_client.client_side_validation and ('end_time' not in local_var_params or  # noqa: E501
                                                        local_var_params['end_time'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `end_time` when calling `fetch_one_video_danmaku_api_v1_douyin_web_fetch_one_video_danmaku_get`")  # noqa: E501
        # verify the required parameter 'start_time' is set
        if self.api_client.client_side_validation and ('start_time' not in local_var_params or  # noqa: E501
                                                        local_var_params['start_time'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `start_time` when calling `fetch_one_video_danmaku_api_v1_douyin_web_fetch_one_video_danmaku_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'item_id' in local_var_params and local_var_params['item_id'] is not None:  # noqa: E501
            query_params.append(('item_id', local_var_params['item_id']))  # noqa: E501
        if 'duration' in local_var_params and local_var_params['duration'] is not None:  # noqa: E501
            query_params.append(('duration', local_var_params['duration']))  # noqa: E501
        if 'end_time' in local_var_params and local_var_params['end_time'] is not None:  # noqa: E501
            query_params.append(('end_time', local_var_params['end_time']))  # noqa: E501
        if 'start_time' in local_var_params and local_var_params['start_time'] is not None:  # noqa: E501
            query_params.append(('start_time', local_var_params['start_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_one_video_danmaku', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_danmaku_api_v1_douyin_web_fetch_one_video_danmaku_get_0(self, item_id, duration, end_time, start_time, **kwargs):  # noqa: E501
        """获取单个作品视频弹幕数据/Get single video danmaku data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品视频弹幕数据 ### 参数: - item_id: 作品id - duration: 视频总时长 - end_time: 结束时间 - start_time: 开始时间 ### 返回: - 视频弹幕数据  # [English] ### Purpose: - Get single video danmaku data ### Parameters: - item_id: Video id - duration: Video total duration - end_time: End time - start_time: Start time ### Return: - Video danmaku data  # [示例/Example] item_id = \"7355433624046472498\" duration = 15134 end_time = 15133 start_time = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_danmaku_api_v1_douyin_web_fetch_one_video_danmaku_get_0(item_id, duration, end_time, start_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str item_id: 作品id/Video id (required)
        :param int duration: 视频总时长/Video total duration (required)
        :param int end_time: 结束时间/End time (required)
        :param int start_time: 开始时间/Start time (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_danmaku_api_v1_douyin_web_fetch_one_video_danmaku_get_0_with_http_info(item_id, duration, end_time, start_time, **kwargs)  # noqa: E501

    def fetch_one_video_danmaku_api_v1_douyin_web_fetch_one_video_danmaku_get_0_with_http_info(self, item_id, duration, end_time, start_time, **kwargs):  # noqa: E501
        """获取单个作品视频弹幕数据/Get single video danmaku data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品视频弹幕数据 ### 参数: - item_id: 作品id - duration: 视频总时长 - end_time: 结束时间 - start_time: 开始时间 ### 返回: - 视频弹幕数据  # [English] ### Purpose: - Get single video danmaku data ### Parameters: - item_id: Video id - duration: Video total duration - end_time: End time - start_time: Start time ### Return: - Video danmaku data  # [示例/Example] item_id = \"7355433624046472498\" duration = 15134 end_time = 15133 start_time = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_danmaku_api_v1_douyin_web_fetch_one_video_danmaku_get_0_with_http_info(item_id, duration, end_time, start_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str item_id: 作品id/Video id (required)
        :param int duration: 视频总时长/Video total duration (required)
        :param int end_time: 结束时间/End time (required)
        :param int start_time: 开始时间/Start time (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'item_id',
            'duration',
            'end_time',
            'start_time'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_danmaku_api_v1_douyin_web_fetch_one_video_danmaku_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'item_id' is set
        if self.api_client.client_side_validation and ('item_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['item_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `item_id` when calling `fetch_one_video_danmaku_api_v1_douyin_web_fetch_one_video_danmaku_get_0`")  # noqa: E501
        # verify the required parameter 'duration' is set
        if self.api_client.client_side_validation and ('duration' not in local_var_params or  # noqa: E501
                                                        local_var_params['duration'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `duration` when calling `fetch_one_video_danmaku_api_v1_douyin_web_fetch_one_video_danmaku_get_0`")  # noqa: E501
        # verify the required parameter 'end_time' is set
        if self.api_client.client_side_validation and ('end_time' not in local_var_params or  # noqa: E501
                                                        local_var_params['end_time'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `end_time` when calling `fetch_one_video_danmaku_api_v1_douyin_web_fetch_one_video_danmaku_get_0`")  # noqa: E501
        # verify the required parameter 'start_time' is set
        if self.api_client.client_side_validation and ('start_time' not in local_var_params or  # noqa: E501
                                                        local_var_params['start_time'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `start_time` when calling `fetch_one_video_danmaku_api_v1_douyin_web_fetch_one_video_danmaku_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'item_id' in local_var_params and local_var_params['item_id'] is not None:  # noqa: E501
            query_params.append(('item_id', local_var_params['item_id']))  # noqa: E501
        if 'duration' in local_var_params and local_var_params['duration'] is not None:  # noqa: E501
            query_params.append(('duration', local_var_params['duration']))  # noqa: E501
        if 'end_time' in local_var_params and local_var_params['end_time'] is not None:  # noqa: E501
            query_params.append(('end_time', local_var_params['end_time']))  # noqa: E501
        if 'start_time' in local_var_params and local_var_params['start_time'] is not None:  # noqa: E501
            query_params.append(('start_time', local_var_params['start_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_one_video_danmaku', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_real_time_challenge_list_api_v1_douyin_web_fetch_real_time_challenge_list_get(self, page, page_size, **kwargs):  # noqa: E501
        """抖音实时挑战榜单/Douyin Real-time Challenge List  # noqa: E501

        # [中文] ### 用途: - 抖音实时挑战榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 ### 返回: - 挑战榜数据  # [English] ### Purpose: - Douyin Real-time Challenge List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 ### Return: - Challenge list data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_real_time_challenge_list_api_v1_douyin_web_fetch_real_time_challenge_list_get(page, page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page: 页码/Page number (required)
        :param int page_size: 每页数量/Number per page (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_real_time_challenge_list_api_v1_douyin_web_fetch_real_time_challenge_list_get_with_http_info(page, page_size, **kwargs)  # noqa: E501

    def fetch_real_time_challenge_list_api_v1_douyin_web_fetch_real_time_challenge_list_get_with_http_info(self, page, page_size, **kwargs):  # noqa: E501
        """抖音实时挑战榜单/Douyin Real-time Challenge List  # noqa: E501

        # [中文] ### 用途: - 抖音实时挑战榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 ### 返回: - 挑战榜数据  # [English] ### Purpose: - Douyin Real-time Challenge List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 ### Return: - Challenge list data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_real_time_challenge_list_api_v1_douyin_web_fetch_real_time_challenge_list_get_with_http_info(page, page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page: 页码/Page number (required)
        :param int page_size: 每页数量/Number per page (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'page',
            'page_size'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_real_time_challenge_list_api_v1_douyin_web_fetch_real_time_challenge_list_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page' is set
        if self.api_client.client_side_validation and ('page' not in local_var_params or  # noqa: E501
                                                        local_var_params['page'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page` when calling `fetch_real_time_challenge_list_api_v1_douyin_web_fetch_real_time_challenge_list_get`")  # noqa: E501
        # verify the required parameter 'page_size' is set
        if self.api_client.client_side_validation and ('page_size' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_size'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_size` when calling `fetch_real_time_challenge_list_api_v1_douyin_web_fetch_real_time_challenge_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('page_size', local_var_params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_real_time_challenge_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_real_time_challenge_list_api_v1_douyin_web_fetch_real_time_challenge_list_get_0(self, page, page_size, **kwargs):  # noqa: E501
        """抖音实时挑战榜单/Douyin Real-time Challenge List  # noqa: E501

        # [中文] ### 用途: - 抖音实时挑战榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 ### 返回: - 挑战榜数据  # [English] ### Purpose: - Douyin Real-time Challenge List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 ### Return: - Challenge list data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_real_time_challenge_list_api_v1_douyin_web_fetch_real_time_challenge_list_get_0(page, page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page: 页码/Page number (required)
        :param int page_size: 每页数量/Number per page (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_real_time_challenge_list_api_v1_douyin_web_fetch_real_time_challenge_list_get_0_with_http_info(page, page_size, **kwargs)  # noqa: E501

    def fetch_real_time_challenge_list_api_v1_douyin_web_fetch_real_time_challenge_list_get_0_with_http_info(self, page, page_size, **kwargs):  # noqa: E501
        """抖音实时挑战榜单/Douyin Real-time Challenge List  # noqa: E501

        # [中文] ### 用途: - 抖音实时挑战榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 ### 返回: - 挑战榜数据  # [English] ### Purpose: - Douyin Real-time Challenge List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 ### Return: - Challenge list data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_real_time_challenge_list_api_v1_douyin_web_fetch_real_time_challenge_list_get_0_with_http_info(page, page_size, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page: 页码/Page number (required)
        :param int page_size: 每页数量/Number per page (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'page',
            'page_size'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_real_time_challenge_list_api_v1_douyin_web_fetch_real_time_challenge_list_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page' is set
        if self.api_client.client_side_validation and ('page' not in local_var_params or  # noqa: E501
                                                        local_var_params['page'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page` when calling `fetch_real_time_challenge_list_api_v1_douyin_web_fetch_real_time_challenge_list_get_0`")  # noqa: E501
        # verify the required parameter 'page_size' is set
        if self.api_client.client_side_validation and ('page_size' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_size'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_size` when calling `fetch_real_time_challenge_list_api_v1_douyin_web_fetch_real_time_challenge_list_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('page_size', local_var_params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_real_time_challenge_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_real_time_rising_hot_list_api_v1_douyin_web_fetch_real_time_rising_hot_list_get(self, page, page_size, sentence_tag, order, **kwargs):  # noqa: E501
        """抖音实时上升热点榜/Douyin Real-time Rising Hot List  # noqa: E501

        # [中文] ### 用途: - 抖音实时上升热点榜 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Real-time Rising Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change ### Return: - Hotspot list data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_real_time_rising_hot_list_api_v1_douyin_web_fetch_real_time_rising_hot_list_get(page, page_size, sentence_tag, order, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page: 页码/Page number (required)
        :param int page_size: 每页数量/Number per page (required)
        :param str sentence_tag: 分类标签/Category tag (required)
        :param str order: 排序方式/Sorting method (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_real_time_rising_hot_list_api_v1_douyin_web_fetch_real_time_rising_hot_list_get_with_http_info(page, page_size, sentence_tag, order, **kwargs)  # noqa: E501

    def fetch_real_time_rising_hot_list_api_v1_douyin_web_fetch_real_time_rising_hot_list_get_with_http_info(self, page, page_size, sentence_tag, order, **kwargs):  # noqa: E501
        """抖音实时上升热点榜/Douyin Real-time Rising Hot List  # noqa: E501

        # [中文] ### 用途: - 抖音实时上升热点榜 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Real-time Rising Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change ### Return: - Hotspot list data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_real_time_rising_hot_list_api_v1_douyin_web_fetch_real_time_rising_hot_list_get_with_http_info(page, page_size, sentence_tag, order, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page: 页码/Page number (required)
        :param int page_size: 每页数量/Number per page (required)
        :param str sentence_tag: 分类标签/Category tag (required)
        :param str order: 排序方式/Sorting method (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'page',
            'page_size',
            'sentence_tag',
            'order'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_real_time_rising_hot_list_api_v1_douyin_web_fetch_real_time_rising_hot_list_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page' is set
        if self.api_client.client_side_validation and ('page' not in local_var_params or  # noqa: E501
                                                        local_var_params['page'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page` when calling `fetch_real_time_rising_hot_list_api_v1_douyin_web_fetch_real_time_rising_hot_list_get`")  # noqa: E501
        # verify the required parameter 'page_size' is set
        if self.api_client.client_side_validation and ('page_size' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_size'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_size` when calling `fetch_real_time_rising_hot_list_api_v1_douyin_web_fetch_real_time_rising_hot_list_get`")  # noqa: E501
        # verify the required parameter 'sentence_tag' is set
        if self.api_client.client_side_validation and ('sentence_tag' not in local_var_params or  # noqa: E501
                                                        local_var_params['sentence_tag'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sentence_tag` when calling `fetch_real_time_rising_hot_list_api_v1_douyin_web_fetch_real_time_rising_hot_list_get`")  # noqa: E501
        # verify the required parameter 'order' is set
        if self.api_client.client_side_validation and ('order' not in local_var_params or  # noqa: E501
                                                        local_var_params['order'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `order` when calling `fetch_real_time_rising_hot_list_api_v1_douyin_web_fetch_real_time_rising_hot_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('page_size', local_var_params['page_size']))  # noqa: E501
        if 'sentence_tag' in local_var_params and local_var_params['sentence_tag'] is not None:  # noqa: E501
            query_params.append(('sentence_tag', local_var_params['sentence_tag']))  # noqa: E501
        if 'order' in local_var_params and local_var_params['order'] is not None:  # noqa: E501
            query_params.append(('order', local_var_params['order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_real_time_rising_hot_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_real_time_rising_hot_list_api_v1_douyin_web_fetch_real_time_rising_hot_list_get_0(self, page, page_size, sentence_tag, order, **kwargs):  # noqa: E501
        """抖音实时上升热点榜/Douyin Real-time Rising Hot List  # noqa: E501

        # [中文] ### 用途: - 抖音实时上升热点榜 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Real-time Rising Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change ### Return: - Hotspot list data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_real_time_rising_hot_list_api_v1_douyin_web_fetch_real_time_rising_hot_list_get_0(page, page_size, sentence_tag, order, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page: 页码/Page number (required)
        :param int page_size: 每页数量/Number per page (required)
        :param str sentence_tag: 分类标签/Category tag (required)
        :param str order: 排序方式/Sorting method (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_real_time_rising_hot_list_api_v1_douyin_web_fetch_real_time_rising_hot_list_get_0_with_http_info(page, page_size, sentence_tag, order, **kwargs)  # noqa: E501

    def fetch_real_time_rising_hot_list_api_v1_douyin_web_fetch_real_time_rising_hot_list_get_0_with_http_info(self, page, page_size, sentence_tag, order, **kwargs):  # noqa: E501
        """抖音实时上升热点榜/Douyin Real-time Rising Hot List  # noqa: E501

        # [中文] ### 用途: - 抖音实时上升热点榜 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Real-time Rising Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change ### Return: - Hotspot list data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_real_time_rising_hot_list_api_v1_douyin_web_fetch_real_time_rising_hot_list_get_0_with_http_info(page, page_size, sentence_tag, order, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page: 页码/Page number (required)
        :param int page_size: 每页数量/Number per page (required)
        :param str sentence_tag: 分类标签/Category tag (required)
        :param str order: 排序方式/Sorting method (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'page',
            'page_size',
            'sentence_tag',
            'order'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_real_time_rising_hot_list_api_v1_douyin_web_fetch_real_time_rising_hot_list_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page' is set
        if self.api_client.client_side_validation and ('page' not in local_var_params or  # noqa: E501
                                                        local_var_params['page'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page` when calling `fetch_real_time_rising_hot_list_api_v1_douyin_web_fetch_real_time_rising_hot_list_get_0`")  # noqa: E501
        # verify the required parameter 'page_size' is set
        if self.api_client.client_side_validation and ('page_size' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_size'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_size` when calling `fetch_real_time_rising_hot_list_api_v1_douyin_web_fetch_real_time_rising_hot_list_get_0`")  # noqa: E501
        # verify the required parameter 'sentence_tag' is set
        if self.api_client.client_side_validation and ('sentence_tag' not in local_var_params or  # noqa: E501
                                                        local_var_params['sentence_tag'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sentence_tag` when calling `fetch_real_time_rising_hot_list_api_v1_douyin_web_fetch_real_time_rising_hot_list_get_0`")  # noqa: E501
        # verify the required parameter 'order' is set
        if self.api_client.client_side_validation and ('order' not in local_var_params or  # noqa: E501
                                                        local_var_params['order'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `order` when calling `fetch_real_time_rising_hot_list_api_v1_douyin_web_fetch_real_time_rising_hot_list_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('page_size', local_var_params['page_size']))  # noqa: E501
        if 'sentence_tag' in local_var_params and local_var_params['sentence_tag'] is not None:  # noqa: E501
            query_params.append(('sentence_tag', local_var_params['sentence_tag']))  # noqa: E501
        if 'order' in local_var_params and local_var_params['order'] is not None:  # noqa: E501
            query_params.append(('order', local_var_params['order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_real_time_rising_hot_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_related_posts_api_v1_douyin_web_fetch_related_posts_get(self, aweme_id, **kwargs):  # noqa: E501
        """获取相关作品推荐数据/Get related posts recommendation data  # noqa: E501

        # [中文] ### 用途: - 获取相关作品推荐数据 ### 参数: - aweme_id: 作品id - refresh_index: 翻页索引，默认为1，然后每次增加1用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 作品数据  # [English] ### Purpose: - Get related posts recommendation data ### Parameters: - aweme_id: Video id - refresh_index: Paging index, default is 1, then increase by 1 each time for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Video data  # [示例/Example] aweme_id = \"7393365489105358132\" refresh_index = 1 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_related_posts_api_v1_douyin_web_fetch_related_posts_get(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param int refresh_index: 翻页索引/Paging index
        :param int count: 数量/Number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_related_posts_api_v1_douyin_web_fetch_related_posts_get_with_http_info(aweme_id, **kwargs)  # noqa: E501

    def fetch_related_posts_api_v1_douyin_web_fetch_related_posts_get_with_http_info(self, aweme_id, **kwargs):  # noqa: E501
        """获取相关作品推荐数据/Get related posts recommendation data  # noqa: E501

        # [中文] ### 用途: - 获取相关作品推荐数据 ### 参数: - aweme_id: 作品id - refresh_index: 翻页索引，默认为1，然后每次增加1用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 作品数据  # [English] ### Purpose: - Get related posts recommendation data ### Parameters: - aweme_id: Video id - refresh_index: Paging index, default is 1, then increase by 1 each time for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Video data  # [示例/Example] aweme_id = \"7393365489105358132\" refresh_index = 1 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_related_posts_api_v1_douyin_web_fetch_related_posts_get_with_http_info(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param int refresh_index: 翻页索引/Paging index
        :param int count: 数量/Number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'aweme_id',
            'refresh_index',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_related_posts_api_v1_douyin_web_fetch_related_posts_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'aweme_id' is set
        if self.api_client.client_side_validation and ('aweme_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['aweme_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `aweme_id` when calling `fetch_related_posts_api_v1_douyin_web_fetch_related_posts_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'aweme_id' in local_var_params and local_var_params['aweme_id'] is not None:  # noqa: E501
            query_params.append(('aweme_id', local_var_params['aweme_id']))  # noqa: E501
        if 'refresh_index' in local_var_params and local_var_params['refresh_index'] is not None:  # noqa: E501
            query_params.append(('refresh_index', local_var_params['refresh_index']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_related_posts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_related_posts_api_v1_douyin_web_fetch_related_posts_get_0(self, aweme_id, **kwargs):  # noqa: E501
        """获取相关作品推荐数据/Get related posts recommendation data  # noqa: E501

        # [中文] ### 用途: - 获取相关作品推荐数据 ### 参数: - aweme_id: 作品id - refresh_index: 翻页索引，默认为1，然后每次增加1用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 作品数据  # [English] ### Purpose: - Get related posts recommendation data ### Parameters: - aweme_id: Video id - refresh_index: Paging index, default is 1, then increase by 1 each time for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Video data  # [示例/Example] aweme_id = \"7393365489105358132\" refresh_index = 1 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_related_posts_api_v1_douyin_web_fetch_related_posts_get_0(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param int refresh_index: 翻页索引/Paging index
        :param int count: 数量/Number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_related_posts_api_v1_douyin_web_fetch_related_posts_get_0_with_http_info(aweme_id, **kwargs)  # noqa: E501

    def fetch_related_posts_api_v1_douyin_web_fetch_related_posts_get_0_with_http_info(self, aweme_id, **kwargs):  # noqa: E501
        """获取相关作品推荐数据/Get related posts recommendation data  # noqa: E501

        # [中文] ### 用途: - 获取相关作品推荐数据 ### 参数: - aweme_id: 作品id - refresh_index: 翻页索引，默认为1，然后每次增加1用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 作品数据  # [English] ### Purpose: - Get related posts recommendation data ### Parameters: - aweme_id: Video id - refresh_index: Paging index, default is 1, then increase by 1 each time for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Video data  # [示例/Example] aweme_id = \"7393365489105358132\" refresh_index = 1 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_related_posts_api_v1_douyin_web_fetch_related_posts_get_0_with_http_info(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param int refresh_index: 翻页索引/Paging index
        :param int count: 数量/Number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'aweme_id',
            'refresh_index',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_related_posts_api_v1_douyin_web_fetch_related_posts_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'aweme_id' is set
        if self.api_client.client_side_validation and ('aweme_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['aweme_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `aweme_id` when calling `fetch_related_posts_api_v1_douyin_web_fetch_related_posts_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'aweme_id' in local_var_params and local_var_params['aweme_id'] is not None:  # noqa: E501
            query_params.append(('aweme_id', local_var_params['aweme_id']))  # noqa: E501
        if 'refresh_index' in local_var_params and local_var_params['refresh_index'] is not None:  # noqa: E501
            query_params.append(('refresh_index', local_var_params['refresh_index']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_related_posts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_search_challenge_api_v1_douyin_web_fetch_search_challenge_post(self, **kwargs):  # noqa: E501
        """搜索话题/Search Challenge  # noqa: E501

        # [中文] ### 用途: - 搜索话题，此接口不带Cookie请求时只能获取到前30条数据，建议自行提供Cookie获取更多数据。 - Cookie获取方式：打开网页抖音，登录后，按F12打开开发者工具，点击Network，刷新页面，找到第一个请求，复制Cookie。 ### 参数: - keyword: 关键词 - cursor: 偏移量 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Search Challenge, when this interface is requested without Cookie, only the first 30 data can be obtained, it is recommended to provide Cookie to get more data. - Cookie acquisition method: Open the Douyin webpage, log in, press F12 to open the developer tool, click Network, refresh the page, find the first request, copy the Cookie. ### Parameters: - keyword: Keyword - cursor: Offset - count: Number - cookie: User provided Cookie, used to get more data. ### Return: - Challenge search results  # [示例/Example] keyword = \"动漫\" cursor = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_challenge_api_v1_douyin_web_fetch_search_challenge_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param SearchChallengeRequest search_challenge_request:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_search_challenge_api_v1_douyin_web_fetch_search_challenge_post_with_http_info(**kwargs)  # noqa: E501

    def fetch_search_challenge_api_v1_douyin_web_fetch_search_challenge_post_with_http_info(self, **kwargs):  # noqa: E501
        """搜索话题/Search Challenge  # noqa: E501

        # [中文] ### 用途: - 搜索话题，此接口不带Cookie请求时只能获取到前30条数据，建议自行提供Cookie获取更多数据。 - Cookie获取方式：打开网页抖音，登录后，按F12打开开发者工具，点击Network，刷新页面，找到第一个请求，复制Cookie。 ### 参数: - keyword: 关键词 - cursor: 偏移量 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Search Challenge, when this interface is requested without Cookie, only the first 30 data can be obtained, it is recommended to provide Cookie to get more data. - Cookie acquisition method: Open the Douyin webpage, log in, press F12 to open the developer tool, click Network, refresh the page, find the first request, copy the Cookie. ### Parameters: - keyword: Keyword - cursor: Offset - count: Number - cookie: User provided Cookie, used to get more data. ### Return: - Challenge search results  # [示例/Example] keyword = \"动漫\" cursor = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_challenge_api_v1_douyin_web_fetch_search_challenge_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param SearchChallengeRequest search_challenge_request:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'search_challenge_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_search_challenge_api_v1_douyin_web_fetch_search_challenge_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'search_challenge_request' in local_var_params:
            body_params = local_var_params['search_challenge_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_search_challenge', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_search_challenge_api_v1_douyin_web_fetch_search_challenge_post_0(self, **kwargs):  # noqa: E501
        """搜索话题/Search Challenge  # noqa: E501

        # [中文] ### 用途: - 搜索话题，此接口不带Cookie请求时只能获取到前30条数据，建议自行提供Cookie获取更多数据。 - Cookie获取方式：打开网页抖音，登录后，按F12打开开发者工具，点击Network，刷新页面，找到第一个请求，复制Cookie。 ### 参数: - keyword: 关键词 - cursor: 偏移量 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Search Challenge, when this interface is requested without Cookie, only the first 30 data can be obtained, it is recommended to provide Cookie to get more data. - Cookie acquisition method: Open the Douyin webpage, log in, press F12 to open the developer tool, click Network, refresh the page, find the first request, copy the Cookie. ### Parameters: - keyword: Keyword - cursor: Offset - count: Number - cookie: User provided Cookie, used to get more data. ### Return: - Challenge search results  # [示例/Example] keyword = \"动漫\" cursor = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_challenge_api_v1_douyin_web_fetch_search_challenge_post_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param SearchChallengeRequest search_challenge_request:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_search_challenge_api_v1_douyin_web_fetch_search_challenge_post_0_with_http_info(**kwargs)  # noqa: E501

    def fetch_search_challenge_api_v1_douyin_web_fetch_search_challenge_post_0_with_http_info(self, **kwargs):  # noqa: E501
        """搜索话题/Search Challenge  # noqa: E501

        # [中文] ### 用途: - 搜索话题，此接口不带Cookie请求时只能获取到前30条数据，建议自行提供Cookie获取更多数据。 - Cookie获取方式：打开网页抖音，登录后，按F12打开开发者工具，点击Network，刷新页面，找到第一个请求，复制Cookie。 ### 参数: - keyword: 关键词 - cursor: 偏移量 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Search Challenge, when this interface is requested without Cookie, only the first 30 data can be obtained, it is recommended to provide Cookie to get more data. - Cookie acquisition method: Open the Douyin webpage, log in, press F12 to open the developer tool, click Network, refresh the page, find the first request, copy the Cookie. ### Parameters: - keyword: Keyword - cursor: Offset - count: Number - cookie: User provided Cookie, used to get more data. ### Return: - Challenge search results  # [示例/Example] keyword = \"动漫\" cursor = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_challenge_api_v1_douyin_web_fetch_search_challenge_post_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param SearchChallengeRequest search_challenge_request:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'search_challenge_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_search_challenge_api_v1_douyin_web_fetch_search_challenge_post_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'search_challenge_request' in local_var_params:
            body_params = local_var_params['search_challenge_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_search_challenge', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_series_aweme_api_v1_douyin_web_fetch_series_aweme_get(self, offset, count, content_type, **kwargs):  # noqa: E501
        """短剧作品/Series Video  # noqa: E501

        # [中文] ### 用途: - 短剧作品 ### 参数: - offset: 页码，默认为0 - count: 每页数量，默认为16 - content_type: 子类型，默认为0     - 0: 热榜     - 101: 甜宠     - 102: 搞笑     - 104: 正能量     - 105: 成长     - 106: 悬疑     - 109: 家庭     - 110: 都市     - 112: 奇幻     - 113: 玄幻     - 114: 职场     - 115: 青春     - 116: 古装     - 117: 动作     - 119: 逆袭     - 124: 其他 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie ### 返回: - 短剧作品数据  # [English] ### Purpose: - Series Video ### Parameters: - offset: Page number, default is 0 - count: Number per page, default is 16 - content_type: Subtype, default is 0     - 0: Hot list     - 101: Sweet pet     - 102: Funny     - 104: Positive energy     - 105: Growth     - 106: Suspense     - 109: Family     - 110: Urban     - 112: Fantasy     - 113: Fantasy     - 114: Workplace     - 115: Youth     - 116: Ancient costume     - 117: Action     - 119: Counterattack     - 124: Other - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Series Video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_series_aweme_api_v1_douyin_web_fetch_series_aweme_get(offset, count, content_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int offset: 页码/Page number (required)
        :param int count: 每页数量/Number per page (required)
        :param int content_type: 短剧类型/Subtype (required)
        :param str cookie: 用户自行提供的Cookie/User provided Cookie
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_series_aweme_api_v1_douyin_web_fetch_series_aweme_get_with_http_info(offset, count, content_type, **kwargs)  # noqa: E501

    def fetch_series_aweme_api_v1_douyin_web_fetch_series_aweme_get_with_http_info(self, offset, count, content_type, **kwargs):  # noqa: E501
        """短剧作品/Series Video  # noqa: E501

        # [中文] ### 用途: - 短剧作品 ### 参数: - offset: 页码，默认为0 - count: 每页数量，默认为16 - content_type: 子类型，默认为0     - 0: 热榜     - 101: 甜宠     - 102: 搞笑     - 104: 正能量     - 105: 成长     - 106: 悬疑     - 109: 家庭     - 110: 都市     - 112: 奇幻     - 113: 玄幻     - 114: 职场     - 115: 青春     - 116: 古装     - 117: 动作     - 119: 逆袭     - 124: 其他 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie ### 返回: - 短剧作品数据  # [English] ### Purpose: - Series Video ### Parameters: - offset: Page number, default is 0 - count: Number per page, default is 16 - content_type: Subtype, default is 0     - 0: Hot list     - 101: Sweet pet     - 102: Funny     - 104: Positive energy     - 105: Growth     - 106: Suspense     - 109: Family     - 110: Urban     - 112: Fantasy     - 113: Fantasy     - 114: Workplace     - 115: Youth     - 116: Ancient costume     - 117: Action     - 119: Counterattack     - 124: Other - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Series Video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_series_aweme_api_v1_douyin_web_fetch_series_aweme_get_with_http_info(offset, count, content_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int offset: 页码/Page number (required)
        :param int count: 每页数量/Number per page (required)
        :param int content_type: 短剧类型/Subtype (required)
        :param str cookie: 用户自行提供的Cookie/User provided Cookie
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'offset',
            'count',
            'content_type',
            'cookie'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_series_aweme_api_v1_douyin_web_fetch_series_aweme_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'offset' is set
        if self.api_client.client_side_validation and ('offset' not in local_var_params or  # noqa: E501
                                                        local_var_params['offset'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `offset` when calling `fetch_series_aweme_api_v1_douyin_web_fetch_series_aweme_get`")  # noqa: E501
        # verify the required parameter 'count' is set
        if self.api_client.client_side_validation and ('count' not in local_var_params or  # noqa: E501
                                                        local_var_params['count'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `count` when calling `fetch_series_aweme_api_v1_douyin_web_fetch_series_aweme_get`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if self.api_client.client_side_validation and ('content_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['content_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `content_type` when calling `fetch_series_aweme_api_v1_douyin_web_fetch_series_aweme_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'content_type' in local_var_params and local_var_params['content_type'] is not None:  # noqa: E501
            query_params.append(('content_type', local_var_params['content_type']))  # noqa: E501
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_series_aweme', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_series_aweme_api_v1_douyin_web_fetch_series_aweme_get_0(self, offset, count, content_type, **kwargs):  # noqa: E501
        """短剧作品/Series Video  # noqa: E501

        # [中文] ### 用途: - 短剧作品 ### 参数: - offset: 页码，默认为0 - count: 每页数量，默认为16 - content_type: 子类型，默认为0     - 0: 热榜     - 101: 甜宠     - 102: 搞笑     - 104: 正能量     - 105: 成长     - 106: 悬疑     - 109: 家庭     - 110: 都市     - 112: 奇幻     - 113: 玄幻     - 114: 职场     - 115: 青春     - 116: 古装     - 117: 动作     - 119: 逆袭     - 124: 其他 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie ### 返回: - 短剧作品数据  # [English] ### Purpose: - Series Video ### Parameters: - offset: Page number, default is 0 - count: Number per page, default is 16 - content_type: Subtype, default is 0     - 0: Hot list     - 101: Sweet pet     - 102: Funny     - 104: Positive energy     - 105: Growth     - 106: Suspense     - 109: Family     - 110: Urban     - 112: Fantasy     - 113: Fantasy     - 114: Workplace     - 115: Youth     - 116: Ancient costume     - 117: Action     - 119: Counterattack     - 124: Other - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Series Video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_series_aweme_api_v1_douyin_web_fetch_series_aweme_get_0(offset, count, content_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int offset: 页码/Page number (required)
        :param int count: 每页数量/Number per page (required)
        :param int content_type: 短剧类型/Subtype (required)
        :param str cookie: 用户自行提供的Cookie/User provided Cookie
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_series_aweme_api_v1_douyin_web_fetch_series_aweme_get_0_with_http_info(offset, count, content_type, **kwargs)  # noqa: E501

    def fetch_series_aweme_api_v1_douyin_web_fetch_series_aweme_get_0_with_http_info(self, offset, count, content_type, **kwargs):  # noqa: E501
        """短剧作品/Series Video  # noqa: E501

        # [中文] ### 用途: - 短剧作品 ### 参数: - offset: 页码，默认为0 - count: 每页数量，默认为16 - content_type: 子类型，默认为0     - 0: 热榜     - 101: 甜宠     - 102: 搞笑     - 104: 正能量     - 105: 成长     - 106: 悬疑     - 109: 家庭     - 110: 都市     - 112: 奇幻     - 113: 玄幻     - 114: 职场     - 115: 青春     - 116: 古装     - 117: 动作     - 119: 逆袭     - 124: 其他 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie ### 返回: - 短剧作品数据  # [English] ### Purpose: - Series Video ### Parameters: - offset: Page number, default is 0 - count: Number per page, default is 16 - content_type: Subtype, default is 0     - 0: Hot list     - 101: Sweet pet     - 102: Funny     - 104: Positive energy     - 105: Growth     - 106: Suspense     - 109: Family     - 110: Urban     - 112: Fantasy     - 113: Fantasy     - 114: Workplace     - 115: Youth     - 116: Ancient costume     - 117: Action     - 119: Counterattack     - 124: Other - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Series Video data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_series_aweme_api_v1_douyin_web_fetch_series_aweme_get_0_with_http_info(offset, count, content_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int offset: 页码/Page number (required)
        :param int count: 每页数量/Number per page (required)
        :param int content_type: 短剧类型/Subtype (required)
        :param str cookie: 用户自行提供的Cookie/User provided Cookie
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'offset',
            'count',
            'content_type',
            'cookie'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_series_aweme_api_v1_douyin_web_fetch_series_aweme_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'offset' is set
        if self.api_client.client_side_validation and ('offset' not in local_var_params or  # noqa: E501
                                                        local_var_params['offset'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `offset` when calling `fetch_series_aweme_api_v1_douyin_web_fetch_series_aweme_get_0`")  # noqa: E501
        # verify the required parameter 'count' is set
        if self.api_client.client_side_validation and ('count' not in local_var_params or  # noqa: E501
                                                        local_var_params['count'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `count` when calling `fetch_series_aweme_api_v1_douyin_web_fetch_series_aweme_get_0`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if self.api_client.client_side_validation and ('content_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['content_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `content_type` when calling `fetch_series_aweme_api_v1_douyin_web_fetch_series_aweme_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'content_type' in local_var_params and local_var_params['content_type'] is not None:  # noqa: E501
            query_params.append(('content_type', local_var_params['content_type']))  # noqa: E501
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_series_aweme', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_collection_videos_api_v1_douyin_web_fetch_user_collection_videos_get(self, cookie, **kwargs):  # noqa: E501
        """获取用户收藏作品数据/Get user collection video data  # noqa: E501

        # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection video data ### Parameters: - cookie: User's web version of Douyin Cookie (This interface requires users to provide their own Cookie) - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] cookie = \"YOUR_COOKIE\" max_cursor = 0 counts = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_collection_videos_api_v1_douyin_web_fetch_user_collection_videos_get(cookie, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cookie: 用户网页版抖音Cookie/Your web version of Douyin Cookie (required)
        :param int max_cursor: 最大游标/Maximum cursor
        :param int counts: 每页数量/Number per page
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_collection_videos_api_v1_douyin_web_fetch_user_collection_videos_get_with_http_info(cookie, **kwargs)  # noqa: E501

    def fetch_user_collection_videos_api_v1_douyin_web_fetch_user_collection_videos_get_with_http_info(self, cookie, **kwargs):  # noqa: E501
        """获取用户收藏作品数据/Get user collection video data  # noqa: E501

        # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection video data ### Parameters: - cookie: User's web version of Douyin Cookie (This interface requires users to provide their own Cookie) - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] cookie = \"YOUR_COOKIE\" max_cursor = 0 counts = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_collection_videos_api_v1_douyin_web_fetch_user_collection_videos_get_with_http_info(cookie, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cookie: 用户网页版抖音Cookie/Your web version of Douyin Cookie (required)
        :param int max_cursor: 最大游标/Maximum cursor
        :param int counts: 每页数量/Number per page
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cookie',
            'max_cursor',
            'counts'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_collection_videos_api_v1_douyin_web_fetch_user_collection_videos_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cookie' is set
        if self.api_client.client_side_validation and ('cookie' not in local_var_params or  # noqa: E501
                                                        local_var_params['cookie'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cookie` when calling `fetch_user_collection_videos_api_v1_douyin_web_fetch_user_collection_videos_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501
        if 'max_cursor' in local_var_params and local_var_params['max_cursor'] is not None:  # noqa: E501
            query_params.append(('max_cursor', local_var_params['max_cursor']))  # noqa: E501
        if 'counts' in local_var_params and local_var_params['counts'] is not None:  # noqa: E501
            query_params.append(('counts', local_var_params['counts']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_collection_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_collection_videos_api_v1_douyin_web_fetch_user_collection_videos_get_0(self, cookie, **kwargs):  # noqa: E501
        """获取用户收藏作品数据/Get user collection video data  # noqa: E501

        # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection video data ### Parameters: - cookie: User's web version of Douyin Cookie (This interface requires users to provide their own Cookie) - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] cookie = \"YOUR_COOKIE\" max_cursor = 0 counts = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_collection_videos_api_v1_douyin_web_fetch_user_collection_videos_get_0(cookie, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cookie: 用户网页版抖音Cookie/Your web version of Douyin Cookie (required)
        :param int max_cursor: 最大游标/Maximum cursor
        :param int counts: 每页数量/Number per page
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_collection_videos_api_v1_douyin_web_fetch_user_collection_videos_get_0_with_http_info(cookie, **kwargs)  # noqa: E501

    def fetch_user_collection_videos_api_v1_douyin_web_fetch_user_collection_videos_get_0_with_http_info(self, cookie, **kwargs):  # noqa: E501
        """获取用户收藏作品数据/Get user collection video data  # noqa: E501

        # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection video data ### Parameters: - cookie: User's web version of Douyin Cookie (This interface requires users to provide their own Cookie) - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] cookie = \"YOUR_COOKIE\" max_cursor = 0 counts = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_collection_videos_api_v1_douyin_web_fetch_user_collection_videos_get_0_with_http_info(cookie, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cookie: 用户网页版抖音Cookie/Your web version of Douyin Cookie (required)
        :param int max_cursor: 最大游标/Maximum cursor
        :param int counts: 每页数量/Number per page
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cookie',
            'max_cursor',
            'counts'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_collection_videos_api_v1_douyin_web_fetch_user_collection_videos_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cookie' is set
        if self.api_client.client_side_validation and ('cookie' not in local_var_params or  # noqa: E501
                                                        local_var_params['cookie'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cookie` when calling `fetch_user_collection_videos_api_v1_douyin_web_fetch_user_collection_videos_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501
        if 'max_cursor' in local_var_params and local_var_params['max_cursor'] is not None:  # noqa: E501
            query_params.append(('max_cursor', local_var_params['max_cursor']))  # noqa: E501
        if 'counts' in local_var_params and local_var_params['counts'] is not None:  # noqa: E501
            query_params.append(('counts', local_var_params['counts']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_collection_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_collects_videos_api_v1_douyin_web_fetch_user_collects_videos_get(self, collects_id, **kwargs):  # noqa: E501
        """获取用户收藏夹数据/Get user collection data  # noqa: E501

        # [中文] ### 用途: - 获取用户收藏夹数据 ### 参数: - collects_id: 收藏夹id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection data ### Parameters: - collects_id: Collection id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] collects_id = \"\" max_cursor = 0 counts = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_collects_videos_api_v1_douyin_web_fetch_user_collects_videos_get(collects_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str collects_id: 收藏夹id/Collection id (required)
        :param int max_cursor: 最大游标/Maximum cursor
        :param int counts: 每页数量/Number per page
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_collects_videos_api_v1_douyin_web_fetch_user_collects_videos_get_with_http_info(collects_id, **kwargs)  # noqa: E501

    def fetch_user_collects_videos_api_v1_douyin_web_fetch_user_collects_videos_get_with_http_info(self, collects_id, **kwargs):  # noqa: E501
        """获取用户收藏夹数据/Get user collection data  # noqa: E501

        # [中文] ### 用途: - 获取用户收藏夹数据 ### 参数: - collects_id: 收藏夹id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection data ### Parameters: - collects_id: Collection id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] collects_id = \"\" max_cursor = 0 counts = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_collects_videos_api_v1_douyin_web_fetch_user_collects_videos_get_with_http_info(collects_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str collects_id: 收藏夹id/Collection id (required)
        :param int max_cursor: 最大游标/Maximum cursor
        :param int counts: 每页数量/Number per page
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'collects_id',
            'max_cursor',
            'counts'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_collects_videos_api_v1_douyin_web_fetch_user_collects_videos_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'collects_id' is set
        if self.api_client.client_side_validation and ('collects_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['collects_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `collects_id` when calling `fetch_user_collects_videos_api_v1_douyin_web_fetch_user_collects_videos_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'collects_id' in local_var_params and local_var_params['collects_id'] is not None:  # noqa: E501
            query_params.append(('collects_id', local_var_params['collects_id']))  # noqa: E501
        if 'max_cursor' in local_var_params and local_var_params['max_cursor'] is not None:  # noqa: E501
            query_params.append(('max_cursor', local_var_params['max_cursor']))  # noqa: E501
        if 'counts' in local_var_params and local_var_params['counts'] is not None:  # noqa: E501
            query_params.append(('counts', local_var_params['counts']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_collects_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_collects_videos_api_v1_douyin_web_fetch_user_collects_videos_get_0(self, collects_id, **kwargs):  # noqa: E501
        """获取用户收藏夹数据/Get user collection data  # noqa: E501

        # [中文] ### 用途: - 获取用户收藏夹数据 ### 参数: - collects_id: 收藏夹id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection data ### Parameters: - collects_id: Collection id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] collects_id = \"\" max_cursor = 0 counts = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_collects_videos_api_v1_douyin_web_fetch_user_collects_videos_get_0(collects_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str collects_id: 收藏夹id/Collection id (required)
        :param int max_cursor: 最大游标/Maximum cursor
        :param int counts: 每页数量/Number per page
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_collects_videos_api_v1_douyin_web_fetch_user_collects_videos_get_0_with_http_info(collects_id, **kwargs)  # noqa: E501

    def fetch_user_collects_videos_api_v1_douyin_web_fetch_user_collects_videos_get_0_with_http_info(self, collects_id, **kwargs):  # noqa: E501
        """获取用户收藏夹数据/Get user collection data  # noqa: E501

        # [中文] ### 用途: - 获取用户收藏夹数据 ### 参数: - collects_id: 收藏夹id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection data ### Parameters: - collects_id: Collection id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] collects_id = \"\" max_cursor = 0 counts = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_collects_videos_api_v1_douyin_web_fetch_user_collects_videos_get_0_with_http_info(collects_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str collects_id: 收藏夹id/Collection id (required)
        :param int max_cursor: 最大游标/Maximum cursor
        :param int counts: 每页数量/Number per page
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'collects_id',
            'max_cursor',
            'counts'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_collects_videos_api_v1_douyin_web_fetch_user_collects_videos_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'collects_id' is set
        if self.api_client.client_side_validation and ('collects_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['collects_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `collects_id` when calling `fetch_user_collects_videos_api_v1_douyin_web_fetch_user_collects_videos_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'collects_id' in local_var_params and local_var_params['collects_id'] is not None:  # noqa: E501
            query_params.append(('collects_id', local_var_params['collects_id']))  # noqa: E501
        if 'max_cursor' in local_var_params and local_var_params['max_cursor'] is not None:  # noqa: E501
            query_params.append(('max_cursor', local_var_params['max_cursor']))  # noqa: E501
        if 'counts' in local_var_params and local_var_params['counts'] is not None:  # noqa: E501
            query_params.append(('counts', local_var_params['counts']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_collects_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_fans_interest_api_v1_douyin_web_fetch_user_fans_interest_get(self, sec_uid, interest_type, **kwargs):  # noqa: E501
        """抖音用户粉丝兴趣/Douyin User Fans Interest  # noqa: E501

        # [中文] ### 用途: - 抖音用户粉丝兴趣 ### 参数: - sec_uid: 用户sec_uid - interest_type: 兴趣类型，默认为search     - similar_author: 粉丝感兴趣同类型作者     - interest_topic: 粉丝近3天感兴趣的话题     - search: 粉丝近3天搜索词 ### 返回: - 用户粉丝兴趣数据  # [English] ### Purpose: - Douyin User Fans Interest ### Parameters: - sec_uid: Sec_uid of user - interest_type: Interest type, default is search     - similar_author: Fans interested in the same type of author     - interest_topic: Topics that fans are interested in the last 3 days     - search: Search terms for fans in the last 3 days ### Return: - User fans interest data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_fans_interest_api_v1_douyin_web_fetch_user_fans_interest_get(sec_uid, interest_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户sec_uid/Sec_uid of user (required)
        :param str interest_type: 兴趣类型/Interest type (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_fans_interest_api_v1_douyin_web_fetch_user_fans_interest_get_with_http_info(sec_uid, interest_type, **kwargs)  # noqa: E501

    def fetch_user_fans_interest_api_v1_douyin_web_fetch_user_fans_interest_get_with_http_info(self, sec_uid, interest_type, **kwargs):  # noqa: E501
        """抖音用户粉丝兴趣/Douyin User Fans Interest  # noqa: E501

        # [中文] ### 用途: - 抖音用户粉丝兴趣 ### 参数: - sec_uid: 用户sec_uid - interest_type: 兴趣类型，默认为search     - similar_author: 粉丝感兴趣同类型作者     - interest_topic: 粉丝近3天感兴趣的话题     - search: 粉丝近3天搜索词 ### 返回: - 用户粉丝兴趣数据  # [English] ### Purpose: - Douyin User Fans Interest ### Parameters: - sec_uid: Sec_uid of user - interest_type: Interest type, default is search     - similar_author: Fans interested in the same type of author     - interest_topic: Topics that fans are interested in the last 3 days     - search: Search terms for fans in the last 3 days ### Return: - User fans interest data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_fans_interest_api_v1_douyin_web_fetch_user_fans_interest_get_with_http_info(sec_uid, interest_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户sec_uid/Sec_uid of user (required)
        :param str interest_type: 兴趣类型/Interest type (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_uid',
            'interest_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_fans_interest_api_v1_douyin_web_fetch_user_fans_interest_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_uid' is set
        if self.api_client.client_side_validation and ('sec_uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_uid` when calling `fetch_user_fans_interest_api_v1_douyin_web_fetch_user_fans_interest_get`")  # noqa: E501
        # verify the required parameter 'interest_type' is set
        if self.api_client.client_side_validation and ('interest_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['interest_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `interest_type` when calling `fetch_user_fans_interest_api_v1_douyin_web_fetch_user_fans_interest_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_uid' in local_var_params and local_var_params['sec_uid'] is not None:  # noqa: E501
            query_params.append(('sec_uid', local_var_params['sec_uid']))  # noqa: E501
        if 'interest_type' in local_var_params and local_var_params['interest_type'] is not None:  # noqa: E501
            query_params.append(('interest_type', local_var_params['interest_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_fans_interest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_fans_interest_api_v1_douyin_web_fetch_user_fans_interest_get_0(self, sec_uid, interest_type, **kwargs):  # noqa: E501
        """抖音用户粉丝兴趣/Douyin User Fans Interest  # noqa: E501

        # [中文] ### 用途: - 抖音用户粉丝兴趣 ### 参数: - sec_uid: 用户sec_uid - interest_type: 兴趣类型，默认为search     - similar_author: 粉丝感兴趣同类型作者     - interest_topic: 粉丝近3天感兴趣的话题     - search: 粉丝近3天搜索词 ### 返回: - 用户粉丝兴趣数据  # [English] ### Purpose: - Douyin User Fans Interest ### Parameters: - sec_uid: Sec_uid of user - interest_type: Interest type, default is search     - similar_author: Fans interested in the same type of author     - interest_topic: Topics that fans are interested in the last 3 days     - search: Search terms for fans in the last 3 days ### Return: - User fans interest data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_fans_interest_api_v1_douyin_web_fetch_user_fans_interest_get_0(sec_uid, interest_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户sec_uid/Sec_uid of user (required)
        :param str interest_type: 兴趣类型/Interest type (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_fans_interest_api_v1_douyin_web_fetch_user_fans_interest_get_0_with_http_info(sec_uid, interest_type, **kwargs)  # noqa: E501

    def fetch_user_fans_interest_api_v1_douyin_web_fetch_user_fans_interest_get_0_with_http_info(self, sec_uid, interest_type, **kwargs):  # noqa: E501
        """抖音用户粉丝兴趣/Douyin User Fans Interest  # noqa: E501

        # [中文] ### 用途: - 抖音用户粉丝兴趣 ### 参数: - sec_uid: 用户sec_uid - interest_type: 兴趣类型，默认为search     - similar_author: 粉丝感兴趣同类型作者     - interest_topic: 粉丝近3天感兴趣的话题     - search: 粉丝近3天搜索词 ### 返回: - 用户粉丝兴趣数据  # [English] ### Purpose: - Douyin User Fans Interest ### Parameters: - sec_uid: Sec_uid of user - interest_type: Interest type, default is search     - similar_author: Fans interested in the same type of author     - interest_topic: Topics that fans are interested in the last 3 days     - search: Search terms for fans in the last 3 days ### Return: - User fans interest data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_fans_interest_api_v1_douyin_web_fetch_user_fans_interest_get_0_with_http_info(sec_uid, interest_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户sec_uid/Sec_uid of user (required)
        :param str interest_type: 兴趣类型/Interest type (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_uid',
            'interest_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_fans_interest_api_v1_douyin_web_fetch_user_fans_interest_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_uid' is set
        if self.api_client.client_side_validation and ('sec_uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_uid` when calling `fetch_user_fans_interest_api_v1_douyin_web_fetch_user_fans_interest_get_0`")  # noqa: E501
        # verify the required parameter 'interest_type' is set
        if self.api_client.client_side_validation and ('interest_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['interest_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `interest_type` when calling `fetch_user_fans_interest_api_v1_douyin_web_fetch_user_fans_interest_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_uid' in local_var_params and local_var_params['sec_uid'] is not None:  # noqa: E501
            query_params.append(('sec_uid', local_var_params['sec_uid']))  # noqa: E501
        if 'interest_type' in local_var_params and local_var_params['interest_type'] is not None:  # noqa: E501
            query_params.append(('interest_type', local_var_params['interest_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_fans_interest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_fans_list_api_v1_douyin_web_fetch_user_fans_list_get(self, **kwargs):  # noqa: E501
        """获取用户粉丝列表/Get user fans list  # noqa: E501

        # [中文] ### 用途: - 获取用户粉丝列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。  ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Fans list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_fans_list_api_v1_douyin_web_fetch_user_fans_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id
        :param str max_time: 最大时间戳/Maximum timestamp
        :param int count: 数量/Number
        :param int source_type: 来源类型/Source type
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_fans_list_api_v1_douyin_web_fetch_user_fans_list_get_with_http_info(**kwargs)  # noqa: E501

    def fetch_user_fans_list_api_v1_douyin_web_fetch_user_fans_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取用户粉丝列表/Get user fans list  # noqa: E501

        # [中文] ### 用途: - 获取用户粉丝列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。  ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Fans list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_fans_list_api_v1_douyin_web_fetch_user_fans_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id
        :param str max_time: 最大时间戳/Maximum timestamp
        :param int count: 数量/Number
        :param int source_type: 来源类型/Source type
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_user_id',
            'max_time',
            'count',
            'source_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_fans_list_api_v1_douyin_web_fetch_user_fans_list_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_user_id' in local_var_params and local_var_params['sec_user_id'] is not None:  # noqa: E501
            query_params.append(('sec_user_id', local_var_params['sec_user_id']))  # noqa: E501
        if 'max_time' in local_var_params and local_var_params['max_time'] is not None:  # noqa: E501
            query_params.append(('max_time', local_var_params['max_time']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'source_type' in local_var_params and local_var_params['source_type'] is not None:  # noqa: E501
            query_params.append(('source_type', local_var_params['source_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_fans_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_fans_list_api_v1_douyin_web_fetch_user_fans_list_get_0(self, **kwargs):  # noqa: E501
        """获取用户粉丝列表/Get user fans list  # noqa: E501

        # [中文] ### 用途: - 获取用户粉丝列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。  ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Fans list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_fans_list_api_v1_douyin_web_fetch_user_fans_list_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id
        :param str max_time: 最大时间戳/Maximum timestamp
        :param int count: 数量/Number
        :param int source_type: 来源类型/Source type
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_fans_list_api_v1_douyin_web_fetch_user_fans_list_get_0_with_http_info(**kwargs)  # noqa: E501

    def fetch_user_fans_list_api_v1_douyin_web_fetch_user_fans_list_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取用户粉丝列表/Get user fans list  # noqa: E501

        # [中文] ### 用途: - 获取用户粉丝列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。  ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Fans list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_fans_list_api_v1_douyin_web_fetch_user_fans_list_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id
        :param str max_time: 最大时间戳/Maximum timestamp
        :param int count: 数量/Number
        :param int source_type: 来源类型/Source type
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_user_id',
            'max_time',
            'count',
            'source_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_fans_list_api_v1_douyin_web_fetch_user_fans_list_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_user_id' in local_var_params and local_var_params['sec_user_id'] is not None:  # noqa: E501
            query_params.append(('sec_user_id', local_var_params['sec_user_id']))  # noqa: E501
        if 'max_time' in local_var_params and local_var_params['max_time'] is not None:  # noqa: E501
            query_params.append(('max_time', local_var_params['max_time']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'source_type' in local_var_params and local_var_params['source_type'] is not None:  # noqa: E501
            query_params.append(('source_type', local_var_params['source_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_fans_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_fans_portrait_api_v1_douyin_web_fetch_user_fans_portrait_get(self, sec_uid, **kwargs):  # noqa: E501
        """抖音用户粉丝画像/Douyin User Fans Portrait  # noqa: E501

        # [中文] ### 用途: - 抖音用户粉丝画像 ### 参数: - sec_uid: 用户sec_uid - option: 选项，默认为1     - 1: 粉丝手机价格分布     - 2: 粉丝性别分布     - 3: 粉丝年龄分布     - 4: 粉丝地域分布(省份)     - 5: 粉丝地域分布（城市）     - 6: 粉丝城市等级分布     - 7: 粉丝手机品牌分布     - 8: 粉丝兴趣 ### 返回: - 用户粉丝画像数据  # [English] ### Purpose: - Douyin User Fans Portrait ### Parameters: - sec_uid: Sec_uid of user - option: Option, default is 1     - 1: Fans mobile phone price distribution     - 2: Fans gender distribution     - 3: Fans age distribution     - 4: Fans regional distribution (province)     - 5: Fans regional distribution (city)     - 6: Fans city level distribution     - 7: Fans mobile phone brand distribution     - 8: Fans interests ### Return: - User fans portrait data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_fans_portrait_api_v1_douyin_web_fetch_user_fans_portrait_get(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户sec_uid/Sec_uid of user (required)
        :param str option: 选项/Option
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_fans_portrait_api_v1_douyin_web_fetch_user_fans_portrait_get_with_http_info(sec_uid, **kwargs)  # noqa: E501

    def fetch_user_fans_portrait_api_v1_douyin_web_fetch_user_fans_portrait_get_with_http_info(self, sec_uid, **kwargs):  # noqa: E501
        """抖音用户粉丝画像/Douyin User Fans Portrait  # noqa: E501

        # [中文] ### 用途: - 抖音用户粉丝画像 ### 参数: - sec_uid: 用户sec_uid - option: 选项，默认为1     - 1: 粉丝手机价格分布     - 2: 粉丝性别分布     - 3: 粉丝年龄分布     - 4: 粉丝地域分布(省份)     - 5: 粉丝地域分布（城市）     - 6: 粉丝城市等级分布     - 7: 粉丝手机品牌分布     - 8: 粉丝兴趣 ### 返回: - 用户粉丝画像数据  # [English] ### Purpose: - Douyin User Fans Portrait ### Parameters: - sec_uid: Sec_uid of user - option: Option, default is 1     - 1: Fans mobile phone price distribution     - 2: Fans gender distribution     - 3: Fans age distribution     - 4: Fans regional distribution (province)     - 5: Fans regional distribution (city)     - 6: Fans city level distribution     - 7: Fans mobile phone brand distribution     - 8: Fans interests ### Return: - User fans portrait data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_fans_portrait_api_v1_douyin_web_fetch_user_fans_portrait_get_with_http_info(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户sec_uid/Sec_uid of user (required)
        :param str option: 选项/Option
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_uid',
            'option'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_fans_portrait_api_v1_douyin_web_fetch_user_fans_portrait_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_uid' is set
        if self.api_client.client_side_validation and ('sec_uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_uid` when calling `fetch_user_fans_portrait_api_v1_douyin_web_fetch_user_fans_portrait_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_uid' in local_var_params and local_var_params['sec_uid'] is not None:  # noqa: E501
            query_params.append(('sec_uid', local_var_params['sec_uid']))  # noqa: E501
        if 'option' in local_var_params and local_var_params['option'] is not None:  # noqa: E501
            query_params.append(('option', local_var_params['option']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_fans_portrait', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_fans_portrait_api_v1_douyin_web_fetch_user_fans_portrait_get_0(self, sec_uid, **kwargs):  # noqa: E501
        """抖音用户粉丝画像/Douyin User Fans Portrait  # noqa: E501

        # [中文] ### 用途: - 抖音用户粉丝画像 ### 参数: - sec_uid: 用户sec_uid - option: 选项，默认为1     - 1: 粉丝手机价格分布     - 2: 粉丝性别分布     - 3: 粉丝年龄分布     - 4: 粉丝地域分布(省份)     - 5: 粉丝地域分布（城市）     - 6: 粉丝城市等级分布     - 7: 粉丝手机品牌分布     - 8: 粉丝兴趣 ### 返回: - 用户粉丝画像数据  # [English] ### Purpose: - Douyin User Fans Portrait ### Parameters: - sec_uid: Sec_uid of user - option: Option, default is 1     - 1: Fans mobile phone price distribution     - 2: Fans gender distribution     - 3: Fans age distribution     - 4: Fans regional distribution (province)     - 5: Fans regional distribution (city)     - 6: Fans city level distribution     - 7: Fans mobile phone brand distribution     - 8: Fans interests ### Return: - User fans portrait data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_fans_portrait_api_v1_douyin_web_fetch_user_fans_portrait_get_0(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户sec_uid/Sec_uid of user (required)
        :param str option: 选项/Option
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_fans_portrait_api_v1_douyin_web_fetch_user_fans_portrait_get_0_with_http_info(sec_uid, **kwargs)  # noqa: E501

    def fetch_user_fans_portrait_api_v1_douyin_web_fetch_user_fans_portrait_get_0_with_http_info(self, sec_uid, **kwargs):  # noqa: E501
        """抖音用户粉丝画像/Douyin User Fans Portrait  # noqa: E501

        # [中文] ### 用途: - 抖音用户粉丝画像 ### 参数: - sec_uid: 用户sec_uid - option: 选项，默认为1     - 1: 粉丝手机价格分布     - 2: 粉丝性别分布     - 3: 粉丝年龄分布     - 4: 粉丝地域分布(省份)     - 5: 粉丝地域分布（城市）     - 6: 粉丝城市等级分布     - 7: 粉丝手机品牌分布     - 8: 粉丝兴趣 ### 返回: - 用户粉丝画像数据  # [English] ### Purpose: - Douyin User Fans Portrait ### Parameters: - sec_uid: Sec_uid of user - option: Option, default is 1     - 1: Fans mobile phone price distribution     - 2: Fans gender distribution     - 3: Fans age distribution     - 4: Fans regional distribution (province)     - 5: Fans regional distribution (city)     - 6: Fans city level distribution     - 7: Fans mobile phone brand distribution     - 8: Fans interests ### Return: - User fans portrait data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_fans_portrait_api_v1_douyin_web_fetch_user_fans_portrait_get_0_with_http_info(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户sec_uid/Sec_uid of user (required)
        :param str option: 选项/Option
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_uid',
            'option'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_fans_portrait_api_v1_douyin_web_fetch_user_fans_portrait_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_uid' is set
        if self.api_client.client_side_validation and ('sec_uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_uid` when calling `fetch_user_fans_portrait_api_v1_douyin_web_fetch_user_fans_portrait_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_uid' in local_var_params and local_var_params['sec_uid'] is not None:  # noqa: E501
            query_params.append(('sec_uid', local_var_params['sec_uid']))  # noqa: E501
        if 'option' in local_var_params and local_var_params['option'] is not None:  # noqa: E501
            query_params.append(('option', local_var_params['option']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_fans_portrait', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_following_list_api_v1_douyin_web_fetch_user_following_list_get(self, **kwargs):  # noqa: E501
        """获取用户关注列表/Get user following list  # noqa: E501

        # [中文] ### 用途: - 获取用户关注列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Following list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_following_list_api_v1_douyin_web_fetch_user_following_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id
        :param str max_time: 最大时间戳/Maximum timestamp
        :param int count: 数量/Number
        :param int source_type: 来源类型/Source type
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_following_list_api_v1_douyin_web_fetch_user_following_list_get_with_http_info(**kwargs)  # noqa: E501

    def fetch_user_following_list_api_v1_douyin_web_fetch_user_following_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取用户关注列表/Get user following list  # noqa: E501

        # [中文] ### 用途: - 获取用户关注列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Following list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_following_list_api_v1_douyin_web_fetch_user_following_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id
        :param str max_time: 最大时间戳/Maximum timestamp
        :param int count: 数量/Number
        :param int source_type: 来源类型/Source type
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_user_id',
            'max_time',
            'count',
            'source_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_following_list_api_v1_douyin_web_fetch_user_following_list_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_user_id' in local_var_params and local_var_params['sec_user_id'] is not None:  # noqa: E501
            query_params.append(('sec_user_id', local_var_params['sec_user_id']))  # noqa: E501
        if 'max_time' in local_var_params and local_var_params['max_time'] is not None:  # noqa: E501
            query_params.append(('max_time', local_var_params['max_time']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'source_type' in local_var_params and local_var_params['source_type'] is not None:  # noqa: E501
            query_params.append(('source_type', local_var_params['source_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_following_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_following_list_api_v1_douyin_web_fetch_user_following_list_get_0(self, **kwargs):  # noqa: E501
        """获取用户关注列表/Get user following list  # noqa: E501

        # [中文] ### 用途: - 获取用户关注列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Following list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_following_list_api_v1_douyin_web_fetch_user_following_list_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id
        :param str max_time: 最大时间戳/Maximum timestamp
        :param int count: 数量/Number
        :param int source_type: 来源类型/Source type
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_following_list_api_v1_douyin_web_fetch_user_following_list_get_0_with_http_info(**kwargs)  # noqa: E501

    def fetch_user_following_list_api_v1_douyin_web_fetch_user_following_list_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取用户关注列表/Get user following list  # noqa: E501

        # [中文] ### 用途: - 获取用户关注列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Following list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_following_list_api_v1_douyin_web_fetch_user_following_list_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id
        :param str max_time: 最大时间戳/Maximum timestamp
        :param int count: 数量/Number
        :param int source_type: 来源类型/Source type
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_user_id',
            'max_time',
            'count',
            'source_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_following_list_api_v1_douyin_web_fetch_user_following_list_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_user_id' in local_var_params and local_var_params['sec_user_id'] is not None:  # noqa: E501
            query_params.append(('sec_user_id', local_var_params['sec_user_id']))  # noqa: E501
        if 'max_time' in local_var_params and local_var_params['max_time'] is not None:  # noqa: E501
            query_params.append(('max_time', local_var_params['max_time']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'source_type' in local_var_params and local_var_params['source_type'] is not None:  # noqa: E501
            query_params.append(('source_type', local_var_params['source_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_following_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_like_videos_api_v1_douyin_web_fetch_user_like_videos_get(self, sec_user_id, **kwargs):  # noqa: E501
        """获取用户喜欢作品数据/Get user like video data  # noqa: E501

        # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标 - count: 最大数量 - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor - count: Maximum count number - cookie: User's web version of Douyin Cookie (This interface requires users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_like_videos_api_v1_douyin_web_fetch_user_like_videos_get(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param int max_cursor: 最大游标/Maximum cursor
        :param int counts: 每页数量/Number per page
        :param str cookie: 用户网页版抖音Cookie/Your web version of Douyin Cookie
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_like_videos_api_v1_douyin_web_fetch_user_like_videos_get_with_http_info(sec_user_id, **kwargs)  # noqa: E501

    def fetch_user_like_videos_api_v1_douyin_web_fetch_user_like_videos_get_with_http_info(self, sec_user_id, **kwargs):  # noqa: E501
        """获取用户喜欢作品数据/Get user like video data  # noqa: E501

        # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标 - count: 最大数量 - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor - count: Maximum count number - cookie: User's web version of Douyin Cookie (This interface requires users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_like_videos_api_v1_douyin_web_fetch_user_like_videos_get_with_http_info(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param int max_cursor: 最大游标/Maximum cursor
        :param int counts: 每页数量/Number per page
        :param str cookie: 用户网页版抖音Cookie/Your web version of Douyin Cookie
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_user_id',
            'max_cursor',
            'counts',
            'cookie'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_like_videos_api_v1_douyin_web_fetch_user_like_videos_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_user_id' is set
        if self.api_client.client_side_validation and ('sec_user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_user_id` when calling `fetch_user_like_videos_api_v1_douyin_web_fetch_user_like_videos_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_user_id' in local_var_params and local_var_params['sec_user_id'] is not None:  # noqa: E501
            query_params.append(('sec_user_id', local_var_params['sec_user_id']))  # noqa: E501
        if 'max_cursor' in local_var_params and local_var_params['max_cursor'] is not None:  # noqa: E501
            query_params.append(('max_cursor', local_var_params['max_cursor']))  # noqa: E501
        if 'counts' in local_var_params and local_var_params['counts'] is not None:  # noqa: E501
            query_params.append(('counts', local_var_params['counts']))  # noqa: E501
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_like_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_like_videos_api_v1_douyin_web_fetch_user_like_videos_get_0(self, sec_user_id, **kwargs):  # noqa: E501
        """获取用户喜欢作品数据/Get user like video data  # noqa: E501

        # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标 - count: 最大数量 - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor - count: Maximum count number - cookie: User's web version of Douyin Cookie (This interface requires users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_like_videos_api_v1_douyin_web_fetch_user_like_videos_get_0(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param int max_cursor: 最大游标/Maximum cursor
        :param int counts: 每页数量/Number per page
        :param str cookie: 用户网页版抖音Cookie/Your web version of Douyin Cookie
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_like_videos_api_v1_douyin_web_fetch_user_like_videos_get_0_with_http_info(sec_user_id, **kwargs)  # noqa: E501

    def fetch_user_like_videos_api_v1_douyin_web_fetch_user_like_videos_get_0_with_http_info(self, sec_user_id, **kwargs):  # noqa: E501
        """获取用户喜欢作品数据/Get user like video data  # noqa: E501

        # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标 - count: 最大数量 - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor - count: Maximum count number - cookie: User's web version of Douyin Cookie (This interface requires users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_like_videos_api_v1_douyin_web_fetch_user_like_videos_get_0_with_http_info(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param int max_cursor: 最大游标/Maximum cursor
        :param int counts: 每页数量/Number per page
        :param str cookie: 用户网页版抖音Cookie/Your web version of Douyin Cookie
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_user_id',
            'max_cursor',
            'counts',
            'cookie'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_like_videos_api_v1_douyin_web_fetch_user_like_videos_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_user_id' is set
        if self.api_client.client_side_validation and ('sec_user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_user_id` when calling `fetch_user_like_videos_api_v1_douyin_web_fetch_user_like_videos_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_user_id' in local_var_params and local_var_params['sec_user_id'] is not None:  # noqa: E501
            query_params.append(('sec_user_id', local_var_params['sec_user_id']))  # noqa: E501
        if 'max_cursor' in local_var_params and local_var_params['max_cursor'] is not None:  # noqa: E501
            query_params.append(('max_cursor', local_var_params['max_cursor']))  # noqa: E501
        if 'counts' in local_var_params and local_var_params['counts'] is not None:  # noqa: E501
            query_params.append(('counts', local_var_params['counts']))  # noqa: E501
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_like_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_live_info_by_uid_api_v1_douyin_web_fetch_user_live_info_by_uid_get(self, uid, **kwargs):  # noqa: E501
        """使用UID获取用户开播信息/Get user live information by UID  # noqa: E501

        # [中文] ### 用途: - 使用UID获取用户开播信息 ### 参数: - uid: 用户UID ### 返回: - 用户开播信息，包含room_id与live_status  # [English] ### Purpose: - Get user live information by UID ### Parameters: - uid: User UID ### Return: - User live information, including room_id and live_status  # [示例/Example] uid = \"3081254195702747\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_live_info_by_uid_api_v1_douyin_web_fetch_user_live_info_by_uid_get(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户UID/User UID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_live_info_by_uid_api_v1_douyin_web_fetch_user_live_info_by_uid_get_with_http_info(uid, **kwargs)  # noqa: E501

    def fetch_user_live_info_by_uid_api_v1_douyin_web_fetch_user_live_info_by_uid_get_with_http_info(self, uid, **kwargs):  # noqa: E501
        """使用UID获取用户开播信息/Get user live information by UID  # noqa: E501

        # [中文] ### 用途: - 使用UID获取用户开播信息 ### 参数: - uid: 用户UID ### 返回: - 用户开播信息，包含room_id与live_status  # [English] ### Purpose: - Get user live information by UID ### Parameters: - uid: User UID ### Return: - User live information, including room_id and live_status  # [示例/Example] uid = \"3081254195702747\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_live_info_by_uid_api_v1_douyin_web_fetch_user_live_info_by_uid_get_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户UID/User UID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_live_info_by_uid_api_v1_douyin_web_fetch_user_live_info_by_uid_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uid` when calling `fetch_user_live_info_by_uid_api_v1_douyin_web_fetch_user_live_info_by_uid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in local_var_params and local_var_params['uid'] is not None:  # noqa: E501
            query_params.append(('uid', local_var_params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_live_info_by_uid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_live_info_by_uid_api_v1_douyin_web_fetch_user_live_info_by_uid_get_0(self, uid, **kwargs):  # noqa: E501
        """使用UID获取用户开播信息/Get user live information by UID  # noqa: E501

        # [中文] ### 用途: - 使用UID获取用户开播信息 ### 参数: - uid: 用户UID ### 返回: - 用户开播信息，包含room_id与live_status  # [English] ### Purpose: - Get user live information by UID ### Parameters: - uid: User UID ### Return: - User live information, including room_id and live_status  # [示例/Example] uid = \"3081254195702747\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_live_info_by_uid_api_v1_douyin_web_fetch_user_live_info_by_uid_get_0(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户UID/User UID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_live_info_by_uid_api_v1_douyin_web_fetch_user_live_info_by_uid_get_0_with_http_info(uid, **kwargs)  # noqa: E501

    def fetch_user_live_info_by_uid_api_v1_douyin_web_fetch_user_live_info_by_uid_get_0_with_http_info(self, uid, **kwargs):  # noqa: E501
        """使用UID获取用户开播信息/Get user live information by UID  # noqa: E501

        # [中文] ### 用途: - 使用UID获取用户开播信息 ### 参数: - uid: 用户UID ### 返回: - 用户开播信息，包含room_id与live_status  # [English] ### Purpose: - Get user live information by UID ### Parameters: - uid: User UID ### Return: - User live information, including room_id and live_status  # [示例/Example] uid = \"3081254195702747\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_live_info_by_uid_api_v1_douyin_web_fetch_user_live_info_by_uid_get_0_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户UID/User UID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_live_info_by_uid_api_v1_douyin_web_fetch_user_live_info_by_uid_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uid` when calling `fetch_user_live_info_by_uid_api_v1_douyin_web_fetch_user_live_info_by_uid_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in local_var_params and local_var_params['uid'] is not None:  # noqa: E501
            query_params.append(('uid', local_var_params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_live_info_by_uid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_live_videos_api_v1_douyin_web_fetch_user_live_videos_get(self, webcast_id, **kwargs):  # noqa: E501
        """获取用户直播流数据/Get user live video data  # noqa: E501

        # [中文] ### 用途: - 获取用户直播流数据 ### 参数: - webcast_id: 直播间 webcast_id - 获取方法：     - 假设你的直播间链接为：https://www.douyin.com/root/live/376034101029     - 那么直播间webcast_id为：376034101029     - webcast_id为直播间链接的最后一段数字，与room_id不同。 ### 返回: - 直播流数据  # [English] ### Purpose: - Get user live video data ### Parameters: - webcast_id: Room webcast_id - Acquisition method:     - Assuming your live room link is: https://www.douyin.com/root/live/376034101029     - Then the live room webcast_id is: 376034101029     - The webcast_id is the last number of the live room link, which is different from the room_id. ### Return: - Live stream data  # [示例/Example] webcast_id = \"376034101029\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_live_videos_api_v1_douyin_web_fetch_user_live_videos_get(webcast_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str webcast_id: 直播间webcast_id/Room webcast_id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_live_videos_api_v1_douyin_web_fetch_user_live_videos_get_with_http_info(webcast_id, **kwargs)  # noqa: E501

    def fetch_user_live_videos_api_v1_douyin_web_fetch_user_live_videos_get_with_http_info(self, webcast_id, **kwargs):  # noqa: E501
        """获取用户直播流数据/Get user live video data  # noqa: E501

        # [中文] ### 用途: - 获取用户直播流数据 ### 参数: - webcast_id: 直播间 webcast_id - 获取方法：     - 假设你的直播间链接为：https://www.douyin.com/root/live/376034101029     - 那么直播间webcast_id为：376034101029     - webcast_id为直播间链接的最后一段数字，与room_id不同。 ### 返回: - 直播流数据  # [English] ### Purpose: - Get user live video data ### Parameters: - webcast_id: Room webcast_id - Acquisition method:     - Assuming your live room link is: https://www.douyin.com/root/live/376034101029     - Then the live room webcast_id is: 376034101029     - The webcast_id is the last number of the live room link, which is different from the room_id. ### Return: - Live stream data  # [示例/Example] webcast_id = \"376034101029\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_live_videos_api_v1_douyin_web_fetch_user_live_videos_get_with_http_info(webcast_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str webcast_id: 直播间webcast_id/Room webcast_id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'webcast_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_live_videos_api_v1_douyin_web_fetch_user_live_videos_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'webcast_id' is set
        if self.api_client.client_side_validation and ('webcast_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['webcast_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `webcast_id` when calling `fetch_user_live_videos_api_v1_douyin_web_fetch_user_live_videos_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'webcast_id' in local_var_params and local_var_params['webcast_id'] is not None:  # noqa: E501
            query_params.append(('webcast_id', local_var_params['webcast_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_live_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_live_videos_api_v1_douyin_web_fetch_user_live_videos_get_0(self, webcast_id, **kwargs):  # noqa: E501
        """获取用户直播流数据/Get user live video data  # noqa: E501

        # [中文] ### 用途: - 获取用户直播流数据 ### 参数: - webcast_id: 直播间 webcast_id - 获取方法：     - 假设你的直播间链接为：https://www.douyin.com/root/live/376034101029     - 那么直播间webcast_id为：376034101029     - webcast_id为直播间链接的最后一段数字，与room_id不同。 ### 返回: - 直播流数据  # [English] ### Purpose: - Get user live video data ### Parameters: - webcast_id: Room webcast_id - Acquisition method:     - Assuming your live room link is: https://www.douyin.com/root/live/376034101029     - Then the live room webcast_id is: 376034101029     - The webcast_id is the last number of the live room link, which is different from the room_id. ### Return: - Live stream data  # [示例/Example] webcast_id = \"376034101029\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_live_videos_api_v1_douyin_web_fetch_user_live_videos_get_0(webcast_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str webcast_id: 直播间webcast_id/Room webcast_id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_live_videos_api_v1_douyin_web_fetch_user_live_videos_get_0_with_http_info(webcast_id, **kwargs)  # noqa: E501

    def fetch_user_live_videos_api_v1_douyin_web_fetch_user_live_videos_get_0_with_http_info(self, webcast_id, **kwargs):  # noqa: E501
        """获取用户直播流数据/Get user live video data  # noqa: E501

        # [中文] ### 用途: - 获取用户直播流数据 ### 参数: - webcast_id: 直播间 webcast_id - 获取方法：     - 假设你的直播间链接为：https://www.douyin.com/root/live/376034101029     - 那么直播间webcast_id为：376034101029     - webcast_id为直播间链接的最后一段数字，与room_id不同。 ### 返回: - 直播流数据  # [English] ### Purpose: - Get user live video data ### Parameters: - webcast_id: Room webcast_id - Acquisition method:     - Assuming your live room link is: https://www.douyin.com/root/live/376034101029     - Then the live room webcast_id is: 376034101029     - The webcast_id is the last number of the live room link, which is different from the room_id. ### Return: - Live stream data  # [示例/Example] webcast_id = \"376034101029\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_live_videos_api_v1_douyin_web_fetch_user_live_videos_get_0_with_http_info(webcast_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str webcast_id: 直播间webcast_id/Room webcast_id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'webcast_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_live_videos_api_v1_douyin_web_fetch_user_live_videos_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'webcast_id' is set
        if self.api_client.client_side_validation and ('webcast_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['webcast_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `webcast_id` when calling `fetch_user_live_videos_api_v1_douyin_web_fetch_user_live_videos_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'webcast_id' in local_var_params and local_var_params['webcast_id'] is not None:  # noqa: E501
            query_params.append(('webcast_id', local_var_params['webcast_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_live_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_live_videos_by_room_id_api_v1_douyin_web_fetch_user_live_videos_by_room_id_get(self, room_id, **kwargs):  # noqa: E501
        """获取指定用户的直播流数据/Get live video data of specified user  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的直播流数据 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Get live video data of specified user ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7318296342189919011\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_live_videos_by_room_id_api_v1_douyin_web_fetch_user_live_videos_by_room_id_get(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间room_id/Room room_id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_live_videos_by_room_id_api_v1_douyin_web_fetch_user_live_videos_by_room_id_get_with_http_info(room_id, **kwargs)  # noqa: E501

    def fetch_user_live_videos_by_room_id_api_v1_douyin_web_fetch_user_live_videos_by_room_id_get_with_http_info(self, room_id, **kwargs):  # noqa: E501
        """获取指定用户的直播流数据/Get live video data of specified user  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的直播流数据 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Get live video data of specified user ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7318296342189919011\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_live_videos_by_room_id_api_v1_douyin_web_fetch_user_live_videos_by_room_id_get_with_http_info(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间room_id/Room room_id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'room_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_live_videos_by_room_id_api_v1_douyin_web_fetch_user_live_videos_by_room_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'room_id' is set
        if self.api_client.client_side_validation and ('room_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['room_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `room_id` when calling `fetch_user_live_videos_by_room_id_api_v1_douyin_web_fetch_user_live_videos_by_room_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'room_id' in local_var_params and local_var_params['room_id'] is not None:  # noqa: E501
            query_params.append(('room_id', local_var_params['room_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_live_videos_by_room_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_live_videos_by_room_id_api_v1_douyin_web_fetch_user_live_videos_by_room_id_get_0(self, room_id, **kwargs):  # noqa: E501
        """获取指定用户的直播流数据/Get live video data of specified user  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的直播流数据 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Get live video data of specified user ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7318296342189919011\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_live_videos_by_room_id_api_v1_douyin_web_fetch_user_live_videos_by_room_id_get_0(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间room_id/Room room_id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_live_videos_by_room_id_api_v1_douyin_web_fetch_user_live_videos_by_room_id_get_0_with_http_info(room_id, **kwargs)  # noqa: E501

    def fetch_user_live_videos_by_room_id_api_v1_douyin_web_fetch_user_live_videos_by_room_id_get_0_with_http_info(self, room_id, **kwargs):  # noqa: E501
        """获取指定用户的直播流数据/Get live video data of specified user  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的直播流数据 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Get live video data of specified user ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7318296342189919011\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_live_videos_by_room_id_api_v1_douyin_web_fetch_user_live_videos_by_room_id_get_0_with_http_info(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间room_id/Room room_id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'room_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_live_videos_by_room_id_api_v1_douyin_web_fetch_user_live_videos_by_room_id_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'room_id' is set
        if self.api_client.client_side_validation and ('room_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['room_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `room_id` when calling `fetch_user_live_videos_by_room_id_api_v1_douyin_web_fetch_user_live_videos_by_room_id_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'room_id' in local_var_params and local_var_params['room_id'] is not None:  # noqa: E501
            query_params.append(('room_id', local_var_params['room_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_live_videos_by_room_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_live_videos_by_room_id_v2_api_v1_douyin_web_fetch_user_live_videos_by_room_id_v2_get(self, room_id, **kwargs):  # noqa: E501
        """获取指定用户的直播流数据V2/Gets the live stream data of the specified user V2  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的直播流数据V2 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Gets the live stream data of the specified user V2 ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7462723839303093032\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_live_videos_by_room_id_v2_api_v1_douyin_web_fetch_user_live_videos_by_room_id_v2_get(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间room_id/Room room_id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_live_videos_by_room_id_v2_api_v1_douyin_web_fetch_user_live_videos_by_room_id_v2_get_with_http_info(room_id, **kwargs)  # noqa: E501

    def fetch_user_live_videos_by_room_id_v2_api_v1_douyin_web_fetch_user_live_videos_by_room_id_v2_get_with_http_info(self, room_id, **kwargs):  # noqa: E501
        """获取指定用户的直播流数据V2/Gets the live stream data of the specified user V2  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的直播流数据V2 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Gets the live stream data of the specified user V2 ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7462723839303093032\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_live_videos_by_room_id_v2_api_v1_douyin_web_fetch_user_live_videos_by_room_id_v2_get_with_http_info(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间room_id/Room room_id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'room_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_live_videos_by_room_id_v2_api_v1_douyin_web_fetch_user_live_videos_by_room_id_v2_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'room_id' is set
        if self.api_client.client_side_validation and ('room_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['room_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `room_id` when calling `fetch_user_live_videos_by_room_id_v2_api_v1_douyin_web_fetch_user_live_videos_by_room_id_v2_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'room_id' in local_var_params and local_var_params['room_id'] is not None:  # noqa: E501
            query_params.append(('room_id', local_var_params['room_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_live_videos_by_room_id_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_live_videos_by_room_id_v2_api_v1_douyin_web_fetch_user_live_videos_by_room_id_v2_get_0(self, room_id, **kwargs):  # noqa: E501
        """获取指定用户的直播流数据V2/Gets the live stream data of the specified user V2  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的直播流数据V2 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Gets the live stream data of the specified user V2 ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7462723839303093032\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_live_videos_by_room_id_v2_api_v1_douyin_web_fetch_user_live_videos_by_room_id_v2_get_0(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间room_id/Room room_id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_live_videos_by_room_id_v2_api_v1_douyin_web_fetch_user_live_videos_by_room_id_v2_get_0_with_http_info(room_id, **kwargs)  # noqa: E501

    def fetch_user_live_videos_by_room_id_v2_api_v1_douyin_web_fetch_user_live_videos_by_room_id_v2_get_0_with_http_info(self, room_id, **kwargs):  # noqa: E501
        """获取指定用户的直播流数据V2/Gets the live stream data of the specified user V2  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的直播流数据V2 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Gets the live stream data of the specified user V2 ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7462723839303093032\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_live_videos_by_room_id_v2_api_v1_douyin_web_fetch_user_live_videos_by_room_id_v2_get_0_with_http_info(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间room_id/Room room_id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'room_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_live_videos_by_room_id_v2_api_v1_douyin_web_fetch_user_live_videos_by_room_id_v2_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'room_id' is set
        if self.api_client.client_side_validation and ('room_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['room_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `room_id` when calling `fetch_user_live_videos_by_room_id_v2_api_v1_douyin_web_fetch_user_live_videos_by_room_id_v2_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'room_id' in local_var_params and local_var_params['room_id'] is not None:  # noqa: E501
            query_params.append(('room_id', local_var_params['room_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_live_videos_by_room_id_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_live_videos_by_sec_uid_api_v1_douyin_web_fetch_user_live_videos_by_sec_uid_get(self, sec_uid, **kwargs):  # noqa: E501
        """通过sec_uid获取指定用户的直播流数据/Get live video data of specified user by sec_uid  # noqa: E501

        # [中文] ### 用途: - 通过sec_uid获取指定用户的直播流数据 ### 参数: - sec_uid: 用户sec_uid，也叫 sec_user_id，可以在用户主页链接中找到。 ### 返回: - 直播流数据  # [English] ### Purpose - Get live video data of specified user by sec_uid ### Parameters - sec_uid: User sec_uid, also called sec_user_id, can be found in the user's homepage link. ### Return - Live stream data  # [示例/Example] sec_uid = \"MS4wLjABAAAAAIKOBr_x6p2fPVKOAhqG8LrC1lwwdWChifKEsl-TXFS-kGSGqpMBRexJdzoAfvUF\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_live_videos_by_sec_uid_api_v1_douyin_web_fetch_user_live_videos_by_sec_uid_get(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户sec_uid/User sec_uid (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_live_videos_by_sec_uid_api_v1_douyin_web_fetch_user_live_videos_by_sec_uid_get_with_http_info(sec_uid, **kwargs)  # noqa: E501

    def fetch_user_live_videos_by_sec_uid_api_v1_douyin_web_fetch_user_live_videos_by_sec_uid_get_with_http_info(self, sec_uid, **kwargs):  # noqa: E501
        """通过sec_uid获取指定用户的直播流数据/Get live video data of specified user by sec_uid  # noqa: E501

        # [中文] ### 用途: - 通过sec_uid获取指定用户的直播流数据 ### 参数: - sec_uid: 用户sec_uid，也叫 sec_user_id，可以在用户主页链接中找到。 ### 返回: - 直播流数据  # [English] ### Purpose - Get live video data of specified user by sec_uid ### Parameters - sec_uid: User sec_uid, also called sec_user_id, can be found in the user's homepage link. ### Return - Live stream data  # [示例/Example] sec_uid = \"MS4wLjABAAAAAIKOBr_x6p2fPVKOAhqG8LrC1lwwdWChifKEsl-TXFS-kGSGqpMBRexJdzoAfvUF\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_live_videos_by_sec_uid_api_v1_douyin_web_fetch_user_live_videos_by_sec_uid_get_with_http_info(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户sec_uid/User sec_uid (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_uid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_live_videos_by_sec_uid_api_v1_douyin_web_fetch_user_live_videos_by_sec_uid_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_uid' is set
        if self.api_client.client_side_validation and ('sec_uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_uid` when calling `fetch_user_live_videos_by_sec_uid_api_v1_douyin_web_fetch_user_live_videos_by_sec_uid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_uid' in local_var_params and local_var_params['sec_uid'] is not None:  # noqa: E501
            query_params.append(('sec_uid', local_var_params['sec_uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_live_videos_by_sec_uid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_live_videos_by_sec_uid_api_v1_douyin_web_fetch_user_live_videos_by_sec_uid_get_0(self, sec_uid, **kwargs):  # noqa: E501
        """通过sec_uid获取指定用户的直播流数据/Get live video data of specified user by sec_uid  # noqa: E501

        # [中文] ### 用途: - 通过sec_uid获取指定用户的直播流数据 ### 参数: - sec_uid: 用户sec_uid，也叫 sec_user_id，可以在用户主页链接中找到。 ### 返回: - 直播流数据  # [English] ### Purpose - Get live video data of specified user by sec_uid ### Parameters - sec_uid: User sec_uid, also called sec_user_id, can be found in the user's homepage link. ### Return - Live stream data  # [示例/Example] sec_uid = \"MS4wLjABAAAAAIKOBr_x6p2fPVKOAhqG8LrC1lwwdWChifKEsl-TXFS-kGSGqpMBRexJdzoAfvUF\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_live_videos_by_sec_uid_api_v1_douyin_web_fetch_user_live_videos_by_sec_uid_get_0(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户sec_uid/User sec_uid (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_live_videos_by_sec_uid_api_v1_douyin_web_fetch_user_live_videos_by_sec_uid_get_0_with_http_info(sec_uid, **kwargs)  # noqa: E501

    def fetch_user_live_videos_by_sec_uid_api_v1_douyin_web_fetch_user_live_videos_by_sec_uid_get_0_with_http_info(self, sec_uid, **kwargs):  # noqa: E501
        """通过sec_uid获取指定用户的直播流数据/Get live video data of specified user by sec_uid  # noqa: E501

        # [中文] ### 用途: - 通过sec_uid获取指定用户的直播流数据 ### 参数: - sec_uid: 用户sec_uid，也叫 sec_user_id，可以在用户主页链接中找到。 ### 返回: - 直播流数据  # [English] ### Purpose - Get live video data of specified user by sec_uid ### Parameters - sec_uid: User sec_uid, also called sec_user_id, can be found in the user's homepage link. ### Return - Live stream data  # [示例/Example] sec_uid = \"MS4wLjABAAAAAIKOBr_x6p2fPVKOAhqG8LrC1lwwdWChifKEsl-TXFS-kGSGqpMBRexJdzoAfvUF\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_live_videos_by_sec_uid_api_v1_douyin_web_fetch_user_live_videos_by_sec_uid_get_0_with_http_info(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户sec_uid/User sec_uid (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_uid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_live_videos_by_sec_uid_api_v1_douyin_web_fetch_user_live_videos_by_sec_uid_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_uid' is set
        if self.api_client.client_side_validation and ('sec_uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_uid` when calling `fetch_user_live_videos_by_sec_uid_api_v1_douyin_web_fetch_user_live_videos_by_sec_uid_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_uid' in local_var_params and local_var_params['sec_uid'] is not None:  # noqa: E501
            query_params.append(('sec_uid', local_var_params['sec_uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_live_videos_by_sec_uid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_mix_videos_api_v1_douyin_web_fetch_user_mix_videos_get(self, mix_id, **kwargs):  # noqa: E501
        """获取用户合辑作品数据/Get user mix video data  # noqa: E501

        # [中文] ### 用途: - 获取用户合辑作品数据 ### 参数: - mix_id: 合辑id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user mix video data ### Parameters: - mix_id: Mix id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] url = https://www.douyin.com/collection/7348687990509553679 mix_id = \"7348687990509553679\" max_cursor = 0 counts = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_mix_videos_api_v1_douyin_web_fetch_user_mix_videos_get(mix_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str mix_id: 合辑id/Mix id (required)
        :param int max_cursor: 最大游标/Maximum cursor
        :param int counts: 每页数量/Number per page
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_mix_videos_api_v1_douyin_web_fetch_user_mix_videos_get_with_http_info(mix_id, **kwargs)  # noqa: E501

    def fetch_user_mix_videos_api_v1_douyin_web_fetch_user_mix_videos_get_with_http_info(self, mix_id, **kwargs):  # noqa: E501
        """获取用户合辑作品数据/Get user mix video data  # noqa: E501

        # [中文] ### 用途: - 获取用户合辑作品数据 ### 参数: - mix_id: 合辑id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user mix video data ### Parameters: - mix_id: Mix id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] url = https://www.douyin.com/collection/7348687990509553679 mix_id = \"7348687990509553679\" max_cursor = 0 counts = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_mix_videos_api_v1_douyin_web_fetch_user_mix_videos_get_with_http_info(mix_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str mix_id: 合辑id/Mix id (required)
        :param int max_cursor: 最大游标/Maximum cursor
        :param int counts: 每页数量/Number per page
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'mix_id',
            'max_cursor',
            'counts'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_mix_videos_api_v1_douyin_web_fetch_user_mix_videos_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mix_id' is set
        if self.api_client.client_side_validation and ('mix_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['mix_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `mix_id` when calling `fetch_user_mix_videos_api_v1_douyin_web_fetch_user_mix_videos_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'mix_id' in local_var_params and local_var_params['mix_id'] is not None:  # noqa: E501
            query_params.append(('mix_id', local_var_params['mix_id']))  # noqa: E501
        if 'max_cursor' in local_var_params and local_var_params['max_cursor'] is not None:  # noqa: E501
            query_params.append(('max_cursor', local_var_params['max_cursor']))  # noqa: E501
        if 'counts' in local_var_params and local_var_params['counts'] is not None:  # noqa: E501
            query_params.append(('counts', local_var_params['counts']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_mix_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_mix_videos_api_v1_douyin_web_fetch_user_mix_videos_get_0(self, mix_id, **kwargs):  # noqa: E501
        """获取用户合辑作品数据/Get user mix video data  # noqa: E501

        # [中文] ### 用途: - 获取用户合辑作品数据 ### 参数: - mix_id: 合辑id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user mix video data ### Parameters: - mix_id: Mix id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] url = https://www.douyin.com/collection/7348687990509553679 mix_id = \"7348687990509553679\" max_cursor = 0 counts = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_mix_videos_api_v1_douyin_web_fetch_user_mix_videos_get_0(mix_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str mix_id: 合辑id/Mix id (required)
        :param int max_cursor: 最大游标/Maximum cursor
        :param int counts: 每页数量/Number per page
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_mix_videos_api_v1_douyin_web_fetch_user_mix_videos_get_0_with_http_info(mix_id, **kwargs)  # noqa: E501

    def fetch_user_mix_videos_api_v1_douyin_web_fetch_user_mix_videos_get_0_with_http_info(self, mix_id, **kwargs):  # noqa: E501
        """获取用户合辑作品数据/Get user mix video data  # noqa: E501

        # [中文] ### 用途: - 获取用户合辑作品数据 ### 参数: - mix_id: 合辑id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user mix video data ### Parameters: - mix_id: Mix id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] url = https://www.douyin.com/collection/7348687990509553679 mix_id = \"7348687990509553679\" max_cursor = 0 counts = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_mix_videos_api_v1_douyin_web_fetch_user_mix_videos_get_0_with_http_info(mix_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str mix_id: 合辑id/Mix id (required)
        :param int max_cursor: 最大游标/Maximum cursor
        :param int counts: 每页数量/Number per page
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'mix_id',
            'max_cursor',
            'counts'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_mix_videos_api_v1_douyin_web_fetch_user_mix_videos_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mix_id' is set
        if self.api_client.client_side_validation and ('mix_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['mix_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `mix_id` when calling `fetch_user_mix_videos_api_v1_douyin_web_fetch_user_mix_videos_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'mix_id' in local_var_params and local_var_params['mix_id'] is not None:  # noqa: E501
            query_params.append(('mix_id', local_var_params['mix_id']))  # noqa: E501
        if 'max_cursor' in local_var_params and local_var_params['max_cursor'] is not None:  # noqa: E501
            query_params.append(('max_cursor', local_var_params['max_cursor']))  # noqa: E501
        if 'counts' in local_var_params and local_var_params['counts'] is not None:  # noqa: E501
            query_params.append(('counts', local_var_params['counts']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_mix_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_post_videos_api_v1_douyin_web_fetch_user_post_videos_get(self, sec_user_id, **kwargs):  # noqa: E501
        """获取用户主页作品数据/Get user homepage video data  # noqa: E501

        # [中文] ### 用途: - 获取用户主页作品数据 - 注意：请尽量使用APP的接口而不是WEB的接口，因为WEB的接口可能会被不稳定。 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 翻页游标，第一次请求传0，然后每次请求传上一次请求返回的max_cursor进行翻页。 - count: 最大数量，建议不要超过20 - filter_type: 过滤类型，可选参数如下：     - 0: 默认排序     - 3: 热度排序 - cookie: 用户网页版抖音Cookie(此接口可以接受用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data - Note: Please try to use the APP interface instead of the WEB API, because the WEB API may be unstable. ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Paging cursor, pass 0 for the first request, and then pass the max_cursor returned by the previous request for paging each time. - count: Maximum count number, it is recommended not to exceed 20 - filter_type: Filter type, optional parameters are as follows:     - 0: Default sorting     - 3: Sort by popularity - cookie: User's web version of Douyin Cookie (This interface can accept users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = \"0\" counts = 20 filter_type = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_post_videos_api_v1_douyin_web_fetch_user_post_videos_get(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param str max_cursor: 最大游标/Maximum cursor
        :param int count: 每页数量/Number per page
        :param str filter_type: 过滤类型/Filter type
        :param str cookie: 用户网页版抖音Cookie/Your web version of Douyin Cookie
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_post_videos_api_v1_douyin_web_fetch_user_post_videos_get_with_http_info(sec_user_id, **kwargs)  # noqa: E501

    def fetch_user_post_videos_api_v1_douyin_web_fetch_user_post_videos_get_with_http_info(self, sec_user_id, **kwargs):  # noqa: E501
        """获取用户主页作品数据/Get user homepage video data  # noqa: E501

        # [中文] ### 用途: - 获取用户主页作品数据 - 注意：请尽量使用APP的接口而不是WEB的接口，因为WEB的接口可能会被不稳定。 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 翻页游标，第一次请求传0，然后每次请求传上一次请求返回的max_cursor进行翻页。 - count: 最大数量，建议不要超过20 - filter_type: 过滤类型，可选参数如下：     - 0: 默认排序     - 3: 热度排序 - cookie: 用户网页版抖音Cookie(此接口可以接受用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data - Note: Please try to use the APP interface instead of the WEB API, because the WEB API may be unstable. ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Paging cursor, pass 0 for the first request, and then pass the max_cursor returned by the previous request for paging each time. - count: Maximum count number, it is recommended not to exceed 20 - filter_type: Filter type, optional parameters are as follows:     - 0: Default sorting     - 3: Sort by popularity - cookie: User's web version of Douyin Cookie (This interface can accept users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = \"0\" counts = 20 filter_type = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_post_videos_api_v1_douyin_web_fetch_user_post_videos_get_with_http_info(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param str max_cursor: 最大游标/Maximum cursor
        :param int count: 每页数量/Number per page
        :param str filter_type: 过滤类型/Filter type
        :param str cookie: 用户网页版抖音Cookie/Your web version of Douyin Cookie
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_user_id',
            'max_cursor',
            'count',
            'filter_type',
            'cookie'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_post_videos_api_v1_douyin_web_fetch_user_post_videos_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_user_id' is set
        if self.api_client.client_side_validation and ('sec_user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_user_id` when calling `fetch_user_post_videos_api_v1_douyin_web_fetch_user_post_videos_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_user_id' in local_var_params and local_var_params['sec_user_id'] is not None:  # noqa: E501
            query_params.append(('sec_user_id', local_var_params['sec_user_id']))  # noqa: E501
        if 'max_cursor' in local_var_params and local_var_params['max_cursor'] is not None:  # noqa: E501
            query_params.append(('max_cursor', local_var_params['max_cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'filter_type' in local_var_params and local_var_params['filter_type'] is not None:  # noqa: E501
            query_params.append(('filter_type', local_var_params['filter_type']))  # noqa: E501
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_post_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_post_videos_api_v1_douyin_web_fetch_user_post_videos_get_0(self, sec_user_id, **kwargs):  # noqa: E501
        """获取用户主页作品数据/Get user homepage video data  # noqa: E501

        # [中文] ### 用途: - 获取用户主页作品数据 - 注意：请尽量使用APP的接口而不是WEB的接口，因为WEB的接口可能会被不稳定。 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 翻页游标，第一次请求传0，然后每次请求传上一次请求返回的max_cursor进行翻页。 - count: 最大数量，建议不要超过20 - filter_type: 过滤类型，可选参数如下：     - 0: 默认排序     - 3: 热度排序 - cookie: 用户网页版抖音Cookie(此接口可以接受用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data - Note: Please try to use the APP interface instead of the WEB API, because the WEB API may be unstable. ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Paging cursor, pass 0 for the first request, and then pass the max_cursor returned by the previous request for paging each time. - count: Maximum count number, it is recommended not to exceed 20 - filter_type: Filter type, optional parameters are as follows:     - 0: Default sorting     - 3: Sort by popularity - cookie: User's web version of Douyin Cookie (This interface can accept users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = \"0\" counts = 20 filter_type = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_post_videos_api_v1_douyin_web_fetch_user_post_videos_get_0(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param str max_cursor: 最大游标/Maximum cursor
        :param int count: 每页数量/Number per page
        :param str filter_type: 过滤类型/Filter type
        :param str cookie: 用户网页版抖音Cookie/Your web version of Douyin Cookie
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_post_videos_api_v1_douyin_web_fetch_user_post_videos_get_0_with_http_info(sec_user_id, **kwargs)  # noqa: E501

    def fetch_user_post_videos_api_v1_douyin_web_fetch_user_post_videos_get_0_with_http_info(self, sec_user_id, **kwargs):  # noqa: E501
        """获取用户主页作品数据/Get user homepage video data  # noqa: E501

        # [中文] ### 用途: - 获取用户主页作品数据 - 注意：请尽量使用APP的接口而不是WEB的接口，因为WEB的接口可能会被不稳定。 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 翻页游标，第一次请求传0，然后每次请求传上一次请求返回的max_cursor进行翻页。 - count: 最大数量，建议不要超过20 - filter_type: 过滤类型，可选参数如下：     - 0: 默认排序     - 3: 热度排序 - cookie: 用户网页版抖音Cookie(此接口可以接受用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data - Note: Please try to use the APP interface instead of the WEB API, because the WEB API may be unstable. ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Paging cursor, pass 0 for the first request, and then pass the max_cursor returned by the previous request for paging each time. - count: Maximum count number, it is recommended not to exceed 20 - filter_type: Filter type, optional parameters are as follows:     - 0: Default sorting     - 3: Sort by popularity - cookie: User's web version of Douyin Cookie (This interface can accept users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = \"0\" counts = 20 filter_type = \"0\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_post_videos_api_v1_douyin_web_fetch_user_post_videos_get_0_with_http_info(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param str max_cursor: 最大游标/Maximum cursor
        :param int count: 每页数量/Number per page
        :param str filter_type: 过滤类型/Filter type
        :param str cookie: 用户网页版抖音Cookie/Your web version of Douyin Cookie
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_user_id',
            'max_cursor',
            'count',
            'filter_type',
            'cookie'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_post_videos_api_v1_douyin_web_fetch_user_post_videos_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_user_id' is set
        if self.api_client.client_side_validation and ('sec_user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_user_id` when calling `fetch_user_post_videos_api_v1_douyin_web_fetch_user_post_videos_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_user_id' in local_var_params and local_var_params['sec_user_id'] is not None:  # noqa: E501
            query_params.append(('sec_user_id', local_var_params['sec_user_id']))  # noqa: E501
        if 'max_cursor' in local_var_params and local_var_params['max_cursor'] is not None:  # noqa: E501
            query_params.append(('max_cursor', local_var_params['max_cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'filter_type' in local_var_params and local_var_params['filter_type'] is not None:  # noqa: E501
            query_params.append(('filter_type', local_var_params['filter_type']))  # noqa: E501
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_post_videos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_profile_by_short_id_api_v1_douyin_web_fetch_user_profile_by_short_id_get(self, short_id, **kwargs):  # noqa: E501
        """使用Short ID获取用户信息/Get user information by Short ID  # noqa: E501

        # [中文] ### 用途: - 使用Short ID获取用户信息 ### 参数: - short_id: 用户Short ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by Short ID ### Parameters: - short_id: User Short ID ### Return: - User information  # [示例/Example] short_id = \"114131058\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_profile_by_short_id_api_v1_douyin_web_fetch_user_profile_by_short_id_get(short_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str short_id: 用户Short ID/User Short ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_profile_by_short_id_api_v1_douyin_web_fetch_user_profile_by_short_id_get_with_http_info(short_id, **kwargs)  # noqa: E501

    def fetch_user_profile_by_short_id_api_v1_douyin_web_fetch_user_profile_by_short_id_get_with_http_info(self, short_id, **kwargs):  # noqa: E501
        """使用Short ID获取用户信息/Get user information by Short ID  # noqa: E501

        # [中文] ### 用途: - 使用Short ID获取用户信息 ### 参数: - short_id: 用户Short ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by Short ID ### Parameters: - short_id: User Short ID ### Return: - User information  # [示例/Example] short_id = \"114131058\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_profile_by_short_id_api_v1_douyin_web_fetch_user_profile_by_short_id_get_with_http_info(short_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str short_id: 用户Short ID/User Short ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'short_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_profile_by_short_id_api_v1_douyin_web_fetch_user_profile_by_short_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'short_id' is set
        if self.api_client.client_side_validation and ('short_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['short_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `short_id` when calling `fetch_user_profile_by_short_id_api_v1_douyin_web_fetch_user_profile_by_short_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'short_id' in local_var_params and local_var_params['short_id'] is not None:  # noqa: E501
            query_params.append(('short_id', local_var_params['short_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_profile_by_short_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_profile_by_short_id_api_v1_douyin_web_fetch_user_profile_by_short_id_get_0(self, short_id, **kwargs):  # noqa: E501
        """使用Short ID获取用户信息/Get user information by Short ID  # noqa: E501

        # [中文] ### 用途: - 使用Short ID获取用户信息 ### 参数: - short_id: 用户Short ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by Short ID ### Parameters: - short_id: User Short ID ### Return: - User information  # [示例/Example] short_id = \"114131058\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_profile_by_short_id_api_v1_douyin_web_fetch_user_profile_by_short_id_get_0(short_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str short_id: 用户Short ID/User Short ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_profile_by_short_id_api_v1_douyin_web_fetch_user_profile_by_short_id_get_0_with_http_info(short_id, **kwargs)  # noqa: E501

    def fetch_user_profile_by_short_id_api_v1_douyin_web_fetch_user_profile_by_short_id_get_0_with_http_info(self, short_id, **kwargs):  # noqa: E501
        """使用Short ID获取用户信息/Get user information by Short ID  # noqa: E501

        # [中文] ### 用途: - 使用Short ID获取用户信息 ### 参数: - short_id: 用户Short ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by Short ID ### Parameters: - short_id: User Short ID ### Return: - User information  # [示例/Example] short_id = \"114131058\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_profile_by_short_id_api_v1_douyin_web_fetch_user_profile_by_short_id_get_0_with_http_info(short_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str short_id: 用户Short ID/User Short ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'short_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_profile_by_short_id_api_v1_douyin_web_fetch_user_profile_by_short_id_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'short_id' is set
        if self.api_client.client_side_validation and ('short_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['short_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `short_id` when calling `fetch_user_profile_by_short_id_api_v1_douyin_web_fetch_user_profile_by_short_id_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'short_id' in local_var_params and local_var_params['short_id'] is not None:  # noqa: E501
            query_params.append(('short_id', local_var_params['short_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_profile_by_short_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_profile_by_uid_api_v1_douyin_web_fetch_user_profile_by_uid_get(self, uid, **kwargs):  # noqa: E501
        """使用UID获取用户信息/Get user information by UID  # noqa: E501

        # [中文] ### 用途: - 使用UID获取用户信息 ### 参数: - uid: 用户UID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by UID ### Parameters: - uid: User UID ### Return: - User information  # [示例/Example] uid = \"68141954464\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_profile_by_uid_api_v1_douyin_web_fetch_user_profile_by_uid_get(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户UID/User UID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_profile_by_uid_api_v1_douyin_web_fetch_user_profile_by_uid_get_with_http_info(uid, **kwargs)  # noqa: E501

    def fetch_user_profile_by_uid_api_v1_douyin_web_fetch_user_profile_by_uid_get_with_http_info(self, uid, **kwargs):  # noqa: E501
        """使用UID获取用户信息/Get user information by UID  # noqa: E501

        # [中文] ### 用途: - 使用UID获取用户信息 ### 参数: - uid: 用户UID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by UID ### Parameters: - uid: User UID ### Return: - User information  # [示例/Example] uid = \"68141954464\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_profile_by_uid_api_v1_douyin_web_fetch_user_profile_by_uid_get_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户UID/User UID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_profile_by_uid_api_v1_douyin_web_fetch_user_profile_by_uid_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uid` when calling `fetch_user_profile_by_uid_api_v1_douyin_web_fetch_user_profile_by_uid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in local_var_params and local_var_params['uid'] is not None:  # noqa: E501
            query_params.append(('uid', local_var_params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_profile_by_uid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_profile_by_uid_api_v1_douyin_web_fetch_user_profile_by_uid_get_0(self, uid, **kwargs):  # noqa: E501
        """使用UID获取用户信息/Get user information by UID  # noqa: E501

        # [中文] ### 用途: - 使用UID获取用户信息 ### 参数: - uid: 用户UID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by UID ### Parameters: - uid: User UID ### Return: - User information  # [示例/Example] uid = \"68141954464\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_profile_by_uid_api_v1_douyin_web_fetch_user_profile_by_uid_get_0(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户UID/User UID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_profile_by_uid_api_v1_douyin_web_fetch_user_profile_by_uid_get_0_with_http_info(uid, **kwargs)  # noqa: E501

    def fetch_user_profile_by_uid_api_v1_douyin_web_fetch_user_profile_by_uid_get_0_with_http_info(self, uid, **kwargs):  # noqa: E501
        """使用UID获取用户信息/Get user information by UID  # noqa: E501

        # [中文] ### 用途: - 使用UID获取用户信息 ### 参数: - uid: 用户UID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by UID ### Parameters: - uid: User UID ### Return: - User information  # [示例/Example] uid = \"68141954464\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_profile_by_uid_api_v1_douyin_web_fetch_user_profile_by_uid_get_0_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户UID/User UID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_profile_by_uid_api_v1_douyin_web_fetch_user_profile_by_uid_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uid` when calling `fetch_user_profile_by_uid_api_v1_douyin_web_fetch_user_profile_by_uid_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in local_var_params and local_var_params['uid'] is not None:  # noqa: E501
            query_params.append(('uid', local_var_params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_profile_by_uid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_search_result_api_v1_douyin_web_fetch_user_search_result_get(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的用户搜索结果(已废弃，使用V2或V3接口代替)/Get user search results of specified keywords (deprecated, use V2 or V3 interface instead)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20 douyin_user_fans = \"\" douyin_user_type = \"\" search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_search_result_api_v1_douyin_web_fetch_user_search_result_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param str douyin_user_fans: 粉丝数/Fans
        :param str douyin_user_type: 用户类型/User type
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_search_result_api_v1_douyin_web_fetch_user_search_result_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_user_search_result_api_v1_douyin_web_fetch_user_search_result_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的用户搜索结果(已废弃，使用V2或V3接口代替)/Get user search results of specified keywords (deprecated, use V2 or V3 interface instead)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20 douyin_user_fans = \"\" douyin_user_type = \"\" search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_search_result_api_v1_douyin_web_fetch_user_search_result_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param str douyin_user_fans: 粉丝数/Fans
        :param str douyin_user_type: 用户类型/User type
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'offset',
            'count',
            'douyin_user_fans',
            'douyin_user_type',
            'search_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_search_result_api_v1_douyin_web_fetch_user_search_result_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_user_search_result_api_v1_douyin_web_fetch_user_search_result_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'douyin_user_fans' in local_var_params and local_var_params['douyin_user_fans'] is not None:  # noqa: E501
            query_params.append(('douyin_user_fans', local_var_params['douyin_user_fans']))  # noqa: E501
        if 'douyin_user_type' in local_var_params and local_var_params['douyin_user_type'] is not None:  # noqa: E501
            query_params.append(('douyin_user_type', local_var_params['douyin_user_type']))  # noqa: E501
        if 'search_id' in local_var_params and local_var_params['search_id'] is not None:  # noqa: E501
            query_params.append(('search_id', local_var_params['search_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_search_result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_search_result_api_v1_douyin_web_fetch_user_search_result_get_0(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的用户搜索结果(已废弃，使用V2或V3接口代替)/Get user search results of specified keywords (deprecated, use V2 or V3 interface instead)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20 douyin_user_fans = \"\" douyin_user_type = \"\" search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_search_result_api_v1_douyin_web_fetch_user_search_result_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param str douyin_user_fans: 粉丝数/Fans
        :param str douyin_user_type: 用户类型/User type
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_search_result_api_v1_douyin_web_fetch_user_search_result_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_user_search_result_api_v1_douyin_web_fetch_user_search_result_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的用户搜索结果(已废弃，使用V2或V3接口代替)/Get user search results of specified keywords (deprecated, use V2 or V3 interface instead)  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20 douyin_user_fans = \"\" douyin_user_type = \"\" search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_search_result_api_v1_douyin_web_fetch_user_search_result_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param str douyin_user_fans: 粉丝数/Fans
        :param str douyin_user_type: 用户类型/User type
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'offset',
            'count',
            'douyin_user_fans',
            'douyin_user_type',
            'search_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_search_result_api_v1_douyin_web_fetch_user_search_result_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_user_search_result_api_v1_douyin_web_fetch_user_search_result_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'douyin_user_fans' in local_var_params and local_var_params['douyin_user_fans'] is not None:  # noqa: E501
            query_params.append(('douyin_user_fans', local_var_params['douyin_user_fans']))  # noqa: E501
        if 'douyin_user_type' in local_var_params and local_var_params['douyin_user_type'] is not None:  # noqa: E501
            query_params.append(('douyin_user_type', local_var_params['douyin_user_type']))  # noqa: E501
        if 'search_id' in local_var_params and local_var_params['search_id'] is not None:  # noqa: E501
            query_params.append(('search_id', local_var_params['search_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_search_result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_search_result_v2_api_v1_douyin_web_fetch_user_search_result_v2_get(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的用户搜索结果V2/Get user search results of specified keywords V2  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的用户搜索结果V2 ### 参数: - keyword: 关键词 - cursor: 游标，第一次请求时为0，后续从返回数据中获取，用于翻页。 ### 返回: - 用户搜索结果V2  # [English] ### Purpose: - Get user search results of specified keywords V2 ### Parameters: - keyword: Keyword - cursor: Cursor, 0 for the first request, get from the returned data later, used for paging. ### Return: - User search results V2  # [示例/Example] keyword = \"中华娘\" cursor = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_search_result_v2_api_v1_douyin_web_fetch_user_search_result_v2_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int cursor: 游标/Cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_search_result_v2_api_v1_douyin_web_fetch_user_search_result_v2_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_user_search_result_v2_api_v1_douyin_web_fetch_user_search_result_v2_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的用户搜索结果V2/Get user search results of specified keywords V2  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的用户搜索结果V2 ### 参数: - keyword: 关键词 - cursor: 游标，第一次请求时为0，后续从返回数据中获取，用于翻页。 ### 返回: - 用户搜索结果V2  # [English] ### Purpose: - Get user search results of specified keywords V2 ### Parameters: - keyword: Keyword - cursor: Cursor, 0 for the first request, get from the returned data later, used for paging. ### Return: - User search results V2  # [示例/Example] keyword = \"中华娘\" cursor = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_search_result_v2_api_v1_douyin_web_fetch_user_search_result_v2_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int cursor: 游标/Cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_search_result_v2_api_v1_douyin_web_fetch_user_search_result_v2_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_user_search_result_v2_api_v1_douyin_web_fetch_user_search_result_v2_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_search_result_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_search_result_v2_api_v1_douyin_web_fetch_user_search_result_v2_get_0(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的用户搜索结果V2/Get user search results of specified keywords V2  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的用户搜索结果V2 ### 参数: - keyword: 关键词 - cursor: 游标，第一次请求时为0，后续从返回数据中获取，用于翻页。 ### 返回: - 用户搜索结果V2  # [English] ### Purpose: - Get user search results of specified keywords V2 ### Parameters: - keyword: Keyword - cursor: Cursor, 0 for the first request, get from the returned data later, used for paging. ### Return: - User search results V2  # [示例/Example] keyword = \"中华娘\" cursor = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_search_result_v2_api_v1_douyin_web_fetch_user_search_result_v2_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int cursor: 游标/Cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_search_result_v2_api_v1_douyin_web_fetch_user_search_result_v2_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_user_search_result_v2_api_v1_douyin_web_fetch_user_search_result_v2_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的用户搜索结果V2/Get user search results of specified keywords V2  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的用户搜索结果V2 ### 参数: - keyword: 关键词 - cursor: 游标，第一次请求时为0，后续从返回数据中获取，用于翻页。 ### 返回: - 用户搜索结果V2  # [English] ### Purpose: - Get user search results of specified keywords V2 ### Parameters: - keyword: Keyword - cursor: Cursor, 0 for the first request, get from the returned data later, used for paging. ### Return: - User search results V2  # [示例/Example] keyword = \"中华娘\" cursor = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_search_result_v2_api_v1_douyin_web_fetch_user_search_result_v2_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int cursor: 游标/Cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_search_result_v2_api_v1_douyin_web_fetch_user_search_result_v2_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_user_search_result_v2_api_v1_douyin_web_fetch_user_search_result_v2_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_search_result_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_search_result_v3_api_v1_douyin_web_fetch_user_search_result_v3_get(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的用户搜索结果V3/Get user search results of specified keywords V3  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的用户搜索结果V3 ### 参数: - keyword: 关键词 - cursor: 偏移量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords V3 ### Parameters: - keyword: Keyword - cursor: Offset - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification ### Return: - User search results  # [示例/Example] keyword = \"中华娘\" cursor = \"0\" douyin_user_fans = \"\" douyin_user_type = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_search_result_v3_api_v1_douyin_web_fetch_user_search_result_v3_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param str cursor: 游标/Cursor
        :param str douyin_user_type: 用户类型/User type
        :param str douyin_user_fans: 粉丝数/Fans
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_search_result_v3_api_v1_douyin_web_fetch_user_search_result_v3_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_user_search_result_v3_api_v1_douyin_web_fetch_user_search_result_v3_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的用户搜索结果V3/Get user search results of specified keywords V3  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的用户搜索结果V3 ### 参数: - keyword: 关键词 - cursor: 偏移量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords V3 ### Parameters: - keyword: Keyword - cursor: Offset - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification ### Return: - User search results  # [示例/Example] keyword = \"中华娘\" cursor = \"0\" douyin_user_fans = \"\" douyin_user_type = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_search_result_v3_api_v1_douyin_web_fetch_user_search_result_v3_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param str cursor: 游标/Cursor
        :param str douyin_user_type: 用户类型/User type
        :param str douyin_user_fans: 粉丝数/Fans
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'cursor',
            'douyin_user_type',
            'douyin_user_fans'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_search_result_v3_api_v1_douyin_web_fetch_user_search_result_v3_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_user_search_result_v3_api_v1_douyin_web_fetch_user_search_result_v3_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'douyin_user_type' in local_var_params and local_var_params['douyin_user_type'] is not None:  # noqa: E501
            query_params.append(('douyin_user_type', local_var_params['douyin_user_type']))  # noqa: E501
        if 'douyin_user_fans' in local_var_params and local_var_params['douyin_user_fans'] is not None:  # noqa: E501
            query_params.append(('douyin_user_fans', local_var_params['douyin_user_fans']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_search_result_v3', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_search_result_v3_api_v1_douyin_web_fetch_user_search_result_v3_get_0(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的用户搜索结果V3/Get user search results of specified keywords V3  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的用户搜索结果V3 ### 参数: - keyword: 关键词 - cursor: 偏移量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords V3 ### Parameters: - keyword: Keyword - cursor: Offset - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification ### Return: - User search results  # [示例/Example] keyword = \"中华娘\" cursor = \"0\" douyin_user_fans = \"\" douyin_user_type = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_search_result_v3_api_v1_douyin_web_fetch_user_search_result_v3_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param str cursor: 游标/Cursor
        :param str douyin_user_type: 用户类型/User type
        :param str douyin_user_fans: 粉丝数/Fans
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_search_result_v3_api_v1_douyin_web_fetch_user_search_result_v3_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_user_search_result_v3_api_v1_douyin_web_fetch_user_search_result_v3_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的用户搜索结果V3/Get user search results of specified keywords V3  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的用户搜索结果V3 ### 参数: - keyword: 关键词 - cursor: 偏移量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords V3 ### Parameters: - keyword: Keyword - cursor: Offset - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification ### Return: - User search results  # [示例/Example] keyword = \"中华娘\" cursor = \"0\" douyin_user_fans = \"\" douyin_user_type = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_search_result_v3_api_v1_douyin_web_fetch_user_search_result_v3_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param str cursor: 游标/Cursor
        :param str douyin_user_type: 用户类型/User type
        :param str douyin_user_fans: 粉丝数/Fans
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'cursor',
            'douyin_user_type',
            'douyin_user_fans'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_search_result_v3_api_v1_douyin_web_fetch_user_search_result_v3_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_user_search_result_v3_api_v1_douyin_web_fetch_user_search_result_v3_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'douyin_user_type' in local_var_params and local_var_params['douyin_user_type'] is not None:  # noqa: E501
            query_params.append(('douyin_user_type', local_var_params['douyin_user_type']))  # noqa: E501
        if 'douyin_user_fans' in local_var_params and local_var_params['douyin_user_fans'] is not None:  # noqa: E501
            query_params.append(('douyin_user_fans', local_var_params['douyin_user_fans']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_user_search_result_v3', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_video_billboard_api_v1_douyin_web_fetch_video_billboard_get(self, date, page, page_size, sub_type, **kwargs):  # noqa: E501
        """抖音视频榜单/Douyin Video Billboard  # noqa: E501

        # [中文] ### 用途: - 抖音视频榜单 ### 参数: - date: 日期，默认为24     - 1: 一小时内     - 24: 一天内     - 72: 3天内     - 168: 7天内 - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sub_type: 子类型，默认为1001     - 1001: 视频总榜     - 1002: 低粉爆款     - 1003: 高完播率     - 1004: 高涨粉率     - 1005: 高点赞率 ### 返回: - 视频榜单数据  # [English] ### Purpose: - Douyin Video Billboard ### Parameters: - date: Date, default is 24     - 1: Within an hour     - 24: Within a day     - 72: Within 3 days     - 168: Within 7 days - page: Page number, default is 1 - page_size: Number per page, default is 10 - sub_type: Subtype, default is 1001     - 1001: Total video list     - 1002: Low fans explosion     - 1003: High completion rate     - 1004: High increase rate     - 1005: High like rate ### Return: - Video billboard data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_billboard_api_v1_douyin_web_fetch_video_billboard_get(date, page, page_size, sub_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int date: 日期/Date (required)
        :param int page: 页码/Page number (required)
        :param int page_size: 每页数量/Number per page (required)
        :param int sub_type: 子类型/Subtype (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_video_billboard_api_v1_douyin_web_fetch_video_billboard_get_with_http_info(date, page, page_size, sub_type, **kwargs)  # noqa: E501

    def fetch_video_billboard_api_v1_douyin_web_fetch_video_billboard_get_with_http_info(self, date, page, page_size, sub_type, **kwargs):  # noqa: E501
        """抖音视频榜单/Douyin Video Billboard  # noqa: E501

        # [中文] ### 用途: - 抖音视频榜单 ### 参数: - date: 日期，默认为24     - 1: 一小时内     - 24: 一天内     - 72: 3天内     - 168: 7天内 - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sub_type: 子类型，默认为1001     - 1001: 视频总榜     - 1002: 低粉爆款     - 1003: 高完播率     - 1004: 高涨粉率     - 1005: 高点赞率 ### 返回: - 视频榜单数据  # [English] ### Purpose: - Douyin Video Billboard ### Parameters: - date: Date, default is 24     - 1: Within an hour     - 24: Within a day     - 72: Within 3 days     - 168: Within 7 days - page: Page number, default is 1 - page_size: Number per page, default is 10 - sub_type: Subtype, default is 1001     - 1001: Total video list     - 1002: Low fans explosion     - 1003: High completion rate     - 1004: High increase rate     - 1005: High like rate ### Return: - Video billboard data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_billboard_api_v1_douyin_web_fetch_video_billboard_get_with_http_info(date, page, page_size, sub_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int date: 日期/Date (required)
        :param int page: 页码/Page number (required)
        :param int page_size: 每页数量/Number per page (required)
        :param int sub_type: 子类型/Subtype (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'date',
            'page',
            'page_size',
            'sub_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_video_billboard_api_v1_douyin_web_fetch_video_billboard_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'date' is set
        if self.api_client.client_side_validation and ('date' not in local_var_params or  # noqa: E501
                                                        local_var_params['date'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `date` when calling `fetch_video_billboard_api_v1_douyin_web_fetch_video_billboard_get`")  # noqa: E501
        # verify the required parameter 'page' is set
        if self.api_client.client_side_validation and ('page' not in local_var_params or  # noqa: E501
                                                        local_var_params['page'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page` when calling `fetch_video_billboard_api_v1_douyin_web_fetch_video_billboard_get`")  # noqa: E501
        # verify the required parameter 'page_size' is set
        if self.api_client.client_side_validation and ('page_size' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_size'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_size` when calling `fetch_video_billboard_api_v1_douyin_web_fetch_video_billboard_get`")  # noqa: E501
        # verify the required parameter 'sub_type' is set
        if self.api_client.client_side_validation and ('sub_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['sub_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sub_type` when calling `fetch_video_billboard_api_v1_douyin_web_fetch_video_billboard_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'date' in local_var_params and local_var_params['date'] is not None:  # noqa: E501
            query_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('page_size', local_var_params['page_size']))  # noqa: E501
        if 'sub_type' in local_var_params and local_var_params['sub_type'] is not None:  # noqa: E501
            query_params.append(('sub_type', local_var_params['sub_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_video_billboard', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_video_billboard_api_v1_douyin_web_fetch_video_billboard_get_0(self, date, page, page_size, sub_type, **kwargs):  # noqa: E501
        """抖音视频榜单/Douyin Video Billboard  # noqa: E501

        # [中文] ### 用途: - 抖音视频榜单 ### 参数: - date: 日期，默认为24     - 1: 一小时内     - 24: 一天内     - 72: 3天内     - 168: 7天内 - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sub_type: 子类型，默认为1001     - 1001: 视频总榜     - 1002: 低粉爆款     - 1003: 高完播率     - 1004: 高涨粉率     - 1005: 高点赞率 ### 返回: - 视频榜单数据  # [English] ### Purpose: - Douyin Video Billboard ### Parameters: - date: Date, default is 24     - 1: Within an hour     - 24: Within a day     - 72: Within 3 days     - 168: Within 7 days - page: Page number, default is 1 - page_size: Number per page, default is 10 - sub_type: Subtype, default is 1001     - 1001: Total video list     - 1002: Low fans explosion     - 1003: High completion rate     - 1004: High increase rate     - 1005: High like rate ### Return: - Video billboard data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_billboard_api_v1_douyin_web_fetch_video_billboard_get_0(date, page, page_size, sub_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int date: 日期/Date (required)
        :param int page: 页码/Page number (required)
        :param int page_size: 每页数量/Number per page (required)
        :param int sub_type: 子类型/Subtype (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_video_billboard_api_v1_douyin_web_fetch_video_billboard_get_0_with_http_info(date, page, page_size, sub_type, **kwargs)  # noqa: E501

    def fetch_video_billboard_api_v1_douyin_web_fetch_video_billboard_get_0_with_http_info(self, date, page, page_size, sub_type, **kwargs):  # noqa: E501
        """抖音视频榜单/Douyin Video Billboard  # noqa: E501

        # [中文] ### 用途: - 抖音视频榜单 ### 参数: - date: 日期，默认为24     - 1: 一小时内     - 24: 一天内     - 72: 3天内     - 168: 7天内 - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sub_type: 子类型，默认为1001     - 1001: 视频总榜     - 1002: 低粉爆款     - 1003: 高完播率     - 1004: 高涨粉率     - 1005: 高点赞率 ### 返回: - 视频榜单数据  # [English] ### Purpose: - Douyin Video Billboard ### Parameters: - date: Date, default is 24     - 1: Within an hour     - 24: Within a day     - 72: Within 3 days     - 168: Within 7 days - page: Page number, default is 1 - page_size: Number per page, default is 10 - sub_type: Subtype, default is 1001     - 1001: Total video list     - 1002: Low fans explosion     - 1003: High completion rate     - 1004: High increase rate     - 1005: High like rate ### Return: - Video billboard data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_billboard_api_v1_douyin_web_fetch_video_billboard_get_0_with_http_info(date, page, page_size, sub_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int date: 日期/Date (required)
        :param int page: 页码/Page number (required)
        :param int page_size: 每页数量/Number per page (required)
        :param int sub_type: 子类型/Subtype (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'date',
            'page',
            'page_size',
            'sub_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_video_billboard_api_v1_douyin_web_fetch_video_billboard_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'date' is set
        if self.api_client.client_side_validation and ('date' not in local_var_params or  # noqa: E501
                                                        local_var_params['date'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `date` when calling `fetch_video_billboard_api_v1_douyin_web_fetch_video_billboard_get_0`")  # noqa: E501
        # verify the required parameter 'page' is set
        if self.api_client.client_side_validation and ('page' not in local_var_params or  # noqa: E501
                                                        local_var_params['page'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page` when calling `fetch_video_billboard_api_v1_douyin_web_fetch_video_billboard_get_0`")  # noqa: E501
        # verify the required parameter 'page_size' is set
        if self.api_client.client_side_validation and ('page_size' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_size'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_size` when calling `fetch_video_billboard_api_v1_douyin_web_fetch_video_billboard_get_0`")  # noqa: E501
        # verify the required parameter 'sub_type' is set
        if self.api_client.client_side_validation and ('sub_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['sub_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sub_type` when calling `fetch_video_billboard_api_v1_douyin_web_fetch_video_billboard_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'date' in local_var_params and local_var_params['date'] is not None:  # noqa: E501
            query_params.append(('date', local_var_params['date']))  # noqa: E501
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'page_size' in local_var_params and local_var_params['page_size'] is not None:  # noqa: E501
            query_params.append(('page_size', local_var_params['page_size']))  # noqa: E501
        if 'sub_type' in local_var_params and local_var_params['sub_type'] is not None:  # noqa: E501
            query_params.append(('sub_type', local_var_params['sub_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_video_billboard', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_video_channel_result_api_v1_douyin_web_fetch_video_channel_result_get(self, tag_id, **kwargs):  # noqa: E501
        """抖音视频频道数据/Douyin video channel data  # noqa: E501

        # [中文] ### 用途: - 抖音视频频道数据 - https://www.douyin.com/channel/300205 ### 参数: - tag_id: 标签id，从URL中获取 - count: 数量 - refresh_index: 刷新索引 ### 返回: - 视频频道数据  # [English] ### Purpose: - Douyin video channel data - https://www.douyin.com/channel/300205 ### Parameters: - tag_id: Tag id, get from the URL - count: Number - refresh_index: Refresh index ### Return: - Video channel data  # [示例/Example] tag_id = 300203 count = 10 refresh_index = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_channel_result_api_v1_douyin_web_fetch_video_channel_result_get(tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int tag_id: 标签id/Tag id (required)
        :param int count: 数量/Number
        :param int refresh_index: 刷新索引/Refresh index
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_video_channel_result_api_v1_douyin_web_fetch_video_channel_result_get_with_http_info(tag_id, **kwargs)  # noqa: E501

    def fetch_video_channel_result_api_v1_douyin_web_fetch_video_channel_result_get_with_http_info(self, tag_id, **kwargs):  # noqa: E501
        """抖音视频频道数据/Douyin video channel data  # noqa: E501

        # [中文] ### 用途: - 抖音视频频道数据 - https://www.douyin.com/channel/300205 ### 参数: - tag_id: 标签id，从URL中获取 - count: 数量 - refresh_index: 刷新索引 ### 返回: - 视频频道数据  # [English] ### Purpose: - Douyin video channel data - https://www.douyin.com/channel/300205 ### Parameters: - tag_id: Tag id, get from the URL - count: Number - refresh_index: Refresh index ### Return: - Video channel data  # [示例/Example] tag_id = 300203 count = 10 refresh_index = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_channel_result_api_v1_douyin_web_fetch_video_channel_result_get_with_http_info(tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int tag_id: 标签id/Tag id (required)
        :param int count: 数量/Number
        :param int refresh_index: 刷新索引/Refresh index
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'tag_id',
            'count',
            'refresh_index'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_video_channel_result_api_v1_douyin_web_fetch_video_channel_result_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'tag_id' is set
        if self.api_client.client_side_validation and ('tag_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['tag_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `tag_id` when calling `fetch_video_channel_result_api_v1_douyin_web_fetch_video_channel_result_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tag_id' in local_var_params and local_var_params['tag_id'] is not None:  # noqa: E501
            query_params.append(('tag_id', local_var_params['tag_id']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'refresh_index' in local_var_params and local_var_params['refresh_index'] is not None:  # noqa: E501
            query_params.append(('refresh_index', local_var_params['refresh_index']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_video_channel_result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_video_channel_result_api_v1_douyin_web_fetch_video_channel_result_get_0(self, tag_id, **kwargs):  # noqa: E501
        """抖音视频频道数据/Douyin video channel data  # noqa: E501

        # [中文] ### 用途: - 抖音视频频道数据 - https://www.douyin.com/channel/300205 ### 参数: - tag_id: 标签id，从URL中获取 - count: 数量 - refresh_index: 刷新索引 ### 返回: - 视频频道数据  # [English] ### Purpose: - Douyin video channel data - https://www.douyin.com/channel/300205 ### Parameters: - tag_id: Tag id, get from the URL - count: Number - refresh_index: Refresh index ### Return: - Video channel data  # [示例/Example] tag_id = 300203 count = 10 refresh_index = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_channel_result_api_v1_douyin_web_fetch_video_channel_result_get_0(tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int tag_id: 标签id/Tag id (required)
        :param int count: 数量/Number
        :param int refresh_index: 刷新索引/Refresh index
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_video_channel_result_api_v1_douyin_web_fetch_video_channel_result_get_0_with_http_info(tag_id, **kwargs)  # noqa: E501

    def fetch_video_channel_result_api_v1_douyin_web_fetch_video_channel_result_get_0_with_http_info(self, tag_id, **kwargs):  # noqa: E501
        """抖音视频频道数据/Douyin video channel data  # noqa: E501

        # [中文] ### 用途: - 抖音视频频道数据 - https://www.douyin.com/channel/300205 ### 参数: - tag_id: 标签id，从URL中获取 - count: 数量 - refresh_index: 刷新索引 ### 返回: - 视频频道数据  # [English] ### Purpose: - Douyin video channel data - https://www.douyin.com/channel/300205 ### Parameters: - tag_id: Tag id, get from the URL - count: Number - refresh_index: Refresh index ### Return: - Video channel data  # [示例/Example] tag_id = 300203 count = 10 refresh_index = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_channel_result_api_v1_douyin_web_fetch_video_channel_result_get_0_with_http_info(tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int tag_id: 标签id/Tag id (required)
        :param int count: 数量/Number
        :param int refresh_index: 刷新索引/Refresh index
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'tag_id',
            'count',
            'refresh_index'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_video_channel_result_api_v1_douyin_web_fetch_video_channel_result_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'tag_id' is set
        if self.api_client.client_side_validation and ('tag_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['tag_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `tag_id` when calling `fetch_video_channel_result_api_v1_douyin_web_fetch_video_channel_result_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tag_id' in local_var_params and local_var_params['tag_id'] is not None:  # noqa: E501
            query_params.append(('tag_id', local_var_params['tag_id']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'refresh_index' in local_var_params and local_var_params['refresh_index'] is not None:  # noqa: E501
            query_params.append(('refresh_index', local_var_params['refresh_index']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_video_channel_result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_video_comments_api_v1_douyin_web_fetch_video_comments_get(self, aweme_id, **kwargs):  # noqa: E501
        """获取单个视频评论数据/Get single video comments data  # noqa: E501

        # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_comments_api_v1_douyin_web_fetch_video_comments_get(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param int cursor: 游标/Cursor
        :param int count: 数量/Number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_video_comments_api_v1_douyin_web_fetch_video_comments_get_with_http_info(aweme_id, **kwargs)  # noqa: E501

    def fetch_video_comments_api_v1_douyin_web_fetch_video_comments_get_with_http_info(self, aweme_id, **kwargs):  # noqa: E501
        """获取单个视频评论数据/Get single video comments data  # noqa: E501

        # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_comments_api_v1_douyin_web_fetch_video_comments_get_with_http_info(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param int cursor: 游标/Cursor
        :param int count: 数量/Number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'aweme_id',
            'cursor',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_video_comments_api_v1_douyin_web_fetch_video_comments_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'aweme_id' is set
        if self.api_client.client_side_validation and ('aweme_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['aweme_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `aweme_id` when calling `fetch_video_comments_api_v1_douyin_web_fetch_video_comments_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'aweme_id' in local_var_params and local_var_params['aweme_id'] is not None:  # noqa: E501
            query_params.append(('aweme_id', local_var_params['aweme_id']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_video_comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_video_comments_api_v1_douyin_web_fetch_video_comments_get_0(self, aweme_id, **kwargs):  # noqa: E501
        """获取单个视频评论数据/Get single video comments data  # noqa: E501

        # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_comments_api_v1_douyin_web_fetch_video_comments_get_0(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param int cursor: 游标/Cursor
        :param int count: 数量/Number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_video_comments_api_v1_douyin_web_fetch_video_comments_get_0_with_http_info(aweme_id, **kwargs)  # noqa: E501

    def fetch_video_comments_api_v1_douyin_web_fetch_video_comments_get_0_with_http_info(self, aweme_id, **kwargs):  # noqa: E501
        """获取单个视频评论数据/Get single video comments data  # noqa: E501

        # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_comments_api_v1_douyin_web_fetch_video_comments_get_0_with_http_info(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param int cursor: 游标/Cursor
        :param int count: 数量/Number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'aweme_id',
            'cursor',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_video_comments_api_v1_douyin_web_fetch_video_comments_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'aweme_id' is set
        if self.api_client.client_side_validation and ('aweme_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['aweme_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `aweme_id` when calling `fetch_video_comments_api_v1_douyin_web_fetch_video_comments_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'aweme_id' in local_var_params and local_var_params['aweme_id'] is not None:  # noqa: E501
            query_params.append(('aweme_id', local_var_params['aweme_id']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_video_comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_video_comments_reply_api_v1_douyin_web_fetch_video_comment_replies_get(self, item_id, comment_id, **kwargs):  # noqa: E501
        """获取指定视频的评论回复数据/Get comment replies data of specified video  # noqa: E501

        # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_comments_reply_api_v1_douyin_web_fetch_video_comment_replies_get(item_id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str item_id: 作品id/Video id (required)
        :param str comment_id: 评论id/Comment id (required)
        :param int cursor: 游标/Cursor
        :param int count: 数量/Number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_video_comments_reply_api_v1_douyin_web_fetch_video_comment_replies_get_with_http_info(item_id, comment_id, **kwargs)  # noqa: E501

    def fetch_video_comments_reply_api_v1_douyin_web_fetch_video_comment_replies_get_with_http_info(self, item_id, comment_id, **kwargs):  # noqa: E501
        """获取指定视频的评论回复数据/Get comment replies data of specified video  # noqa: E501

        # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_comments_reply_api_v1_douyin_web_fetch_video_comment_replies_get_with_http_info(item_id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str item_id: 作品id/Video id (required)
        :param str comment_id: 评论id/Comment id (required)
        :param int cursor: 游标/Cursor
        :param int count: 数量/Number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'item_id',
            'comment_id',
            'cursor',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_video_comments_reply_api_v1_douyin_web_fetch_video_comment_replies_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'item_id' is set
        if self.api_client.client_side_validation and ('item_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['item_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `item_id` when calling `fetch_video_comments_reply_api_v1_douyin_web_fetch_video_comment_replies_get`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if self.api_client.client_side_validation and ('comment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['comment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `comment_id` when calling `fetch_video_comments_reply_api_v1_douyin_web_fetch_video_comment_replies_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'item_id' in local_var_params and local_var_params['item_id'] is not None:  # noqa: E501
            query_params.append(('item_id', local_var_params['item_id']))  # noqa: E501
        if 'comment_id' in local_var_params and local_var_params['comment_id'] is not None:  # noqa: E501
            query_params.append(('comment_id', local_var_params['comment_id']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_video_comment_replies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_video_comments_reply_api_v1_douyin_web_fetch_video_comment_replies_get_0(self, item_id, comment_id, **kwargs):  # noqa: E501
        """获取指定视频的评论回复数据/Get comment replies data of specified video  # noqa: E501

        # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_comments_reply_api_v1_douyin_web_fetch_video_comment_replies_get_0(item_id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str item_id: 作品id/Video id (required)
        :param str comment_id: 评论id/Comment id (required)
        :param int cursor: 游标/Cursor
        :param int count: 数量/Number
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_video_comments_reply_api_v1_douyin_web_fetch_video_comment_replies_get_0_with_http_info(item_id, comment_id, **kwargs)  # noqa: E501

    def fetch_video_comments_reply_api_v1_douyin_web_fetch_video_comment_replies_get_0_with_http_info(self, item_id, comment_id, **kwargs):  # noqa: E501
        """获取指定视频的评论回复数据/Get comment replies data of specified video  # noqa: E501

        # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_comments_reply_api_v1_douyin_web_fetch_video_comment_replies_get_0_with_http_info(item_id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str item_id: 作品id/Video id (required)
        :param str comment_id: 评论id/Comment id (required)
        :param int cursor: 游标/Cursor
        :param int count: 数量/Number
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'item_id',
            'comment_id',
            'cursor',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_video_comments_reply_api_v1_douyin_web_fetch_video_comment_replies_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'item_id' is set
        if self.api_client.client_side_validation and ('item_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['item_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `item_id` when calling `fetch_video_comments_reply_api_v1_douyin_web_fetch_video_comment_replies_get_0`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if self.api_client.client_side_validation and ('comment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['comment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `comment_id` when calling `fetch_video_comments_reply_api_v1_douyin_web_fetch_video_comment_replies_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'item_id' in local_var_params and local_var_params['item_id'] is not None:  # noqa: E501
            query_params.append(('item_id', local_var_params['item_id']))  # noqa: E501
        if 'comment_id' in local_var_params and local_var_params['comment_id'] is not None:  # noqa: E501
            query_params.append(('comment_id', local_var_params['comment_id']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_video_comment_replies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_video_fans_add_count_api_v1_douyin_web_fetch_video_fans_add_count_get(self, aweme_id, **kwargs):  # noqa: E501
        """获取视频新增粉丝数量/Get video new fans count  # noqa: E501

        # [中文] ### 用途: 获取视频新增粉丝数量 ### 参数: - aweme_id: 作品id ### 返回: - 新增粉丝数量  # [English] ### Purpose: Get video new fans count ### Parameters: - aweme_id: Video id ### Return: - New Fans count  # [示例/Example] aweme_id = \"7429296623961853234\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_fans_add_count_api_v1_douyin_web_fetch_video_fans_add_count_get(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_video_fans_add_count_api_v1_douyin_web_fetch_video_fans_add_count_get_with_http_info(aweme_id, **kwargs)  # noqa: E501

    def fetch_video_fans_add_count_api_v1_douyin_web_fetch_video_fans_add_count_get_with_http_info(self, aweme_id, **kwargs):  # noqa: E501
        """获取视频新增粉丝数量/Get video new fans count  # noqa: E501

        # [中文] ### 用途: 获取视频新增粉丝数量 ### 参数: - aweme_id: 作品id ### 返回: - 新增粉丝数量  # [English] ### Purpose: Get video new fans count ### Parameters: - aweme_id: Video id ### Return: - New Fans count  # [示例/Example] aweme_id = \"7429296623961853234\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_fans_add_count_api_v1_douyin_web_fetch_video_fans_add_count_get_with_http_info(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'aweme_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_video_fans_add_count_api_v1_douyin_web_fetch_video_fans_add_count_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'aweme_id' is set
        if self.api_client.client_side_validation and ('aweme_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['aweme_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `aweme_id` when calling `fetch_video_fans_add_count_api_v1_douyin_web_fetch_video_fans_add_count_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'aweme_id' in local_var_params and local_var_params['aweme_id'] is not None:  # noqa: E501
            query_params.append(('aweme_id', local_var_params['aweme_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_video_fans_add_count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_video_fans_add_count_api_v1_douyin_web_fetch_video_fans_add_count_get_0(self, aweme_id, **kwargs):  # noqa: E501
        """获取视频新增粉丝数量/Get video new fans count  # noqa: E501

        # [中文] ### 用途: 获取视频新增粉丝数量 ### 参数: - aweme_id: 作品id ### 返回: - 新增粉丝数量  # [English] ### Purpose: Get video new fans count ### Parameters: - aweme_id: Video id ### Return: - New Fans count  # [示例/Example] aweme_id = \"7429296623961853234\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_fans_add_count_api_v1_douyin_web_fetch_video_fans_add_count_get_0(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_video_fans_add_count_api_v1_douyin_web_fetch_video_fans_add_count_get_0_with_http_info(aweme_id, **kwargs)  # noqa: E501

    def fetch_video_fans_add_count_api_v1_douyin_web_fetch_video_fans_add_count_get_0_with_http_info(self, aweme_id, **kwargs):  # noqa: E501
        """获取视频新增粉丝数量/Get video new fans count  # noqa: E501

        # [中文] ### 用途: 获取视频新增粉丝数量 ### 参数: - aweme_id: 作品id ### 返回: - 新增粉丝数量  # [English] ### Purpose: Get video new fans count ### Parameters: - aweme_id: Video id ### Return: - New Fans count  # [示例/Example] aweme_id = \"7429296623961853234\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_fans_add_count_api_v1_douyin_web_fetch_video_fans_add_count_get_0_with_http_info(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'aweme_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_video_fans_add_count_api_v1_douyin_web_fetch_video_fans_add_count_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'aweme_id' is set
        if self.api_client.client_side_validation and ('aweme_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['aweme_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `aweme_id` when calling `fetch_video_fans_add_count_api_v1_douyin_web_fetch_video_fans_add_count_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'aweme_id' in local_var_params and local_var_params['aweme_id'] is not None:  # noqa: E501
            query_params.append(('aweme_id', local_var_params['aweme_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_video_fans_add_count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_video_like_portrait_api_v1_douyin_web_fetch_video_like_portrait_get(self, aweme_id, option, **kwargs):  # noqa: E501
        """抖音视频点赞观众画像/Douyin Video Like Viewer Portrait  # noqa: E501

        # [中文] ### 用途: - 抖音视频点赞观众画像 ### 参数: - aweme_id: 视频aweme_id - option: 选项，默认为1     - 1: 观众手机价格分布     - 2: 观众性别分布     - 3: 观众年龄分布     - 4: 观众地域分布(省份)     - 5: 观众地域分布(城市)     - 6: 观众城市等级分布     - 7: 观众手机品牌分布  ### 返回: - 视频点赞观众画像数据  # [English] ### Purpose: - Douyin Video Like Viewer Portrait ### Parameters: - aweme_id: Aweme_id of video - option: Option, default is 1     - 1: Distribution of audience mobile phone prices     - 2: Distribution of audience gender     - 3: Distribution of audience age     - 4: Distribution of audience region (province)     - 5: Distribution of audience region (city)     - 6: Distribution of audience city level     - 7: Distribution of audience mobile phone brands ### Return: - Video like viewer portrait data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_like_portrait_api_v1_douyin_web_fetch_video_like_portrait_get(aweme_id, option, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 视频aweme_id/Aweme_id of video (required)
        :param str option: 选项/Option (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_video_like_portrait_api_v1_douyin_web_fetch_video_like_portrait_get_with_http_info(aweme_id, option, **kwargs)  # noqa: E501

    def fetch_video_like_portrait_api_v1_douyin_web_fetch_video_like_portrait_get_with_http_info(self, aweme_id, option, **kwargs):  # noqa: E501
        """抖音视频点赞观众画像/Douyin Video Like Viewer Portrait  # noqa: E501

        # [中文] ### 用途: - 抖音视频点赞观众画像 ### 参数: - aweme_id: 视频aweme_id - option: 选项，默认为1     - 1: 观众手机价格分布     - 2: 观众性别分布     - 3: 观众年龄分布     - 4: 观众地域分布(省份)     - 5: 观众地域分布(城市)     - 6: 观众城市等级分布     - 7: 观众手机品牌分布  ### 返回: - 视频点赞观众画像数据  # [English] ### Purpose: - Douyin Video Like Viewer Portrait ### Parameters: - aweme_id: Aweme_id of video - option: Option, default is 1     - 1: Distribution of audience mobile phone prices     - 2: Distribution of audience gender     - 3: Distribution of audience age     - 4: Distribution of audience region (province)     - 5: Distribution of audience region (city)     - 6: Distribution of audience city level     - 7: Distribution of audience mobile phone brands ### Return: - Video like viewer portrait data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_like_portrait_api_v1_douyin_web_fetch_video_like_portrait_get_with_http_info(aweme_id, option, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 视频aweme_id/Aweme_id of video (required)
        :param str option: 选项/Option (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'aweme_id',
            'option'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_video_like_portrait_api_v1_douyin_web_fetch_video_like_portrait_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'aweme_id' is set
        if self.api_client.client_side_validation and ('aweme_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['aweme_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `aweme_id` when calling `fetch_video_like_portrait_api_v1_douyin_web_fetch_video_like_portrait_get`")  # noqa: E501
        # verify the required parameter 'option' is set
        if self.api_client.client_side_validation and ('option' not in local_var_params or  # noqa: E501
                                                        local_var_params['option'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `option` when calling `fetch_video_like_portrait_api_v1_douyin_web_fetch_video_like_portrait_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'aweme_id' in local_var_params and local_var_params['aweme_id'] is not None:  # noqa: E501
            query_params.append(('aweme_id', local_var_params['aweme_id']))  # noqa: E501
        if 'option' in local_var_params and local_var_params['option'] is not None:  # noqa: E501
            query_params.append(('option', local_var_params['option']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_video_like_portrait', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_video_like_portrait_api_v1_douyin_web_fetch_video_like_portrait_get_0(self, aweme_id, option, **kwargs):  # noqa: E501
        """抖音视频点赞观众画像/Douyin Video Like Viewer Portrait  # noqa: E501

        # [中文] ### 用途: - 抖音视频点赞观众画像 ### 参数: - aweme_id: 视频aweme_id - option: 选项，默认为1     - 1: 观众手机价格分布     - 2: 观众性别分布     - 3: 观众年龄分布     - 4: 观众地域分布(省份)     - 5: 观众地域分布(城市)     - 6: 观众城市等级分布     - 7: 观众手机品牌分布  ### 返回: - 视频点赞观众画像数据  # [English] ### Purpose: - Douyin Video Like Viewer Portrait ### Parameters: - aweme_id: Aweme_id of video - option: Option, default is 1     - 1: Distribution of audience mobile phone prices     - 2: Distribution of audience gender     - 3: Distribution of audience age     - 4: Distribution of audience region (province)     - 5: Distribution of audience region (city)     - 6: Distribution of audience city level     - 7: Distribution of audience mobile phone brands ### Return: - Video like viewer portrait data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_like_portrait_api_v1_douyin_web_fetch_video_like_portrait_get_0(aweme_id, option, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 视频aweme_id/Aweme_id of video (required)
        :param str option: 选项/Option (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_video_like_portrait_api_v1_douyin_web_fetch_video_like_portrait_get_0_with_http_info(aweme_id, option, **kwargs)  # noqa: E501

    def fetch_video_like_portrait_api_v1_douyin_web_fetch_video_like_portrait_get_0_with_http_info(self, aweme_id, option, **kwargs):  # noqa: E501
        """抖音视频点赞观众画像/Douyin Video Like Viewer Portrait  # noqa: E501

        # [中文] ### 用途: - 抖音视频点赞观众画像 ### 参数: - aweme_id: 视频aweme_id - option: 选项，默认为1     - 1: 观众手机价格分布     - 2: 观众性别分布     - 3: 观众年龄分布     - 4: 观众地域分布(省份)     - 5: 观众地域分布(城市)     - 6: 观众城市等级分布     - 7: 观众手机品牌分布  ### 返回: - 视频点赞观众画像数据  # [English] ### Purpose: - Douyin Video Like Viewer Portrait ### Parameters: - aweme_id: Aweme_id of video - option: Option, default is 1     - 1: Distribution of audience mobile phone prices     - 2: Distribution of audience gender     - 3: Distribution of audience age     - 4: Distribution of audience region (province)     - 5: Distribution of audience region (city)     - 6: Distribution of audience city level     - 7: Distribution of audience mobile phone brands ### Return: - Video like viewer portrait data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_like_portrait_api_v1_douyin_web_fetch_video_like_portrait_get_0_with_http_info(aweme_id, option, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 视频aweme_id/Aweme_id of video (required)
        :param str option: 选项/Option (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'aweme_id',
            'option'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_video_like_portrait_api_v1_douyin_web_fetch_video_like_portrait_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'aweme_id' is set
        if self.api_client.client_side_validation and ('aweme_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['aweme_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `aweme_id` when calling `fetch_video_like_portrait_api_v1_douyin_web_fetch_video_like_portrait_get_0`")  # noqa: E501
        # verify the required parameter 'option' is set
        if self.api_client.client_side_validation and ('option' not in local_var_params or  # noqa: E501
                                                        local_var_params['option'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `option` when calling `fetch_video_like_portrait_api_v1_douyin_web_fetch_video_like_portrait_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'aweme_id' in local_var_params and local_var_params['aweme_id'] is not None:  # noqa: E501
            query_params.append(('aweme_id', local_var_params['aweme_id']))  # noqa: E501
        if 'option' in local_var_params and local_var_params['option'] is not None:  # noqa: E501
            query_params.append(('option', local_var_params['option']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_video_like_portrait', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_video_search_result_api_v1_douyin_web_fetch_video_search_result_get(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的视频搜索结果/Get video search results of specified keywords  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求时为0，后续从返回数据中获取，用于翻页。     - 例如: offset = 10     - JSON Path-1 : $.data.cursor - count: 数量，默认为10，建议保持不变。 - sort_type:     - 0:综合排序     - 1:最多点赞     - 2:最新发布 - publish_time:     - 0:不限     - 1:最近一天     - 7:最近一周     - 180:最近半年 - filter_duration:     - 0:不限 0-1:1分钟以内     - 1-5:1-5分钟     - 5-10000:5分钟以上 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset, 0 for the first request, get from the returned data later, used for paging.     - For example: offset = 10     - JSON Path-1 : $.data.cursor - count: Number, default is 10, it is recommended to keep it unchanged. - sort_type:     - 0: Comprehensive sorting     - 1: Most likes     - 2: Latest release - publish_time:     - 0: Unlimited     - 1: Last day     - 7: Last week     - 180: Last half year - filter_duration:     - 0: Unlimited     - 0-1: Within 1 minute     - 1-5: 1-5 minutes     - 5-10000: More than 5 minutes - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results  # [示例/Example] keyword = \"游戏\" offset = 0 count = 10 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\" search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_search_result_api_v1_douyin_web_fetch_video_search_result_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param str sort_type: 排序类型/Sort type
        :param str publish_time: 发布时间/Publish time
        :param str filter_duration: 视频时长/Duration filter
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_video_search_result_api_v1_douyin_web_fetch_video_search_result_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_video_search_result_api_v1_douyin_web_fetch_video_search_result_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的视频搜索结果/Get video search results of specified keywords  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求时为0，后续从返回数据中获取，用于翻页。     - 例如: offset = 10     - JSON Path-1 : $.data.cursor - count: 数量，默认为10，建议保持不变。 - sort_type:     - 0:综合排序     - 1:最多点赞     - 2:最新发布 - publish_time:     - 0:不限     - 1:最近一天     - 7:最近一周     - 180:最近半年 - filter_duration:     - 0:不限 0-1:1分钟以内     - 1-5:1-5分钟     - 5-10000:5分钟以上 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset, 0 for the first request, get from the returned data later, used for paging.     - For example: offset = 10     - JSON Path-1 : $.data.cursor - count: Number, default is 10, it is recommended to keep it unchanged. - sort_type:     - 0: Comprehensive sorting     - 1: Most likes     - 2: Latest release - publish_time:     - 0: Unlimited     - 1: Last day     - 7: Last week     - 180: Last half year - filter_duration:     - 0: Unlimited     - 0-1: Within 1 minute     - 1-5: 1-5 minutes     - 5-10000: More than 5 minutes - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results  # [示例/Example] keyword = \"游戏\" offset = 0 count = 10 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\" search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_search_result_api_v1_douyin_web_fetch_video_search_result_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param str sort_type: 排序类型/Sort type
        :param str publish_time: 发布时间/Publish time
        :param str filter_duration: 视频时长/Duration filter
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'offset',
            'count',
            'sort_type',
            'publish_time',
            'filter_duration',
            'search_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_video_search_result_api_v1_douyin_web_fetch_video_search_result_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_video_search_result_api_v1_douyin_web_fetch_video_search_result_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'sort_type' in local_var_params and local_var_params['sort_type'] is not None:  # noqa: E501
            query_params.append(('sort_type', local_var_params['sort_type']))  # noqa: E501
        if 'publish_time' in local_var_params and local_var_params['publish_time'] is not None:  # noqa: E501
            query_params.append(('publish_time', local_var_params['publish_time']))  # noqa: E501
        if 'filter_duration' in local_var_params and local_var_params['filter_duration'] is not None:  # noqa: E501
            query_params.append(('filter_duration', local_var_params['filter_duration']))  # noqa: E501
        if 'search_id' in local_var_params and local_var_params['search_id'] is not None:  # noqa: E501
            query_params.append(('search_id', local_var_params['search_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_video_search_result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_video_search_result_api_v1_douyin_web_fetch_video_search_result_get_0(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的视频搜索结果/Get video search results of specified keywords  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求时为0，后续从返回数据中获取，用于翻页。     - 例如: offset = 10     - JSON Path-1 : $.data.cursor - count: 数量，默认为10，建议保持不变。 - sort_type:     - 0:综合排序     - 1:最多点赞     - 2:最新发布 - publish_time:     - 0:不限     - 1:最近一天     - 7:最近一周     - 180:最近半年 - filter_duration:     - 0:不限 0-1:1分钟以内     - 1-5:1-5分钟     - 5-10000:5分钟以上 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset, 0 for the first request, get from the returned data later, used for paging.     - For example: offset = 10     - JSON Path-1 : $.data.cursor - count: Number, default is 10, it is recommended to keep it unchanged. - sort_type:     - 0: Comprehensive sorting     - 1: Most likes     - 2: Latest release - publish_time:     - 0: Unlimited     - 1: Last day     - 7: Last week     - 180: Last half year - filter_duration:     - 0: Unlimited     - 0-1: Within 1 minute     - 1-5: 1-5 minutes     - 5-10000: More than 5 minutes - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results  # [示例/Example] keyword = \"游戏\" offset = 0 count = 10 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\" search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_search_result_api_v1_douyin_web_fetch_video_search_result_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param str sort_type: 排序类型/Sort type
        :param str publish_time: 发布时间/Publish time
        :param str filter_duration: 视频时长/Duration filter
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_video_search_result_api_v1_douyin_web_fetch_video_search_result_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_video_search_result_api_v1_douyin_web_fetch_video_search_result_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的视频搜索结果/Get video search results of specified keywords  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求时为0，后续从返回数据中获取，用于翻页。     - 例如: offset = 10     - JSON Path-1 : $.data.cursor - count: 数量，默认为10，建议保持不变。 - sort_type:     - 0:综合排序     - 1:最多点赞     - 2:最新发布 - publish_time:     - 0:不限     - 1:最近一天     - 7:最近一周     - 180:最近半年 - filter_duration:     - 0:不限 0-1:1分钟以内     - 1-5:1-5分钟     - 5-10000:5分钟以上 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset, 0 for the first request, get from the returned data later, used for paging.     - For example: offset = 10     - JSON Path-1 : $.data.cursor - count: Number, default is 10, it is recommended to keep it unchanged. - sort_type:     - 0: Comprehensive sorting     - 1: Most likes     - 2: Latest release - publish_time:     - 0: Unlimited     - 1: Last day     - 7: Last week     - 180: Last half year - filter_duration:     - 0: Unlimited     - 0-1: Within 1 minute     - 1-5: 1-5 minutes     - 5-10000: More than 5 minutes - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results  # [示例/Example] keyword = \"游戏\" offset = 0 count = 10 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\" search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_search_result_api_v1_douyin_web_fetch_video_search_result_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param int offset: 偏移量/Offset
        :param int count: 数量/Number
        :param str sort_type: 排序类型/Sort type
        :param str publish_time: 发布时间/Publish time
        :param str filter_duration: 视频时长/Duration filter
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'offset',
            'count',
            'sort_type',
            'publish_time',
            'filter_duration',
            'search_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_video_search_result_api_v1_douyin_web_fetch_video_search_result_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_video_search_result_api_v1_douyin_web_fetch_video_search_result_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'sort_type' in local_var_params and local_var_params['sort_type'] is not None:  # noqa: E501
            query_params.append(('sort_type', local_var_params['sort_type']))  # noqa: E501
        if 'publish_time' in local_var_params and local_var_params['publish_time'] is not None:  # noqa: E501
            query_params.append(('publish_time', local_var_params['publish_time']))  # noqa: E501
        if 'filter_duration' in local_var_params and local_var_params['filter_duration'] is not None:  # noqa: E501
            query_params.append(('filter_duration', local_var_params['filter_duration']))  # noqa: E501
        if 'search_id' in local_var_params and local_var_params['search_id'] is not None:  # noqa: E501
            query_params.append(('search_id', local_var_params['search_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_video_search_result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_video_search_result_v2_api_v1_douyin_web_fetch_video_search_result_v2_get(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当`/api/v1/douyin/web/fetch_video_search_result`接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the `/api/v1/douyin/web/fetch_video_search_result` interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword = \"中华娘\" sort_type = \"_0\" publish_time = \"_0\" filter_duration = \"_0\" page = 1 search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_search_result_v2_api_v1_douyin_web_fetch_video_search_result_v2_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param str sort_type: 排序类型/Sort type
        :param str publish_time: 发布时间/Publish time
        :param str filter_duration: 视频时长/Duration filter
        :param int page: 页码/Page
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_video_search_result_v2_api_v1_douyin_web_fetch_video_search_result_v2_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_video_search_result_v2_api_v1_douyin_web_fetch_video_search_result_v2_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当`/api/v1/douyin/web/fetch_video_search_result`接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the `/api/v1/douyin/web/fetch_video_search_result` interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword = \"中华娘\" sort_type = \"_0\" publish_time = \"_0\" filter_duration = \"_0\" page = 1 search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_search_result_v2_api_v1_douyin_web_fetch_video_search_result_v2_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param str sort_type: 排序类型/Sort type
        :param str publish_time: 发布时间/Publish time
        :param str filter_duration: 视频时长/Duration filter
        :param int page: 页码/Page
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'sort_type',
            'publish_time',
            'filter_duration',
            'page',
            'search_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_video_search_result_v2_api_v1_douyin_web_fetch_video_search_result_v2_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_video_search_result_v2_api_v1_douyin_web_fetch_video_search_result_v2_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'sort_type' in local_var_params and local_var_params['sort_type'] is not None:  # noqa: E501
            query_params.append(('sort_type', local_var_params['sort_type']))  # noqa: E501
        if 'publish_time' in local_var_params and local_var_params['publish_time'] is not None:  # noqa: E501
            query_params.append(('publish_time', local_var_params['publish_time']))  # noqa: E501
        if 'filter_duration' in local_var_params and local_var_params['filter_duration'] is not None:  # noqa: E501
            query_params.append(('filter_duration', local_var_params['filter_duration']))  # noqa: E501
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'search_id' in local_var_params and local_var_params['search_id'] is not None:  # noqa: E501
            query_params.append(('search_id', local_var_params['search_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_video_search_result_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_video_search_result_v2_api_v1_douyin_web_fetch_video_search_result_v2_get_0(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当`/api/v1/douyin/web/fetch_video_search_result`接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the `/api/v1/douyin/web/fetch_video_search_result` interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword = \"中华娘\" sort_type = \"_0\" publish_time = \"_0\" filter_duration = \"_0\" page = 1 search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_search_result_v2_api_v1_douyin_web_fetch_video_search_result_v2_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param str sort_type: 排序类型/Sort type
        :param str publish_time: 发布时间/Publish time
        :param str filter_duration: 视频时长/Duration filter
        :param int page: 页码/Page
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_video_search_result_v2_api_v1_douyin_web_fetch_video_search_result_v2_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_video_search_result_v2_api_v1_douyin_web_fetch_video_search_result_v2_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2  # noqa: E501

        # [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当`/api/v1/douyin/web/fetch_video_search_result`接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the `/api/v1/douyin/web/fetch_video_search_result` interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword = \"中华娘\" sort_type = \"_0\" publish_time = \"_0\" filter_duration = \"_0\" page = 1 search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_search_result_v2_api_v1_douyin_web_fetch_video_search_result_v2_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 关键词/Keyword (required)
        :param str sort_type: 排序类型/Sort type
        :param str publish_time: 发布时间/Publish time
        :param str filter_duration: 视频时长/Duration filter
        :param int page: 页码/Page
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'sort_type',
            'publish_time',
            'filter_duration',
            'page',
            'search_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_video_search_result_v2_api_v1_douyin_web_fetch_video_search_result_v2_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_video_search_result_v2_api_v1_douyin_web_fetch_video_search_result_v2_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'sort_type' in local_var_params and local_var_params['sort_type'] is not None:  # noqa: E501
            query_params.append(('sort_type', local_var_params['sort_type']))  # noqa: E501
        if 'publish_time' in local_var_params and local_var_params['publish_time'] is not None:  # noqa: E501
            query_params.append(('publish_time', local_var_params['publish_time']))  # noqa: E501
        if 'filter_duration' in local_var_params and local_var_params['filter_duration'] is not None:  # noqa: E501
            query_params.append(('filter_duration', local_var_params['filter_duration']))  # noqa: E501
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'search_id' in local_var_params and local_var_params['search_id'] is not None:  # noqa: E501
            query_params.append(('search_id', local_var_params['search_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/fetch_video_search_result_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_a_bogus_api_v1_douyin_web_generate_a_bogus_post(self, **kwargs):  # noqa: E501
        """使用接口网址生成A-Bogus参数/Generate A-Bogus parameter using API URL  # noqa: E501

        # [中文] ### 用途: - 使用接口网址生成A-Bogus参数，提交的URL不能带有a_bogus参数，同时a_bogus参数与请求头中的User-Agent有关，需要一起提交和请求。 ### 参数: - url: API链接，请去除url中的原本的a_boogus参数(如有)。 - data: 请求载荷，只有在POST请求中才需要提交，GET请求中使用空字符串即可。 - user_agent: user-agent，需要提交你请求头中的User-Agent，该值参与a_bogus参数的计算。 - index_0: 加密明文列表的第一个值，无特殊要求，默认为0，不要随意修改。 - index_1: 加密明文列表的第二个值，无特殊要求，默认为1，不要随意修改。 - index_2: 加密明文列表的第三个值，无特殊要求，默认为14，不要随意修改。 ### 返回: - A-Bogus参数  # [English] ### Purpose: - Generate A-Bogus parameter using API URL, the submitted URL cannot contain the original a_boogus parameter, and the a_bogus parameter is related to the User-Agent in the request header, which needs to be submitted and requested together. ### Parameters: - url: API link, please remove the original a_boogus parameter from the url (if any). - data: Request payload, only need to submit in POST request, use an empty string in GET request. - user_agent: user-agent, you need to submit the User-Agent in your request header, which is involved in the calculation of the a_bogus parameter. - index_0: The first value of the encrypted plaintext list, no special requirements, the default is 0, do not modify it at will. - index_1: The second value of the encrypted plaintext list, no special requirements, the default is 1, do not modify it at will. - index_2: The third value of the encrypted plaintext list, no special requirements, the default is 14, do not modify it at will. ### Return: - A-Bogus parameter  # [示例/Example] ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/general/search/single/?device_platform=webapp&aid=6383&channel=channel_pc_web&search_channel=aweme_general&enable_history=1&keyword=%E4%B8%AD%E5%8D%8E%E5%A8%98&search_source=normal_search&query_correct_type=1&is_filter_search=0&from_group_id=7346905902554844468&offset=0&count=15&need_filter_settings=1&pc_client_type=1&version_code=190600&version_name=19.6.0&cookie_enabled=true&screen_width=1280&screen_height=800&browser_language=zh-CN&browser_platform=Win32&browser_name=Firefox&browser_version=124.0&browser_online=true&engine_name=Gecko&engine_version=124.0&os_name=Windows&os_version=10&cpu_core_num=16&device_memory=&platform=PC&webid=7348962975497324070&msToken=YCTVM6YGmjFdIpQAN9ykXLBXiSiuHdZkOkEQWTeqVOHBEPmOcM0lNwE0Kd9vgHPMPigSndZDHfAq9k-6lDmH3Jqz6mHHxmn-BzQjmLMIfLIPgirgnOixM9x4PwgcNQ%3D%3D\", \"data\": \"\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\", \"index_0\": 0, \"index_1\": 1, \"index_2\": 14 } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_a_bogus_api_v1_douyin_web_generate_a_bogus_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param ABogusModel a_bogus_model:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.generate_a_bogus_api_v1_douyin_web_generate_a_bogus_post_with_http_info(**kwargs)  # noqa: E501

    def generate_a_bogus_api_v1_douyin_web_generate_a_bogus_post_with_http_info(self, **kwargs):  # noqa: E501
        """使用接口网址生成A-Bogus参数/Generate A-Bogus parameter using API URL  # noqa: E501

        # [中文] ### 用途: - 使用接口网址生成A-Bogus参数，提交的URL不能带有a_bogus参数，同时a_bogus参数与请求头中的User-Agent有关，需要一起提交和请求。 ### 参数: - url: API链接，请去除url中的原本的a_boogus参数(如有)。 - data: 请求载荷，只有在POST请求中才需要提交，GET请求中使用空字符串即可。 - user_agent: user-agent，需要提交你请求头中的User-Agent，该值参与a_bogus参数的计算。 - index_0: 加密明文列表的第一个值，无特殊要求，默认为0，不要随意修改。 - index_1: 加密明文列表的第二个值，无特殊要求，默认为1，不要随意修改。 - index_2: 加密明文列表的第三个值，无特殊要求，默认为14，不要随意修改。 ### 返回: - A-Bogus参数  # [English] ### Purpose: - Generate A-Bogus parameter using API URL, the submitted URL cannot contain the original a_boogus parameter, and the a_bogus parameter is related to the User-Agent in the request header, which needs to be submitted and requested together. ### Parameters: - url: API link, please remove the original a_boogus parameter from the url (if any). - data: Request payload, only need to submit in POST request, use an empty string in GET request. - user_agent: user-agent, you need to submit the User-Agent in your request header, which is involved in the calculation of the a_bogus parameter. - index_0: The first value of the encrypted plaintext list, no special requirements, the default is 0, do not modify it at will. - index_1: The second value of the encrypted plaintext list, no special requirements, the default is 1, do not modify it at will. - index_2: The third value of the encrypted plaintext list, no special requirements, the default is 14, do not modify it at will. ### Return: - A-Bogus parameter  # [示例/Example] ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/general/search/single/?device_platform=webapp&aid=6383&channel=channel_pc_web&search_channel=aweme_general&enable_history=1&keyword=%E4%B8%AD%E5%8D%8E%E5%A8%98&search_source=normal_search&query_correct_type=1&is_filter_search=0&from_group_id=7346905902554844468&offset=0&count=15&need_filter_settings=1&pc_client_type=1&version_code=190600&version_name=19.6.0&cookie_enabled=true&screen_width=1280&screen_height=800&browser_language=zh-CN&browser_platform=Win32&browser_name=Firefox&browser_version=124.0&browser_online=true&engine_name=Gecko&engine_version=124.0&os_name=Windows&os_version=10&cpu_core_num=16&device_memory=&platform=PC&webid=7348962975497324070&msToken=YCTVM6YGmjFdIpQAN9ykXLBXiSiuHdZkOkEQWTeqVOHBEPmOcM0lNwE0Kd9vgHPMPigSndZDHfAq9k-6lDmH3Jqz6mHHxmn-BzQjmLMIfLIPgirgnOixM9x4PwgcNQ%3D%3D\", \"data\": \"\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\", \"index_0\": 0, \"index_1\": 1, \"index_2\": 14 } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_a_bogus_api_v1_douyin_web_generate_a_bogus_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param ABogusModel a_bogus_model:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'a_bogus_model'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_a_bogus_api_v1_douyin_web_generate_a_bogus_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'a_bogus_model' in local_var_params:
            body_params = local_var_params['a_bogus_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/generate_a_bogus', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_a_bogus_api_v1_douyin_web_generate_a_bogus_post_0(self, **kwargs):  # noqa: E501
        """使用接口网址生成A-Bogus参数/Generate A-Bogus parameter using API URL  # noqa: E501

        # [中文] ### 用途: - 使用接口网址生成A-Bogus参数，提交的URL不能带有a_bogus参数，同时a_bogus参数与请求头中的User-Agent有关，需要一起提交和请求。 ### 参数: - url: API链接，请去除url中的原本的a_boogus参数(如有)。 - data: 请求载荷，只有在POST请求中才需要提交，GET请求中使用空字符串即可。 - user_agent: user-agent，需要提交你请求头中的User-Agent，该值参与a_bogus参数的计算。 - index_0: 加密明文列表的第一个值，无特殊要求，默认为0，不要随意修改。 - index_1: 加密明文列表的第二个值，无特殊要求，默认为1，不要随意修改。 - index_2: 加密明文列表的第三个值，无特殊要求，默认为14，不要随意修改。 ### 返回: - A-Bogus参数  # [English] ### Purpose: - Generate A-Bogus parameter using API URL, the submitted URL cannot contain the original a_boogus parameter, and the a_bogus parameter is related to the User-Agent in the request header, which needs to be submitted and requested together. ### Parameters: - url: API link, please remove the original a_boogus parameter from the url (if any). - data: Request payload, only need to submit in POST request, use an empty string in GET request. - user_agent: user-agent, you need to submit the User-Agent in your request header, which is involved in the calculation of the a_bogus parameter. - index_0: The first value of the encrypted plaintext list, no special requirements, the default is 0, do not modify it at will. - index_1: The second value of the encrypted plaintext list, no special requirements, the default is 1, do not modify it at will. - index_2: The third value of the encrypted plaintext list, no special requirements, the default is 14, do not modify it at will. ### Return: - A-Bogus parameter  # [示例/Example] ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/general/search/single/?device_platform=webapp&aid=6383&channel=channel_pc_web&search_channel=aweme_general&enable_history=1&keyword=%E4%B8%AD%E5%8D%8E%E5%A8%98&search_source=normal_search&query_correct_type=1&is_filter_search=0&from_group_id=7346905902554844468&offset=0&count=15&need_filter_settings=1&pc_client_type=1&version_code=190600&version_name=19.6.0&cookie_enabled=true&screen_width=1280&screen_height=800&browser_language=zh-CN&browser_platform=Win32&browser_name=Firefox&browser_version=124.0&browser_online=true&engine_name=Gecko&engine_version=124.0&os_name=Windows&os_version=10&cpu_core_num=16&device_memory=&platform=PC&webid=7348962975497324070&msToken=YCTVM6YGmjFdIpQAN9ykXLBXiSiuHdZkOkEQWTeqVOHBEPmOcM0lNwE0Kd9vgHPMPigSndZDHfAq9k-6lDmH3Jqz6mHHxmn-BzQjmLMIfLIPgirgnOixM9x4PwgcNQ%3D%3D\", \"data\": \"\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\", \"index_0\": 0, \"index_1\": 1, \"index_2\": 14 } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_a_bogus_api_v1_douyin_web_generate_a_bogus_post_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param ABogusModel a_bogus_model:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.generate_a_bogus_api_v1_douyin_web_generate_a_bogus_post_0_with_http_info(**kwargs)  # noqa: E501

    def generate_a_bogus_api_v1_douyin_web_generate_a_bogus_post_0_with_http_info(self, **kwargs):  # noqa: E501
        """使用接口网址生成A-Bogus参数/Generate A-Bogus parameter using API URL  # noqa: E501

        # [中文] ### 用途: - 使用接口网址生成A-Bogus参数，提交的URL不能带有a_bogus参数，同时a_bogus参数与请求头中的User-Agent有关，需要一起提交和请求。 ### 参数: - url: API链接，请去除url中的原本的a_boogus参数(如有)。 - data: 请求载荷，只有在POST请求中才需要提交，GET请求中使用空字符串即可。 - user_agent: user-agent，需要提交你请求头中的User-Agent，该值参与a_bogus参数的计算。 - index_0: 加密明文列表的第一个值，无特殊要求，默认为0，不要随意修改。 - index_1: 加密明文列表的第二个值，无特殊要求，默认为1，不要随意修改。 - index_2: 加密明文列表的第三个值，无特殊要求，默认为14，不要随意修改。 ### 返回: - A-Bogus参数  # [English] ### Purpose: - Generate A-Bogus parameter using API URL, the submitted URL cannot contain the original a_boogus parameter, and the a_bogus parameter is related to the User-Agent in the request header, which needs to be submitted and requested together. ### Parameters: - url: API link, please remove the original a_boogus parameter from the url (if any). - data: Request payload, only need to submit in POST request, use an empty string in GET request. - user_agent: user-agent, you need to submit the User-Agent in your request header, which is involved in the calculation of the a_bogus parameter. - index_0: The first value of the encrypted plaintext list, no special requirements, the default is 0, do not modify it at will. - index_1: The second value of the encrypted plaintext list, no special requirements, the default is 1, do not modify it at will. - index_2: The third value of the encrypted plaintext list, no special requirements, the default is 14, do not modify it at will. ### Return: - A-Bogus parameter  # [示例/Example] ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/general/search/single/?device_platform=webapp&aid=6383&channel=channel_pc_web&search_channel=aweme_general&enable_history=1&keyword=%E4%B8%AD%E5%8D%8E%E5%A8%98&search_source=normal_search&query_correct_type=1&is_filter_search=0&from_group_id=7346905902554844468&offset=0&count=15&need_filter_settings=1&pc_client_type=1&version_code=190600&version_name=19.6.0&cookie_enabled=true&screen_width=1280&screen_height=800&browser_language=zh-CN&browser_platform=Win32&browser_name=Firefox&browser_version=124.0&browser_online=true&engine_name=Gecko&engine_version=124.0&os_name=Windows&os_version=10&cpu_core_num=16&device_memory=&platform=PC&webid=7348962975497324070&msToken=YCTVM6YGmjFdIpQAN9ykXLBXiSiuHdZkOkEQWTeqVOHBEPmOcM0lNwE0Kd9vgHPMPigSndZDHfAq9k-6lDmH3Jqz6mHHxmn-BzQjmLMIfLIPgirgnOixM9x4PwgcNQ%3D%3D\", \"data\": \"\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\", \"index_0\": 0, \"index_1\": 1, \"index_2\": 14 } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_a_bogus_api_v1_douyin_web_generate_a_bogus_post_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param ABogusModel a_bogus_model:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'a_bogus_model'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_a_bogus_api_v1_douyin_web_generate_a_bogus_post_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'a_bogus_model' in local_var_params:
            body_params = local_var_params['a_bogus_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/generate_a_bogus', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_real_ms_token_api_v1_douyin_web_generate_real_ms_token_get(self, **kwargs):  # noqa: E501
        """生成真实msToken/Generate real msToken  # noqa: E501

        # [中文] ### 用途: - 生成真实msToken ### 返回: - msToken  # [English] ### Purpose: - Generate real msToken ### Return: - msToken  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_real_ms_token_api_v1_douyin_web_generate_real_ms_token_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.generate_real_ms_token_api_v1_douyin_web_generate_real_ms_token_get_with_http_info(**kwargs)  # noqa: E501

    def generate_real_ms_token_api_v1_douyin_web_generate_real_ms_token_get_with_http_info(self, **kwargs):  # noqa: E501
        """生成真实msToken/Generate real msToken  # noqa: E501

        # [中文] ### 用途: - 生成真实msToken ### 返回: - msToken  # [English] ### Purpose: - Generate real msToken ### Return: - msToken  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_real_ms_token_api_v1_douyin_web_generate_real_ms_token_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_real_ms_token_api_v1_douyin_web_generate_real_ms_token_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/generate_real_msToken', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_real_ms_token_api_v1_douyin_web_generate_real_ms_token_get_0(self, **kwargs):  # noqa: E501
        """生成真实msToken/Generate real msToken  # noqa: E501

        # [中文] ### 用途: - 生成真实msToken ### 返回: - msToken  # [English] ### Purpose: - Generate real msToken ### Return: - msToken  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_real_ms_token_api_v1_douyin_web_generate_real_ms_token_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.generate_real_ms_token_api_v1_douyin_web_generate_real_ms_token_get_0_with_http_info(**kwargs)  # noqa: E501

    def generate_real_ms_token_api_v1_douyin_web_generate_real_ms_token_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """生成真实msToken/Generate real msToken  # noqa: E501

        # [中文] ### 用途: - 生成真实msToken ### 返回: - msToken  # [English] ### Purpose: - Generate real msToken ### Return: - msToken  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_real_ms_token_api_v1_douyin_web_generate_real_ms_token_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_real_ms_token_api_v1_douyin_web_generate_real_ms_token_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/generate_real_msToken', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_sv_web_id_api_v1_douyin_web_generate_sv_web_id_get(self, **kwargs):  # noqa: E501
        """生成s_v_web_id/Generate s_v_web_id  # noqa: E501

        # [中文] ### 用途: - 生成s_v_web_id ### 返回: - s_v_web_id  # [English] ### Purpose: - Generate s_v_web_id ### Return: - s_v_web_id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_sv_web_id_api_v1_douyin_web_generate_sv_web_id_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.generate_sv_web_id_api_v1_douyin_web_generate_sv_web_id_get_with_http_info(**kwargs)  # noqa: E501

    def generate_sv_web_id_api_v1_douyin_web_generate_sv_web_id_get_with_http_info(self, **kwargs):  # noqa: E501
        """生成s_v_web_id/Generate s_v_web_id  # noqa: E501

        # [中文] ### 用途: - 生成s_v_web_id ### 返回: - s_v_web_id  # [English] ### Purpose: - Generate s_v_web_id ### Return: - s_v_web_id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_sv_web_id_api_v1_douyin_web_generate_sv_web_id_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_sv_web_id_api_v1_douyin_web_generate_sv_web_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/generate_s_v_web_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_sv_web_id_api_v1_douyin_web_generate_sv_web_id_get_0(self, **kwargs):  # noqa: E501
        """生成s_v_web_id/Generate s_v_web_id  # noqa: E501

        # [中文] ### 用途: - 生成s_v_web_id ### 返回: - s_v_web_id  # [English] ### Purpose: - Generate s_v_web_id ### Return: - s_v_web_id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_sv_web_id_api_v1_douyin_web_generate_sv_web_id_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.generate_sv_web_id_api_v1_douyin_web_generate_sv_web_id_get_0_with_http_info(**kwargs)  # noqa: E501

    def generate_sv_web_id_api_v1_douyin_web_generate_sv_web_id_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """生成s_v_web_id/Generate s_v_web_id  # noqa: E501

        # [中文] ### 用途: - 生成s_v_web_id ### 返回: - s_v_web_id  # [English] ### Purpose: - Generate s_v_web_id ### Return: - s_v_web_id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_sv_web_id_api_v1_douyin_web_generate_sv_web_id_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_sv_web_id_api_v1_douyin_web_generate_sv_web_id_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/generate_s_v_web_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_ttwid_api_v1_douyin_web_generate_ttwid_get(self, **kwargs):  # noqa: E501
        """生成ttwid/Generate ttwid  # noqa: E501

        # [中文] ### 用途: - 生成ttwid ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Return: - ttwid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_ttwid_api_v1_douyin_web_generate_ttwid_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_agent:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.generate_ttwid_api_v1_douyin_web_generate_ttwid_get_with_http_info(**kwargs)  # noqa: E501

    def generate_ttwid_api_v1_douyin_web_generate_ttwid_get_with_http_info(self, **kwargs):  # noqa: E501
        """生成ttwid/Generate ttwid  # noqa: E501

        # [中文] ### 用途: - 生成ttwid ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Return: - ttwid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_ttwid_api_v1_douyin_web_generate_ttwid_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_agent:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_agent'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_ttwid_api_v1_douyin_web_generate_ttwid_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_agent' in local_var_params and local_var_params['user_agent'] is not None:  # noqa: E501
            query_params.append(('user_agent', local_var_params['user_agent']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/generate_ttwid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_ttwid_api_v1_douyin_web_generate_ttwid_get_0(self, **kwargs):  # noqa: E501
        """生成ttwid/Generate ttwid  # noqa: E501

        # [中文] ### 用途: - 生成ttwid ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Return: - ttwid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_ttwid_api_v1_douyin_web_generate_ttwid_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_agent:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.generate_ttwid_api_v1_douyin_web_generate_ttwid_get_0_with_http_info(**kwargs)  # noqa: E501

    def generate_ttwid_api_v1_douyin_web_generate_ttwid_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """生成ttwid/Generate ttwid  # noqa: E501

        # [中文] ### 用途: - 生成ttwid ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Return: - ttwid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_ttwid_api_v1_douyin_web_generate_ttwid_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_agent:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_agent'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_ttwid_api_v1_douyin_web_generate_ttwid_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_agent' in local_var_params and local_var_params['user_agent'] is not None:  # noqa: E501
            query_params.append(('user_agent', local_var_params['user_agent']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/generate_ttwid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_verify_fp_api_v1_douyin_web_generate_verify_fp_get(self, **kwargs):  # noqa: E501
        """生成verify_fp/Generate verify_fp  # noqa: E501

        # [中文] ### 用途: - 生成verify_fp ### 返回: - verify_fp  # [English] ### Purpose: - Generate verify_fp ### Return: - verify_fp  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_verify_fp_api_v1_douyin_web_generate_verify_fp_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.generate_verify_fp_api_v1_douyin_web_generate_verify_fp_get_with_http_info(**kwargs)  # noqa: E501

    def generate_verify_fp_api_v1_douyin_web_generate_verify_fp_get_with_http_info(self, **kwargs):  # noqa: E501
        """生成verify_fp/Generate verify_fp  # noqa: E501

        # [中文] ### 用途: - 生成verify_fp ### 返回: - verify_fp  # [English] ### Purpose: - Generate verify_fp ### Return: - verify_fp  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_verify_fp_api_v1_douyin_web_generate_verify_fp_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_verify_fp_api_v1_douyin_web_generate_verify_fp_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/generate_verify_fp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_verify_fp_api_v1_douyin_web_generate_verify_fp_get_0(self, **kwargs):  # noqa: E501
        """生成verify_fp/Generate verify_fp  # noqa: E501

        # [中文] ### 用途: - 生成verify_fp ### 返回: - verify_fp  # [English] ### Purpose: - Generate verify_fp ### Return: - verify_fp  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_verify_fp_api_v1_douyin_web_generate_verify_fp_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.generate_verify_fp_api_v1_douyin_web_generate_verify_fp_get_0_with_http_info(**kwargs)  # noqa: E501

    def generate_verify_fp_api_v1_douyin_web_generate_verify_fp_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """生成verify_fp/Generate verify_fp  # noqa: E501

        # [中文] ### 用途: - 生成verify_fp ### 返回: - verify_fp  # [English] ### Purpose: - Generate verify_fp ### Return: - verify_fp  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_verify_fp_api_v1_douyin_web_generate_verify_fp_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_verify_fp_api_v1_douyin_web_generate_verify_fp_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/generate_verify_fp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_x_bogus_api_v1_douyin_web_generate_x_bogus_post(self, **kwargs):  # noqa: E501
        """使用接口网址生成X-Bogus参数/Generate X-Bogus parameter using API URL  # noqa: E501

        # [中文] ### 用途: - 使用接口网址生成X-Bogus参数 ### 参数: - url: 接口网址  # [English] ### Purpose: - Generate X-Bogus parameter using API URL ### Parameters: - url: API URL  # [示例/Example]  ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_x_bogus_api_v1_douyin_web_generate_x_bogus_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param XBogusModel x_bogus_model:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.generate_x_bogus_api_v1_douyin_web_generate_x_bogus_post_with_http_info(**kwargs)  # noqa: E501

    def generate_x_bogus_api_v1_douyin_web_generate_x_bogus_post_with_http_info(self, **kwargs):  # noqa: E501
        """使用接口网址生成X-Bogus参数/Generate X-Bogus parameter using API URL  # noqa: E501

        # [中文] ### 用途: - 使用接口网址生成X-Bogus参数 ### 参数: - url: 接口网址  # [English] ### Purpose: - Generate X-Bogus parameter using API URL ### Parameters: - url: API URL  # [示例/Example]  ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_x_bogus_api_v1_douyin_web_generate_x_bogus_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param XBogusModel x_bogus_model:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'x_bogus_model'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_x_bogus_api_v1_douyin_web_generate_x_bogus_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'x_bogus_model' in local_var_params:
            body_params = local_var_params['x_bogus_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/generate_x_bogus', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_x_bogus_api_v1_douyin_web_generate_x_bogus_post_0(self, **kwargs):  # noqa: E501
        """使用接口网址生成X-Bogus参数/Generate X-Bogus parameter using API URL  # noqa: E501

        # [中文] ### 用途: - 使用接口网址生成X-Bogus参数 ### 参数: - url: 接口网址  # [English] ### Purpose: - Generate X-Bogus parameter using API URL ### Parameters: - url: API URL  # [示例/Example]  ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_x_bogus_api_v1_douyin_web_generate_x_bogus_post_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param XBogusModel x_bogus_model:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.generate_x_bogus_api_v1_douyin_web_generate_x_bogus_post_0_with_http_info(**kwargs)  # noqa: E501

    def generate_x_bogus_api_v1_douyin_web_generate_x_bogus_post_0_with_http_info(self, **kwargs):  # noqa: E501
        """使用接口网址生成X-Bogus参数/Generate X-Bogus parameter using API URL  # noqa: E501

        # [中文] ### 用途: - 使用接口网址生成X-Bogus参数 ### 参数: - url: 接口网址  # [English] ### Purpose: - Generate X-Bogus parameter using API URL ### Parameters: - url: API URL  # [示例/Example]  ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_x_bogus_api_v1_douyin_web_generate_x_bogus_post_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param XBogusModel x_bogus_model:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'x_bogus_model'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_x_bogus_api_v1_douyin_web_generate_x_bogus_post_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'x_bogus_model' in local_var_params:
            body_params = local_var_params['x_bogus_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/generate_x_bogus', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_aweme_id_api_v1_douyin_web_get_all_aweme_id_post(self, **kwargs):  # noqa: E501
        """提取列表作品id/Extract list video id  # noqa: E501

        # [中文]  ### 用途:  - 提取列表作品id（最多支持20个链接）  ### 参数:  - url: 作品链接列表  ### 返回:  - 作品id列表   # [English]  ### Purpose:  - Extract list video id (supports up to 20 links)  ### Parameters:  - url: Video link list  ### Return:  - Video id list   # [示例/Example]  ```json  { \"urls\":[     \"0.53 02/26 I@v.sE Fus:/ 你别太帅了郑润泽# 现场版live # 音乐节 # 郑润泽  https://v.douyin.com/iRNBho6u/ 复制此链接，打开Dou音搜索，直接观看视频!\",     \"https://v.douyin.com/iRNBho6u/\",     \"https://www.iesdouyin.com/share/video/7298145681699622182/?region=CN&mid=7298145762238565171&u_code=l1j9bkbd&did=MS4wLjABAAAAtqpCx0hpOERbdSzQdjRZw-wFPxaqdbAzsKDmbJMUI3KWlMGQHC-n6dXAqa-dM2EP&iid=MS4wLjABAAAANwkJuWIRFOzg5uCpDRpMj4OX-QryoDgn-yYlXQnRwQQ&with_sec_did=1&titleType=title&share_sign=05kGlqGmR4_IwCX.ZGk6xuL0osNA..5ur7b0jbOx6cc-&share_version=170400&ts=1699262937&from_aid=6383&from_ssr=1&from=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182?previous_page=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182\",  ]  }  ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_aweme_id_api_v1_douyin_web_get_all_aweme_id_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_aweme_id_api_v1_douyin_web_get_all_aweme_id_post_with_http_info(**kwargs)  # noqa: E501

    def get_all_aweme_id_api_v1_douyin_web_get_all_aweme_id_post_with_http_info(self, **kwargs):  # noqa: E501
        """提取列表作品id/Extract list video id  # noqa: E501

        # [中文]  ### 用途:  - 提取列表作品id（最多支持20个链接）  ### 参数:  - url: 作品链接列表  ### 返回:  - 作品id列表   # [English]  ### Purpose:  - Extract list video id (supports up to 20 links)  ### Parameters:  - url: Video link list  ### Return:  - Video id list   # [示例/Example]  ```json  { \"urls\":[     \"0.53 02/26 I@v.sE Fus:/ 你别太帅了郑润泽# 现场版live # 音乐节 # 郑润泽  https://v.douyin.com/iRNBho6u/ 复制此链接，打开Dou音搜索，直接观看视频!\",     \"https://v.douyin.com/iRNBho6u/\",     \"https://www.iesdouyin.com/share/video/7298145681699622182/?region=CN&mid=7298145762238565171&u_code=l1j9bkbd&did=MS4wLjABAAAAtqpCx0hpOERbdSzQdjRZw-wFPxaqdbAzsKDmbJMUI3KWlMGQHC-n6dXAqa-dM2EP&iid=MS4wLjABAAAANwkJuWIRFOzg5uCpDRpMj4OX-QryoDgn-yYlXQnRwQQ&with_sec_did=1&titleType=title&share_sign=05kGlqGmR4_IwCX.ZGk6xuL0osNA..5ur7b0jbOx6cc-&share_version=170400&ts=1699262937&from_aid=6383&from_ssr=1&from=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182?previous_page=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182\",  ]  }  ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_aweme_id_api_v1_douyin_web_get_all_aweme_id_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'request_body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_aweme_id_api_v1_douyin_web_get_all_aweme_id_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/get_all_aweme_id', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_aweme_id_api_v1_douyin_web_get_all_aweme_id_post_0(self, **kwargs):  # noqa: E501
        """提取列表作品id/Extract list video id  # noqa: E501

        # [中文]  ### 用途:  - 提取列表作品id（最多支持20个链接）  ### 参数:  - url: 作品链接列表  ### 返回:  - 作品id列表   # [English]  ### Purpose:  - Extract list video id (supports up to 20 links)  ### Parameters:  - url: Video link list  ### Return:  - Video id list   # [示例/Example]  ```json  { \"urls\":[     \"0.53 02/26 I@v.sE Fus:/ 你别太帅了郑润泽# 现场版live # 音乐节 # 郑润泽  https://v.douyin.com/iRNBho6u/ 复制此链接，打开Dou音搜索，直接观看视频!\",     \"https://v.douyin.com/iRNBho6u/\",     \"https://www.iesdouyin.com/share/video/7298145681699622182/?region=CN&mid=7298145762238565171&u_code=l1j9bkbd&did=MS4wLjABAAAAtqpCx0hpOERbdSzQdjRZw-wFPxaqdbAzsKDmbJMUI3KWlMGQHC-n6dXAqa-dM2EP&iid=MS4wLjABAAAANwkJuWIRFOzg5uCpDRpMj4OX-QryoDgn-yYlXQnRwQQ&with_sec_did=1&titleType=title&share_sign=05kGlqGmR4_IwCX.ZGk6xuL0osNA..5ur7b0jbOx6cc-&share_version=170400&ts=1699262937&from_aid=6383&from_ssr=1&from=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182?previous_page=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182\",  ]  }  ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_aweme_id_api_v1_douyin_web_get_all_aweme_id_post_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_aweme_id_api_v1_douyin_web_get_all_aweme_id_post_0_with_http_info(**kwargs)  # noqa: E501

    def get_all_aweme_id_api_v1_douyin_web_get_all_aweme_id_post_0_with_http_info(self, **kwargs):  # noqa: E501
        """提取列表作品id/Extract list video id  # noqa: E501

        # [中文]  ### 用途:  - 提取列表作品id（最多支持20个链接）  ### 参数:  - url: 作品链接列表  ### 返回:  - 作品id列表   # [English]  ### Purpose:  - Extract list video id (supports up to 20 links)  ### Parameters:  - url: Video link list  ### Return:  - Video id list   # [示例/Example]  ```json  { \"urls\":[     \"0.53 02/26 I@v.sE Fus:/ 你别太帅了郑润泽# 现场版live # 音乐节 # 郑润泽  https://v.douyin.com/iRNBho6u/ 复制此链接，打开Dou音搜索，直接观看视频!\",     \"https://v.douyin.com/iRNBho6u/\",     \"https://www.iesdouyin.com/share/video/7298145681699622182/?region=CN&mid=7298145762238565171&u_code=l1j9bkbd&did=MS4wLjABAAAAtqpCx0hpOERbdSzQdjRZw-wFPxaqdbAzsKDmbJMUI3KWlMGQHC-n6dXAqa-dM2EP&iid=MS4wLjABAAAANwkJuWIRFOzg5uCpDRpMj4OX-QryoDgn-yYlXQnRwQQ&with_sec_did=1&titleType=title&share_sign=05kGlqGmR4_IwCX.ZGk6xuL0osNA..5ur7b0jbOx6cc-&share_version=170400&ts=1699262937&from_aid=6383&from_ssr=1&from=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182?previous_page=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182\",  ]  }  ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_aweme_id_api_v1_douyin_web_get_all_aweme_id_post_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'request_body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_aweme_id_api_v1_douyin_web_get_all_aweme_id_post_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/get_all_aweme_id', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_sec_user_id_api_v1_douyin_web_get_all_sec_user_id_post(self, **kwargs):  # noqa: E501
        """提取列表用户id/Extract list user id  # noqa: E501

        # [中文]  ### 用途:  - 提取列表用户id  ### 参数:  - url: 用户主页链接列表（最多支持10个链接）  ### 返回:  - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。   # [English]  ### Purpose:  - Extract list user id  ### Parameters:  - url: User homepage link list (supports up to 10 links)  ### Return:  - If the sec_user_id is successfully obtained from the link, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.   # [示例/Example]  ```json  { \"urls\":[    \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE?vid=7285950278132616463\",    \"https://www.douyin.com/user/MS4wLjABAAAAVsneOf144eGDFf8Xp9QNb1VW6ovXnNT5SqJBhJfe8KQBKWKDTWK5Hh-_i9mJzb8C\",    \"长按复制此条消息，打开抖音搜索，查看TA的更多作品。 https://v.douyin.com/idFqvUms/\",    \"https://v.douyin.com/idFqvUms/\"     ]  }  ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_sec_user_id_api_v1_douyin_web_get_all_sec_user_id_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_sec_user_id_api_v1_douyin_web_get_all_sec_user_id_post_with_http_info(**kwargs)  # noqa: E501

    def get_all_sec_user_id_api_v1_douyin_web_get_all_sec_user_id_post_with_http_info(self, **kwargs):  # noqa: E501
        """提取列表用户id/Extract list user id  # noqa: E501

        # [中文]  ### 用途:  - 提取列表用户id  ### 参数:  - url: 用户主页链接列表（最多支持10个链接）  ### 返回:  - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。   # [English]  ### Purpose:  - Extract list user id  ### Parameters:  - url: User homepage link list (supports up to 10 links)  ### Return:  - If the sec_user_id is successfully obtained from the link, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.   # [示例/Example]  ```json  { \"urls\":[    \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE?vid=7285950278132616463\",    \"https://www.douyin.com/user/MS4wLjABAAAAVsneOf144eGDFf8Xp9QNb1VW6ovXnNT5SqJBhJfe8KQBKWKDTWK5Hh-_i9mJzb8C\",    \"长按复制此条消息，打开抖音搜索，查看TA的更多作品。 https://v.douyin.com/idFqvUms/\",    \"https://v.douyin.com/idFqvUms/\"     ]  }  ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_sec_user_id_api_v1_douyin_web_get_all_sec_user_id_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'request_body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_sec_user_id_api_v1_douyin_web_get_all_sec_user_id_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/get_all_sec_user_id', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_sec_user_id_api_v1_douyin_web_get_all_sec_user_id_post_0(self, **kwargs):  # noqa: E501
        """提取列表用户id/Extract list user id  # noqa: E501

        # [中文]  ### 用途:  - 提取列表用户id  ### 参数:  - url: 用户主页链接列表（最多支持10个链接）  ### 返回:  - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。   # [English]  ### Purpose:  - Extract list user id  ### Parameters:  - url: User homepage link list (supports up to 10 links)  ### Return:  - If the sec_user_id is successfully obtained from the link, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.   # [示例/Example]  ```json  { \"urls\":[    \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE?vid=7285950278132616463\",    \"https://www.douyin.com/user/MS4wLjABAAAAVsneOf144eGDFf8Xp9QNb1VW6ovXnNT5SqJBhJfe8KQBKWKDTWK5Hh-_i9mJzb8C\",    \"长按复制此条消息，打开抖音搜索，查看TA的更多作品。 https://v.douyin.com/idFqvUms/\",    \"https://v.douyin.com/idFqvUms/\"     ]  }  ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_sec_user_id_api_v1_douyin_web_get_all_sec_user_id_post_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_sec_user_id_api_v1_douyin_web_get_all_sec_user_id_post_0_with_http_info(**kwargs)  # noqa: E501

    def get_all_sec_user_id_api_v1_douyin_web_get_all_sec_user_id_post_0_with_http_info(self, **kwargs):  # noqa: E501
        """提取列表用户id/Extract list user id  # noqa: E501

        # [中文]  ### 用途:  - 提取列表用户id  ### 参数:  - url: 用户主页链接列表（最多支持10个链接）  ### 返回:  - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。   # [English]  ### Purpose:  - Extract list user id  ### Parameters:  - url: User homepage link list (supports up to 10 links)  ### Return:  - If the sec_user_id is successfully obtained from the link, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.   # [示例/Example]  ```json  { \"urls\":[    \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE?vid=7285950278132616463\",    \"https://www.douyin.com/user/MS4wLjABAAAAVsneOf144eGDFf8Xp9QNb1VW6ovXnNT5SqJBhJfe8KQBKWKDTWK5Hh-_i9mJzb8C\",    \"长按复制此条消息，打开抖音搜索，查看TA的更多作品。 https://v.douyin.com/idFqvUms/\",    \"https://v.douyin.com/idFqvUms/\"     ]  }  ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_sec_user_id_api_v1_douyin_web_get_all_sec_user_id_post_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'request_body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_sec_user_id_api_v1_douyin_web_get_all_sec_user_id_post_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/get_all_sec_user_id', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_webcast_id_api_v1_douyin_web_get_all_webcast_id_post(self, **kwargs):  # noqa: E501
        """提取列表直播间号/Extract list webcast id  # noqa: E501

        # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接列表（最多支持20个链接） ### 返回: - 直播间号列表  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link list (supports up to 20 links) ### Return: - Room id list  # [示例/Example] ```json {   \"urls\": [         \"https://live.douyin.com/775841227732\",         \"https://live.douyin.com/775841227732?room_id=7318296342189919011&enter_from_merge=web_share_link&enter_method=web_share_link&previous_page=app_code_link\",         'https://webcast.amemv.com/douyin/webcast/reflow/7318296342189919011?u_code=l1j9bkbd&did=MS4wLjABAAAAEs86TBQPNwAo-RGrcxWyCdwKhI66AK3Pqf3ieo6HaxI&iid=MS4wLjABAAAA0ptpM-zzoliLEeyvWOCUt-_dQza4uSjlIvbtIazXnCY&with_sec_did=1&use_link_command=1&ecom_share_track_params=&extra_params={\"from_request_id\":\"20231230162057EC005772A8EAA0199906\",\"im_channel_invite_id\":\"0\"}&user_id=3644207898042206&liveId=7318296342189919011&from=share&style=share&enter_method=click_share&roomId=7318296342189919011&activity_info={}',         \"6i- Q@x.Sl 03/23 【醒子8ke的直播间】  点击打开👉https://v.douyin.com/i8tBR7hX/  或长按复制此条消息，打开抖音，看TA直播\",         \"https://v.douyin.com/i8tBR7hX/\",         ] } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_webcast_id_api_v1_douyin_web_get_all_webcast_id_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_webcast_id_api_v1_douyin_web_get_all_webcast_id_post_with_http_info(**kwargs)  # noqa: E501

    def get_all_webcast_id_api_v1_douyin_web_get_all_webcast_id_post_with_http_info(self, **kwargs):  # noqa: E501
        """提取列表直播间号/Extract list webcast id  # noqa: E501

        # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接列表（最多支持20个链接） ### 返回: - 直播间号列表  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link list (supports up to 20 links) ### Return: - Room id list  # [示例/Example] ```json {   \"urls\": [         \"https://live.douyin.com/775841227732\",         \"https://live.douyin.com/775841227732?room_id=7318296342189919011&enter_from_merge=web_share_link&enter_method=web_share_link&previous_page=app_code_link\",         'https://webcast.amemv.com/douyin/webcast/reflow/7318296342189919011?u_code=l1j9bkbd&did=MS4wLjABAAAAEs86TBQPNwAo-RGrcxWyCdwKhI66AK3Pqf3ieo6HaxI&iid=MS4wLjABAAAA0ptpM-zzoliLEeyvWOCUt-_dQza4uSjlIvbtIazXnCY&with_sec_did=1&use_link_command=1&ecom_share_track_params=&extra_params={\"from_request_id\":\"20231230162057EC005772A8EAA0199906\",\"im_channel_invite_id\":\"0\"}&user_id=3644207898042206&liveId=7318296342189919011&from=share&style=share&enter_method=click_share&roomId=7318296342189919011&activity_info={}',         \"6i- Q@x.Sl 03/23 【醒子8ke的直播间】  点击打开👉https://v.douyin.com/i8tBR7hX/  或长按复制此条消息，打开抖音，看TA直播\",         \"https://v.douyin.com/i8tBR7hX/\",         ] } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_webcast_id_api_v1_douyin_web_get_all_webcast_id_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'request_body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_webcast_id_api_v1_douyin_web_get_all_webcast_id_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/get_all_webcast_id', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_webcast_id_api_v1_douyin_web_get_all_webcast_id_post_0(self, **kwargs):  # noqa: E501
        """提取列表直播间号/Extract list webcast id  # noqa: E501

        # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接列表（最多支持20个链接） ### 返回: - 直播间号列表  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link list (supports up to 20 links) ### Return: - Room id list  # [示例/Example] ```json {   \"urls\": [         \"https://live.douyin.com/775841227732\",         \"https://live.douyin.com/775841227732?room_id=7318296342189919011&enter_from_merge=web_share_link&enter_method=web_share_link&previous_page=app_code_link\",         'https://webcast.amemv.com/douyin/webcast/reflow/7318296342189919011?u_code=l1j9bkbd&did=MS4wLjABAAAAEs86TBQPNwAo-RGrcxWyCdwKhI66AK3Pqf3ieo6HaxI&iid=MS4wLjABAAAA0ptpM-zzoliLEeyvWOCUt-_dQza4uSjlIvbtIazXnCY&with_sec_did=1&use_link_command=1&ecom_share_track_params=&extra_params={\"from_request_id\":\"20231230162057EC005772A8EAA0199906\",\"im_channel_invite_id\":\"0\"}&user_id=3644207898042206&liveId=7318296342189919011&from=share&style=share&enter_method=click_share&roomId=7318296342189919011&activity_info={}',         \"6i- Q@x.Sl 03/23 【醒子8ke的直播间】  点击打开👉https://v.douyin.com/i8tBR7hX/  或长按复制此条消息，打开抖音，看TA直播\",         \"https://v.douyin.com/i8tBR7hX/\",         ] } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_webcast_id_api_v1_douyin_web_get_all_webcast_id_post_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_webcast_id_api_v1_douyin_web_get_all_webcast_id_post_0_with_http_info(**kwargs)  # noqa: E501

    def get_all_webcast_id_api_v1_douyin_web_get_all_webcast_id_post_0_with_http_info(self, **kwargs):  # noqa: E501
        """提取列表直播间号/Extract list webcast id  # noqa: E501

        # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接列表（最多支持20个链接） ### 返回: - 直播间号列表  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link list (supports up to 20 links) ### Return: - Room id list  # [示例/Example] ```json {   \"urls\": [         \"https://live.douyin.com/775841227732\",         \"https://live.douyin.com/775841227732?room_id=7318296342189919011&enter_from_merge=web_share_link&enter_method=web_share_link&previous_page=app_code_link\",         'https://webcast.amemv.com/douyin/webcast/reflow/7318296342189919011?u_code=l1j9bkbd&did=MS4wLjABAAAAEs86TBQPNwAo-RGrcxWyCdwKhI66AK3Pqf3ieo6HaxI&iid=MS4wLjABAAAA0ptpM-zzoliLEeyvWOCUt-_dQza4uSjlIvbtIazXnCY&with_sec_did=1&use_link_command=1&ecom_share_track_params=&extra_params={\"from_request_id\":\"20231230162057EC005772A8EAA0199906\",\"im_channel_invite_id\":\"0\"}&user_id=3644207898042206&liveId=7318296342189919011&from=share&style=share&enter_method=click_share&roomId=7318296342189919011&activity_info={}',         \"6i- Q@x.Sl 03/23 【醒子8ke的直播间】  点击打开👉https://v.douyin.com/i8tBR7hX/  或长按复制此条消息，打开抖音，看TA直播\",         \"https://v.douyin.com/i8tBR7hX/\",         ] } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_webcast_id_api_v1_douyin_web_get_all_webcast_id_post_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'request_body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_webcast_id_api_v1_douyin_web_get_all_webcast_id_post_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/get_all_webcast_id', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aweme_id_api_v1_douyin_web_get_aweme_id_get(self, url, **kwargs):  # noqa: E501
        """提取单个作品id/Extract single video id  # noqa: E501

        # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.douyin.com/video/7298145681699622182\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aweme_id_api_v1_douyin_web_get_aweme_id_get(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_aweme_id_api_v1_douyin_web_get_aweme_id_get_with_http_info(url, **kwargs)  # noqa: E501

    def get_aweme_id_api_v1_douyin_web_get_aweme_id_get_with_http_info(self, url, **kwargs):  # noqa: E501
        """提取单个作品id/Extract single video id  # noqa: E501

        # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.douyin.com/video/7298145681699622182\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aweme_id_api_v1_douyin_web_get_aweme_id_get_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aweme_id_api_v1_douyin_web_get_aweme_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `get_aweme_id_api_v1_douyin_web_get_aweme_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/get_aweme_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aweme_id_api_v1_douyin_web_get_aweme_id_get_0(self, url, **kwargs):  # noqa: E501
        """提取单个作品id/Extract single video id  # noqa: E501

        # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.douyin.com/video/7298145681699622182\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aweme_id_api_v1_douyin_web_get_aweme_id_get_0(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_aweme_id_api_v1_douyin_web_get_aweme_id_get_0_with_http_info(url, **kwargs)  # noqa: E501

    def get_aweme_id_api_v1_douyin_web_get_aweme_id_get_0_with_http_info(self, url, **kwargs):  # noqa: E501
        """提取单个作品id/Extract single video id  # noqa: E501

        # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.douyin.com/video/7298145681699622182\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aweme_id_api_v1_douyin_web_get_aweme_id_get_0_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aweme_id_api_v1_douyin_web_get_aweme_id_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `get_aweme_id_api_v1_douyin_web_get_aweme_id_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/get_aweme_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sec_user_id_api_v1_douyin_web_get_sec_user_id_get(self, url, **kwargs):  # noqa: E501
        """提取单个用户id/Extract single user id  # noqa: E501

        # [中文] ### 用途: - 提取单个用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户sec_user_id  # [English] ### Purpose: - Extract single user id ### Parameters: - url: User homepage link ### Return: - User sec_user_id  # [示例/Example] url = \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sec_user_id_api_v1_douyin_web_get_sec_user_id_get(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_sec_user_id_api_v1_douyin_web_get_sec_user_id_get_with_http_info(url, **kwargs)  # noqa: E501

    def get_sec_user_id_api_v1_douyin_web_get_sec_user_id_get_with_http_info(self, url, **kwargs):  # noqa: E501
        """提取单个用户id/Extract single user id  # noqa: E501

        # [中文] ### 用途: - 提取单个用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户sec_user_id  # [English] ### Purpose: - Extract single user id ### Parameters: - url: User homepage link ### Return: - User sec_user_id  # [示例/Example] url = \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sec_user_id_api_v1_douyin_web_get_sec_user_id_get_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sec_user_id_api_v1_douyin_web_get_sec_user_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `get_sec_user_id_api_v1_douyin_web_get_sec_user_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/get_sec_user_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sec_user_id_api_v1_douyin_web_get_sec_user_id_get_0(self, url, **kwargs):  # noqa: E501
        """提取单个用户id/Extract single user id  # noqa: E501

        # [中文] ### 用途: - 提取单个用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户sec_user_id  # [English] ### Purpose: - Extract single user id ### Parameters: - url: User homepage link ### Return: - User sec_user_id  # [示例/Example] url = \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sec_user_id_api_v1_douyin_web_get_sec_user_id_get_0(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_sec_user_id_api_v1_douyin_web_get_sec_user_id_get_0_with_http_info(url, **kwargs)  # noqa: E501

    def get_sec_user_id_api_v1_douyin_web_get_sec_user_id_get_0_with_http_info(self, url, **kwargs):  # noqa: E501
        """提取单个用户id/Extract single user id  # noqa: E501

        # [中文] ### 用途: - 提取单个用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户sec_user_id  # [English] ### Purpose: - Extract single user id ### Parameters: - url: User homepage link ### Return: - User sec_user_id  # [示例/Example] url = \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sec_user_id_api_v1_douyin_web_get_sec_user_id_get_0_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sec_user_id_api_v1_douyin_web_get_sec_user_id_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `get_sec_user_id_api_v1_douyin_web_get_sec_user_id_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/get_sec_user_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_webcast_id_api_v1_douyin_web_get_webcast_id_get(self, url, **kwargs):  # noqa: E501
        """提取直播间号/Extract webcast id  # noqa: E501

        # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接 ### 返回: - 直播间号  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link ### Return: - Room id  # [示例/Example] url = \"https://live.douyin.com/775841227732\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_webcast_id_api_v1_douyin_web_get_webcast_id_get(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_webcast_id_api_v1_douyin_web_get_webcast_id_get_with_http_info(url, **kwargs)  # noqa: E501

    def get_webcast_id_api_v1_douyin_web_get_webcast_id_get_with_http_info(self, url, **kwargs):  # noqa: E501
        """提取直播间号/Extract webcast id  # noqa: E501

        # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接 ### 返回: - 直播间号  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link ### Return: - Room id  # [示例/Example] url = \"https://live.douyin.com/775841227732\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_webcast_id_api_v1_douyin_web_get_webcast_id_get_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_webcast_id_api_v1_douyin_web_get_webcast_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `get_webcast_id_api_v1_douyin_web_get_webcast_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/get_webcast_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_webcast_id_api_v1_douyin_web_get_webcast_id_get_0(self, url, **kwargs):  # noqa: E501
        """提取直播间号/Extract webcast id  # noqa: E501

        # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接 ### 返回: - 直播间号  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link ### Return: - Room id  # [示例/Example] url = \"https://live.douyin.com/775841227732\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_webcast_id_api_v1_douyin_web_get_webcast_id_get_0(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_webcast_id_api_v1_douyin_web_get_webcast_id_get_0_with_http_info(url, **kwargs)  # noqa: E501

    def get_webcast_id_api_v1_douyin_web_get_webcast_id_get_0_with_http_info(self, url, **kwargs):  # noqa: E501
        """提取直播间号/Extract webcast id  # noqa: E501

        # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接 ### 返回: - 直播间号  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link ### Return: - Room id  # [示例/Example] url = \"https://live.douyin.com/775841227732\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_webcast_id_api_v1_douyin_web_get_webcast_id_get_0_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_webcast_id_api_v1_douyin_web_get_webcast_id_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `get_webcast_id_api_v1_douyin_web_get_webcast_id_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/get_webcast_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def handler_user_profile_api_v1_douyin_web_handler_user_profile_get(self, sec_user_id, **kwargs):  # noqa: E501
        """根据sec_user_id获取指定用户的信息/Get information of specified user by sec_user_id  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.handler_user_profile_api_v1_douyin_web_handler_user_profile_get(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.handler_user_profile_api_v1_douyin_web_handler_user_profile_get_with_http_info(sec_user_id, **kwargs)  # noqa: E501

    def handler_user_profile_api_v1_douyin_web_handler_user_profile_get_with_http_info(self, sec_user_id, **kwargs):  # noqa: E501
        """根据sec_user_id获取指定用户的信息/Get information of specified user by sec_user_id  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.handler_user_profile_api_v1_douyin_web_handler_user_profile_get_with_http_info(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method handler_user_profile_api_v1_douyin_web_handler_user_profile_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_user_id' is set
        if self.api_client.client_side_validation and ('sec_user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_user_id` when calling `handler_user_profile_api_v1_douyin_web_handler_user_profile_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_user_id' in local_var_params and local_var_params['sec_user_id'] is not None:  # noqa: E501
            query_params.append(('sec_user_id', local_var_params['sec_user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/handler_user_profile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def handler_user_profile_api_v1_douyin_web_handler_user_profile_get_0(self, sec_user_id, **kwargs):  # noqa: E501
        """根据sec_user_id获取指定用户的信息/Get information of specified user by sec_user_id  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.handler_user_profile_api_v1_douyin_web_handler_user_profile_get_0(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.handler_user_profile_api_v1_douyin_web_handler_user_profile_get_0_with_http_info(sec_user_id, **kwargs)  # noqa: E501

    def handler_user_profile_api_v1_douyin_web_handler_user_profile_get_0_with_http_info(self, sec_user_id, **kwargs):  # noqa: E501
        """根据sec_user_id获取指定用户的信息/Get information of specified user by sec_user_id  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.handler_user_profile_api_v1_douyin_web_handler_user_profile_get_0_with_http_info(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method handler_user_profile_api_v1_douyin_web_handler_user_profile_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_user_id' is set
        if self.api_client.client_side_validation and ('sec_user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_user_id` when calling `handler_user_profile_api_v1_douyin_web_handler_user_profile_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_user_id' in local_var_params and local_var_params['sec_user_id'] is not None:  # noqa: E501
            query_params.append(('sec_user_id', local_var_params['sec_user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/handler_user_profile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def handler_user_profile_v2_api_v1_douyin_web_handler_user_profile_v2_get(self, unique_id, **kwargs):  # noqa: E501
        """根据抖音号获取指定用户的信息/Get information of specified user by unique_id  # noqa: E501

        # [中文] ### 用途: - 根据抖音号获取指定用户的信息 ### 参数: - unique_id: 用户unique_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - unique_id: User unique_id ### Return: - User information  # [示例/Example] unique_id = \"TheChief\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.handler_user_profile_v2_api_v1_douyin_web_handler_user_profile_v2_get(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str unique_id: 用户unique_id/User unique_id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.handler_user_profile_v2_api_v1_douyin_web_handler_user_profile_v2_get_with_http_info(unique_id, **kwargs)  # noqa: E501

    def handler_user_profile_v2_api_v1_douyin_web_handler_user_profile_v2_get_with_http_info(self, unique_id, **kwargs):  # noqa: E501
        """根据抖音号获取指定用户的信息/Get information of specified user by unique_id  # noqa: E501

        # [中文] ### 用途: - 根据抖音号获取指定用户的信息 ### 参数: - unique_id: 用户unique_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - unique_id: User unique_id ### Return: - User information  # [示例/Example] unique_id = \"TheChief\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.handler_user_profile_v2_api_v1_douyin_web_handler_user_profile_v2_get_with_http_info(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str unique_id: 用户unique_id/User unique_id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'unique_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method handler_user_profile_v2_api_v1_douyin_web_handler_user_profile_v2_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'unique_id' is set
        if self.api_client.client_side_validation and ('unique_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['unique_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `unique_id` when calling `handler_user_profile_v2_api_v1_douyin_web_handler_user_profile_v2_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'unique_id' in local_var_params and local_var_params['unique_id'] is not None:  # noqa: E501
            query_params.append(('unique_id', local_var_params['unique_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/handler_user_profile_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def handler_user_profile_v2_api_v1_douyin_web_handler_user_profile_v2_get_0(self, unique_id, **kwargs):  # noqa: E501
        """根据抖音号获取指定用户的信息/Get information of specified user by unique_id  # noqa: E501

        # [中文] ### 用途: - 根据抖音号获取指定用户的信息 ### 参数: - unique_id: 用户unique_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - unique_id: User unique_id ### Return: - User information  # [示例/Example] unique_id = \"TheChief\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.handler_user_profile_v2_api_v1_douyin_web_handler_user_profile_v2_get_0(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str unique_id: 用户unique_id/User unique_id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.handler_user_profile_v2_api_v1_douyin_web_handler_user_profile_v2_get_0_with_http_info(unique_id, **kwargs)  # noqa: E501

    def handler_user_profile_v2_api_v1_douyin_web_handler_user_profile_v2_get_0_with_http_info(self, unique_id, **kwargs):  # noqa: E501
        """根据抖音号获取指定用户的信息/Get information of specified user by unique_id  # noqa: E501

        # [中文] ### 用途: - 根据抖音号获取指定用户的信息 ### 参数: - unique_id: 用户unique_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - unique_id: User unique_id ### Return: - User information  # [示例/Example] unique_id = \"TheChief\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.handler_user_profile_v2_api_v1_douyin_web_handler_user_profile_v2_get_0_with_http_info(unique_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str unique_id: 用户unique_id/User unique_id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'unique_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method handler_user_profile_v2_api_v1_douyin_web_handler_user_profile_v2_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'unique_id' is set
        if self.api_client.client_side_validation and ('unique_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['unique_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `unique_id` when calling `handler_user_profile_v2_api_v1_douyin_web_handler_user_profile_v2_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'unique_id' in local_var_params and local_var_params['unique_id'] is not None:  # noqa: E501
            query_params.append(('unique_id', local_var_params['unique_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/handler_user_profile_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def handler_user_profile_v3_api_v1_douyin_web_handler_user_profile_v3_get(self, uid, **kwargs):  # noqa: E501
        """根据抖音uid获取指定用户的信息/Get information of specified user by uid  # noqa: E501

        # [中文] ### 用途: - 根据抖音uid获取指定用户的信息 ### 参数: - uid: 用户uid，也就是抖音号的short_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - uid: User uid, which is the short_id of the Douyin number ### Return: - User information  # [示例/Example] uid = \"1673937488185292\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.handler_user_profile_v3_api_v1_douyin_web_handler_user_profile_v3_get(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户uid(short_id)/User uid(short_id) (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.handler_user_profile_v3_api_v1_douyin_web_handler_user_profile_v3_get_with_http_info(uid, **kwargs)  # noqa: E501

    def handler_user_profile_v3_api_v1_douyin_web_handler_user_profile_v3_get_with_http_info(self, uid, **kwargs):  # noqa: E501
        """根据抖音uid获取指定用户的信息/Get information of specified user by uid  # noqa: E501

        # [中文] ### 用途: - 根据抖音uid获取指定用户的信息 ### 参数: - uid: 用户uid，也就是抖音号的short_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - uid: User uid, which is the short_id of the Douyin number ### Return: - User information  # [示例/Example] uid = \"1673937488185292\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.handler_user_profile_v3_api_v1_douyin_web_handler_user_profile_v3_get_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户uid(short_id)/User uid(short_id) (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method handler_user_profile_v3_api_v1_douyin_web_handler_user_profile_v3_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uid` when calling `handler_user_profile_v3_api_v1_douyin_web_handler_user_profile_v3_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in local_var_params and local_var_params['uid'] is not None:  # noqa: E501
            query_params.append(('uid', local_var_params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/handler_user_profile_v3', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def handler_user_profile_v3_api_v1_douyin_web_handler_user_profile_v3_get_0(self, uid, **kwargs):  # noqa: E501
        """根据抖音uid获取指定用户的信息/Get information of specified user by uid  # noqa: E501

        # [中文] ### 用途: - 根据抖音uid获取指定用户的信息 ### 参数: - uid: 用户uid，也就是抖音号的short_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - uid: User uid, which is the short_id of the Douyin number ### Return: - User information  # [示例/Example] uid = \"1673937488185292\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.handler_user_profile_v3_api_v1_douyin_web_handler_user_profile_v3_get_0(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户uid(short_id)/User uid(short_id) (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.handler_user_profile_v3_api_v1_douyin_web_handler_user_profile_v3_get_0_with_http_info(uid, **kwargs)  # noqa: E501

    def handler_user_profile_v3_api_v1_douyin_web_handler_user_profile_v3_get_0_with_http_info(self, uid, **kwargs):  # noqa: E501
        """根据抖音uid获取指定用户的信息/Get information of specified user by uid  # noqa: E501

        # [中文] ### 用途: - 根据抖音uid获取指定用户的信息 ### 参数: - uid: 用户uid，也就是抖音号的short_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - uid: User uid, which is the short_id of the Douyin number ### Return: - User information  # [示例/Example] uid = \"1673937488185292\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.handler_user_profile_v3_api_v1_douyin_web_handler_user_profile_v3_get_0_with_http_info(uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uid: 用户uid(short_id)/User uid(short_id) (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method handler_user_profile_v3_api_v1_douyin_web_handler_user_profile_v3_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uid' is set
        if self.api_client.client_side_validation and ('uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uid` when calling `handler_user_profile_v3_api_v1_douyin_web_handler_user_profile_v3_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uid' in local_var_params and local_var_params['uid'] is not None:  # noqa: E501
            query_params.append(('uid', local_var_params['uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/handler_user_profile_v3', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def handler_user_profile_v4_api_v1_douyin_web_handler_user_profile_v4_get(self, sec_user_id, **kwargs):  # noqa: E501
        """根据sec_user_id获取指定用户的信息（性别，年龄，直播等级、牌子）/Get information of specified user by sec_user_id (gender, age, live level、brand)  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息，包含性别，年龄，直播等级，直播间牌子 ### 说明： - 性别：1为男，2为女，0为未知，在live_user字段中。 - 年龄：在user字段中，-1为未知。  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information, including gender, age, live level, live room brand ### Description: - gender: 1 male, 2 female, 0 unknown, in the live_user field. - age: in the user field, -1 unknown.  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.handler_user_profile_v4_api_v1_douyin_web_handler_user_profile_v4_get(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.handler_user_profile_v4_api_v1_douyin_web_handler_user_profile_v4_get_with_http_info(sec_user_id, **kwargs)  # noqa: E501

    def handler_user_profile_v4_api_v1_douyin_web_handler_user_profile_v4_get_with_http_info(self, sec_user_id, **kwargs):  # noqa: E501
        """根据sec_user_id获取指定用户的信息（性别，年龄，直播等级、牌子）/Get information of specified user by sec_user_id (gender, age, live level、brand)  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息，包含性别，年龄，直播等级，直播间牌子 ### 说明： - 性别：1为男，2为女，0为未知，在live_user字段中。 - 年龄：在user字段中，-1为未知。  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information, including gender, age, live level, live room brand ### Description: - gender: 1 male, 2 female, 0 unknown, in the live_user field. - age: in the user field, -1 unknown.  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.handler_user_profile_v4_api_v1_douyin_web_handler_user_profile_v4_get_with_http_info(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method handler_user_profile_v4_api_v1_douyin_web_handler_user_profile_v4_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_user_id' is set
        if self.api_client.client_side_validation and ('sec_user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_user_id` when calling `handler_user_profile_v4_api_v1_douyin_web_handler_user_profile_v4_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_user_id' in local_var_params and local_var_params['sec_user_id'] is not None:  # noqa: E501
            query_params.append(('sec_user_id', local_var_params['sec_user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/handler_user_profile_v4', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def handler_user_profile_v4_api_v1_douyin_web_handler_user_profile_v4_get_0(self, sec_user_id, **kwargs):  # noqa: E501
        """根据sec_user_id获取指定用户的信息（性别，年龄，直播等级、牌子）/Get information of specified user by sec_user_id (gender, age, live level、brand)  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息，包含性别，年龄，直播等级，直播间牌子 ### 说明： - 性别：1为男，2为女，0为未知，在live_user字段中。 - 年龄：在user字段中，-1为未知。  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information, including gender, age, live level, live room brand ### Description: - gender: 1 male, 2 female, 0 unknown, in the live_user field. - age: in the user field, -1 unknown.  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.handler_user_profile_v4_api_v1_douyin_web_handler_user_profile_v4_get_0(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.handler_user_profile_v4_api_v1_douyin_web_handler_user_profile_v4_get_0_with_http_info(sec_user_id, **kwargs)  # noqa: E501

    def handler_user_profile_v4_api_v1_douyin_web_handler_user_profile_v4_get_0_with_http_info(self, sec_user_id, **kwargs):  # noqa: E501
        """根据sec_user_id获取指定用户的信息（性别，年龄，直播等级、牌子）/Get information of specified user by sec_user_id (gender, age, live level、brand)  # noqa: E501

        # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息，包含性别，年龄，直播等级，直播间牌子 ### 说明： - 性别：1为男，2为女，0为未知，在live_user字段中。 - 年龄：在user字段中，-1为未知。  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information, including gender, age, live level, live room brand ### Description: - gender: 1 male, 2 female, 0 unknown, in the live_user field. - age: in the user field, -1 unknown.  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.handler_user_profile_v4_api_v1_douyin_web_handler_user_profile_v4_get_0_with_http_info(sec_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_user_id: 用户sec_user_id/User sec_user_id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method handler_user_profile_v4_api_v1_douyin_web_handler_user_profile_v4_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_user_id' is set
        if self.api_client.client_side_validation and ('sec_user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_user_id` when calling `handler_user_profile_v4_api_v1_douyin_web_handler_user_profile_v4_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_user_id' in local_var_params and local_var_params['sec_user_id'] is not None:  # noqa: E501
            query_params.append(('sec_user_id', local_var_params['sec_user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/handler_user_profile_v4', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webcast_id2_room_id_api_v1_douyin_web_webcast_id2_room_id_get(self, webcast_id, **kwargs):  # noqa: E501
        """直播间号转房间号/Webcast id to room id  # noqa: E501

        # [中文] ### 用途: - 直播间号转房间号 ### 参数: - webcast_id: 直播间号 ### 返回: - 房间号  # [English] ### Purpose: - Webcast id to room id ### Parameters: - webcast_id: Webcast id ### Return: - Room id  # [示例/Example] \"webcast_id = \"775841227732\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webcast_id2_room_id_api_v1_douyin_web_webcast_id2_room_id_get(webcast_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str webcast_id: 直播间号/Webcast id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.webcast_id2_room_id_api_v1_douyin_web_webcast_id2_room_id_get_with_http_info(webcast_id, **kwargs)  # noqa: E501

    def webcast_id2_room_id_api_v1_douyin_web_webcast_id2_room_id_get_with_http_info(self, webcast_id, **kwargs):  # noqa: E501
        """直播间号转房间号/Webcast id to room id  # noqa: E501

        # [中文] ### 用途: - 直播间号转房间号 ### 参数: - webcast_id: 直播间号 ### 返回: - 房间号  # [English] ### Purpose: - Webcast id to room id ### Parameters: - webcast_id: Webcast id ### Return: - Room id  # [示例/Example] \"webcast_id = \"775841227732\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webcast_id2_room_id_api_v1_douyin_web_webcast_id2_room_id_get_with_http_info(webcast_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str webcast_id: 直播间号/Webcast id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'webcast_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webcast_id2_room_id_api_v1_douyin_web_webcast_id2_room_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'webcast_id' is set
        if self.api_client.client_side_validation and ('webcast_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['webcast_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `webcast_id` when calling `webcast_id2_room_id_api_v1_douyin_web_webcast_id2_room_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'webcast_id' in local_var_params and local_var_params['webcast_id'] is not None:  # noqa: E501
            query_params.append(('webcast_id', local_var_params['webcast_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/webcast_id_2_room_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webcast_id2_room_id_api_v1_douyin_web_webcast_id2_room_id_get_0(self, webcast_id, **kwargs):  # noqa: E501
        """直播间号转房间号/Webcast id to room id  # noqa: E501

        # [中文] ### 用途: - 直播间号转房间号 ### 参数: - webcast_id: 直播间号 ### 返回: - 房间号  # [English] ### Purpose: - Webcast id to room id ### Parameters: - webcast_id: Webcast id ### Return: - Room id  # [示例/Example] \"webcast_id = \"775841227732\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webcast_id2_room_id_api_v1_douyin_web_webcast_id2_room_id_get_0(webcast_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str webcast_id: 直播间号/Webcast id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.webcast_id2_room_id_api_v1_douyin_web_webcast_id2_room_id_get_0_with_http_info(webcast_id, **kwargs)  # noqa: E501

    def webcast_id2_room_id_api_v1_douyin_web_webcast_id2_room_id_get_0_with_http_info(self, webcast_id, **kwargs):  # noqa: E501
        """直播间号转房间号/Webcast id to room id  # noqa: E501

        # [中文] ### 用途: - 直播间号转房间号 ### 参数: - webcast_id: 直播间号 ### 返回: - 房间号  # [English] ### Purpose: - Webcast id to room id ### Parameters: - webcast_id: Webcast id ### Return: - Room id  # [示例/Example] \"webcast_id = \"775841227732\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webcast_id2_room_id_api_v1_douyin_web_webcast_id2_room_id_get_0_with_http_info(webcast_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str webcast_id: 直播间号/Webcast id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'webcast_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webcast_id2_room_id_api_v1_douyin_web_webcast_id2_room_id_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'webcast_id' is set
        if self.api_client.client_side_validation and ('webcast_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['webcast_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `webcast_id` when calling `webcast_id2_room_id_api_v1_douyin_web_webcast_id2_room_id_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'webcast_id' in local_var_params and local_var_params['webcast_id'] is not None:  # noqa: E501
            query_params.append(('webcast_id', local_var_params['webcast_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/douyin/web/webcast_id_2_room_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
