# coding: utf-8

"""
    TikHub.io - Your Ultimate Social Media Data & API Marketplace

    High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tikhub_sdk_v2.api_client import ApiClient
from tikhub_sdk_v2.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class TikTokWebAPIApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def douyin_live_room_api_v1_tiktok_web_tiktok_live_room_get(self, live_room_url, danmaku_type, **kwargs):  # noqa: E501
        """提取直播间弹幕/Extract live room danmaku  # noqa: E501

        # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastChatMessage: 聊天消息     - WebcastMemberMessage: 成员消息     - WebcastRoomUserSeqMessage: 用户序列消息     - WebcastGiftMessage: 礼物消息     - WebcastSocialMessage: 社交消息     - WebcastLikeMessage: 点赞消息     - WebcastLinkMicFanTicketMethod: 连麦粉丝票方法     - WebcastLinkMicMethod: 连麦方法 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discount. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastChatMessage: Chat message     - WebcastMemberMessage: Member message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastLikeMessage: Like message     - WebcastLinkMicFanTicketMethod: Link Mic Fan Ticket Method     - WebcastLinkMicMethod: Link Mic Method ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.douyin_live_room_api_v1_tiktok_web_tiktok_live_room_get(live_room_url, danmaku_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str live_room_url: 直播间链接/Live room link (required)
        :param str danmaku_type: 消息类型/Message type (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.douyin_live_room_api_v1_tiktok_web_tiktok_live_room_get_with_http_info(live_room_url, danmaku_type, **kwargs)  # noqa: E501

    def douyin_live_room_api_v1_tiktok_web_tiktok_live_room_get_with_http_info(self, live_room_url, danmaku_type, **kwargs):  # noqa: E501
        """提取直播间弹幕/Extract live room danmaku  # noqa: E501

        # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastChatMessage: 聊天消息     - WebcastMemberMessage: 成员消息     - WebcastRoomUserSeqMessage: 用户序列消息     - WebcastGiftMessage: 礼物消息     - WebcastSocialMessage: 社交消息     - WebcastLikeMessage: 点赞消息     - WebcastLinkMicFanTicketMethod: 连麦粉丝票方法     - WebcastLinkMicMethod: 连麦方法 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discount. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastChatMessage: Chat message     - WebcastMemberMessage: Member message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastLikeMessage: Like message     - WebcastLinkMicFanTicketMethod: Link Mic Fan Ticket Method     - WebcastLinkMicMethod: Link Mic Method ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.douyin_live_room_api_v1_tiktok_web_tiktok_live_room_get_with_http_info(live_room_url, danmaku_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str live_room_url: 直播间链接/Live room link (required)
        :param str danmaku_type: 消息类型/Message type (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'live_room_url',
            'danmaku_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method douyin_live_room_api_v1_tiktok_web_tiktok_live_room_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'live_room_url' is set
        if self.api_client.client_side_validation and ('live_room_url' not in local_var_params or  # noqa: E501
                                                        local_var_params['live_room_url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `live_room_url` when calling `douyin_live_room_api_v1_tiktok_web_tiktok_live_room_get`")  # noqa: E501
        # verify the required parameter 'danmaku_type' is set
        if self.api_client.client_side_validation and ('danmaku_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['danmaku_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `danmaku_type` when calling `douyin_live_room_api_v1_tiktok_web_tiktok_live_room_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'live_room_url' in local_var_params and local_var_params['live_room_url'] is not None:  # noqa: E501
            query_params.append(('live_room_url', local_var_params['live_room_url']))  # noqa: E501
        if 'danmaku_type' in local_var_params and local_var_params['danmaku_type'] is not None:  # noqa: E501
            query_params.append(('danmaku_type', local_var_params['danmaku_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/tiktok_live_room', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def douyin_live_room_api_v1_tiktok_web_tiktok_live_room_get_0(self, live_room_url, danmaku_type, **kwargs):  # noqa: E501
        """提取直播间弹幕/Extract live room danmaku  # noqa: E501

        # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastChatMessage: 聊天消息     - WebcastMemberMessage: 成员消息     - WebcastRoomUserSeqMessage: 用户序列消息     - WebcastGiftMessage: 礼物消息     - WebcastSocialMessage: 社交消息     - WebcastLikeMessage: 点赞消息     - WebcastLinkMicFanTicketMethod: 连麦粉丝票方法     - WebcastLinkMicMethod: 连麦方法 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discount. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastChatMessage: Chat message     - WebcastMemberMessage: Member message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastLikeMessage: Like message     - WebcastLinkMicFanTicketMethod: Link Mic Fan Ticket Method     - WebcastLinkMicMethod: Link Mic Method ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.douyin_live_room_api_v1_tiktok_web_tiktok_live_room_get_0(live_room_url, danmaku_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str live_room_url: 直播间链接/Live room link (required)
        :param str danmaku_type: 消息类型/Message type (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.douyin_live_room_api_v1_tiktok_web_tiktok_live_room_get_0_with_http_info(live_room_url, danmaku_type, **kwargs)  # noqa: E501

    def douyin_live_room_api_v1_tiktok_web_tiktok_live_room_get_0_with_http_info(self, live_room_url, danmaku_type, **kwargs):  # noqa: E501
        """提取直播间弹幕/Extract live room danmaku  # noqa: E501

        # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastChatMessage: 聊天消息     - WebcastMemberMessage: 成员消息     - WebcastRoomUserSeqMessage: 用户序列消息     - WebcastGiftMessage: 礼物消息     - WebcastSocialMessage: 社交消息     - WebcastLikeMessage: 点赞消息     - WebcastLinkMicFanTicketMethod: 连麦粉丝票方法     - WebcastLinkMicMethod: 连麦方法 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discount. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastChatMessage: Chat message     - WebcastMemberMessage: Member message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastLikeMessage: Like message     - WebcastLinkMicFanTicketMethod: Link Mic Fan Ticket Method     - WebcastLinkMicMethod: Link Mic Method ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.douyin_live_room_api_v1_tiktok_web_tiktok_live_room_get_0_with_http_info(live_room_url, danmaku_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str live_room_url: 直播间链接/Live room link (required)
        :param str danmaku_type: 消息类型/Message type (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'live_room_url',
            'danmaku_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method douyin_live_room_api_v1_tiktok_web_tiktok_live_room_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'live_room_url' is set
        if self.api_client.client_side_validation and ('live_room_url' not in local_var_params or  # noqa: E501
                                                        local_var_params['live_room_url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `live_room_url` when calling `douyin_live_room_api_v1_tiktok_web_tiktok_live_room_get_0`")  # noqa: E501
        # verify the required parameter 'danmaku_type' is set
        if self.api_client.client_side_validation and ('danmaku_type' not in local_var_params or  # noqa: E501
                                                        local_var_params['danmaku_type'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `danmaku_type` when calling `douyin_live_room_api_v1_tiktok_web_tiktok_live_room_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'live_room_url' in local_var_params and local_var_params['live_room_url'] is not None:  # noqa: E501
            query_params.append(('live_room_url', local_var_params['live_room_url']))  # noqa: E501
        if 'danmaku_type' in local_var_params and local_var_params['danmaku_type'] is not None:  # noqa: E501
            query_params.append(('danmaku_type', local_var_params['danmaku_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/tiktok_live_room', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_check_live_alive_api_v1_tiktok_web_fetch_check_live_alive_get(self, room_id, **kwargs):  # noqa: E501
        """直播间开播状态检测/Live room start status check  # noqa: E501

        # [中文] ### 用途: - 直播间开播状态检测 - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - room_id: 直播间ID ### 返回: - 直播间开播状态  # [English] ### Purpose: - Live room start status check - If the current live room does not exist or has ended, it will return empty. ### Parameters: - room_id: Live room ID ### Return: - Live room start status  # [示例/Example] room_id = \"7381444193462078214\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_check_live_alive_api_v1_tiktok_web_fetch_check_live_alive_get(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间ID/Live room ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_check_live_alive_api_v1_tiktok_web_fetch_check_live_alive_get_with_http_info(room_id, **kwargs)  # noqa: E501

    def fetch_check_live_alive_api_v1_tiktok_web_fetch_check_live_alive_get_with_http_info(self, room_id, **kwargs):  # noqa: E501
        """直播间开播状态检测/Live room start status check  # noqa: E501

        # [中文] ### 用途: - 直播间开播状态检测 - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - room_id: 直播间ID ### 返回: - 直播间开播状态  # [English] ### Purpose: - Live room start status check - If the current live room does not exist or has ended, it will return empty. ### Parameters: - room_id: Live room ID ### Return: - Live room start status  # [示例/Example] room_id = \"7381444193462078214\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_check_live_alive_api_v1_tiktok_web_fetch_check_live_alive_get_with_http_info(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间ID/Live room ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'room_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_check_live_alive_api_v1_tiktok_web_fetch_check_live_alive_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'room_id' is set
        if self.api_client.client_side_validation and ('room_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['room_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `room_id` when calling `fetch_check_live_alive_api_v1_tiktok_web_fetch_check_live_alive_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'room_id' in local_var_params and local_var_params['room_id'] is not None:  # noqa: E501
            query_params.append(('room_id', local_var_params['room_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_check_live_alive', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_check_live_alive_api_v1_tiktok_web_fetch_check_live_alive_get_0(self, room_id, **kwargs):  # noqa: E501
        """直播间开播状态检测/Live room start status check  # noqa: E501

        # [中文] ### 用途: - 直播间开播状态检测 - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - room_id: 直播间ID ### 返回: - 直播间开播状态  # [English] ### Purpose: - Live room start status check - If the current live room does not exist or has ended, it will return empty. ### Parameters: - room_id: Live room ID ### Return: - Live room start status  # [示例/Example] room_id = \"7381444193462078214\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_check_live_alive_api_v1_tiktok_web_fetch_check_live_alive_get_0(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间ID/Live room ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_check_live_alive_api_v1_tiktok_web_fetch_check_live_alive_get_0_with_http_info(room_id, **kwargs)  # noqa: E501

    def fetch_check_live_alive_api_v1_tiktok_web_fetch_check_live_alive_get_0_with_http_info(self, room_id, **kwargs):  # noqa: E501
        """直播间开播状态检测/Live room start status check  # noqa: E501

        # [中文] ### 用途: - 直播间开播状态检测 - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - room_id: 直播间ID ### 返回: - 直播间开播状态  # [English] ### Purpose: - Live room start status check - If the current live room does not exist or has ended, it will return empty. ### Parameters: - room_id: Live room ID ### Return: - Live room start status  # [示例/Example] room_id = \"7381444193462078214\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_check_live_alive_api_v1_tiktok_web_fetch_check_live_alive_get_0_with_http_info(room_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str room_id: 直播间ID/Live room ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'room_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_check_live_alive_api_v1_tiktok_web_fetch_check_live_alive_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'room_id' is set
        if self.api_client.client_side_validation and ('room_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['room_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `room_id` when calling `fetch_check_live_alive_api_v1_tiktok_web_fetch_check_live_alive_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'room_id' in local_var_params and local_var_params['room_id'] is not None:  # noqa: E501
            query_params.append(('room_id', local_var_params['room_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_check_live_alive', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_explore_post_api_v1_tiktok_web_fetch_explore_post_get(self, **kwargs):  # noqa: E501
        """获取探索作品数据/Get explore video data  # noqa: E501

        # [中文] ### 用途: - 获取探索作品数据 ### 参数: - categoryType: 作品分类     - 100: 动画与漫画     - 101: 表演     - 102: 美容护理     - 103: 游戏     - 104: 喜剧     - 105: 日常生活     - 106: 家庭     - 107: 情感关系     - 108: 戏剧     - 109: 穿搭     - 110: 对口型     - 111: 美食     - 112: 运动     - 113: 动物     - 114: 社会     - 115: 汽车     - 116: 教育     - 117: 健身和健康     - 118: 科技     - 119: 唱歌跳舞     - 120: 全部 - count: 每页数量 ### 返回: - 作品数据  # [English] ### Purpose: - Get explore video data ### Parameters: - categoryType: Video category     - 100: Animation and comics     - 101: Performance     - 102: Beauty care     - 103: Game     - 104: Comedy     - 105: Daily life     - 106: Family     - 107: Emotional relationship     - 108: Drama     - 109: Dress up     - 110: Dubbing     - 111: Food     - 112: Sports     - 113: Animals     - 114: Society     - 115: Car     - 116: Education     - 117: Fitness and health     - 118: Technology     - 119: Singing and dancing     - 120: All - count: Number per page ### Return: - Video data  # [示例/Example] categoryType = \"120\" count = 16  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_explore_post_api_v1_tiktok_web_fetch_explore_post_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str category_type: 作品分类/Video category
        :param int count: 每页数量/Number per page
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_explore_post_api_v1_tiktok_web_fetch_explore_post_get_with_http_info(**kwargs)  # noqa: E501

    def fetch_explore_post_api_v1_tiktok_web_fetch_explore_post_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取探索作品数据/Get explore video data  # noqa: E501

        # [中文] ### 用途: - 获取探索作品数据 ### 参数: - categoryType: 作品分类     - 100: 动画与漫画     - 101: 表演     - 102: 美容护理     - 103: 游戏     - 104: 喜剧     - 105: 日常生活     - 106: 家庭     - 107: 情感关系     - 108: 戏剧     - 109: 穿搭     - 110: 对口型     - 111: 美食     - 112: 运动     - 113: 动物     - 114: 社会     - 115: 汽车     - 116: 教育     - 117: 健身和健康     - 118: 科技     - 119: 唱歌跳舞     - 120: 全部 - count: 每页数量 ### 返回: - 作品数据  # [English] ### Purpose: - Get explore video data ### Parameters: - categoryType: Video category     - 100: Animation and comics     - 101: Performance     - 102: Beauty care     - 103: Game     - 104: Comedy     - 105: Daily life     - 106: Family     - 107: Emotional relationship     - 108: Drama     - 109: Dress up     - 110: Dubbing     - 111: Food     - 112: Sports     - 113: Animals     - 114: Society     - 115: Car     - 116: Education     - 117: Fitness and health     - 118: Technology     - 119: Singing and dancing     - 120: All - count: Number per page ### Return: - Video data  # [示例/Example] categoryType = \"120\" count = 16  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_explore_post_api_v1_tiktok_web_fetch_explore_post_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str category_type: 作品分类/Video category
        :param int count: 每页数量/Number per page
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'category_type',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_explore_post_api_v1_tiktok_web_fetch_explore_post_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'category_type' in local_var_params and local_var_params['category_type'] is not None:  # noqa: E501
            query_params.append(('categoryType', local_var_params['category_type']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_explore_post', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_explore_post_api_v1_tiktok_web_fetch_explore_post_get_0(self, **kwargs):  # noqa: E501
        """获取探索作品数据/Get explore video data  # noqa: E501

        # [中文] ### 用途: - 获取探索作品数据 ### 参数: - categoryType: 作品分类     - 100: 动画与漫画     - 101: 表演     - 102: 美容护理     - 103: 游戏     - 104: 喜剧     - 105: 日常生活     - 106: 家庭     - 107: 情感关系     - 108: 戏剧     - 109: 穿搭     - 110: 对口型     - 111: 美食     - 112: 运动     - 113: 动物     - 114: 社会     - 115: 汽车     - 116: 教育     - 117: 健身和健康     - 118: 科技     - 119: 唱歌跳舞     - 120: 全部 - count: 每页数量 ### 返回: - 作品数据  # [English] ### Purpose: - Get explore video data ### Parameters: - categoryType: Video category     - 100: Animation and comics     - 101: Performance     - 102: Beauty care     - 103: Game     - 104: Comedy     - 105: Daily life     - 106: Family     - 107: Emotional relationship     - 108: Drama     - 109: Dress up     - 110: Dubbing     - 111: Food     - 112: Sports     - 113: Animals     - 114: Society     - 115: Car     - 116: Education     - 117: Fitness and health     - 118: Technology     - 119: Singing and dancing     - 120: All - count: Number per page ### Return: - Video data  # [示例/Example] categoryType = \"120\" count = 16  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_explore_post_api_v1_tiktok_web_fetch_explore_post_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str category_type: 作品分类/Video category
        :param int count: 每页数量/Number per page
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_explore_post_api_v1_tiktok_web_fetch_explore_post_get_0_with_http_info(**kwargs)  # noqa: E501

    def fetch_explore_post_api_v1_tiktok_web_fetch_explore_post_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取探索作品数据/Get explore video data  # noqa: E501

        # [中文] ### 用途: - 获取探索作品数据 ### 参数: - categoryType: 作品分类     - 100: 动画与漫画     - 101: 表演     - 102: 美容护理     - 103: 游戏     - 104: 喜剧     - 105: 日常生活     - 106: 家庭     - 107: 情感关系     - 108: 戏剧     - 109: 穿搭     - 110: 对口型     - 111: 美食     - 112: 运动     - 113: 动物     - 114: 社会     - 115: 汽车     - 116: 教育     - 117: 健身和健康     - 118: 科技     - 119: 唱歌跳舞     - 120: 全部 - count: 每页数量 ### 返回: - 作品数据  # [English] ### Purpose: - Get explore video data ### Parameters: - categoryType: Video category     - 100: Animation and comics     - 101: Performance     - 102: Beauty care     - 103: Game     - 104: Comedy     - 105: Daily life     - 106: Family     - 107: Emotional relationship     - 108: Drama     - 109: Dress up     - 110: Dubbing     - 111: Food     - 112: Sports     - 113: Animals     - 114: Society     - 115: Car     - 116: Education     - 117: Fitness and health     - 118: Technology     - 119: Singing and dancing     - 120: All - count: Number per page ### Return: - Video data  # [示例/Example] categoryType = \"120\" count = 16  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_explore_post_api_v1_tiktok_web_fetch_explore_post_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str category_type: 作品分类/Video category
        :param int count: 每页数量/Number per page
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'category_type',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_explore_post_api_v1_tiktok_web_fetch_explore_post_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'category_type' in local_var_params and local_var_params['category_type'] is not None:  # noqa: E501
            query_params.append(('categoryType', local_var_params['category_type']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_explore_post', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_general_search_api_v1_tiktok_web_fetch_general_search_get(self, keyword, **kwargs):  # noqa: E501
        """获取综合搜索列表/Get general search list  # noqa: E501

        # [中文] ### 用途: - 获取综合搜索列表 ### 参数: - keyword: 搜索关键词 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 综合搜索列表  # [English] ### Purpose: - Get general search list ### Parameters: - keyword: Search keyword - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - General search list  # [示例/Example] keyword = \"TikTok\" offset = 0 search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_general_search_api_v1_tiktok_web_fetch_general_search_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Search keyword (required)
        :param int offset: 翻页游标/Page cursor
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param str cookie: 用户cookie(按需提供)/User cookie(if needed)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_general_search_api_v1_tiktok_web_fetch_general_search_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_general_search_api_v1_tiktok_web_fetch_general_search_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取综合搜索列表/Get general search list  # noqa: E501

        # [中文] ### 用途: - 获取综合搜索列表 ### 参数: - keyword: 搜索关键词 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 综合搜索列表  # [English] ### Purpose: - Get general search list ### Parameters: - keyword: Search keyword - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - General search list  # [示例/Example] keyword = \"TikTok\" offset = 0 search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_general_search_api_v1_tiktok_web_fetch_general_search_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Search keyword (required)
        :param int offset: 翻页游标/Page cursor
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param str cookie: 用户cookie(按需提供)/User cookie(if needed)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'offset',
            'search_id',
            'cookie'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_general_search_api_v1_tiktok_web_fetch_general_search_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_general_search_api_v1_tiktok_web_fetch_general_search_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'search_id' in local_var_params and local_var_params['search_id'] is not None:  # noqa: E501
            query_params.append(('search_id', local_var_params['search_id']))  # noqa: E501
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_general_search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_general_search_api_v1_tiktok_web_fetch_general_search_get_0(self, keyword, **kwargs):  # noqa: E501
        """获取综合搜索列表/Get general search list  # noqa: E501

        # [中文] ### 用途: - 获取综合搜索列表 ### 参数: - keyword: 搜索关键词 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 综合搜索列表  # [English] ### Purpose: - Get general search list ### Parameters: - keyword: Search keyword - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - General search list  # [示例/Example] keyword = \"TikTok\" offset = 0 search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_general_search_api_v1_tiktok_web_fetch_general_search_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Search keyword (required)
        :param int offset: 翻页游标/Page cursor
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param str cookie: 用户cookie(按需提供)/User cookie(if needed)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_general_search_api_v1_tiktok_web_fetch_general_search_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_general_search_api_v1_tiktok_web_fetch_general_search_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """获取综合搜索列表/Get general search list  # noqa: E501

        # [中文] ### 用途: - 获取综合搜索列表 ### 参数: - keyword: 搜索关键词 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 综合搜索列表  # [English] ### Purpose: - Get general search list ### Parameters: - keyword: Search keyword - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - General search list  # [示例/Example] keyword = \"TikTok\" offset = 0 search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_general_search_api_v1_tiktok_web_fetch_general_search_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Search keyword (required)
        :param int offset: 翻页游标/Page cursor
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param str cookie: 用户cookie(按需提供)/User cookie(if needed)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'offset',
            'search_id',
            'cookie'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_general_search_api_v1_tiktok_web_fetch_general_search_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_general_search_api_v1_tiktok_web_fetch_general_search_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'search_id' in local_var_params and local_var_params['search_id'] is not None:  # noqa: E501
            query_params.append(('search_id', local_var_params['search_id']))  # noqa: E501
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_general_search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_home_feed_api_v1_tiktok_web_fetch_home_feed_post(self, **kwargs):  # noqa: E501
        """首页推荐作品/Home Feed  # noqa: E501

        # [中文] ### 用途: - 首页推荐作品 ### 参数: - count: 每页数量 - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 首页推荐作品  # [English] ### Purpose: - Home Feed ### Parameters: - count: Number per page - cookie: User's own cookie, optional parameter, used for personalized recommendations of interface return data. ### Return: - Home Feed  # [示例/Example] count = 15 Cookie = \"Your_Cookie\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_feed_api_v1_tiktok_web_fetch_home_feed_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_home_feed_api_v1_tiktok_web_fetch_home_feed_post_with_http_info(**kwargs)  # noqa: E501

    def fetch_home_feed_api_v1_tiktok_web_fetch_home_feed_post_with_http_info(self, **kwargs):  # noqa: E501
        """首页推荐作品/Home Feed  # noqa: E501

        # [中文] ### 用途: - 首页推荐作品 ### 参数: - count: 每页数量 - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 首页推荐作品  # [English] ### Purpose: - Home Feed ### Parameters: - count: Number per page - cookie: User's own cookie, optional parameter, used for personalized recommendations of interface return data. ### Return: - Home Feed  # [示例/Example] count = 15 Cookie = \"Your_Cookie\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_feed_api_v1_tiktok_web_fetch_home_feed_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'unknown_base_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_home_feed_api_v1_tiktok_web_fetch_home_feed_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_home_feed', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_home_feed_api_v1_tiktok_web_fetch_home_feed_post_0(self, **kwargs):  # noqa: E501
        """首页推荐作品/Home Feed  # noqa: E501

        # [中文] ### 用途: - 首页推荐作品 ### 参数: - count: 每页数量 - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 首页推荐作品  # [English] ### Purpose: - Home Feed ### Parameters: - count: Number per page - cookie: User's own cookie, optional parameter, used for personalized recommendations of interface return data. ### Return: - Home Feed  # [示例/Example] count = 15 Cookie = \"Your_Cookie\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_feed_api_v1_tiktok_web_fetch_home_feed_post_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_home_feed_api_v1_tiktok_web_fetch_home_feed_post_0_with_http_info(**kwargs)  # noqa: E501

    def fetch_home_feed_api_v1_tiktok_web_fetch_home_feed_post_0_with_http_info(self, **kwargs):  # noqa: E501
        """首页推荐作品/Home Feed  # noqa: E501

        # [中文] ### 用途: - 首页推荐作品 ### 参数: - count: 每页数量 - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 首页推荐作品  # [English] ### Purpose: - Home Feed ### Parameters: - count: Number per page - cookie: User's own cookie, optional parameter, used for personalized recommendations of interface return data. ### Return: - Home Feed  # [示例/Example] count = 15 Cookie = \"Your_Cookie\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_home_feed_api_v1_tiktok_web_fetch_home_feed_post_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UNKNOWN_BASE_TYPE unknown_base_type:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'unknown_base_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_home_feed_api_v1_tiktok_web_fetch_home_feed_post_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'unknown_base_type' in local_var_params:
            body_params = local_var_params['unknown_base_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_home_feed', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_live_recommend_api_v1_tiktok_web_fetch_live_recommend_get(self, related_live_tag, **kwargs):  # noqa: E501
        """获取直播间首页推荐列表/Get live room homepage recommendation list  # noqa: E501

        # [中文] ### 用途: - 获取直播间首页推荐列表 ### 参数: - related_live_tag: 相关直播标签 ### 返回: - 直播间首页推荐列表  # [English] ### Purpose: - Get live room homepage recommendation list ### Parameters: - related_live_tag: Related live tag ### Return: - Live room homepage recommendation list  # [示例/Example] related_live_tag = \"VALORANT\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_recommend_api_v1_tiktok_web_fetch_live_recommend_get(related_live_tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str related_live_tag: 相关直播标签/Related live tag (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_live_recommend_api_v1_tiktok_web_fetch_live_recommend_get_with_http_info(related_live_tag, **kwargs)  # noqa: E501

    def fetch_live_recommend_api_v1_tiktok_web_fetch_live_recommend_get_with_http_info(self, related_live_tag, **kwargs):  # noqa: E501
        """获取直播间首页推荐列表/Get live room homepage recommendation list  # noqa: E501

        # [中文] ### 用途: - 获取直播间首页推荐列表 ### 参数: - related_live_tag: 相关直播标签 ### 返回: - 直播间首页推荐列表  # [English] ### Purpose: - Get live room homepage recommendation list ### Parameters: - related_live_tag: Related live tag ### Return: - Live room homepage recommendation list  # [示例/Example] related_live_tag = \"VALORANT\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_recommend_api_v1_tiktok_web_fetch_live_recommend_get_with_http_info(related_live_tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str related_live_tag: 相关直播标签/Related live tag (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'related_live_tag'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_live_recommend_api_v1_tiktok_web_fetch_live_recommend_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'related_live_tag' is set
        if self.api_client.client_side_validation and ('related_live_tag' not in local_var_params or  # noqa: E501
                                                        local_var_params['related_live_tag'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `related_live_tag` when calling `fetch_live_recommend_api_v1_tiktok_web_fetch_live_recommend_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'related_live_tag' in local_var_params and local_var_params['related_live_tag'] is not None:  # noqa: E501
            query_params.append(('related_live_tag', local_var_params['related_live_tag']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_live_recommend', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_live_recommend_api_v1_tiktok_web_fetch_live_recommend_get_0(self, related_live_tag, **kwargs):  # noqa: E501
        """获取直播间首页推荐列表/Get live room homepage recommendation list  # noqa: E501

        # [中文] ### 用途: - 获取直播间首页推荐列表 ### 参数: - related_live_tag: 相关直播标签 ### 返回: - 直播间首页推荐列表  # [English] ### Purpose: - Get live room homepage recommendation list ### Parameters: - related_live_tag: Related live tag ### Return: - Live room homepage recommendation list  # [示例/Example] related_live_tag = \"VALORANT\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_recommend_api_v1_tiktok_web_fetch_live_recommend_get_0(related_live_tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str related_live_tag: 相关直播标签/Related live tag (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_live_recommend_api_v1_tiktok_web_fetch_live_recommend_get_0_with_http_info(related_live_tag, **kwargs)  # noqa: E501

    def fetch_live_recommend_api_v1_tiktok_web_fetch_live_recommend_get_0_with_http_info(self, related_live_tag, **kwargs):  # noqa: E501
        """获取直播间首页推荐列表/Get live room homepage recommendation list  # noqa: E501

        # [中文] ### 用途: - 获取直播间首页推荐列表 ### 参数: - related_live_tag: 相关直播标签 ### 返回: - 直播间首页推荐列表  # [English] ### Purpose: - Get live room homepage recommendation list ### Parameters: - related_live_tag: Related live tag ### Return: - Live room homepage recommendation list  # [示例/Example] related_live_tag = \"VALORANT\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_recommend_api_v1_tiktok_web_fetch_live_recommend_get_0_with_http_info(related_live_tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str related_live_tag: 相关直播标签/Related live tag (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'related_live_tag'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_live_recommend_api_v1_tiktok_web_fetch_live_recommend_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'related_live_tag' is set
        if self.api_client.client_side_validation and ('related_live_tag' not in local_var_params or  # noqa: E501
                                                        local_var_params['related_live_tag'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `related_live_tag` when calling `fetch_live_recommend_api_v1_tiktok_web_fetch_live_recommend_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'related_live_tag' in local_var_params and local_var_params['related_live_tag'] is not None:  # noqa: E501
            query_params.append(('related_live_tag', local_var_params['related_live_tag']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_live_recommend', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_post_comment_api_v1_tiktok_web_fetch_post_comment_get(self, aweme_id, **kwargs):  # noqa: E501
        """获取作品的评论列表/Get video comments  # noqa: E501

        # [中文] ### 用途: - 获取作品的评论列表 ### 参数: - aweme_id: 作品id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论列表  # [English] ### Purpose: - Get video comments ### Parameters: - aweme_id: Video id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comments  # [示例/Eample] aweme_id = \"7304809083817774382\" cursor = 0 count = 20 current_region = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_comment_api_v1_tiktok_web_fetch_post_comment_get(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param str current_region: 当前地区/Current region
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_post_comment_api_v1_tiktok_web_fetch_post_comment_get_with_http_info(aweme_id, **kwargs)  # noqa: E501

    def fetch_post_comment_api_v1_tiktok_web_fetch_post_comment_get_with_http_info(self, aweme_id, **kwargs):  # noqa: E501
        """获取作品的评论列表/Get video comments  # noqa: E501

        # [中文] ### 用途: - 获取作品的评论列表 ### 参数: - aweme_id: 作品id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论列表  # [English] ### Purpose: - Get video comments ### Parameters: - aweme_id: Video id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comments  # [示例/Eample] aweme_id = \"7304809083817774382\" cursor = 0 count = 20 current_region = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_comment_api_v1_tiktok_web_fetch_post_comment_get_with_http_info(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param str current_region: 当前地区/Current region
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'aweme_id',
            'cursor',
            'count',
            'current_region'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_post_comment_api_v1_tiktok_web_fetch_post_comment_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'aweme_id' is set
        if self.api_client.client_side_validation and ('aweme_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['aweme_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `aweme_id` when calling `fetch_post_comment_api_v1_tiktok_web_fetch_post_comment_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'aweme_id' in local_var_params and local_var_params['aweme_id'] is not None:  # noqa: E501
            query_params.append(('aweme_id', local_var_params['aweme_id']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'current_region' in local_var_params and local_var_params['current_region'] is not None:  # noqa: E501
            query_params.append(('current_region', local_var_params['current_region']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_post_comment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_post_comment_api_v1_tiktok_web_fetch_post_comment_get_0(self, aweme_id, **kwargs):  # noqa: E501
        """获取作品的评论列表/Get video comments  # noqa: E501

        # [中文] ### 用途: - 获取作品的评论列表 ### 参数: - aweme_id: 作品id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论列表  # [English] ### Purpose: - Get video comments ### Parameters: - aweme_id: Video id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comments  # [示例/Eample] aweme_id = \"7304809083817774382\" cursor = 0 count = 20 current_region = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_comment_api_v1_tiktok_web_fetch_post_comment_get_0(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param str current_region: 当前地区/Current region
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_post_comment_api_v1_tiktok_web_fetch_post_comment_get_0_with_http_info(aweme_id, **kwargs)  # noqa: E501

    def fetch_post_comment_api_v1_tiktok_web_fetch_post_comment_get_0_with_http_info(self, aweme_id, **kwargs):  # noqa: E501
        """获取作品的评论列表/Get video comments  # noqa: E501

        # [中文] ### 用途: - 获取作品的评论列表 ### 参数: - aweme_id: 作品id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论列表  # [English] ### Purpose: - Get video comments ### Parameters: - aweme_id: Video id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comments  # [示例/Eample] aweme_id = \"7304809083817774382\" cursor = 0 count = 20 current_region = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_comment_api_v1_tiktok_web_fetch_post_comment_get_0_with_http_info(aweme_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str aweme_id: 作品id/Video id (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param str current_region: 当前地区/Current region
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'aweme_id',
            'cursor',
            'count',
            'current_region'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_post_comment_api_v1_tiktok_web_fetch_post_comment_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'aweme_id' is set
        if self.api_client.client_side_validation and ('aweme_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['aweme_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `aweme_id` when calling `fetch_post_comment_api_v1_tiktok_web_fetch_post_comment_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'aweme_id' in local_var_params and local_var_params['aweme_id'] is not None:  # noqa: E501
            query_params.append(('aweme_id', local_var_params['aweme_id']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'current_region' in local_var_params and local_var_params['current_region'] is not None:  # noqa: E501
            query_params.append(('current_region', local_var_params['current_region']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_post_comment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_post_comment_reply_api_v1_tiktok_web_fetch_post_comment_reply_get(self, item_id, comment_id, **kwargs):  # noqa: E501
        """获取作品的评论回复列表/Get video comment replies  # noqa: E501

        # [中文] ### 用途: - 获取作品的评论回复列表 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论回复列表  # [English] ### Purpose: - Get video comment replies ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comment replies  # [示例/Eample] item_id = \"7304809083817774382\" comment_id = \"7304877760886588191\" cursor = 0 count = 20 current_region = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_comment_reply_api_v1_tiktok_web_fetch_post_comment_reply_get(item_id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str item_id: 作品id/Video id (required)
        :param str comment_id: 评论id/Comment id (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param str current_region: 当前地区/Current region
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_post_comment_reply_api_v1_tiktok_web_fetch_post_comment_reply_get_with_http_info(item_id, comment_id, **kwargs)  # noqa: E501

    def fetch_post_comment_reply_api_v1_tiktok_web_fetch_post_comment_reply_get_with_http_info(self, item_id, comment_id, **kwargs):  # noqa: E501
        """获取作品的评论回复列表/Get video comment replies  # noqa: E501

        # [中文] ### 用途: - 获取作品的评论回复列表 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论回复列表  # [English] ### Purpose: - Get video comment replies ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comment replies  # [示例/Eample] item_id = \"7304809083817774382\" comment_id = \"7304877760886588191\" cursor = 0 count = 20 current_region = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_comment_reply_api_v1_tiktok_web_fetch_post_comment_reply_get_with_http_info(item_id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str item_id: 作品id/Video id (required)
        :param str comment_id: 评论id/Comment id (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param str current_region: 当前地区/Current region
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'item_id',
            'comment_id',
            'cursor',
            'count',
            'current_region'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_post_comment_reply_api_v1_tiktok_web_fetch_post_comment_reply_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'item_id' is set
        if self.api_client.client_side_validation and ('item_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['item_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `item_id` when calling `fetch_post_comment_reply_api_v1_tiktok_web_fetch_post_comment_reply_get`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if self.api_client.client_side_validation and ('comment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['comment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `comment_id` when calling `fetch_post_comment_reply_api_v1_tiktok_web_fetch_post_comment_reply_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'item_id' in local_var_params and local_var_params['item_id'] is not None:  # noqa: E501
            query_params.append(('item_id', local_var_params['item_id']))  # noqa: E501
        if 'comment_id' in local_var_params and local_var_params['comment_id'] is not None:  # noqa: E501
            query_params.append(('comment_id', local_var_params['comment_id']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'current_region' in local_var_params and local_var_params['current_region'] is not None:  # noqa: E501
            query_params.append(('current_region', local_var_params['current_region']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_post_comment_reply', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_post_comment_reply_api_v1_tiktok_web_fetch_post_comment_reply_get_0(self, item_id, comment_id, **kwargs):  # noqa: E501
        """获取作品的评论回复列表/Get video comment replies  # noqa: E501

        # [中文] ### 用途: - 获取作品的评论回复列表 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论回复列表  # [English] ### Purpose: - Get video comment replies ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comment replies  # [示例/Eample] item_id = \"7304809083817774382\" comment_id = \"7304877760886588191\" cursor = 0 count = 20 current_region = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_comment_reply_api_v1_tiktok_web_fetch_post_comment_reply_get_0(item_id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str item_id: 作品id/Video id (required)
        :param str comment_id: 评论id/Comment id (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param str current_region: 当前地区/Current region
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_post_comment_reply_api_v1_tiktok_web_fetch_post_comment_reply_get_0_with_http_info(item_id, comment_id, **kwargs)  # noqa: E501

    def fetch_post_comment_reply_api_v1_tiktok_web_fetch_post_comment_reply_get_0_with_http_info(self, item_id, comment_id, **kwargs):  # noqa: E501
        """获取作品的评论回复列表/Get video comment replies  # noqa: E501

        # [中文] ### 用途: - 获取作品的评论回复列表 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论回复列表  # [English] ### Purpose: - Get video comment replies ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comment replies  # [示例/Eample] item_id = \"7304809083817774382\" comment_id = \"7304877760886588191\" cursor = 0 count = 20 current_region = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_comment_reply_api_v1_tiktok_web_fetch_post_comment_reply_get_0_with_http_info(item_id, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str item_id: 作品id/Video id (required)
        :param str comment_id: 评论id/Comment id (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param str current_region: 当前地区/Current region
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'item_id',
            'comment_id',
            'cursor',
            'count',
            'current_region'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_post_comment_reply_api_v1_tiktok_web_fetch_post_comment_reply_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'item_id' is set
        if self.api_client.client_side_validation and ('item_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['item_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `item_id` when calling `fetch_post_comment_reply_api_v1_tiktok_web_fetch_post_comment_reply_get_0`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if self.api_client.client_side_validation and ('comment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['comment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `comment_id` when calling `fetch_post_comment_reply_api_v1_tiktok_web_fetch_post_comment_reply_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'item_id' in local_var_params and local_var_params['item_id'] is not None:  # noqa: E501
            query_params.append(('item_id', local_var_params['item_id']))  # noqa: E501
        if 'comment_id' in local_var_params and local_var_params['comment_id'] is not None:  # noqa: E501
            query_params.append(('comment_id', local_var_params['comment_id']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'current_region' in local_var_params and local_var_params['current_region'] is not None:  # noqa: E501
            query_params.append(('current_region', local_var_params['current_region']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_post_comment_reply', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_post_detail_api_v1_tiktok_web_fetch_post_detail_get(self, item_id, **kwargs):  # noqa: E501
        """获取单个作品数据/Get single video data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据 - 此接口无法用于视频下载，只能获取视频数据，访问此接口返回的视频链接会返回HTTP403报错。 - 如果有视频下载需求，请使用 /api/v1/tiktok/app/v2/fetch_one_video 接口。 ### 参数: - itemId: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot be used for video download, it can only get video data, and accessing the video link returned by this interface will return an HTTP403 error. - If you need to download videos, please use the /api/v1/tiktok/app/v2/fetch_one_video interface. ### Parameters: - itemId: Video id ### Return: - Video data  # [示例/Example] itemId = \"7339393672959757570\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_detail_api_v1_tiktok_web_fetch_post_detail_get(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str item_id: 作品id/Video id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_post_detail_api_v1_tiktok_web_fetch_post_detail_get_with_http_info(item_id, **kwargs)  # noqa: E501

    def fetch_post_detail_api_v1_tiktok_web_fetch_post_detail_get_with_http_info(self, item_id, **kwargs):  # noqa: E501
        """获取单个作品数据/Get single video data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据 - 此接口无法用于视频下载，只能获取视频数据，访问此接口返回的视频链接会返回HTTP403报错。 - 如果有视频下载需求，请使用 /api/v1/tiktok/app/v2/fetch_one_video 接口。 ### 参数: - itemId: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot be used for video download, it can only get video data, and accessing the video link returned by this interface will return an HTTP403 error. - If you need to download videos, please use the /api/v1/tiktok/app/v2/fetch_one_video interface. ### Parameters: - itemId: Video id ### Return: - Video data  # [示例/Example] itemId = \"7339393672959757570\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_detail_api_v1_tiktok_web_fetch_post_detail_get_with_http_info(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str item_id: 作品id/Video id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'item_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_post_detail_api_v1_tiktok_web_fetch_post_detail_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'item_id' is set
        if self.api_client.client_side_validation and ('item_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['item_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `item_id` when calling `fetch_post_detail_api_v1_tiktok_web_fetch_post_detail_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'item_id' in local_var_params and local_var_params['item_id'] is not None:  # noqa: E501
            query_params.append(('itemId', local_var_params['item_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_post_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_post_detail_api_v1_tiktok_web_fetch_post_detail_get_0(self, item_id, **kwargs):  # noqa: E501
        """获取单个作品数据/Get single video data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据 - 此接口无法用于视频下载，只能获取视频数据，访问此接口返回的视频链接会返回HTTP403报错。 - 如果有视频下载需求，请使用 /api/v1/tiktok/app/v2/fetch_one_video 接口。 ### 参数: - itemId: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot be used for video download, it can only get video data, and accessing the video link returned by this interface will return an HTTP403 error. - If you need to download videos, please use the /api/v1/tiktok/app/v2/fetch_one_video interface. ### Parameters: - itemId: Video id ### Return: - Video data  # [示例/Example] itemId = \"7339393672959757570\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_detail_api_v1_tiktok_web_fetch_post_detail_get_0(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str item_id: 作品id/Video id (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_post_detail_api_v1_tiktok_web_fetch_post_detail_get_0_with_http_info(item_id, **kwargs)  # noqa: E501

    def fetch_post_detail_api_v1_tiktok_web_fetch_post_detail_get_0_with_http_info(self, item_id, **kwargs):  # noqa: E501
        """获取单个作品数据/Get single video data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据 - 此接口无法用于视频下载，只能获取视频数据，访问此接口返回的视频链接会返回HTTP403报错。 - 如果有视频下载需求，请使用 /api/v1/tiktok/app/v2/fetch_one_video 接口。 ### 参数: - itemId: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot be used for video download, it can only get video data, and accessing the video link returned by this interface will return an HTTP403 error. - If you need to download videos, please use the /api/v1/tiktok/app/v2/fetch_one_video interface. ### Parameters: - itemId: Video id ### Return: - Video data  # [示例/Example] itemId = \"7339393672959757570\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_post_detail_api_v1_tiktok_web_fetch_post_detail_get_0_with_http_info(item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str item_id: 作品id/Video id (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'item_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_post_detail_api_v1_tiktok_web_fetch_post_detail_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'item_id' is set
        if self.api_client.client_side_validation and ('item_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['item_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `item_id` when calling `fetch_post_detail_api_v1_tiktok_web_fetch_post_detail_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'item_id' in local_var_params and local_var_params['item_id'] is not None:  # noqa: E501
            query_params.append(('itemId', local_var_params['item_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_post_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_search_keyword_suggest_api_v1_tiktok_web_fetch_search_keyword_suggest_get(self, keyword, **kwargs):  # noqa: E501
        """搜索关键字推荐/Search keyword suggest  # noqa: E501

        # [中文] ### 用途: - 搜索关键字推荐 ### 参数: - keyword: 搜索关键词 ### 返回: - 关键字推荐列表  # [English] ### Purpose: - Search keyword suggest ### Parameters: - keyword: Search keyword ### Return: - Keyword suggest list  # [示例/Example] keyword = \"TikTok\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_keyword_suggest_api_v1_tiktok_web_fetch_search_keyword_suggest_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Search keyword (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_search_keyword_suggest_api_v1_tiktok_web_fetch_search_keyword_suggest_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_search_keyword_suggest_api_v1_tiktok_web_fetch_search_keyword_suggest_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """搜索关键字推荐/Search keyword suggest  # noqa: E501

        # [中文] ### 用途: - 搜索关键字推荐 ### 参数: - keyword: 搜索关键词 ### 返回: - 关键字推荐列表  # [English] ### Purpose: - Search keyword suggest ### Parameters: - keyword: Search keyword ### Return: - Keyword suggest list  # [示例/Example] keyword = \"TikTok\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_keyword_suggest_api_v1_tiktok_web_fetch_search_keyword_suggest_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Search keyword (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_search_keyword_suggest_api_v1_tiktok_web_fetch_search_keyword_suggest_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_search_keyword_suggest_api_v1_tiktok_web_fetch_search_keyword_suggest_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_search_keyword_suggest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_search_keyword_suggest_api_v1_tiktok_web_fetch_search_keyword_suggest_get_0(self, keyword, **kwargs):  # noqa: E501
        """搜索关键字推荐/Search keyword suggest  # noqa: E501

        # [中文] ### 用途: - 搜索关键字推荐 ### 参数: - keyword: 搜索关键词 ### 返回: - 关键字推荐列表  # [English] ### Purpose: - Search keyword suggest ### Parameters: - keyword: Search keyword ### Return: - Keyword suggest list  # [示例/Example] keyword = \"TikTok\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_keyword_suggest_api_v1_tiktok_web_fetch_search_keyword_suggest_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Search keyword (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_search_keyword_suggest_api_v1_tiktok_web_fetch_search_keyword_suggest_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_search_keyword_suggest_api_v1_tiktok_web_fetch_search_keyword_suggest_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """搜索关键字推荐/Search keyword suggest  # noqa: E501

        # [中文] ### 用途: - 搜索关键字推荐 ### 参数: - keyword: 搜索关键词 ### 返回: - 关键字推荐列表  # [English] ### Purpose: - Search keyword suggest ### Parameters: - keyword: Search keyword ### Return: - Keyword suggest list  # [示例/Example] keyword = \"TikTok\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_keyword_suggest_api_v1_tiktok_web_fetch_search_keyword_suggest_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Search keyword (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_search_keyword_suggest_api_v1_tiktok_web_fetch_search_keyword_suggest_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_search_keyword_suggest_api_v1_tiktok_web_fetch_search_keyword_suggest_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_search_keyword_suggest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_search_live_api_v1_tiktok_web_fetch_search_live_get(self, keyword, **kwargs):  # noqa: E501
        """搜索直播/Search live  # noqa: E501

        # [中文] ### 用途: - 搜索直播 ### 参数: - keyword: 搜索关键词 - count: 每页数量 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 直播列表  # [English] ### Purpose: - Search live ### Parameters: - keyword: Search keyword - count: Number per page - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Live list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_live_api_v1_tiktok_web_fetch_search_live_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Search keyword (required)
        :param int count: 每页数量/Number per page
        :param int offset: 翻页游标/Page cursor
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param str cookie: 用户cookie(按需提供)/User cookie(if needed)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_search_live_api_v1_tiktok_web_fetch_search_live_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_search_live_api_v1_tiktok_web_fetch_search_live_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """搜索直播/Search live  # noqa: E501

        # [中文] ### 用途: - 搜索直播 ### 参数: - keyword: 搜索关键词 - count: 每页数量 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 直播列表  # [English] ### Purpose: - Search live ### Parameters: - keyword: Search keyword - count: Number per page - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Live list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_live_api_v1_tiktok_web_fetch_search_live_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Search keyword (required)
        :param int count: 每页数量/Number per page
        :param int offset: 翻页游标/Page cursor
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param str cookie: 用户cookie(按需提供)/User cookie(if needed)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'count',
            'offset',
            'search_id',
            'cookie'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_search_live_api_v1_tiktok_web_fetch_search_live_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_search_live_api_v1_tiktok_web_fetch_search_live_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'search_id' in local_var_params and local_var_params['search_id'] is not None:  # noqa: E501
            query_params.append(('search_id', local_var_params['search_id']))  # noqa: E501
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_search_live', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_search_live_api_v1_tiktok_web_fetch_search_live_get_0(self, keyword, **kwargs):  # noqa: E501
        """搜索直播/Search live  # noqa: E501

        # [中文] ### 用途: - 搜索直播 ### 参数: - keyword: 搜索关键词 - count: 每页数量 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 直播列表  # [English] ### Purpose: - Search live ### Parameters: - keyword: Search keyword - count: Number per page - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Live list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_live_api_v1_tiktok_web_fetch_search_live_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Search keyword (required)
        :param int count: 每页数量/Number per page
        :param int offset: 翻页游标/Page cursor
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param str cookie: 用户cookie(按需提供)/User cookie(if needed)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_search_live_api_v1_tiktok_web_fetch_search_live_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_search_live_api_v1_tiktok_web_fetch_search_live_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """搜索直播/Search live  # noqa: E501

        # [中文] ### 用途: - 搜索直播 ### 参数: - keyword: 搜索关键词 - count: 每页数量 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 直播列表  # [English] ### Purpose: - Search live ### Parameters: - keyword: Search keyword - count: Number per page - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Live list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_live_api_v1_tiktok_web_fetch_search_live_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Search keyword (required)
        :param int count: 每页数量/Number per page
        :param int offset: 翻页游标/Page cursor
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param str cookie: 用户cookie(按需提供)/User cookie(if needed)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'count',
            'offset',
            'search_id',
            'cookie'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_search_live_api_v1_tiktok_web_fetch_search_live_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_search_live_api_v1_tiktok_web_fetch_search_live_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'search_id' in local_var_params and local_var_params['search_id'] is not None:  # noqa: E501
            query_params.append(('search_id', local_var_params['search_id']))  # noqa: E501
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_search_live', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_search_user_api_v1_tiktok_web_fetch_search_user_get(self, keyword, **kwargs):  # noqa: E501
        """搜索用户/Search user  # noqa: E501

        # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 用户列表  # [English] ### Purpose: - Search user ### Parameters: - keyword: Search keyword - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - User list  # [示例/Example] keyword = \"TikTok\" cursor = 0 search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_user_api_v1_tiktok_web_fetch_search_user_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Search keyword (required)
        :param int cursor: 翻页游标/Page cursor
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param str cookie: 用户cookie(按需提供)/User cookie(if needed)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_search_user_api_v1_tiktok_web_fetch_search_user_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_search_user_api_v1_tiktok_web_fetch_search_user_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """搜索用户/Search user  # noqa: E501

        # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 用户列表  # [English] ### Purpose: - Search user ### Parameters: - keyword: Search keyword - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - User list  # [示例/Example] keyword = \"TikTok\" cursor = 0 search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_user_api_v1_tiktok_web_fetch_search_user_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Search keyword (required)
        :param int cursor: 翻页游标/Page cursor
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param str cookie: 用户cookie(按需提供)/User cookie(if needed)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'cursor',
            'search_id',
            'cookie'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_search_user_api_v1_tiktok_web_fetch_search_user_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_search_user_api_v1_tiktok_web_fetch_search_user_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'search_id' in local_var_params and local_var_params['search_id'] is not None:  # noqa: E501
            query_params.append(('search_id', local_var_params['search_id']))  # noqa: E501
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_search_user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_search_user_api_v1_tiktok_web_fetch_search_user_get_0(self, keyword, **kwargs):  # noqa: E501
        """搜索用户/Search user  # noqa: E501

        # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 用户列表  # [English] ### Purpose: - Search user ### Parameters: - keyword: Search keyword - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - User list  # [示例/Example] keyword = \"TikTok\" cursor = 0 search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_user_api_v1_tiktok_web_fetch_search_user_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Search keyword (required)
        :param int cursor: 翻页游标/Page cursor
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param str cookie: 用户cookie(按需提供)/User cookie(if needed)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_search_user_api_v1_tiktok_web_fetch_search_user_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_search_user_api_v1_tiktok_web_fetch_search_user_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """搜索用户/Search user  # noqa: E501

        # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 用户列表  # [English] ### Purpose: - Search user ### Parameters: - keyword: Search keyword - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - User list  # [示例/Example] keyword = \"TikTok\" cursor = 0 search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_user_api_v1_tiktok_web_fetch_search_user_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Search keyword (required)
        :param int cursor: 翻页游标/Page cursor
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param str cookie: 用户cookie(按需提供)/User cookie(if needed)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'cursor',
            'search_id',
            'cookie'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_search_user_api_v1_tiktok_web_fetch_search_user_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_search_user_api_v1_tiktok_web_fetch_search_user_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'search_id' in local_var_params and local_var_params['search_id'] is not None:  # noqa: E501
            query_params.append(('search_id', local_var_params['search_id']))  # noqa: E501
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_search_user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_search_video_api_v1_tiktok_web_fetch_search_video_get(self, keyword, **kwargs):  # noqa: E501
        """搜索视频/Search video  # noqa: E501

        # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 搜索关键词 - count: 每页数量，建议保持默认值20。 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Search keyword - count: Number per page, it is recommended to keep the default value 20. - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - offset: Page cursor - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Video list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_video_api_v1_tiktok_web_fetch_search_video_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Search keyword (required)
        :param int count: 每页数量/Number per page
        :param int offset: 翻页游标/Page cursor
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param str cookie: 用户cookie(按需提供)/User cookie(if needed)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_search_video_api_v1_tiktok_web_fetch_search_video_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_search_video_api_v1_tiktok_web_fetch_search_video_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """搜索视频/Search video  # noqa: E501

        # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 搜索关键词 - count: 每页数量，建议保持默认值20。 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Search keyword - count: Number per page, it is recommended to keep the default value 20. - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - offset: Page cursor - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Video list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_video_api_v1_tiktok_web_fetch_search_video_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Search keyword (required)
        :param int count: 每页数量/Number per page
        :param int offset: 翻页游标/Page cursor
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param str cookie: 用户cookie(按需提供)/User cookie(if needed)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'count',
            'offset',
            'search_id',
            'cookie'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_search_video_api_v1_tiktok_web_fetch_search_video_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_search_video_api_v1_tiktok_web_fetch_search_video_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'search_id' in local_var_params and local_var_params['search_id'] is not None:  # noqa: E501
            query_params.append(('search_id', local_var_params['search_id']))  # noqa: E501
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_search_video', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_search_video_api_v1_tiktok_web_fetch_search_video_get_0(self, keyword, **kwargs):  # noqa: E501
        """搜索视频/Search video  # noqa: E501

        # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 搜索关键词 - count: 每页数量，建议保持默认值20。 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Search keyword - count: Number per page, it is recommended to keep the default value 20. - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - offset: Page cursor - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Video list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_video_api_v1_tiktok_web_fetch_search_video_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Search keyword (required)
        :param int count: 每页数量/Number per page
        :param int offset: 翻页游标/Page cursor
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param str cookie: 用户cookie(按需提供)/User cookie(if needed)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_search_video_api_v1_tiktok_web_fetch_search_video_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def fetch_search_video_api_v1_tiktok_web_fetch_search_video_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """搜索视频/Search video  # noqa: E501

        # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 搜索关键词 - count: 每页数量，建议保持默认值20。 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Search keyword - count: Number per page, it is recommended to keep the default value 20. - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - offset: Page cursor - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Video list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_search_video_api_v1_tiktok_web_fetch_search_video_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: 搜索关键词/Search keyword (required)
        :param int count: 每页数量/Number per page
        :param int offset: 翻页游标/Page cursor
        :param str search_id: 搜索id，翻页时需要提供/Search id, need to provide when paging
        :param str cookie: 用户cookie(按需提供)/User cookie(if needed)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'count',
            'offset',
            'search_id',
            'cookie'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_search_video_api_v1_tiktok_web_fetch_search_video_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `fetch_search_video_api_v1_tiktok_web_fetch_search_video_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'search_id' in local_var_params and local_var_params['search_id'] is not None:  # noqa: E501
            query_params.append(('search_id', local_var_params['search_id']))  # noqa: E501
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_search_video', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_tag_detail_api_v1_tiktok_web_fetch_tag_detail_get(self, tag_name, **kwargs):  # noqa: E501
        """Tag详情/Tag Detail  # noqa: E501

        # [中文] ### 用途: - Tag详情 ### 参数: - tag_name: Tag名称 ### 返回: - Tag详情  # [English] ### Purpose: - Tag Detail ### Parameters: - tag_name: Tag name ### Return: - Tag Detail  # [示例/Example] tag_name = \"tiktok\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_tag_detail_api_v1_tiktok_web_fetch_tag_detail_get(tag_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str tag_name: Tag名称/Tag name (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_tag_detail_api_v1_tiktok_web_fetch_tag_detail_get_with_http_info(tag_name, **kwargs)  # noqa: E501

    def fetch_tag_detail_api_v1_tiktok_web_fetch_tag_detail_get_with_http_info(self, tag_name, **kwargs):  # noqa: E501
        """Tag详情/Tag Detail  # noqa: E501

        # [中文] ### 用途: - Tag详情 ### 参数: - tag_name: Tag名称 ### 返回: - Tag详情  # [English] ### Purpose: - Tag Detail ### Parameters: - tag_name: Tag name ### Return: - Tag Detail  # [示例/Example] tag_name = \"tiktok\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_tag_detail_api_v1_tiktok_web_fetch_tag_detail_get_with_http_info(tag_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str tag_name: Tag名称/Tag name (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'tag_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_tag_detail_api_v1_tiktok_web_fetch_tag_detail_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'tag_name' is set
        if self.api_client.client_side_validation and ('tag_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['tag_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `tag_name` when calling `fetch_tag_detail_api_v1_tiktok_web_fetch_tag_detail_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tag_name' in local_var_params and local_var_params['tag_name'] is not None:  # noqa: E501
            query_params.append(('tag_name', local_var_params['tag_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_tag_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_tag_detail_api_v1_tiktok_web_fetch_tag_detail_get_0(self, tag_name, **kwargs):  # noqa: E501
        """Tag详情/Tag Detail  # noqa: E501

        # [中文] ### 用途: - Tag详情 ### 参数: - tag_name: Tag名称 ### 返回: - Tag详情  # [English] ### Purpose: - Tag Detail ### Parameters: - tag_name: Tag name ### Return: - Tag Detail  # [示例/Example] tag_name = \"tiktok\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_tag_detail_api_v1_tiktok_web_fetch_tag_detail_get_0(tag_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str tag_name: Tag名称/Tag name (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_tag_detail_api_v1_tiktok_web_fetch_tag_detail_get_0_with_http_info(tag_name, **kwargs)  # noqa: E501

    def fetch_tag_detail_api_v1_tiktok_web_fetch_tag_detail_get_0_with_http_info(self, tag_name, **kwargs):  # noqa: E501
        """Tag详情/Tag Detail  # noqa: E501

        # [中文] ### 用途: - Tag详情 ### 参数: - tag_name: Tag名称 ### 返回: - Tag详情  # [English] ### Purpose: - Tag Detail ### Parameters: - tag_name: Tag name ### Return: - Tag Detail  # [示例/Example] tag_name = \"tiktok\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_tag_detail_api_v1_tiktok_web_fetch_tag_detail_get_0_with_http_info(tag_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str tag_name: Tag名称/Tag name (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'tag_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_tag_detail_api_v1_tiktok_web_fetch_tag_detail_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'tag_name' is set
        if self.api_client.client_side_validation and ('tag_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['tag_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `tag_name` when calling `fetch_tag_detail_api_v1_tiktok_web_fetch_tag_detail_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tag_name' in local_var_params and local_var_params['tag_name'] is not None:  # noqa: E501
            query_params.append(('tag_name', local_var_params['tag_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_tag_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_tag_post_api_v1_tiktok_web_fetch_tag_post_get(self, challenge_id, **kwargs):  # noqa: E501
        """Tag作品/Tag Post  # noqa: E501

        # [中文] ### 用途: - Tag作品 ### 参数: - challengeID: Tag ID - count: 每页数量 - cursor: 翻页游标 ### 返回: - Tag作品  # [English] ### Purpose: - Tag Post ### Parameters: - challengeID: Tag ID - count: Number per page - cursor: Page cursor ### Return: - Tag Post  # [示例/Example] challengeID = \"7551\" count = 30 cursor = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_tag_post_api_v1_tiktok_web_fetch_tag_post_get(challenge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_id: Tag ID (required)
        :param int count: 每页数量/Number per page
        :param int cursor: 翻页游标/Page cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_tag_post_api_v1_tiktok_web_fetch_tag_post_get_with_http_info(challenge_id, **kwargs)  # noqa: E501

    def fetch_tag_post_api_v1_tiktok_web_fetch_tag_post_get_with_http_info(self, challenge_id, **kwargs):  # noqa: E501
        """Tag作品/Tag Post  # noqa: E501

        # [中文] ### 用途: - Tag作品 ### 参数: - challengeID: Tag ID - count: 每页数量 - cursor: 翻页游标 ### 返回: - Tag作品  # [English] ### Purpose: - Tag Post ### Parameters: - challengeID: Tag ID - count: Number per page - cursor: Page cursor ### Return: - Tag Post  # [示例/Example] challengeID = \"7551\" count = 30 cursor = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_tag_post_api_v1_tiktok_web_fetch_tag_post_get_with_http_info(challenge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_id: Tag ID (required)
        :param int count: 每页数量/Number per page
        :param int cursor: 翻页游标/Page cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'challenge_id',
            'count',
            'cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_tag_post_api_v1_tiktok_web_fetch_tag_post_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'challenge_id' is set
        if self.api_client.client_side_validation and ('challenge_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['challenge_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `challenge_id` when calling `fetch_tag_post_api_v1_tiktok_web_fetch_tag_post_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'challenge_id' in local_var_params and local_var_params['challenge_id'] is not None:  # noqa: E501
            query_params.append(('challengeID', local_var_params['challenge_id']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_tag_post', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_tag_post_api_v1_tiktok_web_fetch_tag_post_get_0(self, challenge_id, **kwargs):  # noqa: E501
        """Tag作品/Tag Post  # noqa: E501

        # [中文] ### 用途: - Tag作品 ### 参数: - challengeID: Tag ID - count: 每页数量 - cursor: 翻页游标 ### 返回: - Tag作品  # [English] ### Purpose: - Tag Post ### Parameters: - challengeID: Tag ID - count: Number per page - cursor: Page cursor ### Return: - Tag Post  # [示例/Example] challengeID = \"7551\" count = 30 cursor = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_tag_post_api_v1_tiktok_web_fetch_tag_post_get_0(challenge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_id: Tag ID (required)
        :param int count: 每页数量/Number per page
        :param int cursor: 翻页游标/Page cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_tag_post_api_v1_tiktok_web_fetch_tag_post_get_0_with_http_info(challenge_id, **kwargs)  # noqa: E501

    def fetch_tag_post_api_v1_tiktok_web_fetch_tag_post_get_0_with_http_info(self, challenge_id, **kwargs):  # noqa: E501
        """Tag作品/Tag Post  # noqa: E501

        # [中文] ### 用途: - Tag作品 ### 参数: - challengeID: Tag ID - count: 每页数量 - cursor: 翻页游标 ### 返回: - Tag作品  # [English] ### Purpose: - Tag Post ### Parameters: - challengeID: Tag ID - count: Number per page - cursor: Page cursor ### Return: - Tag Post  # [示例/Example] challengeID = \"7551\" count = 30 cursor = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_tag_post_api_v1_tiktok_web_fetch_tag_post_get_0_with_http_info(challenge_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str challenge_id: Tag ID (required)
        :param int count: 每页数量/Number per page
        :param int cursor: 翻页游标/Page cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'challenge_id',
            'count',
            'cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_tag_post_api_v1_tiktok_web_fetch_tag_post_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'challenge_id' is set
        if self.api_client.client_side_validation and ('challenge_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['challenge_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `challenge_id` when calling `fetch_tag_post_api_v1_tiktok_web_fetch_tag_post_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'challenge_id' in local_var_params and local_var_params['challenge_id'] is not None:  # noqa: E501
            query_params.append(('challengeID', local_var_params['challenge_id']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_tag_post', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_tiktok_live_data_api_v1_tiktok_web_fetch_tiktok_live_data_get(self, live_room_url, **kwargs):  # noqa: E501
        """通过直播链接获取直播间信息/Get live room information via live link  # noqa: E501

        # [中文] ### 用途: - 通过直播链接获取直播间信息 - 此接口可获取离线直播间信息 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间信息  # [English] ### Purpose: - Get live room information via live link - This interface can get offline live room information ### Parameters: - live_room_url: Live room link ### Return: - Live room information  # [示例/Example] live_room_url = \"https://www.tiktok.com/@.caseoh_daily/live\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_tiktok_live_data_api_v1_tiktok_web_fetch_tiktok_live_data_get(live_room_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str live_room_url: 直播间链接/Live room link (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_tiktok_live_data_api_v1_tiktok_web_fetch_tiktok_live_data_get_with_http_info(live_room_url, **kwargs)  # noqa: E501

    def fetch_tiktok_live_data_api_v1_tiktok_web_fetch_tiktok_live_data_get_with_http_info(self, live_room_url, **kwargs):  # noqa: E501
        """通过直播链接获取直播间信息/Get live room information via live link  # noqa: E501

        # [中文] ### 用途: - 通过直播链接获取直播间信息 - 此接口可获取离线直播间信息 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间信息  # [English] ### Purpose: - Get live room information via live link - This interface can get offline live room information ### Parameters: - live_room_url: Live room link ### Return: - Live room information  # [示例/Example] live_room_url = \"https://www.tiktok.com/@.caseoh_daily/live\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_tiktok_live_data_api_v1_tiktok_web_fetch_tiktok_live_data_get_with_http_info(live_room_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str live_room_url: 直播间链接/Live room link (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'live_room_url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_tiktok_live_data_api_v1_tiktok_web_fetch_tiktok_live_data_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'live_room_url' is set
        if self.api_client.client_side_validation and ('live_room_url' not in local_var_params or  # noqa: E501
                                                        local_var_params['live_room_url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `live_room_url` when calling `fetch_tiktok_live_data_api_v1_tiktok_web_fetch_tiktok_live_data_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'live_room_url' in local_var_params and local_var_params['live_room_url'] is not None:  # noqa: E501
            query_params.append(('live_room_url', local_var_params['live_room_url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_tiktok_live_data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_tiktok_live_data_api_v1_tiktok_web_fetch_tiktok_live_data_get_0(self, live_room_url, **kwargs):  # noqa: E501
        """通过直播链接获取直播间信息/Get live room information via live link  # noqa: E501

        # [中文] ### 用途: - 通过直播链接获取直播间信息 - 此接口可获取离线直播间信息 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间信息  # [English] ### Purpose: - Get live room information via live link - This interface can get offline live room information ### Parameters: - live_room_url: Live room link ### Return: - Live room information  # [示例/Example] live_room_url = \"https://www.tiktok.com/@.caseoh_daily/live\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_tiktok_live_data_api_v1_tiktok_web_fetch_tiktok_live_data_get_0(live_room_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str live_room_url: 直播间链接/Live room link (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_tiktok_live_data_api_v1_tiktok_web_fetch_tiktok_live_data_get_0_with_http_info(live_room_url, **kwargs)  # noqa: E501

    def fetch_tiktok_live_data_api_v1_tiktok_web_fetch_tiktok_live_data_get_0_with_http_info(self, live_room_url, **kwargs):  # noqa: E501
        """通过直播链接获取直播间信息/Get live room information via live link  # noqa: E501

        # [中文] ### 用途: - 通过直播链接获取直播间信息 - 此接口可获取离线直播间信息 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间信息  # [English] ### Purpose: - Get live room information via live link - This interface can get offline live room information ### Parameters: - live_room_url: Live room link ### Return: - Live room information  # [示例/Example] live_room_url = \"https://www.tiktok.com/@.caseoh_daily/live\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_tiktok_live_data_api_v1_tiktok_web_fetch_tiktok_live_data_get_0_with_http_info(live_room_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str live_room_url: 直播间链接/Live room link (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'live_room_url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_tiktok_live_data_api_v1_tiktok_web_fetch_tiktok_live_data_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'live_room_url' is set
        if self.api_client.client_side_validation and ('live_room_url' not in local_var_params or  # noqa: E501
                                                        local_var_params['live_room_url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `live_room_url` when calling `fetch_tiktok_live_data_api_v1_tiktok_web_fetch_tiktok_live_data_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'live_room_url' in local_var_params and local_var_params['live_room_url'] is not None:  # noqa: E501
            query_params.append(('live_room_url', local_var_params['live_room_url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_tiktok_live_data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_trending_post_api_v1_tiktok_web_fetch_trending_post_get(self, **kwargs):  # noqa: E501
        """获取每日热门内容作品数据/Get daily trending video data  # noqa: E501

        # [中文] ### 用途: - 获取每日热门内容作品数据 ### 返回: - 作品数据  # [English] ### Purpose: - Get daily trending video data ### Return: - Video data  # [示例/Example]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_trending_post_api_v1_tiktok_web_fetch_trending_post_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_trending_post_api_v1_tiktok_web_fetch_trending_post_get_with_http_info(**kwargs)  # noqa: E501

    def fetch_trending_post_api_v1_tiktok_web_fetch_trending_post_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取每日热门内容作品数据/Get daily trending video data  # noqa: E501

        # [中文] ### 用途: - 获取每日热门内容作品数据 ### 返回: - 作品数据  # [English] ### Purpose: - Get daily trending video data ### Return: - Video data  # [示例/Example]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_trending_post_api_v1_tiktok_web_fetch_trending_post_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_trending_post_api_v1_tiktok_web_fetch_trending_post_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_trending_post', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_trending_post_api_v1_tiktok_web_fetch_trending_post_get_0(self, **kwargs):  # noqa: E501
        """获取每日热门内容作品数据/Get daily trending video data  # noqa: E501

        # [中文] ### 用途: - 获取每日热门内容作品数据 ### 返回: - 作品数据  # [English] ### Purpose: - Get daily trending video data ### Return: - Video data  # [示例/Example]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_trending_post_api_v1_tiktok_web_fetch_trending_post_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_trending_post_api_v1_tiktok_web_fetch_trending_post_get_0_with_http_info(**kwargs)  # noqa: E501

    def fetch_trending_post_api_v1_tiktok_web_fetch_trending_post_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取每日热门内容作品数据/Get daily trending video data  # noqa: E501

        # [中文] ### 用途: - 获取每日热门内容作品数据 ### 返回: - 作品数据  # [English] ### Purpose: - Get daily trending video data ### Return: - Video data  # [示例/Example]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_trending_post_api_v1_tiktok_web_fetch_trending_post_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_trending_post_api_v1_tiktok_web_fetch_trending_post_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_trending_post', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_collect_api_v1_tiktok_web_fetch_user_collect_get(self, cookie, sec_uid, **kwargs):  # noqa: E501
        """获取用户的收藏列表/Get user favorites  # noqa: E501

        # [中文] ### 用途: - 获取用户的收藏列表 - 注意: 该接口目前只能获取自己的收藏列表，需要提供自己账号的cookie。 ### 参数: - cookie: 用户cookie - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的收藏列表  # [English] ### Purpose: - Get user favorites - Note: This interface can currently only get your own favorites list, you need to provide your account cookie. ### Parameters: - cookie: User cookie - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User favorites  # [示例/Example] cookie = \"Your_Cookie\" secUid = \"Your_SecUid\" cursor = 0 count = 30 coverFormat = 2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_collect_api_v1_tiktok_web_fetch_user_collect_get(cookie, sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cookie: 用户cookie/User cookie (required)
        :param str sec_uid: 用户secUid/User secUid (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param int cover_format: 封面格式/Cover format
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_collect_api_v1_tiktok_web_fetch_user_collect_get_with_http_info(cookie, sec_uid, **kwargs)  # noqa: E501

    def fetch_user_collect_api_v1_tiktok_web_fetch_user_collect_get_with_http_info(self, cookie, sec_uid, **kwargs):  # noqa: E501
        """获取用户的收藏列表/Get user favorites  # noqa: E501

        # [中文] ### 用途: - 获取用户的收藏列表 - 注意: 该接口目前只能获取自己的收藏列表，需要提供自己账号的cookie。 ### 参数: - cookie: 用户cookie - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的收藏列表  # [English] ### Purpose: - Get user favorites - Note: This interface can currently only get your own favorites list, you need to provide your account cookie. ### Parameters: - cookie: User cookie - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User favorites  # [示例/Example] cookie = \"Your_Cookie\" secUid = \"Your_SecUid\" cursor = 0 count = 30 coverFormat = 2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_collect_api_v1_tiktok_web_fetch_user_collect_get_with_http_info(cookie, sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cookie: 用户cookie/User cookie (required)
        :param str sec_uid: 用户secUid/User secUid (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param int cover_format: 封面格式/Cover format
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cookie',
            'sec_uid',
            'cursor',
            'count',
            'cover_format'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_collect_api_v1_tiktok_web_fetch_user_collect_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cookie' is set
        if self.api_client.client_side_validation and ('cookie' not in local_var_params or  # noqa: E501
                                                        local_var_params['cookie'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cookie` when calling `fetch_user_collect_api_v1_tiktok_web_fetch_user_collect_get`")  # noqa: E501
        # verify the required parameter 'sec_uid' is set
        if self.api_client.client_side_validation and ('sec_uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_uid` when calling `fetch_user_collect_api_v1_tiktok_web_fetch_user_collect_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501
        if 'sec_uid' in local_var_params and local_var_params['sec_uid'] is not None:  # noqa: E501
            query_params.append(('secUid', local_var_params['sec_uid']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'cover_format' in local_var_params and local_var_params['cover_format'] is not None:  # noqa: E501
            query_params.append(('coverFormat', local_var_params['cover_format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_user_collect', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_collect_api_v1_tiktok_web_fetch_user_collect_get_0(self, cookie, sec_uid, **kwargs):  # noqa: E501
        """获取用户的收藏列表/Get user favorites  # noqa: E501

        # [中文] ### 用途: - 获取用户的收藏列表 - 注意: 该接口目前只能获取自己的收藏列表，需要提供自己账号的cookie。 ### 参数: - cookie: 用户cookie - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的收藏列表  # [English] ### Purpose: - Get user favorites - Note: This interface can currently only get your own favorites list, you need to provide your account cookie. ### Parameters: - cookie: User cookie - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User favorites  # [示例/Example] cookie = \"Your_Cookie\" secUid = \"Your_SecUid\" cursor = 0 count = 30 coverFormat = 2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_collect_api_v1_tiktok_web_fetch_user_collect_get_0(cookie, sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cookie: 用户cookie/User cookie (required)
        :param str sec_uid: 用户secUid/User secUid (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param int cover_format: 封面格式/Cover format
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_collect_api_v1_tiktok_web_fetch_user_collect_get_0_with_http_info(cookie, sec_uid, **kwargs)  # noqa: E501

    def fetch_user_collect_api_v1_tiktok_web_fetch_user_collect_get_0_with_http_info(self, cookie, sec_uid, **kwargs):  # noqa: E501
        """获取用户的收藏列表/Get user favorites  # noqa: E501

        # [中文] ### 用途: - 获取用户的收藏列表 - 注意: 该接口目前只能获取自己的收藏列表，需要提供自己账号的cookie。 ### 参数: - cookie: 用户cookie - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的收藏列表  # [English] ### Purpose: - Get user favorites - Note: This interface can currently only get your own favorites list, you need to provide your account cookie. ### Parameters: - cookie: User cookie - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User favorites  # [示例/Example] cookie = \"Your_Cookie\" secUid = \"Your_SecUid\" cursor = 0 count = 30 coverFormat = 2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_collect_api_v1_tiktok_web_fetch_user_collect_get_0_with_http_info(cookie, sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cookie: 用户cookie/User cookie (required)
        :param str sec_uid: 用户secUid/User secUid (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param int cover_format: 封面格式/Cover format
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cookie',
            'sec_uid',
            'cursor',
            'count',
            'cover_format'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_collect_api_v1_tiktok_web_fetch_user_collect_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cookie' is set
        if self.api_client.client_side_validation and ('cookie' not in local_var_params or  # noqa: E501
                                                        local_var_params['cookie'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cookie` when calling `fetch_user_collect_api_v1_tiktok_web_fetch_user_collect_get_0`")  # noqa: E501
        # verify the required parameter 'sec_uid' is set
        if self.api_client.client_side_validation and ('sec_uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_uid` when calling `fetch_user_collect_api_v1_tiktok_web_fetch_user_collect_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501
        if 'sec_uid' in local_var_params and local_var_params['sec_uid'] is not None:  # noqa: E501
            query_params.append(('secUid', local_var_params['sec_uid']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'cover_format' in local_var_params and local_var_params['cover_format'] is not None:  # noqa: E501
            query_params.append(('coverFormat', local_var_params['cover_format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_user_collect', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_fans_api_v1_tiktok_web_fetch_user_fans_get(self, sec_uid, **kwargs):  # noqa: E501
        """获取用户的粉丝列表/Get user followers  # noqa: E501

        # [中文] ### 用途: - 获取用户的粉丝列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的粉丝列表  # [English] ### Purpose: - Get user followers ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followers  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_fans_api_v1_tiktok_web_fetch_user_fans_get(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户secUid/User secUid (required)
        :param int count: 每页数量/Number per page
        :param int max_cursor: 最大游标/Max cursor
        :param int min_cursor: 最小游标/Min cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_fans_api_v1_tiktok_web_fetch_user_fans_get_with_http_info(sec_uid, **kwargs)  # noqa: E501

    def fetch_user_fans_api_v1_tiktok_web_fetch_user_fans_get_with_http_info(self, sec_uid, **kwargs):  # noqa: E501
        """获取用户的粉丝列表/Get user followers  # noqa: E501

        # [中文] ### 用途: - 获取用户的粉丝列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的粉丝列表  # [English] ### Purpose: - Get user followers ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followers  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_fans_api_v1_tiktok_web_fetch_user_fans_get_with_http_info(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户secUid/User secUid (required)
        :param int count: 每页数量/Number per page
        :param int max_cursor: 最大游标/Max cursor
        :param int min_cursor: 最小游标/Min cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_uid',
            'count',
            'max_cursor',
            'min_cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_fans_api_v1_tiktok_web_fetch_user_fans_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_uid' is set
        if self.api_client.client_side_validation and ('sec_uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_uid` when calling `fetch_user_fans_api_v1_tiktok_web_fetch_user_fans_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_uid' in local_var_params and local_var_params['sec_uid'] is not None:  # noqa: E501
            query_params.append(('secUid', local_var_params['sec_uid']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'max_cursor' in local_var_params and local_var_params['max_cursor'] is not None:  # noqa: E501
            query_params.append(('maxCursor', local_var_params['max_cursor']))  # noqa: E501
        if 'min_cursor' in local_var_params and local_var_params['min_cursor'] is not None:  # noqa: E501
            query_params.append(('minCursor', local_var_params['min_cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_user_fans', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_fans_api_v1_tiktok_web_fetch_user_fans_get_0(self, sec_uid, **kwargs):  # noqa: E501
        """获取用户的粉丝列表/Get user followers  # noqa: E501

        # [中文] ### 用途: - 获取用户的粉丝列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的粉丝列表  # [English] ### Purpose: - Get user followers ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followers  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_fans_api_v1_tiktok_web_fetch_user_fans_get_0(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户secUid/User secUid (required)
        :param int count: 每页数量/Number per page
        :param int max_cursor: 最大游标/Max cursor
        :param int min_cursor: 最小游标/Min cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_fans_api_v1_tiktok_web_fetch_user_fans_get_0_with_http_info(sec_uid, **kwargs)  # noqa: E501

    def fetch_user_fans_api_v1_tiktok_web_fetch_user_fans_get_0_with_http_info(self, sec_uid, **kwargs):  # noqa: E501
        """获取用户的粉丝列表/Get user followers  # noqa: E501

        # [中文] ### 用途: - 获取用户的粉丝列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的粉丝列表  # [English] ### Purpose: - Get user followers ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followers  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_fans_api_v1_tiktok_web_fetch_user_fans_get_0_with_http_info(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户secUid/User secUid (required)
        :param int count: 每页数量/Number per page
        :param int max_cursor: 最大游标/Max cursor
        :param int min_cursor: 最小游标/Min cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_uid',
            'count',
            'max_cursor',
            'min_cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_fans_api_v1_tiktok_web_fetch_user_fans_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_uid' is set
        if self.api_client.client_side_validation and ('sec_uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_uid` when calling `fetch_user_fans_api_v1_tiktok_web_fetch_user_fans_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_uid' in local_var_params and local_var_params['sec_uid'] is not None:  # noqa: E501
            query_params.append(('secUid', local_var_params['sec_uid']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'max_cursor' in local_var_params and local_var_params['max_cursor'] is not None:  # noqa: E501
            query_params.append(('maxCursor', local_var_params['max_cursor']))  # noqa: E501
        if 'min_cursor' in local_var_params and local_var_params['min_cursor'] is not None:  # noqa: E501
            query_params.append(('minCursor', local_var_params['min_cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_user_fans', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_follow_api_v1_tiktok_web_fetch_user_follow_get(self, sec_uid, **kwargs):  # noqa: E501
        """获取用户的关注列表/Get user followings  # noqa: E501

        # [中文] ### 用途: - 获取用户的关注列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的关注列表  # [English] ### Purpose: - Get user followings ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followings  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_follow_api_v1_tiktok_web_fetch_user_follow_get(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户secUid/User secUid (required)
        :param int count: 每页数量/Number per page
        :param int max_cursor: 最大游标/Max cursor
        :param int min_cursor: 最小游标/Min cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_follow_api_v1_tiktok_web_fetch_user_follow_get_with_http_info(sec_uid, **kwargs)  # noqa: E501

    def fetch_user_follow_api_v1_tiktok_web_fetch_user_follow_get_with_http_info(self, sec_uid, **kwargs):  # noqa: E501
        """获取用户的关注列表/Get user followings  # noqa: E501

        # [中文] ### 用途: - 获取用户的关注列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的关注列表  # [English] ### Purpose: - Get user followings ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followings  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_follow_api_v1_tiktok_web_fetch_user_follow_get_with_http_info(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户secUid/User secUid (required)
        :param int count: 每页数量/Number per page
        :param int max_cursor: 最大游标/Max cursor
        :param int min_cursor: 最小游标/Min cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_uid',
            'count',
            'max_cursor',
            'min_cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_follow_api_v1_tiktok_web_fetch_user_follow_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_uid' is set
        if self.api_client.client_side_validation and ('sec_uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_uid` when calling `fetch_user_follow_api_v1_tiktok_web_fetch_user_follow_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_uid' in local_var_params and local_var_params['sec_uid'] is not None:  # noqa: E501
            query_params.append(('secUid', local_var_params['sec_uid']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'max_cursor' in local_var_params and local_var_params['max_cursor'] is not None:  # noqa: E501
            query_params.append(('maxCursor', local_var_params['max_cursor']))  # noqa: E501
        if 'min_cursor' in local_var_params and local_var_params['min_cursor'] is not None:  # noqa: E501
            query_params.append(('minCursor', local_var_params['min_cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_user_follow', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_follow_api_v1_tiktok_web_fetch_user_follow_get_0(self, sec_uid, **kwargs):  # noqa: E501
        """获取用户的关注列表/Get user followings  # noqa: E501

        # [中文] ### 用途: - 获取用户的关注列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的关注列表  # [English] ### Purpose: - Get user followings ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followings  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_follow_api_v1_tiktok_web_fetch_user_follow_get_0(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户secUid/User secUid (required)
        :param int count: 每页数量/Number per page
        :param int max_cursor: 最大游标/Max cursor
        :param int min_cursor: 最小游标/Min cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_follow_api_v1_tiktok_web_fetch_user_follow_get_0_with_http_info(sec_uid, **kwargs)  # noqa: E501

    def fetch_user_follow_api_v1_tiktok_web_fetch_user_follow_get_0_with_http_info(self, sec_uid, **kwargs):  # noqa: E501
        """获取用户的关注列表/Get user followings  # noqa: E501

        # [中文] ### 用途: - 获取用户的关注列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的关注列表  # [English] ### Purpose: - Get user followings ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followings  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_follow_api_v1_tiktok_web_fetch_user_follow_get_0_with_http_info(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户secUid/User secUid (required)
        :param int count: 每页数量/Number per page
        :param int max_cursor: 最大游标/Max cursor
        :param int min_cursor: 最小游标/Min cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_uid',
            'count',
            'max_cursor',
            'min_cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_follow_api_v1_tiktok_web_fetch_user_follow_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_uid' is set
        if self.api_client.client_side_validation and ('sec_uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_uid` when calling `fetch_user_follow_api_v1_tiktok_web_fetch_user_follow_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_uid' in local_var_params and local_var_params['sec_uid'] is not None:  # noqa: E501
            query_params.append(('secUid', local_var_params['sec_uid']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'max_cursor' in local_var_params and local_var_params['max_cursor'] is not None:  # noqa: E501
            query_params.append(('maxCursor', local_var_params['max_cursor']))  # noqa: E501
        if 'min_cursor' in local_var_params and local_var_params['min_cursor'] is not None:  # noqa: E501
            query_params.append(('minCursor', local_var_params['min_cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_user_follow', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_like_api_v1_tiktok_web_fetch_user_like_get(self, sec_uid, **kwargs):  # noqa: E501
        """获取用户的点赞列表/Get user likes  # noqa: E501

        # [中文] ### 用途: - 获取用户的点赞列表 - 注意: 该接口需要用户点赞列表为公开状态 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的点赞列表  # [English] ### Purpose: - Get user likes - Note: This interface requires that the user's like list be public ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User likes  # [示例/Example] secUid = \"MS4wLjABAAAAq1iRXNduFZpY301UkVpJ1eQT60_NiWS9QQSeNqmNQEDJp0pOF8cpleNEdiJx5_IU\" cursor = 0 count = 20 coverFormat = 2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_like_api_v1_tiktok_web_fetch_user_like_get(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户secUid/User secUid (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param int cover_format: 封面格式/Cover format
        :param int post_item_list_request_type: 排序方式/Sort type
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_like_api_v1_tiktok_web_fetch_user_like_get_with_http_info(sec_uid, **kwargs)  # noqa: E501

    def fetch_user_like_api_v1_tiktok_web_fetch_user_like_get_with_http_info(self, sec_uid, **kwargs):  # noqa: E501
        """获取用户的点赞列表/Get user likes  # noqa: E501

        # [中文] ### 用途: - 获取用户的点赞列表 - 注意: 该接口需要用户点赞列表为公开状态 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的点赞列表  # [English] ### Purpose: - Get user likes - Note: This interface requires that the user's like list be public ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User likes  # [示例/Example] secUid = \"MS4wLjABAAAAq1iRXNduFZpY301UkVpJ1eQT60_NiWS9QQSeNqmNQEDJp0pOF8cpleNEdiJx5_IU\" cursor = 0 count = 20 coverFormat = 2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_like_api_v1_tiktok_web_fetch_user_like_get_with_http_info(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户secUid/User secUid (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param int cover_format: 封面格式/Cover format
        :param int post_item_list_request_type: 排序方式/Sort type
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_uid',
            'cursor',
            'count',
            'cover_format',
            'post_item_list_request_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_like_api_v1_tiktok_web_fetch_user_like_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_uid' is set
        if self.api_client.client_side_validation and ('sec_uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_uid` when calling `fetch_user_like_api_v1_tiktok_web_fetch_user_like_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_uid' in local_var_params and local_var_params['sec_uid'] is not None:  # noqa: E501
            query_params.append(('secUid', local_var_params['sec_uid']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'cover_format' in local_var_params and local_var_params['cover_format'] is not None:  # noqa: E501
            query_params.append(('coverFormat', local_var_params['cover_format']))  # noqa: E501
        if 'post_item_list_request_type' in local_var_params and local_var_params['post_item_list_request_type'] is not None:  # noqa: E501
            query_params.append(('post_item_list_request_type', local_var_params['post_item_list_request_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_user_like', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_like_api_v1_tiktok_web_fetch_user_like_get_0(self, sec_uid, **kwargs):  # noqa: E501
        """获取用户的点赞列表/Get user likes  # noqa: E501

        # [中文] ### 用途: - 获取用户的点赞列表 - 注意: 该接口需要用户点赞列表为公开状态 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的点赞列表  # [English] ### Purpose: - Get user likes - Note: This interface requires that the user's like list be public ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User likes  # [示例/Example] secUid = \"MS4wLjABAAAAq1iRXNduFZpY301UkVpJ1eQT60_NiWS9QQSeNqmNQEDJp0pOF8cpleNEdiJx5_IU\" cursor = 0 count = 20 coverFormat = 2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_like_api_v1_tiktok_web_fetch_user_like_get_0(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户secUid/User secUid (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param int cover_format: 封面格式/Cover format
        :param int post_item_list_request_type: 排序方式/Sort type
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_like_api_v1_tiktok_web_fetch_user_like_get_0_with_http_info(sec_uid, **kwargs)  # noqa: E501

    def fetch_user_like_api_v1_tiktok_web_fetch_user_like_get_0_with_http_info(self, sec_uid, **kwargs):  # noqa: E501
        """获取用户的点赞列表/Get user likes  # noqa: E501

        # [中文] ### 用途: - 获取用户的点赞列表 - 注意: 该接口需要用户点赞列表为公开状态 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的点赞列表  # [English] ### Purpose: - Get user likes - Note: This interface requires that the user's like list be public ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User likes  # [示例/Example] secUid = \"MS4wLjABAAAAq1iRXNduFZpY301UkVpJ1eQT60_NiWS9QQSeNqmNQEDJp0pOF8cpleNEdiJx5_IU\" cursor = 0 count = 20 coverFormat = 2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_like_api_v1_tiktok_web_fetch_user_like_get_0_with_http_info(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户secUid/User secUid (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param int cover_format: 封面格式/Cover format
        :param int post_item_list_request_type: 排序方式/Sort type
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_uid',
            'cursor',
            'count',
            'cover_format',
            'post_item_list_request_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_like_api_v1_tiktok_web_fetch_user_like_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_uid' is set
        if self.api_client.client_side_validation and ('sec_uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_uid` when calling `fetch_user_like_api_v1_tiktok_web_fetch_user_like_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_uid' in local_var_params and local_var_params['sec_uid'] is not None:  # noqa: E501
            query_params.append(('secUid', local_var_params['sec_uid']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'cover_format' in local_var_params and local_var_params['cover_format'] is not None:  # noqa: E501
            query_params.append(('coverFormat', local_var_params['cover_format']))  # noqa: E501
        if 'post_item_list_request_type' in local_var_params and local_var_params['post_item_list_request_type'] is not None:  # noqa: E501
            query_params.append(('post_item_list_request_type', local_var_params['post_item_list_request_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_user_like', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_mix_api_v1_tiktok_web_fetch_user_mix_get(self, mix_id, **kwargs):  # noqa: E501
        """获取用户的合辑列表/Get user mix list  # noqa: E501

        # [中文] ### 用途: - 获取用户的合辑列表 ### 参数: - mixId: 合辑id - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的合辑列表  # [English] ### Purpose: - Get user mix list ### Parameters: - mixId: Mix id - cursor: Page cursor - count: Number per page ### Return: - User mix list  # [示例/Eample] mixId = \"7101538765474106158\" cursor = 0 count = 30  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_mix_api_v1_tiktok_web_fetch_user_mix_get(mix_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str mix_id: 合辑id/Mix id (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_mix_api_v1_tiktok_web_fetch_user_mix_get_with_http_info(mix_id, **kwargs)  # noqa: E501

    def fetch_user_mix_api_v1_tiktok_web_fetch_user_mix_get_with_http_info(self, mix_id, **kwargs):  # noqa: E501
        """获取用户的合辑列表/Get user mix list  # noqa: E501

        # [中文] ### 用途: - 获取用户的合辑列表 ### 参数: - mixId: 合辑id - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的合辑列表  # [English] ### Purpose: - Get user mix list ### Parameters: - mixId: Mix id - cursor: Page cursor - count: Number per page ### Return: - User mix list  # [示例/Eample] mixId = \"7101538765474106158\" cursor = 0 count = 30  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_mix_api_v1_tiktok_web_fetch_user_mix_get_with_http_info(mix_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str mix_id: 合辑id/Mix id (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'mix_id',
            'cursor',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_mix_api_v1_tiktok_web_fetch_user_mix_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mix_id' is set
        if self.api_client.client_side_validation and ('mix_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['mix_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `mix_id` when calling `fetch_user_mix_api_v1_tiktok_web_fetch_user_mix_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'mix_id' in local_var_params and local_var_params['mix_id'] is not None:  # noqa: E501
            query_params.append(('mixId', local_var_params['mix_id']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_user_mix', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_mix_api_v1_tiktok_web_fetch_user_mix_get_0(self, mix_id, **kwargs):  # noqa: E501
        """获取用户的合辑列表/Get user mix list  # noqa: E501

        # [中文] ### 用途: - 获取用户的合辑列表 ### 参数: - mixId: 合辑id - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的合辑列表  # [English] ### Purpose: - Get user mix list ### Parameters: - mixId: Mix id - cursor: Page cursor - count: Number per page ### Return: - User mix list  # [示例/Eample] mixId = \"7101538765474106158\" cursor = 0 count = 30  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_mix_api_v1_tiktok_web_fetch_user_mix_get_0(mix_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str mix_id: 合辑id/Mix id (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_mix_api_v1_tiktok_web_fetch_user_mix_get_0_with_http_info(mix_id, **kwargs)  # noqa: E501

    def fetch_user_mix_api_v1_tiktok_web_fetch_user_mix_get_0_with_http_info(self, mix_id, **kwargs):  # noqa: E501
        """获取用户的合辑列表/Get user mix list  # noqa: E501

        # [中文] ### 用途: - 获取用户的合辑列表 ### 参数: - mixId: 合辑id - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的合辑列表  # [English] ### Purpose: - Get user mix list ### Parameters: - mixId: Mix id - cursor: Page cursor - count: Number per page ### Return: - User mix list  # [示例/Eample] mixId = \"7101538765474106158\" cursor = 0 count = 30  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_mix_api_v1_tiktok_web_fetch_user_mix_get_0_with_http_info(mix_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str mix_id: 合辑id/Mix id (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'mix_id',
            'cursor',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_mix_api_v1_tiktok_web_fetch_user_mix_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'mix_id' is set
        if self.api_client.client_side_validation and ('mix_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['mix_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `mix_id` when calling `fetch_user_mix_api_v1_tiktok_web_fetch_user_mix_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'mix_id' in local_var_params and local_var_params['mix_id'] is not None:  # noqa: E501
            query_params.append(('mixId', local_var_params['mix_id']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_user_mix', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_play_list_api_v1_tiktok_web_fetch_user_play_list_get(self, sec_uid, **kwargs):  # noqa: E501
        """获取用户的播放列表/Get user play list  # noqa: E501

        # [中文] ### 用途: - 获取用户的播放列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的播放列表  # [English] ### Purpose: - Get user play list ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page ### Return: - User play list  # [示例/Eample] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 30  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_play_list_api_v1_tiktok_web_fetch_user_play_list_get(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户secUid/User secUid (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_play_list_api_v1_tiktok_web_fetch_user_play_list_get_with_http_info(sec_uid, **kwargs)  # noqa: E501

    def fetch_user_play_list_api_v1_tiktok_web_fetch_user_play_list_get_with_http_info(self, sec_uid, **kwargs):  # noqa: E501
        """获取用户的播放列表/Get user play list  # noqa: E501

        # [中文] ### 用途: - 获取用户的播放列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的播放列表  # [English] ### Purpose: - Get user play list ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page ### Return: - User play list  # [示例/Eample] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 30  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_play_list_api_v1_tiktok_web_fetch_user_play_list_get_with_http_info(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户secUid/User secUid (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_uid',
            'cursor',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_play_list_api_v1_tiktok_web_fetch_user_play_list_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_uid' is set
        if self.api_client.client_side_validation and ('sec_uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_uid` when calling `fetch_user_play_list_api_v1_tiktok_web_fetch_user_play_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_uid' in local_var_params and local_var_params['sec_uid'] is not None:  # noqa: E501
            query_params.append(('secUid', local_var_params['sec_uid']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_user_play_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_play_list_api_v1_tiktok_web_fetch_user_play_list_get_0(self, sec_uid, **kwargs):  # noqa: E501
        """获取用户的播放列表/Get user play list  # noqa: E501

        # [中文] ### 用途: - 获取用户的播放列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的播放列表  # [English] ### Purpose: - Get user play list ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page ### Return: - User play list  # [示例/Eample] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 30  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_play_list_api_v1_tiktok_web_fetch_user_play_list_get_0(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户secUid/User secUid (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_play_list_api_v1_tiktok_web_fetch_user_play_list_get_0_with_http_info(sec_uid, **kwargs)  # noqa: E501

    def fetch_user_play_list_api_v1_tiktok_web_fetch_user_play_list_get_0_with_http_info(self, sec_uid, **kwargs):  # noqa: E501
        """获取用户的播放列表/Get user play list  # noqa: E501

        # [中文] ### 用途: - 获取用户的播放列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的播放列表  # [English] ### Purpose: - Get user play list ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page ### Return: - User play list  # [示例/Eample] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 30  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_play_list_api_v1_tiktok_web_fetch_user_play_list_get_0_with_http_info(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户secUid/User secUid (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_uid',
            'cursor',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_play_list_api_v1_tiktok_web_fetch_user_play_list_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_uid' is set
        if self.api_client.client_side_validation and ('sec_uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_uid` when calling `fetch_user_play_list_api_v1_tiktok_web_fetch_user_play_list_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_uid' in local_var_params and local_var_params['sec_uid'] is not None:  # noqa: E501
            query_params.append(('secUid', local_var_params['sec_uid']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_user_play_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_post_api_v1_tiktok_web_fetch_user_post_get(self, sec_uid, **kwargs):  # noqa: E501
        """获取用户的作品列表/Get user posts  # noqa: E501

        # [中文] ### 用途: - 获取用户的作品列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的作品列表  # [English] ### Purpose: - Get user posts ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User posts  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 20 coverFormat = 2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_post_api_v1_tiktok_web_fetch_user_post_get(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户secUid/User secUid (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param int cover_format: 封面格式/Cover format
        :param int post_item_list_request_type: 排序方式/Sort type
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_post_api_v1_tiktok_web_fetch_user_post_get_with_http_info(sec_uid, **kwargs)  # noqa: E501

    def fetch_user_post_api_v1_tiktok_web_fetch_user_post_get_with_http_info(self, sec_uid, **kwargs):  # noqa: E501
        """获取用户的作品列表/Get user posts  # noqa: E501

        # [中文] ### 用途: - 获取用户的作品列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的作品列表  # [English] ### Purpose: - Get user posts ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User posts  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 20 coverFormat = 2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_post_api_v1_tiktok_web_fetch_user_post_get_with_http_info(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户secUid/User secUid (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param int cover_format: 封面格式/Cover format
        :param int post_item_list_request_type: 排序方式/Sort type
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_uid',
            'cursor',
            'count',
            'cover_format',
            'post_item_list_request_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_post_api_v1_tiktok_web_fetch_user_post_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_uid' is set
        if self.api_client.client_side_validation and ('sec_uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_uid` when calling `fetch_user_post_api_v1_tiktok_web_fetch_user_post_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_uid' in local_var_params and local_var_params['sec_uid'] is not None:  # noqa: E501
            query_params.append(('secUid', local_var_params['sec_uid']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'cover_format' in local_var_params and local_var_params['cover_format'] is not None:  # noqa: E501
            query_params.append(('coverFormat', local_var_params['cover_format']))  # noqa: E501
        if 'post_item_list_request_type' in local_var_params and local_var_params['post_item_list_request_type'] is not None:  # noqa: E501
            query_params.append(('post_item_list_request_type', local_var_params['post_item_list_request_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_user_post', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_post_api_v1_tiktok_web_fetch_user_post_get_0(self, sec_uid, **kwargs):  # noqa: E501
        """获取用户的作品列表/Get user posts  # noqa: E501

        # [中文] ### 用途: - 获取用户的作品列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的作品列表  # [English] ### Purpose: - Get user posts ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User posts  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 20 coverFormat = 2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_post_api_v1_tiktok_web_fetch_user_post_get_0(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户secUid/User secUid (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param int cover_format: 封面格式/Cover format
        :param int post_item_list_request_type: 排序方式/Sort type
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_post_api_v1_tiktok_web_fetch_user_post_get_0_with_http_info(sec_uid, **kwargs)  # noqa: E501

    def fetch_user_post_api_v1_tiktok_web_fetch_user_post_get_0_with_http_info(self, sec_uid, **kwargs):  # noqa: E501
        """获取用户的作品列表/Get user posts  # noqa: E501

        # [中文] ### 用途: - 获取用户的作品列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的作品列表  # [English] ### Purpose: - Get user posts ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User posts  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 20 coverFormat = 2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_post_api_v1_tiktok_web_fetch_user_post_get_0_with_http_info(sec_uid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str sec_uid: 用户secUid/User secUid (required)
        :param int cursor: 翻页游标/Page cursor
        :param int count: 每页数量/Number per page
        :param int cover_format: 封面格式/Cover format
        :param int post_item_list_request_type: 排序方式/Sort type
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sec_uid',
            'cursor',
            'count',
            'cover_format',
            'post_item_list_request_type'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_post_api_v1_tiktok_web_fetch_user_post_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sec_uid' is set
        if self.api_client.client_side_validation and ('sec_uid' not in local_var_params or  # noqa: E501
                                                        local_var_params['sec_uid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sec_uid` when calling `fetch_user_post_api_v1_tiktok_web_fetch_user_post_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sec_uid' in local_var_params and local_var_params['sec_uid'] is not None:  # noqa: E501
            query_params.append(('secUid', local_var_params['sec_uid']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] is not None:  # noqa: E501
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'cover_format' in local_var_params and local_var_params['cover_format'] is not None:  # noqa: E501
            query_params.append(('coverFormat', local_var_params['cover_format']))  # noqa: E501
        if 'post_item_list_request_type' in local_var_params and local_var_params['post_item_list_request_type'] is not None:  # noqa: E501
            query_params.append(('post_item_list_request_type', local_var_params['post_item_list_request_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_user_post', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_profile_api_v1_tiktok_web_fetch_user_profile_get(self, **kwargs):  # noqa: E501
        """获取用户的个人信息/Get user profile  # noqa: E501

        # [中文] ### 用途: - 获取用户的个人信息 ### 参数: - secUid: 用户secUid - uniqueId: 用户uniqueId - secUid和uniqueId至少提供一个, 优先使用uniqueId, 也就是用户主页的链接中的用户名。 ### 返回: - 用户的个人信息  # [English] ### Purpose: - Get user profile ### Parameters: - secUid: User secUid - uniqueId: User uniqueId - At least one of secUid and uniqueId is provided, and uniqueId is preferred, that is, the username in the user's homepage link. ### Return: - User profile  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" uniqueId = \"tiktok\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_profile_api_v1_tiktok_web_fetch_user_profile_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str unique_id: 用户uniqueId/User uniqueId
        :param str sec_uid: 用户secUid/User secUid
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_profile_api_v1_tiktok_web_fetch_user_profile_get_with_http_info(**kwargs)  # noqa: E501

    def fetch_user_profile_api_v1_tiktok_web_fetch_user_profile_get_with_http_info(self, **kwargs):  # noqa: E501
        """获取用户的个人信息/Get user profile  # noqa: E501

        # [中文] ### 用途: - 获取用户的个人信息 ### 参数: - secUid: 用户secUid - uniqueId: 用户uniqueId - secUid和uniqueId至少提供一个, 优先使用uniqueId, 也就是用户主页的链接中的用户名。 ### 返回: - 用户的个人信息  # [English] ### Purpose: - Get user profile ### Parameters: - secUid: User secUid - uniqueId: User uniqueId - At least one of secUid and uniqueId is provided, and uniqueId is preferred, that is, the username in the user's homepage link. ### Return: - User profile  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" uniqueId = \"tiktok\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_profile_api_v1_tiktok_web_fetch_user_profile_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str unique_id: 用户uniqueId/User uniqueId
        :param str sec_uid: 用户secUid/User secUid
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'unique_id',
            'sec_uid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_profile_api_v1_tiktok_web_fetch_user_profile_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'unique_id' in local_var_params and local_var_params['unique_id'] is not None:  # noqa: E501
            query_params.append(('uniqueId', local_var_params['unique_id']))  # noqa: E501
        if 'sec_uid' in local_var_params and local_var_params['sec_uid'] is not None:  # noqa: E501
            query_params.append(('secUid', local_var_params['sec_uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_user_profile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_profile_api_v1_tiktok_web_fetch_user_profile_get_0(self, **kwargs):  # noqa: E501
        """获取用户的个人信息/Get user profile  # noqa: E501

        # [中文] ### 用途: - 获取用户的个人信息 ### 参数: - secUid: 用户secUid - uniqueId: 用户uniqueId - secUid和uniqueId至少提供一个, 优先使用uniqueId, 也就是用户主页的链接中的用户名。 ### 返回: - 用户的个人信息  # [English] ### Purpose: - Get user profile ### Parameters: - secUid: User secUid - uniqueId: User uniqueId - At least one of secUid and uniqueId is provided, and uniqueId is preferred, that is, the username in the user's homepage link. ### Return: - User profile  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" uniqueId = \"tiktok\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_profile_api_v1_tiktok_web_fetch_user_profile_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str unique_id: 用户uniqueId/User uniqueId
        :param str sec_uid: 用户secUid/User secUid
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_profile_api_v1_tiktok_web_fetch_user_profile_get_0_with_http_info(**kwargs)  # noqa: E501

    def fetch_user_profile_api_v1_tiktok_web_fetch_user_profile_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取用户的个人信息/Get user profile  # noqa: E501

        # [中文] ### 用途: - 获取用户的个人信息 ### 参数: - secUid: 用户secUid - uniqueId: 用户uniqueId - secUid和uniqueId至少提供一个, 优先使用uniqueId, 也就是用户主页的链接中的用户名。 ### 返回: - 用户的个人信息  # [English] ### Purpose: - Get user profile ### Parameters: - secUid: User secUid - uniqueId: User uniqueId - At least one of secUid and uniqueId is provided, and uniqueId is preferred, that is, the username in the user's homepage link. ### Return: - User profile  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" uniqueId = \"tiktok\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_profile_api_v1_tiktok_web_fetch_user_profile_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str unique_id: 用户uniqueId/User uniqueId
        :param str sec_uid: 用户secUid/User secUid
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'unique_id',
            'sec_uid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_profile_api_v1_tiktok_web_fetch_user_profile_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'unique_id' in local_var_params and local_var_params['unique_id'] is not None:  # noqa: E501
            query_params.append(('uniqueId', local_var_params['unique_id']))  # noqa: E501
        if 'sec_uid' in local_var_params and local_var_params['sec_uid'] is not None:  # noqa: E501
            query_params.append(('secUid', local_var_params['sec_uid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/fetch_user_profile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_real_ms_token_api_v1_tiktok_web_generate_real_ms_token_get(self, **kwargs):  # noqa: E501
        """生成真实msToken/Generate real msToken  # noqa: E501

        # [中文] ### 用途: - 生成真实msToken ### 返回: - 真实msToken  # [English] ### Purpose: - Generate real msToken ### Return: - Real msToken  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_real_ms_token_api_v1_tiktok_web_generate_real_ms_token_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.generate_real_ms_token_api_v1_tiktok_web_generate_real_ms_token_get_with_http_info(**kwargs)  # noqa: E501

    def generate_real_ms_token_api_v1_tiktok_web_generate_real_ms_token_get_with_http_info(self, **kwargs):  # noqa: E501
        """生成真实msToken/Generate real msToken  # noqa: E501

        # [中文] ### 用途: - 生成真实msToken ### 返回: - 真实msToken  # [English] ### Purpose: - Generate real msToken ### Return: - Real msToken  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_real_ms_token_api_v1_tiktok_web_generate_real_ms_token_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_real_ms_token_api_v1_tiktok_web_generate_real_ms_token_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/generate_real_msToken', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_real_ms_token_api_v1_tiktok_web_generate_real_ms_token_get_0(self, **kwargs):  # noqa: E501
        """生成真实msToken/Generate real msToken  # noqa: E501

        # [中文] ### 用途: - 生成真实msToken ### 返回: - 真实msToken  # [English] ### Purpose: - Generate real msToken ### Return: - Real msToken  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_real_ms_token_api_v1_tiktok_web_generate_real_ms_token_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.generate_real_ms_token_api_v1_tiktok_web_generate_real_ms_token_get_0_with_http_info(**kwargs)  # noqa: E501

    def generate_real_ms_token_api_v1_tiktok_web_generate_real_ms_token_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """生成真实msToken/Generate real msToken  # noqa: E501

        # [中文] ### 用途: - 生成真实msToken ### 返回: - 真实msToken  # [English] ### Purpose: - Generate real msToken ### Return: - Real msToken  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_real_ms_token_api_v1_tiktok_web_generate_real_ms_token_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_real_ms_token_api_v1_tiktok_web_generate_real_ms_token_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/generate_real_msToken', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_ttwid_api_v1_tiktok_web_generate_ttwid_get(self, cookie, **kwargs):  # noqa: E501
        """生成ttwid/Generate ttwid  # noqa: E501

        # [中文] ### 用途: - 生成ttwid ### 参数: - cookie: 用户cookie ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Parameters: - cookie: User cookie ### Return: - ttwid  # [示例/Example] cookie = \"Your_Cookie\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_ttwid_api_v1_tiktok_web_generate_ttwid_get(cookie, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cookie: 用户cookie/User cookie (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.generate_ttwid_api_v1_tiktok_web_generate_ttwid_get_with_http_info(cookie, **kwargs)  # noqa: E501

    def generate_ttwid_api_v1_tiktok_web_generate_ttwid_get_with_http_info(self, cookie, **kwargs):  # noqa: E501
        """生成ttwid/Generate ttwid  # noqa: E501

        # [中文] ### 用途: - 生成ttwid ### 参数: - cookie: 用户cookie ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Parameters: - cookie: User cookie ### Return: - ttwid  # [示例/Example] cookie = \"Your_Cookie\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_ttwid_api_v1_tiktok_web_generate_ttwid_get_with_http_info(cookie, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cookie: 用户cookie/User cookie (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cookie'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_ttwid_api_v1_tiktok_web_generate_ttwid_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cookie' is set
        if self.api_client.client_side_validation and ('cookie' not in local_var_params or  # noqa: E501
                                                        local_var_params['cookie'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cookie` when calling `generate_ttwid_api_v1_tiktok_web_generate_ttwid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/generate_ttwid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_ttwid_api_v1_tiktok_web_generate_ttwid_get_0(self, cookie, **kwargs):  # noqa: E501
        """生成ttwid/Generate ttwid  # noqa: E501

        # [中文] ### 用途: - 生成ttwid ### 参数: - cookie: 用户cookie ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Parameters: - cookie: User cookie ### Return: - ttwid  # [示例/Example] cookie = \"Your_Cookie\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_ttwid_api_v1_tiktok_web_generate_ttwid_get_0(cookie, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cookie: 用户cookie/User cookie (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.generate_ttwid_api_v1_tiktok_web_generate_ttwid_get_0_with_http_info(cookie, **kwargs)  # noqa: E501

    def generate_ttwid_api_v1_tiktok_web_generate_ttwid_get_0_with_http_info(self, cookie, **kwargs):  # noqa: E501
        """生成ttwid/Generate ttwid  # noqa: E501

        # [中文] ### 用途: - 生成ttwid ### 参数: - cookie: 用户cookie ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Parameters: - cookie: User cookie ### Return: - ttwid  # [示例/Example] cookie = \"Your_Cookie\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_ttwid_api_v1_tiktok_web_generate_ttwid_get_0_with_http_info(cookie, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str cookie: 用户cookie/User cookie (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cookie'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_ttwid_api_v1_tiktok_web_generate_ttwid_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cookie' is set
        if self.api_client.client_side_validation and ('cookie' not in local_var_params or  # noqa: E501
                                                        local_var_params['cookie'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cookie` when calling `generate_ttwid_api_v1_tiktok_web_generate_ttwid_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cookie' in local_var_params and local_var_params['cookie'] is not None:  # noqa: E501
            query_params.append(('cookie', local_var_params['cookie']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/generate_ttwid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_xbogus_api_v1_tiktok_web_generate_xbogus_post(self, **kwargs):  # noqa: E501
        """生成xbogus/Generate xbogus  # noqa: E501

        # [中文] ### 用途: - 生成xbogus ### 参数: - url: 未签名的API URL - user_agent: 用户浏览器User-Agent ### 返回: - xbogus  # [English] ### Purpose: - Generate xbogus ### Parameters: - url: Unsigned API URL - user_agent: User browser User-Agent ### Return: - xbogus  # [示例/Example]  ```json {     \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\",     \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_xbogus_api_v1_tiktok_web_generate_xbogus_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param XBogusModel x_bogus_model:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.generate_xbogus_api_v1_tiktok_web_generate_xbogus_post_with_http_info(**kwargs)  # noqa: E501

    def generate_xbogus_api_v1_tiktok_web_generate_xbogus_post_with_http_info(self, **kwargs):  # noqa: E501
        """生成xbogus/Generate xbogus  # noqa: E501

        # [中文] ### 用途: - 生成xbogus ### 参数: - url: 未签名的API URL - user_agent: 用户浏览器User-Agent ### 返回: - xbogus  # [English] ### Purpose: - Generate xbogus ### Parameters: - url: Unsigned API URL - user_agent: User browser User-Agent ### Return: - xbogus  # [示例/Example]  ```json {     \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\",     \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_xbogus_api_v1_tiktok_web_generate_xbogus_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param XBogusModel x_bogus_model:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'x_bogus_model'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_xbogus_api_v1_tiktok_web_generate_xbogus_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'x_bogus_model' in local_var_params:
            body_params = local_var_params['x_bogus_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/generate_xbogus', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_xbogus_api_v1_tiktok_web_generate_xbogus_post_0(self, **kwargs):  # noqa: E501
        """生成xbogus/Generate xbogus  # noqa: E501

        # [中文] ### 用途: - 生成xbogus ### 参数: - url: 未签名的API URL - user_agent: 用户浏览器User-Agent ### 返回: - xbogus  # [English] ### Purpose: - Generate xbogus ### Parameters: - url: Unsigned API URL - user_agent: User browser User-Agent ### Return: - xbogus  # [示例/Example]  ```json {     \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\",     \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_xbogus_api_v1_tiktok_web_generate_xbogus_post_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param XBogusModel x_bogus_model:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.generate_xbogus_api_v1_tiktok_web_generate_xbogus_post_0_with_http_info(**kwargs)  # noqa: E501

    def generate_xbogus_api_v1_tiktok_web_generate_xbogus_post_0_with_http_info(self, **kwargs):  # noqa: E501
        """生成xbogus/Generate xbogus  # noqa: E501

        # [中文] ### 用途: - 生成xbogus ### 参数: - url: 未签名的API URL - user_agent: 用户浏览器User-Agent ### 返回: - xbogus  # [English] ### Purpose: - Generate xbogus ### Parameters: - url: Unsigned API URL - user_agent: User browser User-Agent ### Return: - xbogus  # [示例/Example]  ```json {     \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\",     \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_xbogus_api_v1_tiktok_web_generate_xbogus_post_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param XBogusModel x_bogus_model:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'x_bogus_model'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_xbogus_api_v1_tiktok_web_generate_xbogus_post_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'x_bogus_model' in local_var_params:
            body_params = local_var_params['x_bogus_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/generate_xbogus', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_aweme_id_api_v1_tiktok_web_get_all_aweme_id_post(self, **kwargs):  # noqa: E501
        """提取列表作品id/Extract list video id  # noqa: E501

        # [中文] ### 用途: - 提取列表作品id ### 参数: - url: 作品链接 (最多支持20个链接) ### 返回: - 作品id  # [English] ### Purpose: - Extract list video id ### Parameters: - url: Video link (Support up to 20 links) ### Return: - Video id  # [示例/Example] url = [\"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_aweme_id_api_v1_tiktok_web_get_all_aweme_id_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_aweme_id_api_v1_tiktok_web_get_all_aweme_id_post_with_http_info(**kwargs)  # noqa: E501

    def get_all_aweme_id_api_v1_tiktok_web_get_all_aweme_id_post_with_http_info(self, **kwargs):  # noqa: E501
        """提取列表作品id/Extract list video id  # noqa: E501

        # [中文] ### 用途: - 提取列表作品id ### 参数: - url: 作品链接 (最多支持20个链接) ### 返回: - 作品id  # [English] ### Purpose: - Extract list video id ### Parameters: - url: Video link (Support up to 20 links) ### Return: - Video id  # [示例/Example] url = [\"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_aweme_id_api_v1_tiktok_web_get_all_aweme_id_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'request_body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_aweme_id_api_v1_tiktok_web_get_all_aweme_id_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/get_all_aweme_id', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_aweme_id_api_v1_tiktok_web_get_all_aweme_id_post_0(self, **kwargs):  # noqa: E501
        """提取列表作品id/Extract list video id  # noqa: E501

        # [中文] ### 用途: - 提取列表作品id ### 参数: - url: 作品链接 (最多支持20个链接) ### 返回: - 作品id  # [English] ### Purpose: - Extract list video id ### Parameters: - url: Video link (Support up to 20 links) ### Return: - Video id  # [示例/Example] url = [\"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_aweme_id_api_v1_tiktok_web_get_all_aweme_id_post_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_aweme_id_api_v1_tiktok_web_get_all_aweme_id_post_0_with_http_info(**kwargs)  # noqa: E501

    def get_all_aweme_id_api_v1_tiktok_web_get_all_aweme_id_post_0_with_http_info(self, **kwargs):  # noqa: E501
        """提取列表作品id/Extract list video id  # noqa: E501

        # [中文] ### 用途: - 提取列表作品id ### 参数: - url: 作品链接 (最多支持20个链接) ### 返回: - 作品id  # [English] ### Purpose: - Extract list video id ### Parameters: - url: Video link (Support up to 20 links) ### Return: - Video id  # [示例/Example] url = [\"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_aweme_id_api_v1_tiktok_web_get_all_aweme_id_post_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'request_body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_aweme_id_api_v1_tiktok_web_get_all_aweme_id_post_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/get_all_aweme_id', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_sec_user_id_api_v1_tiktok_web_get_all_sec_user_id_post(self, **kwargs):  # noqa: E501
        """提取列表用户sec_user_id/Extract list user sec_user_id  # noqa: E501

        # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接（最多支持10个链接）、 ### 返回: - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link (Support up to 10 links) ### Return: - If the sec_user_id is successfully obtained, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_sec_user_id_api_v1_tiktok_web_get_all_sec_user_id_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_sec_user_id_api_v1_tiktok_web_get_all_sec_user_id_post_with_http_info(**kwargs)  # noqa: E501

    def get_all_sec_user_id_api_v1_tiktok_web_get_all_sec_user_id_post_with_http_info(self, **kwargs):  # noqa: E501
        """提取列表用户sec_user_id/Extract list user sec_user_id  # noqa: E501

        # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接（最多支持10个链接）、 ### 返回: - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link (Support up to 10 links) ### Return: - If the sec_user_id is successfully obtained, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_sec_user_id_api_v1_tiktok_web_get_all_sec_user_id_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'request_body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_sec_user_id_api_v1_tiktok_web_get_all_sec_user_id_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/get_all_sec_user_id', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_sec_user_id_api_v1_tiktok_web_get_all_sec_user_id_post_0(self, **kwargs):  # noqa: E501
        """提取列表用户sec_user_id/Extract list user sec_user_id  # noqa: E501

        # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接（最多支持10个链接）、 ### 返回: - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link (Support up to 10 links) ### Return: - If the sec_user_id is successfully obtained, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_sec_user_id_api_v1_tiktok_web_get_all_sec_user_id_post_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_sec_user_id_api_v1_tiktok_web_get_all_sec_user_id_post_0_with_http_info(**kwargs)  # noqa: E501

    def get_all_sec_user_id_api_v1_tiktok_web_get_all_sec_user_id_post_0_with_http_info(self, **kwargs):  # noqa: E501
        """提取列表用户sec_user_id/Extract list user sec_user_id  # noqa: E501

        # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接（最多支持10个链接）、 ### 返回: - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link (Support up to 10 links) ### Return: - If the sec_user_id is successfully obtained, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_sec_user_id_api_v1_tiktok_web_get_all_sec_user_id_post_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'request_body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_sec_user_id_api_v1_tiktok_web_get_all_sec_user_id_post_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/get_all_sec_user_id', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_unique_id_api_v1_tiktok_web_get_all_unique_id_post(self, **kwargs):  # noqa: E501
        """获取列表unique_id/Get list unique_id  # noqa: E501

        # [中文] ### 用途: - 获取列表unique_id ### 参数: - url: 用户主页链接 (最多支持20个链接) ### 返回: - unique_id  # [English] ### Purpose: - Get list unique_id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - unique_id  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_unique_id_api_v1_tiktok_web_get_all_unique_id_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_unique_id_api_v1_tiktok_web_get_all_unique_id_post_with_http_info(**kwargs)  # noqa: E501

    def get_all_unique_id_api_v1_tiktok_web_get_all_unique_id_post_with_http_info(self, **kwargs):  # noqa: E501
        """获取列表unique_id/Get list unique_id  # noqa: E501

        # [中文] ### 用途: - 获取列表unique_id ### 参数: - url: 用户主页链接 (最多支持20个链接) ### 返回: - unique_id  # [English] ### Purpose: - Get list unique_id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - unique_id  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_unique_id_api_v1_tiktok_web_get_all_unique_id_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'request_body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_unique_id_api_v1_tiktok_web_get_all_unique_id_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/get_all_unique_id', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_unique_id_api_v1_tiktok_web_get_all_unique_id_post_0(self, **kwargs):  # noqa: E501
        """获取列表unique_id/Get list unique_id  # noqa: E501

        # [中文] ### 用途: - 获取列表unique_id ### 参数: - url: 用户主页链接 (最多支持20个链接) ### 返回: - unique_id  # [English] ### Purpose: - Get list unique_id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - unique_id  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_unique_id_api_v1_tiktok_web_get_all_unique_id_post_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_unique_id_api_v1_tiktok_web_get_all_unique_id_post_0_with_http_info(**kwargs)  # noqa: E501

    def get_all_unique_id_api_v1_tiktok_web_get_all_unique_id_post_0_with_http_info(self, **kwargs):  # noqa: E501
        """获取列表unique_id/Get list unique_id  # noqa: E501

        # [中文] ### 用途: - 获取列表unique_id ### 参数: - url: 用户主页链接 (最多支持20个链接) ### 返回: - unique_id  # [English] ### Purpose: - Get list unique_id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - unique_id  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_unique_id_api_v1_tiktok_web_get_all_unique_id_post_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param list[str] request_body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'request_body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_unique_id_api_v1_tiktok_web_get_all_unique_id_post_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/get_all_unique_id', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aweme_id_api_v1_tiktok_web_get_aweme_id_get(self, url, **kwargs):  # noqa: E501
        """提取单个作品id/Extract single video id  # noqa: E501

        # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aweme_id_api_v1_tiktok_web_get_aweme_id_get(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 作品链接/Video link (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_aweme_id_api_v1_tiktok_web_get_aweme_id_get_with_http_info(url, **kwargs)  # noqa: E501

    def get_aweme_id_api_v1_tiktok_web_get_aweme_id_get_with_http_info(self, url, **kwargs):  # noqa: E501
        """提取单个作品id/Extract single video id  # noqa: E501

        # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aweme_id_api_v1_tiktok_web_get_aweme_id_get_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 作品链接/Video link (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aweme_id_api_v1_tiktok_web_get_aweme_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `get_aweme_id_api_v1_tiktok_web_get_aweme_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/get_aweme_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aweme_id_api_v1_tiktok_web_get_aweme_id_get_0(self, url, **kwargs):  # noqa: E501
        """提取单个作品id/Extract single video id  # noqa: E501

        # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aweme_id_api_v1_tiktok_web_get_aweme_id_get_0(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 作品链接/Video link (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_aweme_id_api_v1_tiktok_web_get_aweme_id_get_0_with_http_info(url, **kwargs)  # noqa: E501

    def get_aweme_id_api_v1_tiktok_web_get_aweme_id_get_0_with_http_info(self, url, **kwargs):  # noqa: E501
        """提取单个作品id/Extract single video id  # noqa: E501

        # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aweme_id_api_v1_tiktok_web_get_aweme_id_get_0_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 作品链接/Video link (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aweme_id_api_v1_tiktok_web_get_aweme_id_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `get_aweme_id_api_v1_tiktok_web_get_aweme_id_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/get_aweme_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_live_room_id_api_v1_tiktok_web_get_live_room_id_get(self, live_room_url, **kwargs):  # noqa: E501
        """根据直播间链接提取直播间ID/Extract live room ID from live room link  # noqa: E501

        # [中文] ### 用途: - 根据直播间链接提取直播间Room ID - 支持短链接，如：https://vt.tiktok.com/ZSjuyJnWQ/ - 支持长链接，如：https://www.tiktok.com/@maksukaracun/live ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间Room ID  # [English] ### Purpose: - Extract live room Room ID from live room link - Support short links, such as: https://vt.tiktok.com/ZSjuyJnWQ/ - Support long links, such as: https://www.tiktok.com/@maksukaracun/live ### Parameters: - live_room_url: Live room link ### Return: - Live room Room ID  # [示例/Example] live_room_url = \"https://www.tiktok.com/@maksukaracun/live\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_live_room_id_api_v1_tiktok_web_get_live_room_id_get(live_room_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str live_room_url: 直播间链接/Live room link (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_live_room_id_api_v1_tiktok_web_get_live_room_id_get_with_http_info(live_room_url, **kwargs)  # noqa: E501

    def get_live_room_id_api_v1_tiktok_web_get_live_room_id_get_with_http_info(self, live_room_url, **kwargs):  # noqa: E501
        """根据直播间链接提取直播间ID/Extract live room ID from live room link  # noqa: E501

        # [中文] ### 用途: - 根据直播间链接提取直播间Room ID - 支持短链接，如：https://vt.tiktok.com/ZSjuyJnWQ/ - 支持长链接，如：https://www.tiktok.com/@maksukaracun/live ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间Room ID  # [English] ### Purpose: - Extract live room Room ID from live room link - Support short links, such as: https://vt.tiktok.com/ZSjuyJnWQ/ - Support long links, such as: https://www.tiktok.com/@maksukaracun/live ### Parameters: - live_room_url: Live room link ### Return: - Live room Room ID  # [示例/Example] live_room_url = \"https://www.tiktok.com/@maksukaracun/live\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_live_room_id_api_v1_tiktok_web_get_live_room_id_get_with_http_info(live_room_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str live_room_url: 直播间链接/Live room link (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'live_room_url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_live_room_id_api_v1_tiktok_web_get_live_room_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'live_room_url' is set
        if self.api_client.client_side_validation and ('live_room_url' not in local_var_params or  # noqa: E501
                                                        local_var_params['live_room_url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `live_room_url` when calling `get_live_room_id_api_v1_tiktok_web_get_live_room_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'live_room_url' in local_var_params and local_var_params['live_room_url'] is not None:  # noqa: E501
            query_params.append(('live_room_url', local_var_params['live_room_url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/get_live_room_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_live_room_id_api_v1_tiktok_web_get_live_room_id_get_0(self, live_room_url, **kwargs):  # noqa: E501
        """根据直播间链接提取直播间ID/Extract live room ID from live room link  # noqa: E501

        # [中文] ### 用途: - 根据直播间链接提取直播间Room ID - 支持短链接，如：https://vt.tiktok.com/ZSjuyJnWQ/ - 支持长链接，如：https://www.tiktok.com/@maksukaracun/live ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间Room ID  # [English] ### Purpose: - Extract live room Room ID from live room link - Support short links, such as: https://vt.tiktok.com/ZSjuyJnWQ/ - Support long links, such as: https://www.tiktok.com/@maksukaracun/live ### Parameters: - live_room_url: Live room link ### Return: - Live room Room ID  # [示例/Example] live_room_url = \"https://www.tiktok.com/@maksukaracun/live\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_live_room_id_api_v1_tiktok_web_get_live_room_id_get_0(live_room_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str live_room_url: 直播间链接/Live room link (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_live_room_id_api_v1_tiktok_web_get_live_room_id_get_0_with_http_info(live_room_url, **kwargs)  # noqa: E501

    def get_live_room_id_api_v1_tiktok_web_get_live_room_id_get_0_with_http_info(self, live_room_url, **kwargs):  # noqa: E501
        """根据直播间链接提取直播间ID/Extract live room ID from live room link  # noqa: E501

        # [中文] ### 用途: - 根据直播间链接提取直播间Room ID - 支持短链接，如：https://vt.tiktok.com/ZSjuyJnWQ/ - 支持长链接，如：https://www.tiktok.com/@maksukaracun/live ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间Room ID  # [English] ### Purpose: - Extract live room Room ID from live room link - Support short links, such as: https://vt.tiktok.com/ZSjuyJnWQ/ - Support long links, such as: https://www.tiktok.com/@maksukaracun/live ### Parameters: - live_room_url: Live room link ### Return: - Live room Room ID  # [示例/Example] live_room_url = \"https://www.tiktok.com/@maksukaracun/live\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_live_room_id_api_v1_tiktok_web_get_live_room_id_get_0_with_http_info(live_room_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str live_room_url: 直播间链接/Live room link (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'live_room_url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_live_room_id_api_v1_tiktok_web_get_live_room_id_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'live_room_url' is set
        if self.api_client.client_side_validation and ('live_room_url' not in local_var_params or  # noqa: E501
                                                        local_var_params['live_room_url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `live_room_url` when calling `get_live_room_id_api_v1_tiktok_web_get_live_room_id_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'live_room_url' in local_var_params and local_var_params['live_room_url'] is not None:  # noqa: E501
            query_params.append(('live_room_url', local_var_params['live_room_url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/get_live_room_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sec_user_id_api_v1_tiktok_web_get_sec_user_id_get(self, url, **kwargs):  # noqa: E501
        """提取用户sec_user_id/Extract user sec_user_id  # noqa: E501

        # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link ### Return: - User id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sec_user_id_api_v1_tiktok_web_get_sec_user_id_get(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 用户主页链接/User homepage link (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_sec_user_id_api_v1_tiktok_web_get_sec_user_id_get_with_http_info(url, **kwargs)  # noqa: E501

    def get_sec_user_id_api_v1_tiktok_web_get_sec_user_id_get_with_http_info(self, url, **kwargs):  # noqa: E501
        """提取用户sec_user_id/Extract user sec_user_id  # noqa: E501

        # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link ### Return: - User id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sec_user_id_api_v1_tiktok_web_get_sec_user_id_get_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 用户主页链接/User homepage link (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sec_user_id_api_v1_tiktok_web_get_sec_user_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `get_sec_user_id_api_v1_tiktok_web_get_sec_user_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/get_sec_user_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sec_user_id_api_v1_tiktok_web_get_sec_user_id_get_0(self, url, **kwargs):  # noqa: E501
        """提取用户sec_user_id/Extract user sec_user_id  # noqa: E501

        # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link ### Return: - User id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sec_user_id_api_v1_tiktok_web_get_sec_user_id_get_0(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 用户主页链接/User homepage link (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_sec_user_id_api_v1_tiktok_web_get_sec_user_id_get_0_with_http_info(url, **kwargs)  # noqa: E501

    def get_sec_user_id_api_v1_tiktok_web_get_sec_user_id_get_0_with_http_info(self, url, **kwargs):  # noqa: E501
        """提取用户sec_user_id/Extract user sec_user_id  # noqa: E501

        # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link ### Return: - User id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sec_user_id_api_v1_tiktok_web_get_sec_user_id_get_0_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 用户主页链接/User homepage link (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sec_user_id_api_v1_tiktok_web_get_sec_user_id_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `get_sec_user_id_api_v1_tiktok_web_get_sec_user_id_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/get_sec_user_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_unique_id_api_v1_tiktok_web_get_unique_id_get(self, url, **kwargs):  # noqa: E501
        """获取用户unique_id/Get user unique_id  # noqa: E501

        # [中文] ### 用途: - 获取用户unique_id ### 参数: - url: 用户主页链接 ### 返回: - unique_id  # [English] ### Purpose: - Get user unique_id ### Parameters: - url: User homepage link ### Return: - unique_id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_unique_id_api_v1_tiktok_web_get_unique_id_get(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 用户主页链接/User homepage link (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_unique_id_api_v1_tiktok_web_get_unique_id_get_with_http_info(url, **kwargs)  # noqa: E501

    def get_unique_id_api_v1_tiktok_web_get_unique_id_get_with_http_info(self, url, **kwargs):  # noqa: E501
        """获取用户unique_id/Get user unique_id  # noqa: E501

        # [中文] ### 用途: - 获取用户unique_id ### 参数: - url: 用户主页链接 ### 返回: - unique_id  # [English] ### Purpose: - Get user unique_id ### Parameters: - url: User homepage link ### Return: - unique_id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_unique_id_api_v1_tiktok_web_get_unique_id_get_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 用户主页链接/User homepage link (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_unique_id_api_v1_tiktok_web_get_unique_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `get_unique_id_api_v1_tiktok_web_get_unique_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/get_unique_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_unique_id_api_v1_tiktok_web_get_unique_id_get_0(self, url, **kwargs):  # noqa: E501
        """获取用户unique_id/Get user unique_id  # noqa: E501

        # [中文] ### 用途: - 获取用户unique_id ### 参数: - url: 用户主页链接 ### 返回: - unique_id  # [English] ### Purpose: - Get user unique_id ### Parameters: - url: User homepage link ### Return: - unique_id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_unique_id_api_v1_tiktok_web_get_unique_id_get_0(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 用户主页链接/User homepage link (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_unique_id_api_v1_tiktok_web_get_unique_id_get_0_with_http_info(url, **kwargs)  # noqa: E501

    def get_unique_id_api_v1_tiktok_web_get_unique_id_get_0_with_http_info(self, url, **kwargs):  # noqa: E501
        """获取用户unique_id/Get user unique_id  # noqa: E501

        # [中文] ### 用途: - 获取用户unique_id ### 参数: - url: 用户主页链接 ### 返回: - unique_id  # [English] ### Purpose: - Get user unique_id ### Parameters: - url: User homepage link ### Return: - unique_id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_unique_id_api_v1_tiktok_web_get_unique_id_get_0_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: 用户主页链接/User homepage link (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_unique_id_api_v1_tiktok_web_get_unique_id_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `get_unique_id_api_v1_tiktok_web_get_unique_id_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tiktok/web/get_unique_id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
