# coding: utf-8

"""
    TikHub.io - Your Ultimate Social Media Data & API Marketplace

    High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tikhub_sdk_v2.api_client import ApiClient
from tikhub_sdk_v2.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class KuaishouAppAPIApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def fetch_brand_top_list_api_v1_kuaishou_app_fetch_brand_top_list_get(self, **kwargs):  # noqa: E501
        """快手品牌榜单/Kuaishou brand top list  # noqa: E501

        # [中文] ### 用途: - 快手品牌榜单 ### 参数: 获取快手品牌榜单，支持多个子榜单，具体参数如下：  - 品牌榜单热门美妆榜对应参数：     - subTabId = 0     - subTabName = None - 品牌榜单热门服饰榜对应参数：     - subTabId = 131     - subTabName = \"服饰\" - 品牌榜单热门汽车榜对应参数：     - subTabId = 1     - subTabName = \"汽车\" - 品牌榜单热门游戏榜对应参数：     - subTabId = 25     - subTabName = \"游戏\" - 品牌榜单热门医疗健康榜对应参数：     - subTabId = 24     - subTabName = \"医疗健康\" - 品牌榜单热门3C数码榜对应参数：     - subTabId = 130     - subTabName = \"3C数码\" - 品牌榜单热门手机榜对应参数：     - subTabId = 128     - subTabName = \"手机\" - 品牌榜单热门家电榜对应参数：     - subTabId = 11     - subTabName = \"家电\" - 品牌榜单热门母婴榜对应参数：     - subTabId = 4     - subTabName = \"母婴\" - 品牌榜单热门食品饮料榜对应参数：     - subTabId = 2     - subTabName = \"食品饮料\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou brand top list ### Parameters: Get the Kuaishou brand top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the brand hot beauty list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the brand hot clothing list:     - subTabId = 131     - subTabName = \"Clothing\" - Corresponding parameters for the brand hot car list:     - subTabId = 1     - subTabName = \"Car\" - Corresponding parameters for the brand hot game list:     - subTabId = 25     - subTabName = \"Game\" - Corresponding parameters for the brand hot medical health list:     - subTabId = 24     - subTabName = \"Medical Health\" - Corresponding parameters for the brand hot 3C digital list:     - subTabId = 130     - subTabName = \"3C Digital\" - Corresponding parameters for the brand hot mobile phone list:     - subTabId = 128     - subTabName = \"Mobile Phone\" - Corresponding parameters for the brand hot home appliance list:     - subTabId = 11     - subTabName = \"Home Appliance\" - Corresponding parameters for the brand hot maternal and child list:     - subTabId = 4     - subTabName = \"Maternal and Child\" - Corresponding parameters for the brand hot food and beverage list:     - subTabId = 2     - subTabName = \"Food and Beverage\"   ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_brand_top_list_api_v1_kuaishou_app_fetch_brand_top_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int sub_tab_id:
        :param str sub_tab_name:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_brand_top_list_api_v1_kuaishou_app_fetch_brand_top_list_get_with_http_info(**kwargs)  # noqa: E501

    def fetch_brand_top_list_api_v1_kuaishou_app_fetch_brand_top_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """快手品牌榜单/Kuaishou brand top list  # noqa: E501

        # [中文] ### 用途: - 快手品牌榜单 ### 参数: 获取快手品牌榜单，支持多个子榜单，具体参数如下：  - 品牌榜单热门美妆榜对应参数：     - subTabId = 0     - subTabName = None - 品牌榜单热门服饰榜对应参数：     - subTabId = 131     - subTabName = \"服饰\" - 品牌榜单热门汽车榜对应参数：     - subTabId = 1     - subTabName = \"汽车\" - 品牌榜单热门游戏榜对应参数：     - subTabId = 25     - subTabName = \"游戏\" - 品牌榜单热门医疗健康榜对应参数：     - subTabId = 24     - subTabName = \"医疗健康\" - 品牌榜单热门3C数码榜对应参数：     - subTabId = 130     - subTabName = \"3C数码\" - 品牌榜单热门手机榜对应参数：     - subTabId = 128     - subTabName = \"手机\" - 品牌榜单热门家电榜对应参数：     - subTabId = 11     - subTabName = \"家电\" - 品牌榜单热门母婴榜对应参数：     - subTabId = 4     - subTabName = \"母婴\" - 品牌榜单热门食品饮料榜对应参数：     - subTabId = 2     - subTabName = \"食品饮料\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou brand top list ### Parameters: Get the Kuaishou brand top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the brand hot beauty list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the brand hot clothing list:     - subTabId = 131     - subTabName = \"Clothing\" - Corresponding parameters for the brand hot car list:     - subTabId = 1     - subTabName = \"Car\" - Corresponding parameters for the brand hot game list:     - subTabId = 25     - subTabName = \"Game\" - Corresponding parameters for the brand hot medical health list:     - subTabId = 24     - subTabName = \"Medical Health\" - Corresponding parameters for the brand hot 3C digital list:     - subTabId = 130     - subTabName = \"3C Digital\" - Corresponding parameters for the brand hot mobile phone list:     - subTabId = 128     - subTabName = \"Mobile Phone\" - Corresponding parameters for the brand hot home appliance list:     - subTabId = 11     - subTabName = \"Home Appliance\" - Corresponding parameters for the brand hot maternal and child list:     - subTabId = 4     - subTabName = \"Maternal and Child\" - Corresponding parameters for the brand hot food and beverage list:     - subTabId = 2     - subTabName = \"Food and Beverage\"   ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_brand_top_list_api_v1_kuaishou_app_fetch_brand_top_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int sub_tab_id:
        :param str sub_tab_name:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sub_tab_id',
            'sub_tab_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_brand_top_list_api_v1_kuaishou_app_fetch_brand_top_list_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sub_tab_id' in local_var_params and local_var_params['sub_tab_id'] is not None:  # noqa: E501
            query_params.append(('subTabId', local_var_params['sub_tab_id']))  # noqa: E501
        if 'sub_tab_name' in local_var_params and local_var_params['sub_tab_name'] is not None:  # noqa: E501
            query_params.append(('subTabName', local_var_params['sub_tab_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_brand_top_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_brand_top_list_api_v1_kuaishou_app_fetch_brand_top_list_get_0(self, **kwargs):  # noqa: E501
        """快手品牌榜单/Kuaishou brand top list  # noqa: E501

        # [中文] ### 用途: - 快手品牌榜单 ### 参数: 获取快手品牌榜单，支持多个子榜单，具体参数如下：  - 品牌榜单热门美妆榜对应参数：     - subTabId = 0     - subTabName = None - 品牌榜单热门服饰榜对应参数：     - subTabId = 131     - subTabName = \"服饰\" - 品牌榜单热门汽车榜对应参数：     - subTabId = 1     - subTabName = \"汽车\" - 品牌榜单热门游戏榜对应参数：     - subTabId = 25     - subTabName = \"游戏\" - 品牌榜单热门医疗健康榜对应参数：     - subTabId = 24     - subTabName = \"医疗健康\" - 品牌榜单热门3C数码榜对应参数：     - subTabId = 130     - subTabName = \"3C数码\" - 品牌榜单热门手机榜对应参数：     - subTabId = 128     - subTabName = \"手机\" - 品牌榜单热门家电榜对应参数：     - subTabId = 11     - subTabName = \"家电\" - 品牌榜单热门母婴榜对应参数：     - subTabId = 4     - subTabName = \"母婴\" - 品牌榜单热门食品饮料榜对应参数：     - subTabId = 2     - subTabName = \"食品饮料\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou brand top list ### Parameters: Get the Kuaishou brand top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the brand hot beauty list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the brand hot clothing list:     - subTabId = 131     - subTabName = \"Clothing\" - Corresponding parameters for the brand hot car list:     - subTabId = 1     - subTabName = \"Car\" - Corresponding parameters for the brand hot game list:     - subTabId = 25     - subTabName = \"Game\" - Corresponding parameters for the brand hot medical health list:     - subTabId = 24     - subTabName = \"Medical Health\" - Corresponding parameters for the brand hot 3C digital list:     - subTabId = 130     - subTabName = \"3C Digital\" - Corresponding parameters for the brand hot mobile phone list:     - subTabId = 128     - subTabName = \"Mobile Phone\" - Corresponding parameters for the brand hot home appliance list:     - subTabId = 11     - subTabName = \"Home Appliance\" - Corresponding parameters for the brand hot maternal and child list:     - subTabId = 4     - subTabName = \"Maternal and Child\" - Corresponding parameters for the brand hot food and beverage list:     - subTabId = 2     - subTabName = \"Food and Beverage\"   ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_brand_top_list_api_v1_kuaishou_app_fetch_brand_top_list_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int sub_tab_id:
        :param str sub_tab_name:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_brand_top_list_api_v1_kuaishou_app_fetch_brand_top_list_get_0_with_http_info(**kwargs)  # noqa: E501

    def fetch_brand_top_list_api_v1_kuaishou_app_fetch_brand_top_list_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """快手品牌榜单/Kuaishou brand top list  # noqa: E501

        # [中文] ### 用途: - 快手品牌榜单 ### 参数: 获取快手品牌榜单，支持多个子榜单，具体参数如下：  - 品牌榜单热门美妆榜对应参数：     - subTabId = 0     - subTabName = None - 品牌榜单热门服饰榜对应参数：     - subTabId = 131     - subTabName = \"服饰\" - 品牌榜单热门汽车榜对应参数：     - subTabId = 1     - subTabName = \"汽车\" - 品牌榜单热门游戏榜对应参数：     - subTabId = 25     - subTabName = \"游戏\" - 品牌榜单热门医疗健康榜对应参数：     - subTabId = 24     - subTabName = \"医疗健康\" - 品牌榜单热门3C数码榜对应参数：     - subTabId = 130     - subTabName = \"3C数码\" - 品牌榜单热门手机榜对应参数：     - subTabId = 128     - subTabName = \"手机\" - 品牌榜单热门家电榜对应参数：     - subTabId = 11     - subTabName = \"家电\" - 品牌榜单热门母婴榜对应参数：     - subTabId = 4     - subTabName = \"母婴\" - 品牌榜单热门食品饮料榜对应参数：     - subTabId = 2     - subTabName = \"食品饮料\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou brand top list ### Parameters: Get the Kuaishou brand top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the brand hot beauty list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the brand hot clothing list:     - subTabId = 131     - subTabName = \"Clothing\" - Corresponding parameters for the brand hot car list:     - subTabId = 1     - subTabName = \"Car\" - Corresponding parameters for the brand hot game list:     - subTabId = 25     - subTabName = \"Game\" - Corresponding parameters for the brand hot medical health list:     - subTabId = 24     - subTabName = \"Medical Health\" - Corresponding parameters for the brand hot 3C digital list:     - subTabId = 130     - subTabName = \"3C Digital\" - Corresponding parameters for the brand hot mobile phone list:     - subTabId = 128     - subTabName = \"Mobile Phone\" - Corresponding parameters for the brand hot home appliance list:     - subTabId = 11     - subTabName = \"Home Appliance\" - Corresponding parameters for the brand hot maternal and child list:     - subTabId = 4     - subTabName = \"Maternal and Child\" - Corresponding parameters for the brand hot food and beverage list:     - subTabId = 2     - subTabName = \"Food and Beverage\"   ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_brand_top_list_api_v1_kuaishou_app_fetch_brand_top_list_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int sub_tab_id:
        :param str sub_tab_name:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sub_tab_id',
            'sub_tab_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_brand_top_list_api_v1_kuaishou_app_fetch_brand_top_list_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sub_tab_id' in local_var_params and local_var_params['sub_tab_id'] is not None:  # noqa: E501
            query_params.append(('subTabId', local_var_params['sub_tab_id']))  # noqa: E501
        if 'sub_tab_name' in local_var_params and local_var_params['sub_tab_name'] is not None:  # noqa: E501
            query_params.append(('subTabName', local_var_params['sub_tab_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_brand_top_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hot_board_categories_api_v1_kuaishou_app_fetch_hot_board_categories_get(self, **kwargs):  # noqa: E501
        """快手热榜分类/Kuaishou hot categories  # noqa: E501

        # [中文] ### 用途: - 快手热榜分类 ### 返回: - 分类数据  # [English] ### Purpose: - Kuaishou hot categories ### Returns: - Categories data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_board_categories_api_v1_kuaishou_app_fetch_hot_board_categories_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hot_board_categories_api_v1_kuaishou_app_fetch_hot_board_categories_get_with_http_info(**kwargs)  # noqa: E501

    def fetch_hot_board_categories_api_v1_kuaishou_app_fetch_hot_board_categories_get_with_http_info(self, **kwargs):  # noqa: E501
        """快手热榜分类/Kuaishou hot categories  # noqa: E501

        # [中文] ### 用途: - 快手热榜分类 ### 返回: - 分类数据  # [English] ### Purpose: - Kuaishou hot categories ### Returns: - Categories data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_board_categories_api_v1_kuaishou_app_fetch_hot_board_categories_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hot_board_categories_api_v1_kuaishou_app_fetch_hot_board_categories_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_hot_board_categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hot_board_categories_api_v1_kuaishou_app_fetch_hot_board_categories_get_0(self, **kwargs):  # noqa: E501
        """快手热榜分类/Kuaishou hot categories  # noqa: E501

        # [中文] ### 用途: - 快手热榜分类 ### 返回: - 分类数据  # [English] ### Purpose: - Kuaishou hot categories ### Returns: - Categories data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_board_categories_api_v1_kuaishou_app_fetch_hot_board_categories_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hot_board_categories_api_v1_kuaishou_app_fetch_hot_board_categories_get_0_with_http_info(**kwargs)  # noqa: E501

    def fetch_hot_board_categories_api_v1_kuaishou_app_fetch_hot_board_categories_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """快手热榜分类/Kuaishou hot categories  # noqa: E501

        # [中文] ### 用途: - 快手热榜分类 ### 返回: - 分类数据  # [English] ### Purpose: - Kuaishou hot categories ### Returns: - Categories data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_board_categories_api_v1_kuaishou_app_fetch_hot_board_categories_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hot_board_categories_api_v1_kuaishou_app_fetch_hot_board_categories_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_hot_board_categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hot_board_detail_api_v1_kuaishou_app_fetch_hot_board_detail_get(self, **kwargs):  # noqa: E501
        """快手热榜详情/Kuaishou hot board detail  # noqa: E501

        # [中文] ### 用途: - 快手热榜详情 ### 参数: - boardType: 榜单类型 - boardId: 榜单ID - boardType 和 boardId 可以从热榜分类接口中获取。 ### 返回: - 详情数据  # [English] ### Purpose: - Kuaishou hot board detail ### Parameters: - boardType: Board type - boardId: Board ID - boardType and boardId can be obtained from the hot board categories interface. ### Returns: - Detail data  # [示例/Example] boardType = 1 boardId = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_board_detail_api_v1_kuaishou_app_fetch_hot_board_detail_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int board_type:
        :param int board_id:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hot_board_detail_api_v1_kuaishou_app_fetch_hot_board_detail_get_with_http_info(**kwargs)  # noqa: E501

    def fetch_hot_board_detail_api_v1_kuaishou_app_fetch_hot_board_detail_get_with_http_info(self, **kwargs):  # noqa: E501
        """快手热榜详情/Kuaishou hot board detail  # noqa: E501

        # [中文] ### 用途: - 快手热榜详情 ### 参数: - boardType: 榜单类型 - boardId: 榜单ID - boardType 和 boardId 可以从热榜分类接口中获取。 ### 返回: - 详情数据  # [English] ### Purpose: - Kuaishou hot board detail ### Parameters: - boardType: Board type - boardId: Board ID - boardType and boardId can be obtained from the hot board categories interface. ### Returns: - Detail data  # [示例/Example] boardType = 1 boardId = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_board_detail_api_v1_kuaishou_app_fetch_hot_board_detail_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int board_type:
        :param int board_id:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'board_type',
            'board_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hot_board_detail_api_v1_kuaishou_app_fetch_hot_board_detail_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'board_type' in local_var_params and local_var_params['board_type'] is not None:  # noqa: E501
            query_params.append(('boardType', local_var_params['board_type']))  # noqa: E501
        if 'board_id' in local_var_params and local_var_params['board_id'] is not None:  # noqa: E501
            query_params.append(('boardId', local_var_params['board_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_hot_board_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hot_board_detail_api_v1_kuaishou_app_fetch_hot_board_detail_get_0(self, **kwargs):  # noqa: E501
        """快手热榜详情/Kuaishou hot board detail  # noqa: E501

        # [中文] ### 用途: - 快手热榜详情 ### 参数: - boardType: 榜单类型 - boardId: 榜单ID - boardType 和 boardId 可以从热榜分类接口中获取。 ### 返回: - 详情数据  # [English] ### Purpose: - Kuaishou hot board detail ### Parameters: - boardType: Board type - boardId: Board ID - boardType and boardId can be obtained from the hot board categories interface. ### Returns: - Detail data  # [示例/Example] boardType = 1 boardId = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_board_detail_api_v1_kuaishou_app_fetch_hot_board_detail_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int board_type:
        :param int board_id:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hot_board_detail_api_v1_kuaishou_app_fetch_hot_board_detail_get_0_with_http_info(**kwargs)  # noqa: E501

    def fetch_hot_board_detail_api_v1_kuaishou_app_fetch_hot_board_detail_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """快手热榜详情/Kuaishou hot board detail  # noqa: E501

        # [中文] ### 用途: - 快手热榜详情 ### 参数: - boardType: 榜单类型 - boardId: 榜单ID - boardType 和 boardId 可以从热榜分类接口中获取。 ### 返回: - 详情数据  # [English] ### Purpose: - Kuaishou hot board detail ### Parameters: - boardType: Board type - boardId: Board ID - boardType and boardId can be obtained from the hot board categories interface. ### Returns: - Detail data  # [示例/Example] boardType = 1 boardId = 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_board_detail_api_v1_kuaishou_app_fetch_hot_board_detail_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int board_type:
        :param int board_id:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'board_type',
            'board_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hot_board_detail_api_v1_kuaishou_app_fetch_hot_board_detail_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'board_type' in local_var_params and local_var_params['board_type'] is not None:  # noqa: E501
            query_params.append(('boardType', local_var_params['board_type']))  # noqa: E501
        if 'board_id' in local_var_params and local_var_params['board_id'] is not None:  # noqa: E501
            query_params.append(('boardId', local_var_params['board_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_hot_board_detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hot_search_person_api_v1_kuaishou_app_fetch_hot_search_person_get(self, **kwargs):  # noqa: E501
        """快手热搜人物榜单/Kuaishou hot search person board  # noqa: E501

        # [中文] ### 用途: - 快手热搜人物榜单 ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou hot search person board ### Returns: - Board data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_search_person_api_v1_kuaishou_app_fetch_hot_search_person_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hot_search_person_api_v1_kuaishou_app_fetch_hot_search_person_get_with_http_info(**kwargs)  # noqa: E501

    def fetch_hot_search_person_api_v1_kuaishou_app_fetch_hot_search_person_get_with_http_info(self, **kwargs):  # noqa: E501
        """快手热搜人物榜单/Kuaishou hot search person board  # noqa: E501

        # [中文] ### 用途: - 快手热搜人物榜单 ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou hot search person board ### Returns: - Board data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_search_person_api_v1_kuaishou_app_fetch_hot_search_person_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hot_search_person_api_v1_kuaishou_app_fetch_hot_search_person_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_hot_search_person', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_hot_search_person_api_v1_kuaishou_app_fetch_hot_search_person_get_0(self, **kwargs):  # noqa: E501
        """快手热搜人物榜单/Kuaishou hot search person board  # noqa: E501

        # [中文] ### 用途: - 快手热搜人物榜单 ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou hot search person board ### Returns: - Board data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_search_person_api_v1_kuaishou_app_fetch_hot_search_person_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_hot_search_person_api_v1_kuaishou_app_fetch_hot_search_person_get_0_with_http_info(**kwargs)  # noqa: E501

    def fetch_hot_search_person_api_v1_kuaishou_app_fetch_hot_search_person_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """快手热搜人物榜单/Kuaishou hot search person board  # noqa: E501

        # [中文] ### 用途: - 快手热搜人物榜单 ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou hot search person board ### Returns: - Board data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_hot_search_person_api_v1_kuaishou_app_fetch_hot_search_person_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_hot_search_person_api_v1_kuaishou_app_fetch_hot_search_person_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_hot_search_person', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_live_top_list_api_v1_kuaishou_app_fetch_live_top_list_get(self, **kwargs):  # noqa: E501
        """快手直播榜单/Kuaishou live top list  # noqa: E501

        # [中文] ### 用途: - 快手直播榜单 ### 参数: 获取快手直播榜单，支持多个子榜单，具体参数如下：  - 直播总榜对应参数：     - subTabId = 0     - subTabName = None - 直播音乐榜对应参数：     - subTabId = 102     - subTabName = \"音乐\" - 直播舞蹈榜对应参数：     - subTabId = 107     - subTabName = \"舞蹈\" - 直播颜值榜对应参数：     - subTabId = 101     - subTabName = \"颜值\" - 直播国艺榜对应参数：     - subTabId = 105     - subTabName = \"国艺\" - 直播相亲榜对应参数：     - subTabId = 111     - subTabName = \"相亲\" - 直播游戏榜对应参数：     - subTabId = 106     - subTabName = \"游戏\" - 直播二次元榜对应参数：     - subTabId = 110     - subTabName = \"二次元\" - 直播故事榜对应参数：     - subTabId = 104     - subTabName = \"故事\" - 直播团播榜对应参数：     - subTabId = 113     - subTabName = \"团播\" - 直播九宫格榜对应参数：     - subTabId = 114     - subTabName = \"九宫格\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou live top list ### Parameters: Get the Kuaishou live top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the live total list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the live music list:     - subTabId = 102     - subTabName = \"Music\" - Corresponding parameters for the live dance list:     - subTabId = 107     - subTabName = \"Dance\" - Corresponding parameters for the live beauty list:     - subTabId = 101     - subTabName = \"Beauty\" - Corresponding parameters for the live national art list:     - subTabId = 105     - subTabName = \"National Art\" - Corresponding parameters for the live blind date list:     - subTabId = 111     - subTabName = \"Blind Date\" - Corresponding parameters for the live game list:     - subTabId = 106     - subTabName = \"Game\" - Corresponding parameters for the live second element list:     - subTabId = 110     - subTabName = \"Second Element\" - Corresponding parameters for the live story list:     - subTabId = 104     - subTabName = \"Story\" - Corresponding parameters for the live group broadcast list:     - subTabId = 113     - subTabName = \"Group Broadcast\" - Corresponding parameters for the live nine-grid list:     - subTabId = 114     - subTabName = \"Nine Grid\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_top_list_api_v1_kuaishou_app_fetch_live_top_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int sub_tab_id:
        :param str sub_tab_name:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_live_top_list_api_v1_kuaishou_app_fetch_live_top_list_get_with_http_info(**kwargs)  # noqa: E501

    def fetch_live_top_list_api_v1_kuaishou_app_fetch_live_top_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """快手直播榜单/Kuaishou live top list  # noqa: E501

        # [中文] ### 用途: - 快手直播榜单 ### 参数: 获取快手直播榜单，支持多个子榜单，具体参数如下：  - 直播总榜对应参数：     - subTabId = 0     - subTabName = None - 直播音乐榜对应参数：     - subTabId = 102     - subTabName = \"音乐\" - 直播舞蹈榜对应参数：     - subTabId = 107     - subTabName = \"舞蹈\" - 直播颜值榜对应参数：     - subTabId = 101     - subTabName = \"颜值\" - 直播国艺榜对应参数：     - subTabId = 105     - subTabName = \"国艺\" - 直播相亲榜对应参数：     - subTabId = 111     - subTabName = \"相亲\" - 直播游戏榜对应参数：     - subTabId = 106     - subTabName = \"游戏\" - 直播二次元榜对应参数：     - subTabId = 110     - subTabName = \"二次元\" - 直播故事榜对应参数：     - subTabId = 104     - subTabName = \"故事\" - 直播团播榜对应参数：     - subTabId = 113     - subTabName = \"团播\" - 直播九宫格榜对应参数：     - subTabId = 114     - subTabName = \"九宫格\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou live top list ### Parameters: Get the Kuaishou live top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the live total list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the live music list:     - subTabId = 102     - subTabName = \"Music\" - Corresponding parameters for the live dance list:     - subTabId = 107     - subTabName = \"Dance\" - Corresponding parameters for the live beauty list:     - subTabId = 101     - subTabName = \"Beauty\" - Corresponding parameters for the live national art list:     - subTabId = 105     - subTabName = \"National Art\" - Corresponding parameters for the live blind date list:     - subTabId = 111     - subTabName = \"Blind Date\" - Corresponding parameters for the live game list:     - subTabId = 106     - subTabName = \"Game\" - Corresponding parameters for the live second element list:     - subTabId = 110     - subTabName = \"Second Element\" - Corresponding parameters for the live story list:     - subTabId = 104     - subTabName = \"Story\" - Corresponding parameters for the live group broadcast list:     - subTabId = 113     - subTabName = \"Group Broadcast\" - Corresponding parameters for the live nine-grid list:     - subTabId = 114     - subTabName = \"Nine Grid\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_top_list_api_v1_kuaishou_app_fetch_live_top_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int sub_tab_id:
        :param str sub_tab_name:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sub_tab_id',
            'sub_tab_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_live_top_list_api_v1_kuaishou_app_fetch_live_top_list_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sub_tab_id' in local_var_params and local_var_params['sub_tab_id'] is not None:  # noqa: E501
            query_params.append(('subTabId', local_var_params['sub_tab_id']))  # noqa: E501
        if 'sub_tab_name' in local_var_params and local_var_params['sub_tab_name'] is not None:  # noqa: E501
            query_params.append(('subTabName', local_var_params['sub_tab_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_live_top_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_live_top_list_api_v1_kuaishou_app_fetch_live_top_list_get_0(self, **kwargs):  # noqa: E501
        """快手直播榜单/Kuaishou live top list  # noqa: E501

        # [中文] ### 用途: - 快手直播榜单 ### 参数: 获取快手直播榜单，支持多个子榜单，具体参数如下：  - 直播总榜对应参数：     - subTabId = 0     - subTabName = None - 直播音乐榜对应参数：     - subTabId = 102     - subTabName = \"音乐\" - 直播舞蹈榜对应参数：     - subTabId = 107     - subTabName = \"舞蹈\" - 直播颜值榜对应参数：     - subTabId = 101     - subTabName = \"颜值\" - 直播国艺榜对应参数：     - subTabId = 105     - subTabName = \"国艺\" - 直播相亲榜对应参数：     - subTabId = 111     - subTabName = \"相亲\" - 直播游戏榜对应参数：     - subTabId = 106     - subTabName = \"游戏\" - 直播二次元榜对应参数：     - subTabId = 110     - subTabName = \"二次元\" - 直播故事榜对应参数：     - subTabId = 104     - subTabName = \"故事\" - 直播团播榜对应参数：     - subTabId = 113     - subTabName = \"团播\" - 直播九宫格榜对应参数：     - subTabId = 114     - subTabName = \"九宫格\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou live top list ### Parameters: Get the Kuaishou live top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the live total list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the live music list:     - subTabId = 102     - subTabName = \"Music\" - Corresponding parameters for the live dance list:     - subTabId = 107     - subTabName = \"Dance\" - Corresponding parameters for the live beauty list:     - subTabId = 101     - subTabName = \"Beauty\" - Corresponding parameters for the live national art list:     - subTabId = 105     - subTabName = \"National Art\" - Corresponding parameters for the live blind date list:     - subTabId = 111     - subTabName = \"Blind Date\" - Corresponding parameters for the live game list:     - subTabId = 106     - subTabName = \"Game\" - Corresponding parameters for the live second element list:     - subTabId = 110     - subTabName = \"Second Element\" - Corresponding parameters for the live story list:     - subTabId = 104     - subTabName = \"Story\" - Corresponding parameters for the live group broadcast list:     - subTabId = 113     - subTabName = \"Group Broadcast\" - Corresponding parameters for the live nine-grid list:     - subTabId = 114     - subTabName = \"Nine Grid\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_top_list_api_v1_kuaishou_app_fetch_live_top_list_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int sub_tab_id:
        :param str sub_tab_name:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_live_top_list_api_v1_kuaishou_app_fetch_live_top_list_get_0_with_http_info(**kwargs)  # noqa: E501

    def fetch_live_top_list_api_v1_kuaishou_app_fetch_live_top_list_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """快手直播榜单/Kuaishou live top list  # noqa: E501

        # [中文] ### 用途: - 快手直播榜单 ### 参数: 获取快手直播榜单，支持多个子榜单，具体参数如下：  - 直播总榜对应参数：     - subTabId = 0     - subTabName = None - 直播音乐榜对应参数：     - subTabId = 102     - subTabName = \"音乐\" - 直播舞蹈榜对应参数：     - subTabId = 107     - subTabName = \"舞蹈\" - 直播颜值榜对应参数：     - subTabId = 101     - subTabName = \"颜值\" - 直播国艺榜对应参数：     - subTabId = 105     - subTabName = \"国艺\" - 直播相亲榜对应参数：     - subTabId = 111     - subTabName = \"相亲\" - 直播游戏榜对应参数：     - subTabId = 106     - subTabName = \"游戏\" - 直播二次元榜对应参数：     - subTabId = 110     - subTabName = \"二次元\" - 直播故事榜对应参数：     - subTabId = 104     - subTabName = \"故事\" - 直播团播榜对应参数：     - subTabId = 113     - subTabName = \"团播\" - 直播九宫格榜对应参数：     - subTabId = 114     - subTabName = \"九宫格\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou live top list ### Parameters: Get the Kuaishou live top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the live total list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the live music list:     - subTabId = 102     - subTabName = \"Music\" - Corresponding parameters for the live dance list:     - subTabId = 107     - subTabName = \"Dance\" - Corresponding parameters for the live beauty list:     - subTabId = 101     - subTabName = \"Beauty\" - Corresponding parameters for the live national art list:     - subTabId = 105     - subTabName = \"National Art\" - Corresponding parameters for the live blind date list:     - subTabId = 111     - subTabName = \"Blind Date\" - Corresponding parameters for the live game list:     - subTabId = 106     - subTabName = \"Game\" - Corresponding parameters for the live second element list:     - subTabId = 110     - subTabName = \"Second Element\" - Corresponding parameters for the live story list:     - subTabId = 104     - subTabName = \"Story\" - Corresponding parameters for the live group broadcast list:     - subTabId = 113     - subTabName = \"Group Broadcast\" - Corresponding parameters for the live nine-grid list:     - subTabId = 114     - subTabName = \"Nine Grid\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_live_top_list_api_v1_kuaishou_app_fetch_live_top_list_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int sub_tab_id:
        :param str sub_tab_name:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sub_tab_id',
            'sub_tab_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_live_top_list_api_v1_kuaishou_app_fetch_live_top_list_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sub_tab_id' in local_var_params and local_var_params['sub_tab_id'] is not None:  # noqa: E501
            query_params.append(('subTabId', local_var_params['sub_tab_id']))  # noqa: E501
        if 'sub_tab_name' in local_var_params and local_var_params['sub_tab_name'] is not None:  # noqa: E501
            query_params.append(('subTabName', local_var_params['sub_tab_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_live_top_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_user_v2_api_v1_kuaishou_app_fetch_one_user_v2_get(self, user_id, **kwargs):  # noqa: E501
        """获取单个用户数据V2/Get single user data V2  # noqa: E501

        # [中文] ### 用途: - 获取单个用户数据 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 支持`eid`或`userId`，eid是用户主页链接中的一部分，user_id则可以从不同的接口中获取。 - 两种用户ID都可以使用，下面是两种用户ID的示例，这两个ID都指向同一个用户：     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### 返回: - 用户数据  # [English] ### Purpose: - Fetch single user data V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: Supports `eid` or `userId`, `eid` is part of the user profile link, and `user_id` can be obtained from different interfaces. - Both user IDs can be used, here are examples of the two user IDs, both of which point to the same user:     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### Returns: - User data  # [示例/Example] user_id = \"3xz63mn6fngqtiq\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_user_v2_api_v1_kuaishou_app_fetch_one_user_v2_get(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_user_v2_api_v1_kuaishou_app_fetch_one_user_v2_get_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_one_user_v2_api_v1_kuaishou_app_fetch_one_user_v2_get_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """获取单个用户数据V2/Get single user data V2  # noqa: E501

        # [中文] ### 用途: - 获取单个用户数据 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 支持`eid`或`userId`，eid是用户主页链接中的一部分，user_id则可以从不同的接口中获取。 - 两种用户ID都可以使用，下面是两种用户ID的示例，这两个ID都指向同一个用户：     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### 返回: - 用户数据  # [English] ### Purpose: - Fetch single user data V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: Supports `eid` or `userId`, `eid` is part of the user profile link, and `user_id` can be obtained from different interfaces. - Both user IDs can be used, here are examples of the two user IDs, both of which point to the same user:     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### Returns: - User data  # [示例/Example] user_id = \"3xz63mn6fngqtiq\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_user_v2_api_v1_kuaishou_app_fetch_one_user_v2_get_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_user_v2_api_v1_kuaishou_app_fetch_one_user_v2_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_one_user_v2_api_v1_kuaishou_app_fetch_one_user_v2_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_one_user_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_user_v2_api_v1_kuaishou_app_fetch_one_user_v2_get_0(self, user_id, **kwargs):  # noqa: E501
        """获取单个用户数据V2/Get single user data V2  # noqa: E501

        # [中文] ### 用途: - 获取单个用户数据 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 支持`eid`或`userId`，eid是用户主页链接中的一部分，user_id则可以从不同的接口中获取。 - 两种用户ID都可以使用，下面是两种用户ID的示例，这两个ID都指向同一个用户：     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### 返回: - 用户数据  # [English] ### Purpose: - Fetch single user data V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: Supports `eid` or `userId`, `eid` is part of the user profile link, and `user_id` can be obtained from different interfaces. - Both user IDs can be used, here are examples of the two user IDs, both of which point to the same user:     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### Returns: - User data  # [示例/Example] user_id = \"3xz63mn6fngqtiq\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_user_v2_api_v1_kuaishou_app_fetch_one_user_v2_get_0(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_user_v2_api_v1_kuaishou_app_fetch_one_user_v2_get_0_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_one_user_v2_api_v1_kuaishou_app_fetch_one_user_v2_get_0_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """获取单个用户数据V2/Get single user data V2  # noqa: E501

        # [中文] ### 用途: - 获取单个用户数据 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 支持`eid`或`userId`，eid是用户主页链接中的一部分，user_id则可以从不同的接口中获取。 - 两种用户ID都可以使用，下面是两种用户ID的示例，这两个ID都指向同一个用户：     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### 返回: - 用户数据  # [English] ### Purpose: - Fetch single user data V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: Supports `eid` or `userId`, `eid` is part of the user profile link, and `user_id` can be obtained from different interfaces. - Both user IDs can be used, here are examples of the two user IDs, both of which point to the same user:     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### Returns: - User data  # [示例/Example] user_id = \"3xz63mn6fngqtiq\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_user_v2_api_v1_kuaishou_app_fetch_one_user_v2_get_0_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_user_v2_api_v1_kuaishou_app_fetch_one_user_v2_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_one_user_v2_api_v1_kuaishou_app_fetch_one_user_v2_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_one_user_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_by_share_text_api_v1_kuaishou_app_fetch_one_video_by_url_get(self, share_text, **kwargs):  # noqa: E501
        """根据链接获取单个作品数据/Fetch single video by URL  # noqa: E501

        # [中文] ### 用途: - 根据链接获取单个作品数据，此接口默认使用价格更便宜的V1接口进行请求。 ### 参数: - share_text: 作品链接或分享文本 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL, this API defaults to using the cheaper V1 API for requests. ### Parameters: - share_text: Photo URL or share text ### Returns: - Video data  # [示例/Example] share_text = \"https://v.kuaishou.com/cNYP0Z\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_by_share_text_api_v1_kuaishou_app_fetch_one_video_by_url_get(share_text, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_text: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_by_share_text_api_v1_kuaishou_app_fetch_one_video_by_url_get_with_http_info(share_text, **kwargs)  # noqa: E501

    def fetch_one_video_by_share_text_api_v1_kuaishou_app_fetch_one_video_by_url_get_with_http_info(self, share_text, **kwargs):  # noqa: E501
        """根据链接获取单个作品数据/Fetch single video by URL  # noqa: E501

        # [中文] ### 用途: - 根据链接获取单个作品数据，此接口默认使用价格更便宜的V1接口进行请求。 ### 参数: - share_text: 作品链接或分享文本 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL, this API defaults to using the cheaper V1 API for requests. ### Parameters: - share_text: Photo URL or share text ### Returns: - Video data  # [示例/Example] share_text = \"https://v.kuaishou.com/cNYP0Z\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_by_share_text_api_v1_kuaishou_app_fetch_one_video_by_url_get_with_http_info(share_text, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_text: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'share_text'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_by_share_text_api_v1_kuaishou_app_fetch_one_video_by_url_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'share_text' is set
        if self.api_client.client_side_validation and ('share_text' not in local_var_params or  # noqa: E501
                                                        local_var_params['share_text'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `share_text` when calling `fetch_one_video_by_share_text_api_v1_kuaishou_app_fetch_one_video_by_url_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'share_text' in local_var_params and local_var_params['share_text'] is not None:  # noqa: E501
            query_params.append(('share_text', local_var_params['share_text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_one_video_by_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_by_share_text_api_v1_kuaishou_app_fetch_one_video_by_url_get_0(self, share_text, **kwargs):  # noqa: E501
        """根据链接获取单个作品数据/Fetch single video by URL  # noqa: E501

        # [中文] ### 用途: - 根据链接获取单个作品数据，此接口默认使用价格更便宜的V1接口进行请求。 ### 参数: - share_text: 作品链接或分享文本 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL, this API defaults to using the cheaper V1 API for requests. ### Parameters: - share_text: Photo URL or share text ### Returns: - Video data  # [示例/Example] share_text = \"https://v.kuaishou.com/cNYP0Z\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_by_share_text_api_v1_kuaishou_app_fetch_one_video_by_url_get_0(share_text, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_text: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_by_share_text_api_v1_kuaishou_app_fetch_one_video_by_url_get_0_with_http_info(share_text, **kwargs)  # noqa: E501

    def fetch_one_video_by_share_text_api_v1_kuaishou_app_fetch_one_video_by_url_get_0_with_http_info(self, share_text, **kwargs):  # noqa: E501
        """根据链接获取单个作品数据/Fetch single video by URL  # noqa: E501

        # [中文] ### 用途: - 根据链接获取单个作品数据，此接口默认使用价格更便宜的V1接口进行请求。 ### 参数: - share_text: 作品链接或分享文本 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL, this API defaults to using the cheaper V1 API for requests. ### Parameters: - share_text: Photo URL or share text ### Returns: - Video data  # [示例/Example] share_text = \"https://v.kuaishou.com/cNYP0Z\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_by_share_text_api_v1_kuaishou_app_fetch_one_video_by_url_get_0_with_http_info(share_text, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_text: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'share_text'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_by_share_text_api_v1_kuaishou_app_fetch_one_video_by_url_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'share_text' is set
        if self.api_client.client_side_validation and ('share_text' not in local_var_params or  # noqa: E501
                                                        local_var_params['share_text'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `share_text` when calling `fetch_one_video_by_share_text_api_v1_kuaishou_app_fetch_one_video_by_url_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'share_text' in local_var_params and local_var_params['share_text'] is not None:  # noqa: E501
            query_params.append(('share_text', local_var_params['share_text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_one_video_by_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_v1_api_v1_kuaishou_app_fetch_one_video_get(self, photo_id, **kwargs):  # noqa: E501
        """快手单一视频查询接口V1/Kuaishou single video query API V1  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据，如果此接口连续请求失败，可以尝试使用价格更昂贵的V2接口进行冗余请求。 ### 参数: - photo_id: 作品ID，作品ID可以从分享链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video data, if this API continuously fails, you can try to use the more expensive V2 API for redundant requests. ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the share link ### Returns: - Video data  # [示例/Example] photo_id = \"3xhpk3xcf6e4iac\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_v1_api_v1_kuaishou_app_fetch_one_video_get(photo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str photo_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_v1_api_v1_kuaishou_app_fetch_one_video_get_with_http_info(photo_id, **kwargs)  # noqa: E501

    def fetch_one_video_v1_api_v1_kuaishou_app_fetch_one_video_get_with_http_info(self, photo_id, **kwargs):  # noqa: E501
        """快手单一视频查询接口V1/Kuaishou single video query API V1  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据，如果此接口连续请求失败，可以尝试使用价格更昂贵的V2接口进行冗余请求。 ### 参数: - photo_id: 作品ID，作品ID可以从分享链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video data, if this API continuously fails, you can try to use the more expensive V2 API for redundant requests. ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the share link ### Returns: - Video data  # [示例/Example] photo_id = \"3xhpk3xcf6e4iac\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_v1_api_v1_kuaishou_app_fetch_one_video_get_with_http_info(photo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str photo_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'photo_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_v1_api_v1_kuaishou_app_fetch_one_video_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'photo_id' is set
        if self.api_client.client_side_validation and ('photo_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['photo_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `photo_id` when calling `fetch_one_video_v1_api_v1_kuaishou_app_fetch_one_video_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'photo_id' in local_var_params and local_var_params['photo_id'] is not None:  # noqa: E501
            query_params.append(('photo_id', local_var_params['photo_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_one_video', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_v1_api_v1_kuaishou_app_fetch_one_video_get_0(self, photo_id, **kwargs):  # noqa: E501
        """快手单一视频查询接口V1/Kuaishou single video query API V1  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据，如果此接口连续请求失败，可以尝试使用价格更昂贵的V2接口进行冗余请求。 ### 参数: - photo_id: 作品ID，作品ID可以从分享链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video data, if this API continuously fails, you can try to use the more expensive V2 API for redundant requests. ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the share link ### Returns: - Video data  # [示例/Example] photo_id = \"3xhpk3xcf6e4iac\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_v1_api_v1_kuaishou_app_fetch_one_video_get_0(photo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str photo_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_v1_api_v1_kuaishou_app_fetch_one_video_get_0_with_http_info(photo_id, **kwargs)  # noqa: E501

    def fetch_one_video_v1_api_v1_kuaishou_app_fetch_one_video_get_0_with_http_info(self, photo_id, **kwargs):  # noqa: E501
        """快手单一视频查询接口V1/Kuaishou single video query API V1  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据，如果此接口连续请求失败，可以尝试使用价格更昂贵的V2接口进行冗余请求。 ### 参数: - photo_id: 作品ID，作品ID可以从分享链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video data, if this API continuously fails, you can try to use the more expensive V2 API for redundant requests. ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the share link ### Returns: - Video data  # [示例/Example] photo_id = \"3xhpk3xcf6e4iac\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_v1_api_v1_kuaishou_app_fetch_one_video_get_0_with_http_info(photo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str photo_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'photo_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_v1_api_v1_kuaishou_app_fetch_one_video_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'photo_id' is set
        if self.api_client.client_side_validation and ('photo_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['photo_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `photo_id` when calling `fetch_one_video_v1_api_v1_kuaishou_app_fetch_one_video_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'photo_id' in local_var_params and local_var_params['photo_id'] is not None:  # noqa: E501
            query_params.append(('photo_id', local_var_params['photo_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_one_video', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_v2_api_v1_kuaishou_app_fetch_one_video_v2_get(self, photo_id, **kwargs):  # noqa: E501
        """快手单一视频查询接口V2/Kuaishou single video query API V2  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据接口 V2，此接口仅作为备选接口，收费较贵，但稳定性更高。 - 此接口请求价格为 0.01 美元/次，请求不成功不收费。 ### 参数: - photo_id: 作品ID ### 返回: - 视频数据  # [English] ### Purpose: - Single video query API V2, this API is only used as an alternative API, it is more expensive, but more stable. - The request price of this API is 0.01 USD/time, and the request is not successful without charge. ### Parameters: - photo_id: Photo ID ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_v2_api_v1_kuaishou_app_fetch_one_video_v2_get(photo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str photo_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_v2_api_v1_kuaishou_app_fetch_one_video_v2_get_with_http_info(photo_id, **kwargs)  # noqa: E501

    def fetch_one_video_v2_api_v1_kuaishou_app_fetch_one_video_v2_get_with_http_info(self, photo_id, **kwargs):  # noqa: E501
        """快手单一视频查询接口V2/Kuaishou single video query API V2  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据接口 V2，此接口仅作为备选接口，收费较贵，但稳定性更高。 - 此接口请求价格为 0.01 美元/次，请求不成功不收费。 ### 参数: - photo_id: 作品ID ### 返回: - 视频数据  # [English] ### Purpose: - Single video query API V2, this API is only used as an alternative API, it is more expensive, but more stable. - The request price of this API is 0.01 USD/time, and the request is not successful without charge. ### Parameters: - photo_id: Photo ID ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_v2_api_v1_kuaishou_app_fetch_one_video_v2_get_with_http_info(photo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str photo_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'photo_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_v2_api_v1_kuaishou_app_fetch_one_video_v2_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'photo_id' is set
        if self.api_client.client_side_validation and ('photo_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['photo_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `photo_id` when calling `fetch_one_video_v2_api_v1_kuaishou_app_fetch_one_video_v2_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'photo_id' in local_var_params and local_var_params['photo_id'] is not None:  # noqa: E501
            query_params.append(('photo_id', local_var_params['photo_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_one_video_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_one_video_v2_api_v1_kuaishou_app_fetch_one_video_v2_get_0(self, photo_id, **kwargs):  # noqa: E501
        """快手单一视频查询接口V2/Kuaishou single video query API V2  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据接口 V2，此接口仅作为备选接口，收费较贵，但稳定性更高。 - 此接口请求价格为 0.01 美元/次，请求不成功不收费。 ### 参数: - photo_id: 作品ID ### 返回: - 视频数据  # [English] ### Purpose: - Single video query API V2, this API is only used as an alternative API, it is more expensive, but more stable. - The request price of this API is 0.01 USD/time, and the request is not successful without charge. ### Parameters: - photo_id: Photo ID ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_v2_api_v1_kuaishou_app_fetch_one_video_v2_get_0(photo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str photo_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_one_video_v2_api_v1_kuaishou_app_fetch_one_video_v2_get_0_with_http_info(photo_id, **kwargs)  # noqa: E501

    def fetch_one_video_v2_api_v1_kuaishou_app_fetch_one_video_v2_get_0_with_http_info(self, photo_id, **kwargs):  # noqa: E501
        """快手单一视频查询接口V2/Kuaishou single video query API V2  # noqa: E501

        # [中文] ### 用途: - 获取单个作品数据接口 V2，此接口仅作为备选接口，收费较贵，但稳定性更高。 - 此接口请求价格为 0.01 美元/次，请求不成功不收费。 ### 参数: - photo_id: 作品ID ### 返回: - 视频数据  # [English] ### Purpose: - Single video query API V2, this API is only used as an alternative API, it is more expensive, but more stable. - The request price of this API is 0.01 USD/time, and the request is not successful without charge. ### Parameters: - photo_id: Photo ID ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_one_video_v2_api_v1_kuaishou_app_fetch_one_video_v2_get_0_with_http_info(photo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str photo_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'photo_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_one_video_v2_api_v1_kuaishou_app_fetch_one_video_v2_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'photo_id' is set
        if self.api_client.client_side_validation and ('photo_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['photo_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `photo_id` when calling `fetch_one_video_v2_api_v1_kuaishou_app_fetch_one_video_v2_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'photo_id' in local_var_params and local_var_params['photo_id'] is not None:  # noqa: E501
            query_params.append(('photo_id', local_var_params['photo_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_one_video_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_shopping_top_list_api_v1_kuaishou_app_fetch_shopping_top_list_get(self, **kwargs):  # noqa: E501
        """快手购物榜单/Kuaishou shopping top list  # noqa: E501

        # [中文] ### 用途: - 快手购物榜单 ### 参数: 获取快手购物榜单，支持多个子榜单，具体参数如下：  - 购物榜单热门主播榜对应参数：     - subTabId = 0     - subTabName = None - 购物榜单热销商品榜对应参数：     - subTabId = 102     - subTabName = \"热销商品\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou shopping top list ### Parameters: Get the Kuaishou shopping top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the shopping hot anchor list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the shopping hot selling product list:     - subTabId = 102     - subTabName = \"Hot Selling Product\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_shopping_top_list_api_v1_kuaishou_app_fetch_shopping_top_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int sub_tab_id:
        :param str sub_tab_name:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_shopping_top_list_api_v1_kuaishou_app_fetch_shopping_top_list_get_with_http_info(**kwargs)  # noqa: E501

    def fetch_shopping_top_list_api_v1_kuaishou_app_fetch_shopping_top_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """快手购物榜单/Kuaishou shopping top list  # noqa: E501

        # [中文] ### 用途: - 快手购物榜单 ### 参数: 获取快手购物榜单，支持多个子榜单，具体参数如下：  - 购物榜单热门主播榜对应参数：     - subTabId = 0     - subTabName = None - 购物榜单热销商品榜对应参数：     - subTabId = 102     - subTabName = \"热销商品\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou shopping top list ### Parameters: Get the Kuaishou shopping top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the shopping hot anchor list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the shopping hot selling product list:     - subTabId = 102     - subTabName = \"Hot Selling Product\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_shopping_top_list_api_v1_kuaishou_app_fetch_shopping_top_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int sub_tab_id:
        :param str sub_tab_name:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sub_tab_id',
            'sub_tab_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_shopping_top_list_api_v1_kuaishou_app_fetch_shopping_top_list_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sub_tab_id' in local_var_params and local_var_params['sub_tab_id'] is not None:  # noqa: E501
            query_params.append(('subTabId', local_var_params['sub_tab_id']))  # noqa: E501
        if 'sub_tab_name' in local_var_params and local_var_params['sub_tab_name'] is not None:  # noqa: E501
            query_params.append(('subTabName', local_var_params['sub_tab_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_shopping_top_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_shopping_top_list_api_v1_kuaishou_app_fetch_shopping_top_list_get_0(self, **kwargs):  # noqa: E501
        """快手购物榜单/Kuaishou shopping top list  # noqa: E501

        # [中文] ### 用途: - 快手购物榜单 ### 参数: 获取快手购物榜单，支持多个子榜单，具体参数如下：  - 购物榜单热门主播榜对应参数：     - subTabId = 0     - subTabName = None - 购物榜单热销商品榜对应参数：     - subTabId = 102     - subTabName = \"热销商品\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou shopping top list ### Parameters: Get the Kuaishou shopping top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the shopping hot anchor list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the shopping hot selling product list:     - subTabId = 102     - subTabName = \"Hot Selling Product\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_shopping_top_list_api_v1_kuaishou_app_fetch_shopping_top_list_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int sub_tab_id:
        :param str sub_tab_name:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_shopping_top_list_api_v1_kuaishou_app_fetch_shopping_top_list_get_0_with_http_info(**kwargs)  # noqa: E501

    def fetch_shopping_top_list_api_v1_kuaishou_app_fetch_shopping_top_list_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """快手购物榜单/Kuaishou shopping top list  # noqa: E501

        # [中文] ### 用途: - 快手购物榜单 ### 参数: 获取快手购物榜单，支持多个子榜单，具体参数如下：  - 购物榜单热门主播榜对应参数：     - subTabId = 0     - subTabName = None - 购物榜单热销商品榜对应参数：     - subTabId = 102     - subTabName = \"热销商品\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou shopping top list ### Parameters: Get the Kuaishou shopping top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the shopping hot anchor list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the shopping hot selling product list:     - subTabId = 102     - subTabName = \"Hot Selling Product\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_shopping_top_list_api_v1_kuaishou_app_fetch_shopping_top_list_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int sub_tab_id:
        :param str sub_tab_name:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'sub_tab_id',
            'sub_tab_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_shopping_top_list_api_v1_kuaishou_app_fetch_shopping_top_list_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sub_tab_id' in local_var_params and local_var_params['sub_tab_id'] is not None:  # noqa: E501
            query_params.append(('subTabId', local_var_params['sub_tab_id']))  # noqa: E501
        if 'sub_tab_name' in local_var_params and local_var_params['sub_tab_name'] is not None:  # noqa: E501
            query_params.append(('subTabName', local_var_params['sub_tab_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_shopping_top_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_hot_post_api_v1_kuaishou_app_fetch_user_hot_post_get(self, user_id, **kwargs):  # noqa: E501
        """获取用户热门作品数据/Get user hot post data  # noqa: E501

        # [中文] ### 用途: - 获取用户热门作品数据 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 作品游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 作品数据  # [English] ### Purpose: - Get user hot post data ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Post cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Post data  # [示例/Example] user_id = \"228905802\" pcursor = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_hot_post_api_v1_kuaishou_app_fetch_user_hot_post_get(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: (required)
        :param str pcursor:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_hot_post_api_v1_kuaishou_app_fetch_user_hot_post_get_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_user_hot_post_api_v1_kuaishou_app_fetch_user_hot_post_get_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """获取用户热门作品数据/Get user hot post data  # noqa: E501

        # [中文] ### 用途: - 获取用户热门作品数据 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 作品游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 作品数据  # [English] ### Purpose: - Get user hot post data ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Post cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Post data  # [示例/Example] user_id = \"228905802\" pcursor = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_hot_post_api_v1_kuaishou_app_fetch_user_hot_post_get_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: (required)
        :param str pcursor:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id',
            'pcursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_hot_post_api_v1_kuaishou_app_fetch_user_hot_post_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_user_hot_post_api_v1_kuaishou_app_fetch_user_hot_post_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501
        if 'pcursor' in local_var_params and local_var_params['pcursor'] is not None:  # noqa: E501
            query_params.append(('pcursor', local_var_params['pcursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_user_hot_post', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_hot_post_api_v1_kuaishou_app_fetch_user_hot_post_get_0(self, user_id, **kwargs):  # noqa: E501
        """获取用户热门作品数据/Get user hot post data  # noqa: E501

        # [中文] ### 用途: - 获取用户热门作品数据 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 作品游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 作品数据  # [English] ### Purpose: - Get user hot post data ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Post cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Post data  # [示例/Example] user_id = \"228905802\" pcursor = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_hot_post_api_v1_kuaishou_app_fetch_user_hot_post_get_0(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: (required)
        :param str pcursor:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_hot_post_api_v1_kuaishou_app_fetch_user_hot_post_get_0_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_user_hot_post_api_v1_kuaishou_app_fetch_user_hot_post_get_0_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """获取用户热门作品数据/Get user hot post data  # noqa: E501

        # [中文] ### 用途: - 获取用户热门作品数据 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 作品游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 作品数据  # [English] ### Purpose: - Get user hot post data ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Post cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Post data  # [示例/Example] user_id = \"228905802\" pcursor = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_hot_post_api_v1_kuaishou_app_fetch_user_hot_post_get_0_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: (required)
        :param str pcursor:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id',
            'pcursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_hot_post_api_v1_kuaishou_app_fetch_user_hot_post_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_user_hot_post_api_v1_kuaishou_app_fetch_user_hot_post_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501
        if 'pcursor' in local_var_params and local_var_params['pcursor'] is not None:  # noqa: E501
            query_params.append(('pcursor', local_var_params['pcursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_user_hot_post', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_live_info_api_v1_kuaishou_app_fetch_user_live_info_get(self, user_id, **kwargs):  # noqa: E501
        """获取用户直播信息/Get user live info  # noqa: E501

        # [中文] ### 用途: - 获取用户直播信息 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 ### 返回: - 直播信息  # [English] ### Purpose: - Get user live info ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. ### Returns: - Live info  # [示例/Example] user_id = \"1377082950\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_live_info_api_v1_kuaishou_app_fetch_user_live_info_get(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_live_info_api_v1_kuaishou_app_fetch_user_live_info_get_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_user_live_info_api_v1_kuaishou_app_fetch_user_live_info_get_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """获取用户直播信息/Get user live info  # noqa: E501

        # [中文] ### 用途: - 获取用户直播信息 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 ### 返回: - 直播信息  # [English] ### Purpose: - Get user live info ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. ### Returns: - Live info  # [示例/Example] user_id = \"1377082950\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_live_info_api_v1_kuaishou_app_fetch_user_live_info_get_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_live_info_api_v1_kuaishou_app_fetch_user_live_info_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_user_live_info_api_v1_kuaishou_app_fetch_user_live_info_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_user_live_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_live_info_api_v1_kuaishou_app_fetch_user_live_info_get_0(self, user_id, **kwargs):  # noqa: E501
        """获取用户直播信息/Get user live info  # noqa: E501

        # [中文] ### 用途: - 获取用户直播信息 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 ### 返回: - 直播信息  # [English] ### Purpose: - Get user live info ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. ### Returns: - Live info  # [示例/Example] user_id = \"1377082950\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_live_info_api_v1_kuaishou_app_fetch_user_live_info_get_0(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_live_info_api_v1_kuaishou_app_fetch_user_live_info_get_0_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_user_live_info_api_v1_kuaishou_app_fetch_user_live_info_get_0_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """获取用户直播信息/Get user live info  # noqa: E501

        # [中文] ### 用途: - 获取用户直播信息 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 ### 返回: - 直播信息  # [English] ### Purpose: - Get user live info ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. ### Returns: - Live info  # [示例/Example] user_id = \"1377082950\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_live_info_api_v1_kuaishou_app_fetch_user_live_info_get_0_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_live_info_api_v1_kuaishou_app_fetch_user_live_info_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_user_live_info_api_v1_kuaishou_app_fetch_user_live_info_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_user_live_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_post_v2_api_v1_kuaishou_app_fetch_user_post_v2_get(self, user_id, **kwargs):  # noqa: E501
        """用户视频列表V2/User video list V2  # noqa: E501

        # [中文] ### 用途: - 用户视频列表 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 视频游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 视频数据  # [English] ### Purpose: - User video list V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Video cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Videos data  # [示例/Example] user_id = \"228905802\" pcursor = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_post_v2_api_v1_kuaishou_app_fetch_user_post_v2_get(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: (required)
        :param str pcursor:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_post_v2_api_v1_kuaishou_app_fetch_user_post_v2_get_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_user_post_v2_api_v1_kuaishou_app_fetch_user_post_v2_get_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """用户视频列表V2/User video list V2  # noqa: E501

        # [中文] ### 用途: - 用户视频列表 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 视频游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 视频数据  # [English] ### Purpose: - User video list V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Video cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Videos data  # [示例/Example] user_id = \"228905802\" pcursor = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_post_v2_api_v1_kuaishou_app_fetch_user_post_v2_get_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: (required)
        :param str pcursor:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id',
            'pcursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_post_v2_api_v1_kuaishou_app_fetch_user_post_v2_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_user_post_v2_api_v1_kuaishou_app_fetch_user_post_v2_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501
        if 'pcursor' in local_var_params and local_var_params['pcursor'] is not None:  # noqa: E501
            query_params.append(('pcursor', local_var_params['pcursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_user_post_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user_post_v2_api_v1_kuaishou_app_fetch_user_post_v2_get_0(self, user_id, **kwargs):  # noqa: E501
        """用户视频列表V2/User video list V2  # noqa: E501

        # [中文] ### 用途: - 用户视频列表 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 视频游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 视频数据  # [English] ### Purpose: - User video list V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Video cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Videos data  # [示例/Example] user_id = \"228905802\" pcursor = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_post_v2_api_v1_kuaishou_app_fetch_user_post_v2_get_0(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: (required)
        :param str pcursor:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_user_post_v2_api_v1_kuaishou_app_fetch_user_post_v2_get_0_with_http_info(user_id, **kwargs)  # noqa: E501

    def fetch_user_post_v2_api_v1_kuaishou_app_fetch_user_post_v2_get_0_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """用户视频列表V2/User video list V2  # noqa: E501

        # [中文] ### 用途: - 用户视频列表 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 视频游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 视频数据  # [English] ### Purpose: - User video list V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Video cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Videos data  # [示例/Example] user_id = \"228905802\" pcursor = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_post_v2_api_v1_kuaishou_app_fetch_user_post_v2_get_0_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str user_id: (required)
        :param str pcursor:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'user_id',
            'pcursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user_post_v2_api_v1_kuaishou_app_fetch_user_post_v2_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['user_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `user_id` when calling `fetch_user_post_v2_api_v1_kuaishou_app_fetch_user_post_v2_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_id' in local_var_params and local_var_params['user_id'] is not None:  # noqa: E501
            query_params.append(('user_id', local_var_params['user_id']))  # noqa: E501
        if 'pcursor' in local_var_params and local_var_params['pcursor'] is not None:  # noqa: E501
            query_params.append(('pcursor', local_var_params['pcursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_user_post_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_video_comment_api_v1_kuaishou_app_fetch_one_video_comment_get(self, photo_id, **kwargs):  # noqa: E501
        """获取单个作品评论数据/Get single video comment data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品评论数据 ### 参数: - photo_id: 作品ID - pcursor: 评论游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 评论数据  # [English] ### Purpose: - Fetch single video comment data ### Parameters: - photo_id: Photo ID - pcursor: Comment cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Comments data  # [示例/Example] photo_id = \"3x7gxp2zhgjv832\" pcursor = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_comment_api_v1_kuaishou_app_fetch_one_video_comment_get(photo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str photo_id: (required)
        :param str pcursor:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_video_comment_api_v1_kuaishou_app_fetch_one_video_comment_get_with_http_info(photo_id, **kwargs)  # noqa: E501

    def fetch_video_comment_api_v1_kuaishou_app_fetch_one_video_comment_get_with_http_info(self, photo_id, **kwargs):  # noqa: E501
        """获取单个作品评论数据/Get single video comment data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品评论数据 ### 参数: - photo_id: 作品ID - pcursor: 评论游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 评论数据  # [English] ### Purpose: - Fetch single video comment data ### Parameters: - photo_id: Photo ID - pcursor: Comment cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Comments data  # [示例/Example] photo_id = \"3x7gxp2zhgjv832\" pcursor = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_comment_api_v1_kuaishou_app_fetch_one_video_comment_get_with_http_info(photo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str photo_id: (required)
        :param str pcursor:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'photo_id',
            'pcursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_video_comment_api_v1_kuaishou_app_fetch_one_video_comment_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'photo_id' is set
        if self.api_client.client_side_validation and ('photo_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['photo_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `photo_id` when calling `fetch_video_comment_api_v1_kuaishou_app_fetch_one_video_comment_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'photo_id' in local_var_params and local_var_params['photo_id'] is not None:  # noqa: E501
            query_params.append(('photo_id', local_var_params['photo_id']))  # noqa: E501
        if 'pcursor' in local_var_params and local_var_params['pcursor'] is not None:  # noqa: E501
            query_params.append(('pcursor', local_var_params['pcursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_one_video_comment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_video_comment_api_v1_kuaishou_app_fetch_one_video_comment_get_0(self, photo_id, **kwargs):  # noqa: E501
        """获取单个作品评论数据/Get single video comment data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品评论数据 ### 参数: - photo_id: 作品ID - pcursor: 评论游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 评论数据  # [English] ### Purpose: - Fetch single video comment data ### Parameters: - photo_id: Photo ID - pcursor: Comment cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Comments data  # [示例/Example] photo_id = \"3x7gxp2zhgjv832\" pcursor = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_comment_api_v1_kuaishou_app_fetch_one_video_comment_get_0(photo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str photo_id: (required)
        :param str pcursor:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_video_comment_api_v1_kuaishou_app_fetch_one_video_comment_get_0_with_http_info(photo_id, **kwargs)  # noqa: E501

    def fetch_video_comment_api_v1_kuaishou_app_fetch_one_video_comment_get_0_with_http_info(self, photo_id, **kwargs):  # noqa: E501
        """获取单个作品评论数据/Get single video comment data  # noqa: E501

        # [中文] ### 用途: - 获取单个作品评论数据 ### 参数: - photo_id: 作品ID - pcursor: 评论游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 评论数据  # [English] ### Purpose: - Fetch single video comment data ### Parameters: - photo_id: Photo ID - pcursor: Comment cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Comments data  # [示例/Example] photo_id = \"3x7gxp2zhgjv832\" pcursor = None  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_video_comment_api_v1_kuaishou_app_fetch_one_video_comment_get_0_with_http_info(photo_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str photo_id: (required)
        :param str pcursor:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'photo_id',
            'pcursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_video_comment_api_v1_kuaishou_app_fetch_one_video_comment_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'photo_id' is set
        if self.api_client.client_side_validation and ('photo_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['photo_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `photo_id` when calling `fetch_video_comment_api_v1_kuaishou_app_fetch_one_video_comment_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'photo_id' in local_var_params and local_var_params['photo_id'] is not None:  # noqa: E501
            query_params.append(('photo_id', local_var_params['photo_id']))  # noqa: E501
        if 'pcursor' in local_var_params and local_var_params['pcursor'] is not None:  # noqa: E501
            query_params.append(('pcursor', local_var_params['pcursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/fetch_one_video_comment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_kuaishou_share_link_api_v1_kuaishou_app_generate_kuaishou_share_link_get(self, share_object_id, **kwargs):  # noqa: E501
        """生成快手分享链接/Generate Kuaishou share link  # noqa: E501

        # [中文] ### 用途: - 生成快手分享链接 ### 参数: - shareObjectId: 作品ID ### 返回: - 分享链接  # [English] ### Purpose: - Generate Kuaishou share link ### Parameters: - photo_id: Photo ID ### Returns: - Share link  # [示例/Example] shareObjectId = \"3xg5wjqdtekbb3u\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_kuaishou_share_link_api_v1_kuaishou_app_generate_kuaishou_share_link_get(share_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_object_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.generate_kuaishou_share_link_api_v1_kuaishou_app_generate_kuaishou_share_link_get_with_http_info(share_object_id, **kwargs)  # noqa: E501

    def generate_kuaishou_share_link_api_v1_kuaishou_app_generate_kuaishou_share_link_get_with_http_info(self, share_object_id, **kwargs):  # noqa: E501
        """生成快手分享链接/Generate Kuaishou share link  # noqa: E501

        # [中文] ### 用途: - 生成快手分享链接 ### 参数: - shareObjectId: 作品ID ### 返回: - 分享链接  # [English] ### Purpose: - Generate Kuaishou share link ### Parameters: - photo_id: Photo ID ### Returns: - Share link  # [示例/Example] shareObjectId = \"3xg5wjqdtekbb3u\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_kuaishou_share_link_api_v1_kuaishou_app_generate_kuaishou_share_link_get_with_http_info(share_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_object_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'share_object_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_kuaishou_share_link_api_v1_kuaishou_app_generate_kuaishou_share_link_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'share_object_id' is set
        if self.api_client.client_side_validation and ('share_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['share_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `share_object_id` when calling `generate_kuaishou_share_link_api_v1_kuaishou_app_generate_kuaishou_share_link_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'share_object_id' in local_var_params and local_var_params['share_object_id'] is not None:  # noqa: E501
            query_params.append(('shareObjectId', local_var_params['share_object_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/generate_kuaishou_share_link', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_kuaishou_share_link_api_v1_kuaishou_app_generate_kuaishou_share_link_get_0(self, share_object_id, **kwargs):  # noqa: E501
        """生成快手分享链接/Generate Kuaishou share link  # noqa: E501

        # [中文] ### 用途: - 生成快手分享链接 ### 参数: - shareObjectId: 作品ID ### 返回: - 分享链接  # [English] ### Purpose: - Generate Kuaishou share link ### Parameters: - photo_id: Photo ID ### Returns: - Share link  # [示例/Example] shareObjectId = \"3xg5wjqdtekbb3u\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_kuaishou_share_link_api_v1_kuaishou_app_generate_kuaishou_share_link_get_0(share_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_object_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.generate_kuaishou_share_link_api_v1_kuaishou_app_generate_kuaishou_share_link_get_0_with_http_info(share_object_id, **kwargs)  # noqa: E501

    def generate_kuaishou_share_link_api_v1_kuaishou_app_generate_kuaishou_share_link_get_0_with_http_info(self, share_object_id, **kwargs):  # noqa: E501
        """生成快手分享链接/Generate Kuaishou share link  # noqa: E501

        # [中文] ### 用途: - 生成快手分享链接 ### 参数: - shareObjectId: 作品ID ### 返回: - 分享链接  # [English] ### Purpose: - Generate Kuaishou share link ### Parameters: - photo_id: Photo ID ### Returns: - Share link  # [示例/Example] shareObjectId = \"3xg5wjqdtekbb3u\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_kuaishou_share_link_api_v1_kuaishou_app_generate_kuaishou_share_link_get_0_with_http_info(share_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str share_object_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'share_object_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_kuaishou_share_link_api_v1_kuaishou_app_generate_kuaishou_share_link_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'share_object_id' is set
        if self.api_client.client_side_validation and ('share_object_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['share_object_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `share_object_id` when calling `generate_kuaishou_share_link_api_v1_kuaishou_app_generate_kuaishou_share_link_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'share_object_id' in local_var_params and local_var_params['share_object_id'] is not None:  # noqa: E501
            query_params.append(('shareObjectId', local_var_params['share_object_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/generate_kuaishou_share_link', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_user_v2_api_v1_kuaishou_app_search_user_v2_get(self, keyword, **kwargs):  # noqa: E501
        """搜索用户V2/Search user V2  # noqa: E501

        # [中文] ### 用途: - 搜索用户 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 用户页数，从1开始 ### 返回: - 用户数据  # [English] ### Purpose: - Search user V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: User page number, starting from 1 ### Returns: - User data  # [示例/Example] keyword = \"人工智能\" page = \"1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_user_v2_api_v1_kuaishou_app_search_user_v2_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: (required)
        :param str page:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.search_user_v2_api_v1_kuaishou_app_search_user_v2_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def search_user_v2_api_v1_kuaishou_app_search_user_v2_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """搜索用户V2/Search user V2  # noqa: E501

        # [中文] ### 用途: - 搜索用户 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 用户页数，从1开始 ### 返回: - 用户数据  # [English] ### Purpose: - Search user V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: User page number, starting from 1 ### Returns: - User data  # [示例/Example] keyword = \"人工智能\" page = \"1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_user_v2_api_v1_kuaishou_app_search_user_v2_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: (required)
        :param str page:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'page'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_user_v2_api_v1_kuaishou_app_search_user_v2_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `search_user_v2_api_v1_kuaishou_app_search_user_v2_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/search_user_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_user_v2_api_v1_kuaishou_app_search_user_v2_get_0(self, keyword, **kwargs):  # noqa: E501
        """搜索用户V2/Search user V2  # noqa: E501

        # [中文] ### 用途: - 搜索用户 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 用户页数，从1开始 ### 返回: - 用户数据  # [English] ### Purpose: - Search user V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: User page number, starting from 1 ### Returns: - User data  # [示例/Example] keyword = \"人工智能\" page = \"1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_user_v2_api_v1_kuaishou_app_search_user_v2_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: (required)
        :param str page:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.search_user_v2_api_v1_kuaishou_app_search_user_v2_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def search_user_v2_api_v1_kuaishou_app_search_user_v2_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """搜索用户V2/Search user V2  # noqa: E501

        # [中文] ### 用途: - 搜索用户 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 用户页数，从1开始 ### 返回: - 用户数据  # [English] ### Purpose: - Search user V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: User page number, starting from 1 ### Returns: - User data  # [示例/Example] keyword = \"人工智能\" page = \"1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_user_v2_api_v1_kuaishou_app_search_user_v2_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: (required)
        :param str page:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'page'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_user_v2_api_v1_kuaishou_app_search_user_v2_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `search_user_v2_api_v1_kuaishou_app_search_user_v2_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/search_user_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_video_v2_api_v1_kuaishou_app_search_video_v2_get(self, keyword, **kwargs):  # noqa: E501
        """搜索视频V2/Search video V2  # noqa: E501

        # [中文] ### 用途: - 搜索视频 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 视频页数，从1开始 ### 返回: - 视频数据  # [English] ### Purpose: - Search video V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: Page number, starting from 1 ### Returns: - Videos data  # [示例/Example] keyword = \"人工智能\" page = \"1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_video_v2_api_v1_kuaishou_app_search_video_v2_get(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: (required)
        :param str page:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.search_video_v2_api_v1_kuaishou_app_search_video_v2_get_with_http_info(keyword, **kwargs)  # noqa: E501

    def search_video_v2_api_v1_kuaishou_app_search_video_v2_get_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """搜索视频V2/Search video V2  # noqa: E501

        # [中文] ### 用途: - 搜索视频 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 视频页数，从1开始 ### 返回: - 视频数据  # [English] ### Purpose: - Search video V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: Page number, starting from 1 ### Returns: - Videos data  # [示例/Example] keyword = \"人工智能\" page = \"1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_video_v2_api_v1_kuaishou_app_search_video_v2_get_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: (required)
        :param str page:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'page'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_video_v2_api_v1_kuaishou_app_search_video_v2_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `search_video_v2_api_v1_kuaishou_app_search_video_v2_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/search_video_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_video_v2_api_v1_kuaishou_app_search_video_v2_get_0(self, keyword, **kwargs):  # noqa: E501
        """搜索视频V2/Search video V2  # noqa: E501

        # [中文] ### 用途: - 搜索视频 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 视频页数，从1开始 ### 返回: - 视频数据  # [English] ### Purpose: - Search video V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: Page number, starting from 1 ### Returns: - Videos data  # [示例/Example] keyword = \"人工智能\" page = \"1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_video_v2_api_v1_kuaishou_app_search_video_v2_get_0(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: (required)
        :param str page:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.search_video_v2_api_v1_kuaishou_app_search_video_v2_get_0_with_http_info(keyword, **kwargs)  # noqa: E501

    def search_video_v2_api_v1_kuaishou_app_search_video_v2_get_0_with_http_info(self, keyword, **kwargs):  # noqa: E501
        """搜索视频V2/Search video V2  # noqa: E501

        # [中文] ### 用途: - 搜索视频 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 视频页数，从1开始 ### 返回: - 视频数据  # [English] ### Purpose: - Search video V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: Page number, starting from 1 ### Returns: - Videos data  # [示例/Example] keyword = \"人工智能\" page = \"1\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_video_v2_api_v1_kuaishou_app_search_video_v2_get_0_with_http_info(keyword, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyword: (required)
        :param str page:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyword',
            'page'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_video_v2_api_v1_kuaishou_app_search_video_v2_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyword' is set
        if self.api_client.client_side_validation and ('keyword' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyword'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyword` when calling `search_video_v2_api_v1_kuaishou_app_search_video_v2_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'keyword' in local_var_params and local_var_params['keyword'] is not None:  # noqa: E501
            query_params.append(('keyword', local_var_params['keyword']))  # noqa: E501
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/kuaishou/app/search_video_v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
