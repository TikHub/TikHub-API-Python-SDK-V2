# coding: utf-8

"""
    TikHub.io - Your Ultimate Social Media Data & API Marketplace

    High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tikhub_sdk_v2.api_client import ApiClient
from tikhub_sdk_v2.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class HybridParsingApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def hybrid_parsing_single_video_api_v1_hybrid_video_data_get(self, url, **kwargs):  # noqa: E501
        """混合解析单一视频接口/Hybrid parsing single video endpoint  # noqa: E501

        # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - `url`: 视频链接、分享链接、分享文本。 ### 返回: - `data`: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - `url`: Video link, share link, or share text. ### Returns: - `data`: Video data.  # [Example] url = \"https://v.douyin.com/L4FJNR3/\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hybrid_parsing_single_video_api_v1_hybrid_video_data_get(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: (required)
        :param bool minimal: 是否返回最小数据/Whether to return minimal data
        :param bool base64_url: 是否Base64编码提交URL/Base64 encoding URL
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.hybrid_parsing_single_video_api_v1_hybrid_video_data_get_with_http_info(url, **kwargs)  # noqa: E501

    def hybrid_parsing_single_video_api_v1_hybrid_video_data_get_with_http_info(self, url, **kwargs):  # noqa: E501
        """混合解析单一视频接口/Hybrid parsing single video endpoint  # noqa: E501

        # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - `url`: 视频链接、分享链接、分享文本。 ### 返回: - `data`: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - `url`: Video link, share link, or share text. ### Returns: - `data`: Video data.  # [Example] url = \"https://v.douyin.com/L4FJNR3/\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hybrid_parsing_single_video_api_v1_hybrid_video_data_get_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: (required)
        :param bool minimal: 是否返回最小数据/Whether to return minimal data
        :param bool base64_url: 是否Base64编码提交URL/Base64 encoding URL
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url',
            'minimal',
            'base64_url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hybrid_parsing_single_video_api_v1_hybrid_video_data_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `hybrid_parsing_single_video_api_v1_hybrid_video_data_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501
        if 'minimal' in local_var_params and local_var_params['minimal'] is not None:  # noqa: E501
            query_params.append(('minimal', local_var_params['minimal']))  # noqa: E501
        if 'base64_url' in local_var_params and local_var_params['base64_url'] is not None:  # noqa: E501
            query_params.append(('base64_url', local_var_params['base64_url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/hybrid/video_data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hybrid_parsing_single_video_api_v1_hybrid_video_data_get_0(self, url, **kwargs):  # noqa: E501
        """混合解析单一视频接口/Hybrid parsing single video endpoint  # noqa: E501

        # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - `url`: 视频链接、分享链接、分享文本。 ### 返回: - `data`: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - `url`: Video link, share link, or share text. ### Returns: - `data`: Video data.  # [Example] url = \"https://v.douyin.com/L4FJNR3/\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hybrid_parsing_single_video_api_v1_hybrid_video_data_get_0(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: (required)
        :param bool minimal: 是否返回最小数据/Whether to return minimal data
        :param bool base64_url: 是否Base64编码提交URL/Base64 encoding URL
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.hybrid_parsing_single_video_api_v1_hybrid_video_data_get_0_with_http_info(url, **kwargs)  # noqa: E501

    def hybrid_parsing_single_video_api_v1_hybrid_video_data_get_0_with_http_info(self, url, **kwargs):  # noqa: E501
        """混合解析单一视频接口/Hybrid parsing single video endpoint  # noqa: E501

        # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - `url`: 视频链接、分享链接、分享文本。 ### 返回: - `data`: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - `url`: Video link, share link, or share text. ### Returns: - `data`: Video data.  # [Example] url = \"https://v.douyin.com/L4FJNR3/\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hybrid_parsing_single_video_api_v1_hybrid_video_data_get_0_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: (required)
        :param bool minimal: 是否返回最小数据/Whether to return minimal data
        :param bool base64_url: 是否Base64编码提交URL/Base64 encoding URL
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url',
            'minimal',
            'base64_url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hybrid_parsing_single_video_api_v1_hybrid_video_data_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `hybrid_parsing_single_video_api_v1_hybrid_video_data_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501
        if 'minimal' in local_var_params and local_var_params['minimal'] is not None:  # noqa: E501
            query_params.append(('minimal', local_var_params['minimal']))  # noqa: E501
        if 'base64_url' in local_var_params and local_var_params['base64_url'] is not None:  # noqa: E501
            query_params.append(('base64_url', local_var_params['base64_url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/hybrid/video_data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hybrid_parsing_single_video_api_v1_hybrid_video_data_get_1(self, url, **kwargs):  # noqa: E501
        """混合解析单一视频接口/Hybrid parsing single video endpoint  # noqa: E501

        # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - `url`: 视频链接、分享链接、分享文本。 ### 返回: - `data`: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - `url`: Video link, share link, or share text. ### Returns: - `data`: Video data.  # [Example] url = \"https://v.douyin.com/L4FJNR3/\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hybrid_parsing_single_video_api_v1_hybrid_video_data_get_1(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: (required)
        :param bool minimal: 是否返回最小数据/Whether to return minimal data
        :param bool base64_url: 是否Base64编码提交URL/Base64 encoding URL
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.hybrid_parsing_single_video_api_v1_hybrid_video_data_get_1_with_http_info(url, **kwargs)  # noqa: E501

    def hybrid_parsing_single_video_api_v1_hybrid_video_data_get_1_with_http_info(self, url, **kwargs):  # noqa: E501
        """混合解析单一视频接口/Hybrid parsing single video endpoint  # noqa: E501

        # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - `url`: 视频链接、分享链接、分享文本。 ### 返回: - `data`: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - `url`: Video link, share link, or share text. ### Returns: - `data`: Video data.  # [Example] url = \"https://v.douyin.com/L4FJNR3/\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hybrid_parsing_single_video_api_v1_hybrid_video_data_get_1_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str url: (required)
        :param bool minimal: 是否返回最小数据/Whether to return minimal data
        :param bool base64_url: 是否Base64编码提交URL/Base64 encoding URL
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'url',
            'minimal',
            'base64_url'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hybrid_parsing_single_video_api_v1_hybrid_video_data_get_1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'url' is set
        if self.api_client.client_side_validation and ('url' not in local_var_params or  # noqa: E501
                                                        local_var_params['url'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `url` when calling `hybrid_parsing_single_video_api_v1_hybrid_video_data_get_1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'url' in local_var_params and local_var_params['url'] is not None:  # noqa: E501
            query_params.append(('url', local_var_params['url']))  # noqa: E501
        if 'minimal' in local_var_params and local_var_params['minimal'] is not None:  # noqa: E501
            query_params.append(('minimal', local_var_params['minimal']))  # noqa: E501
        if 'base64_url' in local_var_params and local_var_params['base64_url'] is not None:  # noqa: E501
            query_params.append(('base64_url', local_var_params['base64_url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/hybrid/video_data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
